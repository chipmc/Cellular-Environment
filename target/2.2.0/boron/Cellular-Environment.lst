
/Users/chipmc/Documents/Maker/Particle/Projects/Cellular-Environment/target/2.2.0/boron/Cellular-Environment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000d500  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000e1520  000e1520  00011520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000e1528  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001bc  2003dfd8  000e152c  0002dfd8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000065c  2003e198  2003e198  0003e198  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000e16e8  000e16e8  000316e8  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000e1714  000e1714  00031714  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00239991  00000000  00000000  00031718  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00023323  00000000  00000000  0026b0a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00043949  00000000  00000000  0028e3cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003910  00000000  00000000  002d1d15  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 0000b2e0  00000000  00000000  002d5625  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00046d87  00000000  00000000  002e0905  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0005b927  00000000  00000000  0032768c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00122ac3  00000000  00000000  00382fb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000aaf4  00000000  00000000  004a5a78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f00b fe29 	bl	dfc88 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f00b fe4b 	bl	dfcd8 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dfd8 	.word	0x2003dfd8
   d404c:	000e152c 	.word	0x000e152c
   d4050:	2003e194 	.word	0x2003e194
   d4054:	2003e198 	.word	0x2003e198
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f009 fb81 	bl	dd768 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000e14ec 	.word	0x000e14ec
   d4080:	000e1520 	.word	0x000e1520

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 bf90 	b.w	d5fa8 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f002 fbd9 	bl	d6840 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f009 bb21 	b.w	dd6d8 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f006 b9b5 	b.w	da404 <malloc>

000d409a <_Znaj>:
   d409a:	f006 b9b3 	b.w	da404 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f006 b9b9 	b.w	da414 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f006 f826 	bl	da0fc <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d9c3d 	.word	0x000d9c3d

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
   d40c8:	b148      	cbz	r0, d40de <null_ptr_check+0x16>
   d40ca:	6c83      	ldr	r3, [r0, #72]	; 0x48
   d40cc:	b13b      	cbz	r3, d40de <null_ptr_check+0x16>
   d40ce:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   d40d0:	b12b      	cbz	r3, d40de <null_ptr_check+0x16>
   d40d2:	6d00      	ldr	r0, [r0, #80]	; 0x50
   d40d4:	fab0 f080 	clz	r0, r0
   d40d8:	0940      	lsrs	r0, r0, #5
   d40da:	4240      	negs	r0, r0
   d40dc:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
   d40de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		/* Device structure is fine */
		rslt = BME680_OK;
	}

	return rslt;
}
   d40e2:	4770      	bx	lr

000d40e4 <set_mem_page>:
{
   d40e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d40e6:	4602      	mov	r2, r0
	rslt = null_ptr_check(dev);
   d40e8:	4608      	mov	r0, r1
{
   d40ea:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
   d40ec:	f7ff ffec 	bl	d40c8 <null_ptr_check>
	if (rslt == BME680_OK) {
   d40f0:	4605      	mov	r5, r0
   d40f2:	bb40      	cbnz	r0, d4146 <set_mem_page+0x62>
			mem_page = BME680_MEM_PAGE0;
   d40f4:	f012 0f80 	tst.w	r2, #128	; 0x80
		if (mem_page != dev->mem_page) {
   d40f8:	78ca      	ldrb	r2, [r1, #3]
			mem_page = BME680_MEM_PAGE0;
   d40fa:	bf14      	ite	ne
   d40fc:	2300      	movne	r3, #0
   d40fe:	2310      	moveq	r3, #16
		if (mem_page != dev->mem_page) {
   d4100:	429a      	cmp	r2, r3
   d4102:	d020      	beq.n	d4146 <set_mem_page+0x62>
			dev->mem_page = mem_page;
   d4104:	70cb      	strb	r3, [r1, #3]
			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
   d4106:	6c8e      	ldr	r6, [r1, #72]	; 0x48
   d4108:	7860      	ldrb	r0, [r4, #1]
   d410a:	2301      	movs	r3, #1
   d410c:	f10d 0207 	add.w	r2, sp, #7
   d4110:	21f3      	movs	r1, #243	; 0xf3
   d4112:	47b0      	blx	r6
   d4114:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
   d4118:	b998      	cbnz	r0, d4142 <set_mem_page+0x5e>
				reg = reg & (~BME680_MEM_PAGE_MSK);
   d411a:	f89d 2007 	ldrb.w	r2, [sp, #7]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
   d411e:	78e3      	ldrb	r3, [r4, #3]
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
   d4120:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
   d4122:	7860      	ldrb	r0, [r4, #1]
				reg = reg & (~BME680_MEM_PAGE_MSK);
   d4124:	f022 0210 	bic.w	r2, r2, #16
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
   d4128:	f003 0310 	and.w	r3, r3, #16
   d412c:	4313      	orrs	r3, r2
   d412e:	f88d 3007 	strb.w	r3, [sp, #7]
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
   d4132:	f10d 0207 	add.w	r2, sp, #7
   d4136:	2301      	movs	r3, #1
   d4138:	2173      	movs	r1, #115	; 0x73
   d413a:	47b0      	blx	r6
   d413c:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
				if (dev->com_rslt != 0)
   d4140:	b108      	cbz	r0, d4146 <set_mem_page+0x62>
					rslt = BME680_E_COM_FAIL;
   d4142:	f06f 0501 	mvn.w	r5, #1
}
   d4146:	4628      	mov	r0, r5
   d4148:	b002      	add	sp, #8
   d414a:	bd70      	pop	{r4, r5, r6, pc}

000d414c <get_mem_page.part.0>:
static int8_t get_mem_page(struct bme680_dev *dev)
   d414c:	b537      	push	{r0, r1, r2, r4, r5, lr}
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
   d414e:	2301      	movs	r3, #1
   d4150:	6c85      	ldr	r5, [r0, #72]	; 0x48
static int8_t get_mem_page(struct bme680_dev *dev)
   d4152:	4604      	mov	r4, r0
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
   d4154:	f10d 0207 	add.w	r2, sp, #7
   d4158:	7840      	ldrb	r0, [r0, #1]
   d415a:	21f3      	movs	r1, #243	; 0xf3
   d415c:	47a8      	blx	r5
   d415e:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
		if (dev->com_rslt != 0)
   d4162:	b930      	cbnz	r0, d4172 <get_mem_page.part.0+0x26>
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
   d4164:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d4168:	f003 0310 	and.w	r3, r3, #16
   d416c:	70e3      	strb	r3, [r4, #3]
}
   d416e:	b003      	add	sp, #12
   d4170:	bd30      	pop	{r4, r5, pc}
			rslt = BME680_E_COM_FAIL;
   d4172:	f06f 0001 	mvn.w	r0, #1
   d4176:	e7fa      	b.n	d416e <get_mem_page.part.0+0x22>

000d4178 <boundary_check.isra.0.constprop.0>:
		if (*value > max) {
   d4178:	7803      	ldrb	r3, [r0, #0]
   d417a:	428b      	cmp	r3, r1
			*value = max;
   d417c:	bf81      	itttt	hi
   d417e:	7001      	strbhi	r1, [r0, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
   d4180:	7813      	ldrbhi	r3, [r2, #0]
   d4182:	f043 0302 	orrhi.w	r3, r3, #2
   d4186:	7013      	strbhi	r3, [r2, #0]
}
   d4188:	2000      	movs	r0, #0
   d418a:	4770      	bx	lr

000d418c <bme680_get_regs>:
{
   d418c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4190:	4606      	mov	r6, r0
	rslt = null_ptr_check(dev);
   d4192:	4618      	mov	r0, r3
{
   d4194:	4688      	mov	r8, r1
   d4196:	4691      	mov	r9, r2
   d4198:	461d      	mov	r5, r3
	rslt = null_ptr_check(dev);
   d419a:	f7ff ff95 	bl	d40c8 <null_ptr_check>
	if (rslt == BME680_OK) {
   d419e:	4604      	mov	r4, r0
   d41a0:	b9a8      	cbnz	r0, d41ce <bme680_get_regs+0x42>
		if (dev->intf == BME680_SPI_INTF) {
   d41a2:	78ab      	ldrb	r3, [r5, #2]
   d41a4:	b93b      	cbnz	r3, d41b6 <bme680_get_regs+0x2a>
			rslt = set_mem_page(reg_addr, dev);
   d41a6:	4629      	mov	r1, r5
   d41a8:	4630      	mov	r0, r6
   d41aa:	f7ff ff9b 	bl	d40e4 <set_mem_page>
			if (rslt == BME680_OK)
   d41ae:	4604      	mov	r4, r0
   d41b0:	b908      	cbnz	r0, d41b6 <bme680_get_regs+0x2a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
   d41b2:	f046 0680 	orr.w	r6, r6, #128	; 0x80
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
   d41b6:	6caf      	ldr	r7, [r5, #72]	; 0x48
   d41b8:	7868      	ldrb	r0, [r5, #1]
   d41ba:	464b      	mov	r3, r9
   d41bc:	4642      	mov	r2, r8
   d41be:	4631      	mov	r1, r6
   d41c0:	47b8      	blx	r7
		if (dev->com_rslt != 0)
   d41c2:	2800      	cmp	r0, #0
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
   d41c4:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
			rslt = BME680_E_COM_FAIL;
   d41c8:	bf18      	it	ne
   d41ca:	f06f 0401 	mvnne.w	r4, #1
}
   d41ce:	4620      	mov	r0, r4
   d41d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d41d4 <bme680_set_regs>:
{
   d41d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d41d8:	b08a      	sub	sp, #40	; 0x28
   d41da:	461c      	mov	r4, r3
   d41dc:	4606      	mov	r6, r0
   d41de:	460f      	mov	r7, r1
   d41e0:	4690      	mov	r8, r2
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
   d41e2:	2100      	movs	r1, #0
   d41e4:	2224      	movs	r2, #36	; 0x24
   d41e6:	a801      	add	r0, sp, #4
   d41e8:	9100      	str	r1, [sp, #0]
   d41ea:	f00b fd75 	bl	dfcd8 <memset>
	rslt = null_ptr_check(dev);
   d41ee:	4620      	mov	r0, r4
   d41f0:	f7ff ff6a 	bl	d40c8 <null_ptr_check>
	if (rslt == BME680_OK) {
   d41f4:	b9e8      	cbnz	r0, d4232 <bme680_set_regs+0x5e>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
   d41f6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   d41fa:	2b12      	cmp	r3, #18
   d41fc:	d833      	bhi.n	d4266 <bme680_set_regs+0x92>
   d41fe:	46ea      	mov	sl, sp
   d4200:	4681      	mov	r9, r0
			for (index = 0; index < len; index++) {
   d4202:	fa1f f888 	uxth.w	r8, r8
   d4206:	fa1f f389 	uxth.w	r3, r9
   d420a:	4543      	cmp	r3, r8
   d420c:	d314      	bcc.n	d4238 <bme680_set_regs+0x64>
			if (rslt == BME680_OK) {
   d420e:	b980      	cbnz	r0, d4232 <bme680_set_regs+0x5e>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
   d4210:	ea4f 0248 	mov.w	r2, r8, lsl #1
   d4214:	3a01      	subs	r2, #1
   d4216:	b293      	uxth	r3, r2
   d4218:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
   d421a:	f89d 1000 	ldrb.w	r1, [sp]
   d421e:	7860      	ldrb	r0, [r4, #1]
   d4220:	f10d 0201 	add.w	r2, sp, #1
   d4224:	47a8      	blx	r5
					rslt = BME680_E_COM_FAIL;
   d4226:	2800      	cmp	r0, #0
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
   d4228:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
					rslt = BME680_E_COM_FAIL;
   d422c:	bf18      	it	ne
   d422e:	f06f 0001 	mvnne.w	r0, #1
}
   d4232:	b00a      	add	sp, #40	; 0x28
   d4234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (dev->intf == BME680_SPI_INTF) {
   d4238:	78a3      	ldrb	r3, [r4, #2]
   d423a:	f816 5009 	ldrb.w	r5, [r6, r9]
   d423e:	b93b      	cbnz	r3, d4250 <bme680_set_regs+0x7c>
					rslt = set_mem_page(reg_addr[index], dev);
   d4240:	4628      	mov	r0, r5
   d4242:	4621      	mov	r1, r4
   d4244:	f7ff ff4e 	bl	d40e4 <set_mem_page>
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
   d4248:	f816 5009 	ldrb.w	r5, [r6, r9]
   d424c:	f005 057f 	and.w	r5, r5, #127	; 0x7f
				tmp_buff[(2 * index) + 1] = reg_data[index];
   d4250:	f817 3009 	ldrb.w	r3, [r7, r9]
					tmp_buff[(2 * index)] = reg_addr[index];
   d4254:	f88a 5000 	strb.w	r5, [sl]
				tmp_buff[(2 * index) + 1] = reg_data[index];
   d4258:	f88a 3001 	strb.w	r3, [sl, #1]
			for (index = 0; index < len; index++) {
   d425c:	f109 0901 	add.w	r9, r9, #1
   d4260:	f10a 0a02 	add.w	sl, sl, #2
   d4264:	e7cf      	b.n	d4206 <bme680_set_regs+0x32>
			rslt = BME680_E_INVALID_LENGTH;
   d4266:	f06f 0003 	mvn.w	r0, #3
   d426a:	e7e2      	b.n	d4232 <bme680_set_regs+0x5e>

000d426c <bme680_soft_reset>:
{
   d426c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
   d426e:	23e0      	movs	r3, #224	; 0xe0
   d4270:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
   d4274:	23b6      	movs	r3, #182	; 0xb6
{
   d4276:	4605      	mov	r5, r0
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
   d4278:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = null_ptr_check(dev);
   d427c:	f7ff ff24 	bl	d40c8 <null_ptr_check>
	if (rslt == BME680_OK) {
   d4280:	4604      	mov	r4, r0
   d4282:	b970      	cbnz	r0, d42a2 <bme680_soft_reset+0x36>
		if (dev->intf == BME680_SPI_INTF)
   d4284:	78ab      	ldrb	r3, [r5, #2]
   d4286:	b17b      	cbz	r3, d42a8 <bme680_soft_reset+0x3c>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
   d4288:	462b      	mov	r3, r5
   d428a:	2201      	movs	r2, #1
   d428c:	f10d 0107 	add.w	r1, sp, #7
   d4290:	f10d 0006 	add.w	r0, sp, #6
   d4294:	f7ff ff9e 	bl	d41d4 <bme680_set_regs>
			dev->delay_ms(BME680_RESET_PERIOD);
   d4298:	6d2b      	ldr	r3, [r5, #80]	; 0x50
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
   d429a:	4604      	mov	r4, r0
			dev->delay_ms(BME680_RESET_PERIOD);
   d429c:	200a      	movs	r0, #10
   d429e:	4798      	blx	r3
			if (rslt == BME680_OK) {
   d42a0:	b14c      	cbz	r4, d42b6 <bme680_soft_reset+0x4a>
}
   d42a2:	4620      	mov	r0, r4
   d42a4:	b003      	add	sp, #12
   d42a6:	bd30      	pop	{r4, r5, pc}
	if (rslt == BME680_OK) {
   d42a8:	4628      	mov	r0, r5
   d42aa:	f7ff ff4f 	bl	d414c <get_mem_page.part.0>
		if (rslt == BME680_OK) {
   d42ae:	4604      	mov	r4, r0
   d42b0:	2800      	cmp	r0, #0
   d42b2:	d1f6      	bne.n	d42a2 <bme680_soft_reset+0x36>
   d42b4:	e7e8      	b.n	d4288 <bme680_soft_reset+0x1c>
				if (dev->intf == BME680_SPI_INTF)
   d42b6:	78ab      	ldrb	r3, [r5, #2]
   d42b8:	2b00      	cmp	r3, #0
   d42ba:	d1f2      	bne.n	d42a2 <bme680_soft_reset+0x36>
	rslt = null_ptr_check(dev);
   d42bc:	4628      	mov	r0, r5
   d42be:	f7ff ff03 	bl	d40c8 <null_ptr_check>
	if (rslt == BME680_OK) {
   d42c2:	4604      	mov	r4, r0
   d42c4:	2800      	cmp	r0, #0
   d42c6:	d1ec      	bne.n	d42a2 <bme680_soft_reset+0x36>
   d42c8:	4628      	mov	r0, r5
   d42ca:	f7ff ff3f 	bl	d414c <get_mem_page.part.0>
   d42ce:	4604      	mov	r4, r0
   d42d0:	e7e7      	b.n	d42a2 <bme680_soft_reset+0x36>

000d42d2 <bme680_init>:
{
   d42d2:	b530      	push	{r4, r5, lr}
   d42d4:	b08d      	sub	sp, #52	; 0x34
   d42d6:	4605      	mov	r5, r0
	rslt = null_ptr_check(dev);
   d42d8:	f7ff fef6 	bl	d40c8 <null_ptr_check>
	if (rslt == BME680_OK) {
   d42dc:	4604      	mov	r4, r0
   d42de:	2800      	cmp	r0, #0
   d42e0:	f040 80c9 	bne.w	d4476 <bme680_init+0x1a4>
		rslt = bme680_soft_reset(dev);
   d42e4:	4628      	mov	r0, r5
   d42e6:	f7ff ffc1 	bl	d426c <bme680_soft_reset>
		if (rslt == BME680_OK) {
   d42ea:	4604      	mov	r4, r0
   d42ec:	2800      	cmp	r0, #0
   d42ee:	f040 80c2 	bne.w	d4476 <bme680_init+0x1a4>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
   d42f2:	462b      	mov	r3, r5
   d42f4:	2201      	movs	r2, #1
   d42f6:	4629      	mov	r1, r5
   d42f8:	20d0      	movs	r0, #208	; 0xd0
   d42fa:	f7ff ff47 	bl	d418c <bme680_get_regs>
			if (rslt == BME680_OK) {
   d42fe:	4604      	mov	r4, r0
   d4300:	2800      	cmp	r0, #0
   d4302:	f040 80b8 	bne.w	d4476 <bme680_init+0x1a4>
				if (dev->chip_id == BME680_CHIP_ID) {
   d4306:	782b      	ldrb	r3, [r5, #0]
   d4308:	2b61      	cmp	r3, #97	; 0x61
   d430a:	f040 80b7 	bne.w	d447c <bme680_init+0x1aa>
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
   d430e:	4601      	mov	r1, r0
   d4310:	9001      	str	r0, [sp, #4]
   d4312:	2225      	movs	r2, #37	; 0x25
   d4314:	a802      	add	r0, sp, #8
   d4316:	f00b fcdf 	bl	dfcd8 <memset>
	rslt = null_ptr_check(dev);
   d431a:	4628      	mov	r0, r5
	uint8_t temp_var = 0; /* Temporary variable */
   d431c:	f88d 4003 	strb.w	r4, [sp, #3]
	rslt = null_ptr_check(dev);
   d4320:	f7ff fed2 	bl	d40c8 <null_ptr_check>
	if (rslt == BME680_OK) {
   d4324:	4604      	mov	r4, r0
   d4326:	2800      	cmp	r0, #0
   d4328:	f040 80a5 	bne.w	d4476 <bme680_init+0x1a4>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
   d432c:	462b      	mov	r3, r5
   d432e:	2219      	movs	r2, #25
   d4330:	a901      	add	r1, sp, #4
   d4332:	2089      	movs	r0, #137	; 0x89
   d4334:	f7ff ff2a 	bl	d418c <bme680_get_regs>
		if (rslt == BME680_OK)
   d4338:	4604      	mov	r4, r0
   d433a:	b938      	cbnz	r0, d434c <bme680_init+0x7a>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
   d433c:	462b      	mov	r3, r5
   d433e:	2210      	movs	r2, #16
   d4340:	f10d 011d 	add.w	r1, sp, #29
   d4344:	20e1      	movs	r0, #225	; 0xe1
   d4346:	f7ff ff21 	bl	d418c <bme680_get_regs>
   d434a:	4604      	mov	r4, r0
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
   d434c:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   d4350:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d4354:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4358:	82eb      	strh	r3, [r5, #22]
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
   d435a:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d435e:	f89d 3005 	ldrb.w	r3, [sp, #5]
   d4362:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4366:	832b      	strh	r3, [r5, #24]
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
   d4368:	f89d 3007 	ldrb.w	r3, [sp, #7]
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
   d436c:	f89d 200a 	ldrb.w	r2, [sp, #10]
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
   d4370:	76ab      	strb	r3, [r5, #26]
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
   d4372:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d4376:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d437a:	83ab      	strh	r3, [r5, #28]
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
   d437c:	f89d 200c 	ldrb.w	r2, [sp, #12]
   d4380:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d4384:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4388:	83eb      	strh	r3, [r5, #30]
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
   d438a:	f89d 300d 	ldrb.w	r3, [sp, #13]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
   d438e:	f89d 2010 	ldrb.w	r2, [sp, #16]
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
   d4392:	f885 3020 	strb.w	r3, [r5, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
   d4396:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d439a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d439e:	846b      	strh	r3, [r5, #34]	; 0x22
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
   d43a0:	f89d 2012 	ldrb.w	r2, [sp, #18]
   d43a4:	f89d 3011 	ldrb.w	r3, [sp, #17]
   d43a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d43ac:	84ab      	strh	r3, [r5, #36]	; 0x24
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
   d43ae:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d43b2:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
   d43b6:	f89d 3013 	ldrb.w	r3, [sp, #19]
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
   d43ba:	f89d 2018 	ldrb.w	r2, [sp, #24]
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
   d43be:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
   d43c2:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d43c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d43ca:	852b      	strh	r3, [r5, #40]	; 0x28
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
   d43cc:	f89d 201a 	ldrb.w	r2, [sp, #26]
   d43d0:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d43d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d43d8:	856b      	strh	r3, [r5, #42]	; 0x2a
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
   d43da:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d43de:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
   d43e2:	f89d 301e 	ldrb.w	r3, [sp, #30]
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   d43e6:	f89d 101f 	ldrb.w	r1, [sp, #31]
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
   d43ea:	f003 020f 	and.w	r2, r3, #15
   d43ee:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   d43f2:	812a      	strh	r2, [r5, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   d43f4:	f89d 201d 	ldrb.w	r2, [sp, #29]
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
   d43f8:	091b      	lsrs	r3, r3, #4
   d43fa:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   d43fe:	816b      	strh	r3, [r5, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
   d4400:	9b08      	ldr	r3, [sp, #32]
   d4402:	60eb      	str	r3, [r5, #12]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
   d4404:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   d4408:	742b      	strb	r3, [r5, #16]
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
   d440a:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
   d440e:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
   d4412:	746b      	strb	r3, [r5, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
   d4414:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   d4418:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d441c:	826b      	strh	r3, [r5, #18]
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
   d441e:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   d4422:	752b      	strb	r3, [r5, #20]
		if (rslt == BME680_OK) {
   d4424:	bb14      	cbnz	r4, d446c <bme680_init+0x19a>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
   d4426:	462b      	mov	r3, r5
   d4428:	2201      	movs	r2, #1
   d442a:	f10d 0103 	add.w	r1, sp, #3
   d442e:	2002      	movs	r0, #2
   d4430:	f7ff feac 	bl	d418c <bme680_get_regs>
			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
   d4434:	f89d 3003 	ldrb.w	r3, [sp, #3]
   d4438:	f3c3 1301 	ubfx	r3, r3, #4, #2
   d443c:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
			if (rslt == BME680_OK) {
   d4440:	4604      	mov	r4, r0
   d4442:	b998      	cbnz	r0, d446c <bme680_init+0x19a>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
   d4444:	462b      	mov	r3, r5
   d4446:	2201      	movs	r2, #1
   d4448:	f10d 0103 	add.w	r1, sp, #3
   d444c:	f7ff fe9e 	bl	d418c <bme680_get_regs>
				dev->calib.res_heat_val = (int8_t) temp_var;
   d4450:	f89d 3003 	ldrb.w	r3, [sp, #3]
   d4454:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
				if (rslt == BME680_OK)
   d4458:	4604      	mov	r4, r0
   d445a:	b938      	cbnz	r0, d446c <bme680_init+0x19a>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
   d445c:	462b      	mov	r3, r5
   d445e:	2201      	movs	r2, #1
   d4460:	f10d 0103 	add.w	r1, sp, #3
   d4464:	2004      	movs	r0, #4
   d4466:	f7ff fe91 	bl	d418c <bme680_get_regs>
   d446a:	4604      	mov	r4, r0
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
   d446c:	f99d 3003 	ldrsb.w	r3, [sp, #3]
   d4470:	111b      	asrs	r3, r3, #4
   d4472:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
}
   d4476:	4620      	mov	r0, r4
   d4478:	b00d      	add	sp, #52	; 0x34
   d447a:	bd30      	pop	{r4, r5, pc}
					rslt = BME680_E_DEV_NOT_FOUND;
   d447c:	f06f 0402 	mvn.w	r4, #2
   d4480:	e7f9      	b.n	d4476 <bme680_init+0x1a4>

000d4482 <bme680_set_sensor_mode>:
{
   d4482:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
   d4484:	2374      	movs	r3, #116	; 0x74
{
   d4486:	4604      	mov	r4, r0
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
   d4488:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = null_ptr_check(dev);
   d448c:	f7ff fe1c 	bl	d40c8 <null_ptr_check>
	if (rslt == BME680_OK) {
   d4490:	bba0      	cbnz	r0, d44fc <bme680_set_sensor_mode+0x7a>
	uint8_t pow_mode = 0;
   d4492:	4605      	mov	r5, r0
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
   d4494:	4623      	mov	r3, r4
   d4496:	2201      	movs	r2, #1
   d4498:	f10d 0106 	add.w	r1, sp, #6
   d449c:	2074      	movs	r0, #116	; 0x74
   d449e:	f7ff fe75 	bl	d418c <bme680_get_regs>
			if (rslt == BME680_OK) {
   d44a2:	b9a0      	cbnz	r0, d44ce <bme680_set_sensor_mode+0x4c>
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
   d44a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
				if (pow_mode != BME680_SLEEP_MODE) {
   d44a8:	f013 0503 	ands.w	r5, r3, #3
   d44ac:	d011      	beq.n	d44d2 <bme680_set_sensor_mode+0x50>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
   d44ae:	f023 0303 	bic.w	r3, r3, #3
   d44b2:	f88d 3006 	strb.w	r3, [sp, #6]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
   d44b6:	2201      	movs	r2, #1
   d44b8:	4623      	mov	r3, r4
   d44ba:	f10d 0106 	add.w	r1, sp, #6
   d44be:	f10d 0007 	add.w	r0, sp, #7
   d44c2:	f7ff fe87 	bl	d41d4 <bme680_set_regs>
					dev->delay_ms(BME680_POLL_PERIOD_MS);
   d44c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d44c8:	200a      	movs	r0, #10
   d44ca:	4798      	blx	r3
		} while (pow_mode != BME680_SLEEP_MODE);
   d44cc:	e7e2      	b.n	d4494 <bme680_set_sensor_mode+0x12>
   d44ce:	2d00      	cmp	r5, #0
   d44d0:	d1e0      	bne.n	d4494 <bme680_set_sensor_mode+0x12>
		if (dev->power_mode != BME680_SLEEP_MODE) {
   d44d2:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   d44d6:	b18a      	cbz	r2, d44fc <bme680_set_sensor_mode+0x7a>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
   d44d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d44dc:	f002 0203 	and.w	r2, r2, #3
   d44e0:	f023 0303 	bic.w	r3, r3, #3
   d44e4:	4313      	orrs	r3, r2
   d44e6:	f88d 3006 	strb.w	r3, [sp, #6]
			if (rslt == BME680_OK)
   d44ea:	b938      	cbnz	r0, d44fc <bme680_set_sensor_mode+0x7a>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
   d44ec:	4623      	mov	r3, r4
   d44ee:	2201      	movs	r2, #1
   d44f0:	f10d 0106 	add.w	r1, sp, #6
   d44f4:	f10d 0007 	add.w	r0, sp, #7
   d44f8:	f7ff fe6c 	bl	d41d4 <bme680_set_regs>
}
   d44fc:	b003      	add	sp, #12
   d44fe:	bd30      	pop	{r4, r5, pc}

000d4500 <bme680_set_sensor_settings>:
{
   d4500:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4502:	b089      	sub	sp, #36	; 0x24
	uint8_t data = 0;
   d4504:	2300      	movs	r3, #0
{
   d4506:	4606      	mov	r6, r0
	rslt = null_ptr_check(dev);
   d4508:	4608      	mov	r0, r1
{
   d450a:	460c      	mov	r4, r1
	uint8_t data = 0;
   d450c:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
   d4510:	9304      	str	r3, [sp, #16]
   d4512:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
   d4516:	9306      	str	r3, [sp, #24]
   d4518:	f8ad 301c 	strh.w	r3, [sp, #28]
	rslt = null_ptr_check(dev);
   d451c:	f7ff fdd4 	bl	d40c8 <null_ptr_check>
	if (rslt == BME680_OK) {
   d4520:	2800      	cmp	r0, #0
   d4522:	f040 80fe 	bne.w	d4722 <bme680_set_sensor_settings+0x222>
		if (desired_settings & BME680_GAS_MEAS_SEL)
   d4526:	f016 0308 	ands.w	r3, r6, #8
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
   d452a:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44
		if (desired_settings & BME680_GAS_MEAS_SEL)
   d452e:	d105      	bne.n	d453c <bme680_set_sensor_settings+0x3c>
		dev->power_mode = BME680_SLEEP_MODE;
   d4530:	f881 3044 	strb.w	r3, [r1, #68]	; 0x44
			rslt = bme680_set_sensor_mode(dev);
   d4534:	4620      	mov	r0, r4
   d4536:	f7ff ffa4 	bl	d4482 <bme680_set_sensor_mode>
   d453a:	e007      	b.n	d454c <bme680_set_sensor_settings+0x4c>
		if (dev->power_mode == BME680_FORCED_MODE) {
   d453c:	2f01      	cmp	r7, #1
		uint8_t reg_data[2] = {0};
   d453e:	f8ad 000c 	strh.w	r0, [sp, #12]
		if (dev->power_mode == BME680_FORCED_MODE) {
   d4542:	f000 80f0 	beq.w	d4726 <bme680_set_sensor_settings+0x226>
		dev->power_mode = BME680_SLEEP_MODE;
   d4546:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
			rslt = BME680_W_DEFINE_PWR_MODE;
   d454a:	2001      	movs	r0, #1
		if (desired_settings & BME680_FILTER_SEL) {
   d454c:	f016 0510 	ands.w	r5, r6, #16
   d4550:	d020      	beq.n	d4594 <bme680_set_sensor_settings+0x94>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
   d4552:	f104 0246 	add.w	r2, r4, #70	; 0x46
   d4556:	2107      	movs	r1, #7
   d4558:	f104 003b 	add.w	r0, r4, #59	; 0x3b
   d455c:	f7ff fe0c 	bl	d4178 <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
   d4560:	b930      	cbnz	r0, d4570 <bme680_set_sensor_settings+0x70>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   d4562:	4623      	mov	r3, r4
   d4564:	2201      	movs	r2, #1
   d4566:	f10d 0107 	add.w	r1, sp, #7
   d456a:	2075      	movs	r0, #117	; 0x75
   d456c:	f7ff fe0e 	bl	d418c <bme680_get_regs>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
   d4570:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   d4574:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d4578:	009b      	lsls	r3, r3, #2
   d457a:	f022 021c 	bic.w	r2, r2, #28
   d457e:	f003 031c 	and.w	r3, r3, #28
   d4582:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
   d4584:	2275      	movs	r2, #117	; 0x75
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
   d4586:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
   d458a:	f88d 2010 	strb.w	r2, [sp, #16]
			data_array[count] = data;
   d458e:	f88d 3018 	strb.w	r3, [sp, #24]
			count++;
   d4592:	2501      	movs	r5, #1
		if (desired_settings & BME680_HCNTRL_SEL) {
   d4594:	06b3      	lsls	r3, r6, #26
   d4596:	d522      	bpl.n	d45de <bme680_set_sensor_settings+0xde>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
   d4598:	f104 0246 	add.w	r2, r4, #70	; 0x46
   d459c:	2108      	movs	r1, #8
   d459e:	f104 003d 	add.w	r0, r4, #61	; 0x3d
   d45a2:	f7ff fde9 	bl	d4178 <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
   d45a6:	b930      	cbnz	r0, d45b6 <bme680_set_sensor_settings+0xb6>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   d45a8:	4623      	mov	r3, r4
   d45aa:	2201      	movs	r2, #1
   d45ac:	f10d 0107 	add.w	r1, sp, #7
   d45b0:	2070      	movs	r0, #112	; 0x70
   d45b2:	f7ff fdeb 	bl	d418c <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
   d45b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d45ba:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
   d45be:	f023 0308 	bic.w	r3, r3, #8
   d45c2:	f002 0208 	and.w	r2, r2, #8
   d45c6:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
   d45c8:	aa08      	add	r2, sp, #32
   d45ca:	442a      	add	r2, r5
   d45cc:	2170      	movs	r1, #112	; 0x70
			count++;
   d45ce:	3501      	adds	r5, #1
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
   d45d0:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
   d45d4:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
   d45d8:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
   d45dc:	b2ed      	uxtb	r5, r5
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
   d45de:	07b1      	lsls	r1, r6, #30
   d45e0:	d033      	beq.n	d464a <bme680_set_sensor_settings+0x14a>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
   d45e2:	f104 0246 	add.w	r2, r4, #70	; 0x46
   d45e6:	2105      	movs	r1, #5
   d45e8:	f104 0039 	add.w	r0, r4, #57	; 0x39
   d45ec:	f7ff fdc4 	bl	d4178 <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
   d45f0:	b930      	cbnz	r0, d4600 <bme680_set_sensor_settings+0x100>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   d45f2:	4623      	mov	r3, r4
   d45f4:	2201      	movs	r2, #1
   d45f6:	f10d 0107 	add.w	r1, sp, #7
   d45fa:	2074      	movs	r0, #116	; 0x74
   d45fc:	f7ff fdc6 	bl	d418c <bme680_get_regs>
			if (desired_settings & BME680_OST_SEL)
   d4600:	07f2      	lsls	r2, r6, #31
   d4602:	d509      	bpl.n	d4618 <bme680_set_sensor_settings+0x118>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
   d4604:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d4608:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
   d460c:	f003 031f 	and.w	r3, r3, #31
   d4610:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d4614:	f88d 3007 	strb.w	r3, [sp, #7]
			if (desired_settings & BME680_OSP_SEL)
   d4618:	07b3      	lsls	r3, r6, #30
   d461a:	d50b      	bpl.n	d4634 <bme680_set_sensor_settings+0x134>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
   d461c:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   d4620:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d4624:	009b      	lsls	r3, r3, #2
   d4626:	f003 031c 	and.w	r3, r3, #28
   d462a:	f022 021c 	bic.w	r2, r2, #28
   d462e:	4313      	orrs	r3, r2
   d4630:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr;
   d4634:	ab08      	add	r3, sp, #32
   d4636:	442b      	add	r3, r5
   d4638:	2274      	movs	r2, #116	; 0x74
   d463a:	f803 2c10 	strb.w	r2, [r3, #-16]
			count++;
   d463e:	3501      	adds	r5, #1
			data_array[count] = data;
   d4640:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d4644:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
   d4648:	b2ed      	uxtb	r5, r5
		if (desired_settings & BME680_OSH_SEL) {
   d464a:	0771      	lsls	r1, r6, #29
   d464c:	d522      	bpl.n	d4694 <bme680_set_sensor_settings+0x194>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
   d464e:	f104 0246 	add.w	r2, r4, #70	; 0x46
   d4652:	2105      	movs	r1, #5
   d4654:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4658:	f7ff fd8e 	bl	d4178 <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
   d465c:	b930      	cbnz	r0, d466c <bme680_set_sensor_settings+0x16c>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   d465e:	4623      	mov	r3, r4
   d4660:	2201      	movs	r2, #1
   d4662:	f10d 0107 	add.w	r1, sp, #7
   d4666:	2072      	movs	r0, #114	; 0x72
   d4668:	f7ff fd90 	bl	d418c <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
   d466c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d4670:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   d4674:	f023 0307 	bic.w	r3, r3, #7
   d4678:	f002 0207 	and.w	r2, r2, #7
   d467c:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
   d467e:	aa08      	add	r2, sp, #32
   d4680:	442a      	add	r2, r5
   d4682:	2172      	movs	r1, #114	; 0x72
			count++;
   d4684:	3501      	adds	r5, #1
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
   d4686:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
   d468a:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
   d468e:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
   d4692:	b2ed      	uxtb	r5, r5
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
   d4694:	f016 0fc0 	tst.w	r6, #192	; 0xc0
   d4698:	d03a      	beq.n	d4710 <bme680_set_sensor_settings+0x210>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
   d469a:	f104 0246 	add.w	r2, r4, #70	; 0x46
   d469e:	2101      	movs	r1, #1
   d46a0:	f104 003e 	add.w	r0, r4, #62	; 0x3e
   d46a4:	f7ff fd68 	bl	d4178 <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK) {
   d46a8:	b960      	cbnz	r0, d46c4 <bme680_set_sensor_settings+0x1c4>
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
   d46aa:	210a      	movs	r1, #10
   d46ac:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d46b0:	f7ff fd62 	bl	d4178 <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
   d46b4:	b930      	cbnz	r0, d46c4 <bme680_set_sensor_settings+0x1c4>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   d46b6:	4623      	mov	r3, r4
   d46b8:	2201      	movs	r2, #1
   d46ba:	f10d 0107 	add.w	r1, sp, #7
   d46be:	2071      	movs	r0, #113	; 0x71
   d46c0:	f7ff fd64 	bl	d418c <bme680_get_regs>
			if (desired_settings & BME680_RUN_GAS_SEL)
   d46c4:	0672      	lsls	r2, r6, #25
   d46c6:	d50b      	bpl.n	d46e0 <bme680_set_sensor_settings+0x1e0>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
   d46c8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
   d46cc:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d46d0:	011b      	lsls	r3, r3, #4
   d46d2:	f003 0310 	and.w	r3, r3, #16
   d46d6:	f022 0210 	bic.w	r2, r2, #16
   d46da:	4313      	orrs	r3, r2
   d46dc:	f88d 3007 	strb.w	r3, [sp, #7]
			if (desired_settings & BME680_NBCONV_SEL)
   d46e0:	0633      	lsls	r3, r6, #24
   d46e2:	d50a      	bpl.n	d46fa <bme680_set_sensor_settings+0x1fa>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
   d46e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d46e8:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   d46ec:	f023 030f 	bic.w	r3, r3, #15
   d46f0:	f002 020f 	and.w	r2, r2, #15
   d46f4:	4313      	orrs	r3, r2
   d46f6:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
   d46fa:	ab08      	add	r3, sp, #32
   d46fc:	442b      	add	r3, r5
   d46fe:	2271      	movs	r2, #113	; 0x71
   d4700:	f803 2c10 	strb.w	r2, [r3, #-16]
			count++;
   d4704:	3501      	adds	r5, #1
			data_array[count] = data;
   d4706:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d470a:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
   d470e:	b2ed      	uxtb	r5, r5
		if (rslt == BME680_OK)
   d4710:	b928      	cbnz	r0, d471e <bme680_set_sensor_settings+0x21e>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
   d4712:	4623      	mov	r3, r4
   d4714:	462a      	mov	r2, r5
   d4716:	a906      	add	r1, sp, #24
   d4718:	a804      	add	r0, sp, #16
   d471a:	f7ff fd5b 	bl	d41d4 <bme680_set_regs>
		dev->power_mode = intended_power_mode;
   d471e:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
}
   d4722:	b009      	add	sp, #36	; 0x24
   d4724:	bdf0      	pop	{r4, r5, r6, r7, pc}
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
   d4726:	f8b1 2040 	ldrh.w	r2, [r1, #64]	; 0x40
   d472a:	f9b1 3012 	ldrsh.w	r3, [r1, #18]
   d472e:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
   d4732:	bf28      	it	cs
   d4734:	f44f 72c8 	movcs.w	r2, #400	; 0x190
   d4738:	2ac8      	cmp	r2, #200	; 0xc8
   d473a:	f503 3316 	add.w	r3, r3, #153600	; 0x25800
   d473e:	bf38      	it	cc
   d4740:	22c8      	movcc	r2, #200	; 0xc8
   d4742:	f203 1399 	addw	r3, r3, #409	; 0x199
   d4746:	435a      	muls	r2, r3
   d4748:	2314      	movs	r3, #20
   d474a:	fbb2 f2f3 	udiv	r2, r2, r3
   d474e:	230a      	movs	r3, #10
   d4750:	f502 1248 	add.w	r2, r2, #3276800	; 0x320000
   d4754:	fbb2 f2f3 	udiv	r2, r2, r3
   d4758:	f991 3011 	ldrsb.w	r3, [r1, #17]
   d475c:	f503 7344 	add.w	r3, r3, #784	; 0x310
   d4760:	435a      	muls	r2, r3
	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
   d4762:	f991 3004 	ldrsb.w	r3, [r1, #4]
   d4766:	f991 1014 	ldrsb.w	r1, [r1, #20]
   d476a:	fb13 f301 	smulbb	r3, r3, r1
   d476e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4772:	fb93 f3f1 	sdiv	r3, r3, r1
   d4776:	021b      	lsls	r3, r3, #8
	var3 = var1 + (var2 / 2);
   d4778:	eb03 0362 	add.w	r3, r3, r2, asr #1
	var4 = (var3 / (dev->calib.res_heat_range + 4));
   d477c:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
	var5 = (131 * dev->calib.res_heat_val) + 65536;
   d4780:	f994 1035 	ldrsb.w	r1, [r4, #53]	; 0x35
	var4 = (var3 / (dev->calib.res_heat_range + 4));
   d4784:	3204      	adds	r2, #4
   d4786:	fbb3 f3f2 	udiv	r3, r3, r2
	var5 = (131 * dev->calib.res_heat_val) + 65536;
   d478a:	2283      	movs	r2, #131	; 0x83
   d478c:	434a      	muls	r2, r1
   d478e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
   d4792:	fbb3 f3f2 	udiv	r3, r3, r2
   d4796:	2222      	movs	r2, #34	; 0x22
   d4798:	3bfa      	subs	r3, #250	; 0xfa
   d479a:	4353      	muls	r3, r2
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
   d479c:	3332      	adds	r3, #50	; 0x32
   d479e:	2264      	movs	r2, #100	; 0x64
   d47a0:	fb93 f3f2 	sdiv	r3, r3, r2
   d47a4:	f88d 300c 	strb.w	r3, [sp, #12]
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
   d47a8:	f246 435a 	movw	r3, #25690	; 0x645a
   d47ac:	f8ad 3008 	strh.w	r3, [sp, #8]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
   d47b0:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	if (dur >= 0xfc0) {
   d47b4:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
   d47b8:	d21a      	bcs.n	d47f0 <bme680_set_sensor_settings+0x2f0>
		while (dur > 0x3F) {
   d47ba:	2b3f      	cmp	r3, #63	; 0x3f
   d47bc:	b2c2      	uxtb	r2, r0
   d47be:	f100 0001 	add.w	r0, r0, #1
   d47c2:	d813      	bhi.n	d47ec <bme680_set_sensor_settings+0x2ec>
		durval = (uint8_t) (dur + (factor * 64));
   d47c4:	eb03 1382 	add.w	r3, r3, r2, lsl #6
   d47c8:	b2db      	uxtb	r3, r3
			dev->gas_sett.nb_conv = 0;
   d47ca:	2500      	movs	r5, #0
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
   d47cc:	f88d 300d 	strb.w	r3, [sp, #13]
			dev->gas_sett.nb_conv = 0;
   d47d0:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
   d47d4:	4623      	mov	r3, r4
   d47d6:	2202      	movs	r2, #2
   d47d8:	a903      	add	r1, sp, #12
   d47da:	a802      	add	r0, sp, #8
   d47dc:	f7ff fcfa 	bl	d41d4 <bme680_set_regs>
		dev->power_mode = BME680_SLEEP_MODE;
   d47e0:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
   d47e4:	2800      	cmp	r0, #0
   d47e6:	f47f aeb1 	bne.w	d454c <bme680_set_sensor_settings+0x4c>
   d47ea:	e6a3      	b.n	d4534 <bme680_set_sensor_settings+0x34>
			dur = dur / 4;
   d47ec:	089b      	lsrs	r3, r3, #2
			factor += 1;
   d47ee:	e7e4      	b.n	d47ba <bme680_set_sensor_settings+0x2ba>
		durval = 0xff; /* Max duration*/
   d47f0:	23ff      	movs	r3, #255	; 0xff
   d47f2:	e7ea      	b.n	d47ca <bme680_set_sensor_settings+0x2ca>

000d47f4 <bme680_get_profile_dur>:
{
   d47f4:	b513      	push	{r0, r1, r4, lr}
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
   d47f6:	4b18      	ldr	r3, [pc, #96]	; (d4858 <bme680_get_profile_dur+0x64>)
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
   d47f8:	f891 403a 	ldrb.w	r4, [r1, #58]	; 0x3a
{
   d47fc:	4602      	mov	r2, r0
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
   d47fe:	6818      	ldr	r0, [r3, #0]
   d4800:	889b      	ldrh	r3, [r3, #4]
   d4802:	f8ad 3004 	strh.w	r3, [sp, #4]
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
   d4806:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
   d480a:	9000      	str	r0, [sp, #0]
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
   d480c:	a802      	add	r0, sp, #8
   d480e:	4403      	add	r3, r0
   d4810:	f813 0c08 	ldrb.w	r0, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
   d4814:	ab02      	add	r3, sp, #8
   d4816:	441c      	add	r4, r3
   d4818:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   d481c:	4418      	add	r0, r3
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
   d481e:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   d4822:	ac02      	add	r4, sp, #8
   d4824:	4423      	add	r3, r4
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
   d4826:	f240 74ab 	movw	r4, #1963	; 0x7ab
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
   d482a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   d482e:	4403      	add	r3, r0
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
   d4830:	f241 20b9 	movw	r0, #4793	; 0x12b9
   d4834:	fb04 0303 	mla	r3, r4, r3, r0
	tph_dur /= UINT32_C(1000); /* Convert to ms */
   d4838:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d483c:	fbb3 f3f0 	udiv	r3, r3, r0
	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
   d4840:	3301      	adds	r3, #1
	*duration = (uint16_t) tph_dur;
   d4842:	b29b      	uxth	r3, r3
   d4844:	8013      	strh	r3, [r2, #0]
	if (dev->gas_sett.run_gas) {
   d4846:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
   d484a:	b118      	cbz	r0, d4854 <bme680_get_profile_dur+0x60>
		*duration += dev->gas_sett.heatr_dur;
   d484c:	f8b1 1042 	ldrh.w	r1, [r1, #66]	; 0x42
   d4850:	440b      	add	r3, r1
   d4852:	8013      	strh	r3, [r2, #0]
}
   d4854:	b002      	add	sp, #8
   d4856:	bd10      	pop	{r4, pc}
   d4858:	000e01b0 	.word	0x000e01b0

000d485c <bme680_get_sensor_data>:
{
   d485c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4860:	4680      	mov	r8, r0
   d4862:	b089      	sub	sp, #36	; 0x24
	rslt = null_ptr_check(dev);
   d4864:	4608      	mov	r0, r1
{
   d4866:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
   d4868:	f7ff fc2e 	bl	d40c8 <null_ptr_check>
	if (rslt == BME680_OK) {
   d486c:	4605      	mov	r5, r0
   d486e:	2800      	cmp	r0, #0
   d4870:	f040 8159 	bne.w	d4b26 <bme680_get_sensor_data+0x2ca>
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
   d4874:	9006      	str	r0, [sp, #24]
   d4876:	e9cd 0004 	strd	r0, r0, [sp, #16]
   d487a:	f8cd 001b 	str.w	r0, [sp, #27]
	rslt = null_ptr_check(dev);
   d487e:	4608      	mov	r0, r1
   d4880:	f7ff fc22 	bl	d40c8 <null_ptr_check>
   d4884:	270a      	movs	r7, #10
   d4886:	4605      	mov	r5, r0
		if (rslt == BME680_OK) {
   d4888:	2d00      	cmp	r5, #0
   d488a:	f040 8153 	bne.w	d4b34 <bme680_get_sensor_data+0x2d8>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
   d488e:	4623      	mov	r3, r4
   d4890:	220f      	movs	r2, #15
   d4892:	a904      	add	r1, sp, #16
   d4894:	201d      	movs	r0, #29
   d4896:	f7ff fc79 	bl	d418c <bme680_get_regs>
			data->status = buff[0] & BME680_NEW_DATA_MSK;
   d489a:	f89d b010 	ldrb.w	fp, [sp, #16]
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
   d489e:	f99d a01e 	ldrsb.w	sl, [sp, #30]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
   d48a2:	f89d 2018 	ldrb.w	r2, [sp, #24]
   d48a6:	9201      	str	r2, [sp, #4]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
   d48a8:	f00b 030f 	and.w	r3, fp, #15
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
   d48ac:	f00a 0120 	and.w	r1, sl, #32
			data->status = buff[0] & BME680_NEW_DATA_MSK;
   d48b0:	f02b 0b7f 	bic.w	fp, fp, #127	; 0x7f
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
   d48b4:	ea4b 0101 	orr.w	r1, fp, r1
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
   d48b8:	f00a 0a10 	and.w	sl, sl, #16
   d48bc:	ea41 010a 	orr.w	r1, r1, sl
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
   d48c0:	f89d 2019 	ldrb.w	r2, [sp, #25]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
   d48c4:	f888 3001 	strb.w	r3, [r8, #1]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
   d48c8:	b249      	sxtb	r1, r1
			data->meas_index = buff[1];
   d48ca:	f89d 3011 	ldrb.w	r3, [sp, #17]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
   d48ce:	9202      	str	r2, [sp, #8]
			if (data->status & BME680_NEW_DATA_MSK) {
   d48d0:	2900      	cmp	r1, #0
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   d48d2:	f89d 201d 	ldrb.w	r2, [sp, #29]
			data->meas_index = buff[1];
   d48d6:	f888 3002 	strb.w	r3, [r8, #2]
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
   d48da:	4605      	mov	r5, r0
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   d48dc:	9203      	str	r2, [sp, #12]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
   d48de:	f89d 9012 	ldrb.w	r9, [sp, #18]
   d48e2:	f89d e013 	ldrb.w	lr, [sp, #19]
				| ((uint32_t) buff[4] / 16));
   d48e6:	f89d 3014 	ldrb.w	r3, [sp, #20]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
   d48ea:	f89d c015 	ldrb.w	ip, [sp, #21]
   d48ee:	f89d 6016 	ldrb.w	r6, [sp, #22]
				| ((uint32_t) buff[7] / 16));
   d48f2:	f89d 0017 	ldrb.w	r0, [sp, #23]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   d48f6:	f89d 201e 	ldrb.w	r2, [sp, #30]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
   d48fa:	f888 1000 	strb.w	r1, [r8]
			if (data->status & BME680_NEW_DATA_MSK) {
   d48fe:	f280 8116 	bge.w	d4b2e <bme680_get_sensor_data+0x2d2>
				| ((uint32_t) buff[7] / 16));
   d4902:	0900      	lsrs	r0, r0, #4
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
   d4904:	ea40 1606 	orr.w	r6, r0, r6, lsl #4
   d4908:	ea46 3c0c 	orr.w	ip, r6, ip, lsl #12
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
   d490c:	8ae6      	ldrh	r6, [r4, #22]
   d490e:	0076      	lsls	r6, r6, #1
   d4910:	ebc6 0cdc 	rsb	ip, r6, ip, lsr #3
   d4914:	4660      	mov	r0, ip
   d4916:	17c1      	asrs	r1, r0, #31
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
   d4918:	ea4f 065c 	mov.w	r6, ip, lsr #1
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   d491c:	f994 001a 	ldrsb.w	r0, [r4, #26]
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
   d4920:	ea46 76c1 	orr.w	r6, r6, r1, lsl #31
   d4924:	1049      	asrs	r1, r1, #1
   d4926:	4371      	muls	r1, r6
   d4928:	fba6 ab06 	umull	sl, fp, r6, r6
   d492c:	eb0b 0b41 	add.w	fp, fp, r1, lsl #1
   d4930:	ea4f 361a 	mov.w	r6, sl, lsr #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   d4934:	0101      	lsls	r1, r0, #4
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
   d4936:	ea46 560b 	orr.w	r6, r6, fp, lsl #20
   d493a:	ea4f 372b 	mov.w	r7, fp, asr #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   d493e:	ea4f 7be1 	mov.w	fp, r1, asr #31
   d4942:	fb06 f00b 	mul.w	r0, r6, fp
   d4946:	fba6 ab01 	umull	sl, fp, r6, r1
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
   d494a:	f9b4 6018 	ldrsh.w	r6, [r4, #24]
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   d494e:	fb01 0707 	mla	r7, r1, r7, r0
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
   d4952:	fb86 010c 	smull	r0, r1, r6, ip
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   d4956:	44bb      	add	fp, r7
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
   d4958:	0ac6      	lsrs	r6, r0, #11
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   d495a:	ea4f 309a 	mov.w	r0, sl, lsr #14
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
   d495e:	ea46 5641 	orr.w	r6, r6, r1, lsl #21
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   d4962:	ea40 408b 	orr.w	r0, r0, fp, lsl #18
	dev->calib.t_fine = (int32_t) (var2 + var3);
   d4966:	1831      	adds	r1, r6, r0
   d4968:	6321      	str	r1, [r4, #48]	; 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
   d496a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   d496e:	3180      	adds	r1, #128	; 0x80
   d4970:	1209      	asrs	r1, r1, #8
   d4972:	f8a8 1004 	strh.w	r1, [r8, #4]
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
   d4976:	6b21      	ldr	r1, [r4, #48]	; 0x30
		(int32_t)dev->calib.par_p6) >> 2;
   d4978:	f994 7026 	ldrsb.w	r7, [r4, #38]	; 0x26
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
   d497c:	1049      	asrs	r1, r1, #1
   d497e:	f5a1 417a 	sub.w	r1, r1, #64000	; 0xfa00
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   d4982:	1088      	asrs	r0, r1, #2
   d4984:	4340      	muls	r0, r0
   d4986:	12c6      	asrs	r6, r0, #11
   d4988:	4377      	muls	r7, r6
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
   d498a:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	; 0x24
   d498e:	434e      	muls	r6, r1
   d4990:	0076      	lsls	r6, r6, #1
   d4992:	eb06 06a7 	add.w	r6, r6, r7, asr #2
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
   d4996:	f9b4 701e 	ldrsh.w	r7, [r4, #30]
   d499a:	434f      	muls	r7, r1
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
   d499c:	f994 1020 	ldrsb.w	r1, [r4, #32]
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   d49a0:	1340      	asrs	r0, r0, #13
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
   d49a2:	0149      	lsls	r1, r1, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   d49a4:	4341      	muls	r1, r0
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
   d49a6:	10c9      	asrs	r1, r1, #3
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   d49a8:	eb01 0167 	add.w	r1, r1, r7, asr #1
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
   d49ac:	8ba0      	ldrh	r0, [r4, #28]
	var1 = var1 >> 18;
   d49ae:	1489      	asrs	r1, r1, #18
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
   d49b0:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   d49b4:	4348      	muls	r0, r1
				| ((uint32_t) buff[4] / 16));
   d49b6:	091b      	lsrs	r3, r3, #4
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
   d49b8:	f9b4 1022 	ldrsh.w	r1, [r4, #34]	; 0x22
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
   d49bc:	ea43 1e0e 	orr.w	lr, r3, lr, lsl #4
   d49c0:	ea4e 3909 	orr.w	r9, lr, r9, lsl #12
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
   d49c4:	0409      	lsls	r1, r1, #16
   d49c6:	eb01 06a6 	add.w	r6, r1, r6, asr #2
	pressure_comp = 1048576 - pres_adc;
   d49ca:	f5c9 1980 	rsb	r9, r9, #1048576	; 0x100000
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
   d49ce:	eba9 3626 	sub.w	r6, r9, r6, asr #12
   d49d2:	f640 4335 	movw	r3, #3125	; 0xc35
   d49d6:	4373      	muls	r3, r6
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
   d49d8:	13c1      	asrs	r1, r0, #15
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
   d49da:	fbb3 f1f1 	udiv	r1, r3, r1
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
   d49de:	f341 009c 	sbfx	r0, r1, #2, #29
   d49e2:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
   d49e6:	4340      	muls	r0, r0
		(pressure_comp >> 3)) >> 13)) >> 12;
   d49e8:	1340      	asrs	r0, r0, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
   d49ea:	4358      	muls	r0, r3
		(int32_t)dev->calib.par_p8) >> 13;
   d49ec:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
	var2 = ((int32_t)(pressure_comp >> 2) *
   d49f0:	f341 075d 	sbfx	r7, r1, #1, #30
   d49f4:	437b      	muls	r3, r7
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
   d49f6:	f341 16d7 	sbfx	r6, r1, #7, #24
	var2 = ((int32_t)(pressure_comp >> 2) *
   d49fa:	135b      	asrs	r3, r3, #13
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
   d49fc:	eb03 3320 	add.w	r3, r3, r0, asr #12
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
   d4a00:	fb06 f006 	mul.w	r0, r6, r6
   d4a04:	4346      	muls	r6, r0
		(int32_t)dev->calib.par_p10) >> 17;
   d4a06:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
		(int32_t)(pressure_comp >> 8) *
   d4a0a:	4346      	muls	r6, r0
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
   d4a0c:	f994 0027 	ldrsb.w	r0, [r4, #39]	; 0x27
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
   d4a10:	eb03 4366 	add.w	r3, r3, r6, asr #17
   d4a14:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
   d4a18:	111b      	asrs	r3, r3, #4
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
   d4a1a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				data->pressure = calc_pressure(adc_pres, dev);
   d4a1e:	f8c8 3008 	str.w	r3, [r8, #8]
	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
   d4a22:	6b23      	ldr	r3, [r4, #48]	; 0x30
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
   d4a24:	f994 100e 	ldrsb.w	r1, [r4, #14]
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
   d4a28:	f994 600d 	ldrsb.w	r6, [r4, #13]
	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
   d4a2c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4a30:	3380      	adds	r3, #128	; 0x80
   d4a32:	121b      	asrs	r3, r3, #8
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
   d4a34:	2064      	movs	r0, #100	; 0x64
   d4a36:	4359      	muls	r1, r3
   d4a38:	fb91 f1f0 	sdiv	r1, r1, r0
   d4a3c:	4359      	muls	r1, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
   d4a3e:	435e      	muls	r6, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
   d4a40:	1189      	asrs	r1, r1, #6
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
   d4a42:	fb96 f6f0 	sdiv	r6, r6, r0
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
   d4a46:	fb91 f1f0 	sdiv	r1, r1, r0
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
   d4a4a:	4431      	add	r1, r6
	var2 = ((int32_t) dev->calib.par_h2
   d4a4c:	8966      	ldrh	r6, [r4, #10]
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
   d4a4e:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
   d4a52:	4371      	muls	r1, r6
	var2 = ((int32_t) dev->calib.par_h2
   d4a54:	128e      	asrs	r6, r1, #10
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
   d4a56:	e9dd 7101 	ldrd	r7, r1, [sp, #4]
   d4a5a:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
   d4a5e:	8927      	ldrh	r7, [r4, #8]
   d4a60:	eba1 1107 	sub.w	r1, r1, r7, lsl #4
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
   d4a64:	f994 700c 	ldrsb.w	r7, [r4, #12]
   d4a68:	435f      	muls	r7, r3
   d4a6a:	fb97 f7f0 	sdiv	r7, r7, r0
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
   d4a6e:	eba1 0167 	sub.w	r1, r1, r7, asr #1
	var3 = var1 * var2;
   d4a72:	4371      	muls	r1, r6
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
   d4a74:	f994 6010 	ldrsb.w	r6, [r4, #16]
   d4a78:	4373      	muls	r3, r6
   d4a7a:	fb93 f3f0 	sdiv	r3, r3, r0
	var4 = (int32_t) dev->calib.par_h6 << 7;
   d4a7e:	7be0      	ldrb	r0, [r4, #15]
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
   d4a80:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
   d4a84:	1388      	asrs	r0, r1, #14
   d4a86:	4340      	muls	r0, r0
   d4a88:	1280      	asrs	r0, r0, #10
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
   d4a8a:	111b      	asrs	r3, r3, #4
	var6 = (var4 * var5) >> 1;
   d4a8c:	4343      	muls	r3, r0
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
   d4a8e:	eb01 0363 	add.w	r3, r1, r3, asr #1
   d4a92:	1299      	asrs	r1, r3, #10
   d4a94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4a98:	434b      	muls	r3, r1
   d4a9a:	131b      	asrs	r3, r3, #12
				data->humidity = calc_humidity(adc_hum, dev);
   d4a9c:	492e      	ldr	r1, [pc, #184]	; (d4b58 <bme680_get_sensor_data+0x2fc>)
   d4a9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d4aa2:	428b      	cmp	r3, r1
   d4aa4:	bfd4      	ite	le
   d4aa6:	f8c8 300c 	strle.w	r3, [r8, #12]
   d4aaa:	f8c8 100c 	strgt.w	r1, [r8, #12]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
   d4aae:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
   d4ab2:	2105      	movs	r1, #5
   d4ab4:	f240 563c 	movw	r6, #1340	; 0x53c
   d4ab8:	2700      	movs	r7, #0
   d4aba:	fbc3 6701 	smlal	r6, r7, r3, r1
		((int64_t) lookupTable1[gas_range])) >> 16;
   d4abe:	f002 0c0f 	and.w	ip, r2, #15
   d4ac2:	4b26      	ldr	r3, [pc, #152]	; (d4b5c <bme680_get_sensor_data+0x300>)
   d4ac4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
   d4ac8:	fba6 0103 	umull	r0, r1, r6, r3
   d4acc:	fb03 1107 	mla	r1, r3, r7, r1
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   d4ad0:	9b03      	ldr	r3, [sp, #12]
   d4ad2:	0992      	lsrs	r2, r2, #6
   d4ad4:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
   d4ad8:	0c06      	lsrs	r6, r0, #16
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
   d4ada:	03d3      	lsls	r3, r2, #15
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
   d4adc:	ea4f 4e21 	mov.w	lr, r1, asr #16
   d4ae0:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
   d4ae4:	f113 437f 	adds.w	r3, r3, #4278190080	; 0xff000000
   d4ae8:	f04f 0100 	mov.w	r1, #0
   d4aec:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
   d4af0:	199a      	adds	r2, r3, r6
   d4af2:	eb41 030e 	adc.w	r3, r1, lr
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
   d4af6:	491a      	ldr	r1, [pc, #104]	; (d4b60 <bme680_get_sensor_data+0x304>)
   d4af8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
   d4afc:	fba1 6706 	umull	r6, r7, r1, r6
   d4b00:	fb01 770e 	mla	r7, r1, lr, r7
   d4b04:	0a70      	lsrs	r0, r6, #9
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
   d4b06:	0856      	lsrs	r6, r2, #1
   d4b08:	ea46 76c3 	orr.w	r6, r6, r3, lsl #31
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
   d4b0c:	ea40 50c7 	orr.w	r0, r0, r7, lsl #23
   d4b10:	ea4f 2c67 	mov.w	ip, r7, asr #9
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
   d4b14:	1059      	asrs	r1, r3, #1
   d4b16:	1980      	adds	r0, r0, r6
   d4b18:	eb4c 0101 	adc.w	r1, ip, r1
   d4b1c:	f00a fe8a 	bl	df834 <__aeabi_ldivmod>
   d4b20:	f8c8 0010 	str.w	r0, [r8, #16]
		if (rslt == BME680_OK) {
   d4b24:	b16d      	cbz	r5, d4b42 <bme680_get_sensor_data+0x2e6>
}
   d4b26:	4628      	mov	r0, r5
   d4b28:	b009      	add	sp, #36	; 0x24
   d4b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dev->delay_ms(BME680_POLL_PERIOD_MS);
   d4b2e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d4b30:	200a      	movs	r0, #10
   d4b32:	4798      	blx	r3
	} while (tries);
   d4b34:	3f01      	subs	r7, #1
   d4b36:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   d4b3a:	f47f aea5 	bne.w	d4888 <bme680_get_sensor_data+0x2c>
		rslt = BME680_W_NO_NEW_DATA;
   d4b3e:	2502      	movs	r5, #2
	return rslt;
   d4b40:	e7f1      	b.n	d4b26 <bme680_get_sensor_data+0x2ca>
			if (data->status & BME680_NEW_DATA_MSK)
   d4b42:	f998 3000 	ldrsb.w	r3, [r8]
   d4b46:	2b00      	cmp	r3, #0
				dev->new_fields = 1;
   d4b48:	bfba      	itte	lt
   d4b4a:	2301      	movlt	r3, #1
   d4b4c:	f884 3045 	strblt.w	r3, [r4, #69]	; 0x45
				dev->new_fields = 0;
   d4b50:	f884 5045 	strbge.w	r5, [r4, #69]	; 0x45
   d4b54:	e7e7      	b.n	d4b26 <bme680_get_sensor_data+0x2ca>
   d4b56:	bf00      	nop
   d4b58:	000186a0 	.word	0x000186a0
   d4b5c:	2003dfd8 	.word	0x2003dfd8
   d4b60:	2003e018 	.word	0x2003e018

000d4b64 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d4b64:	4770      	bx	lr

000d4b66 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d4b66:	6a00      	ldr	r0, [r0, #32]
   d4b68:	6803      	ldr	r3, [r0, #0]
   d4b6a:	68db      	ldr	r3, [r3, #12]
   d4b6c:	4718      	bx	r3
	...

000d4b70 <_Z18outOfMemoryHandleryi>:
}


// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   d4b70:	4b01      	ldr	r3, [pc, #4]	; (d4b78 <_Z18outOfMemoryHandleryi+0x8>)
   d4b72:	601a      	str	r2, [r3, #0]
}
   d4b74:	4770      	bx	lr
   d4b76:	bf00      	nop
   d4b78:	2003e080 	.word	0x2003e080

000d4b7c <_Z13userSwitchISRv>:
  }
  else frontTireFlag = true;
}

void userSwitchISR() {
  userSwitchDetect = true;                                            // The the flag for the user switch interrupt
   d4b7c:	4b01      	ldr	r3, [pc, #4]	; (d4b84 <_Z13userSwitchISRv+0x8>)
   d4b7e:	2201      	movs	r2, #1
   d4b80:	701a      	strb	r2, [r3, #0]
}
   d4b82:	4770      	bx	lr
   d4b84:	2003e420 	.word	0x2003e420

000d4b88 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d4b88:	6803      	ldr	r3, [r0, #0]
   d4b8a:	4718      	bx	r3

000d4b8c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d4b8c:	2a01      	cmp	r2, #1
   d4b8e:	d003      	beq.n	d4b98 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d4b90:	2a02      	cmp	r2, #2
   d4b92:	d003      	beq.n	d4b9c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d4b94:	2000      	movs	r0, #0
   d4b96:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4b98:	6001      	str	r1, [r0, #0]
	      break;
   d4b9a:	e7fb      	b.n	d4b94 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d4b9c:	680b      	ldr	r3, [r1, #0]
   d4b9e:	6003      	str	r3, [r0, #0]
	}
   d4ba0:	e7f8      	b.n	d4b94 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

000d4ba2 <_Z19countSignalTimerISRv>:

void countSignalTimerISR() {
  digitalWrite(blueLED,LOW);
   d4ba2:	2100      	movs	r1, #0
   d4ba4:	2007      	movs	r0, #7
   d4ba6:	f008 be78 	b.w	dd89a <digitalWrite>
	...

000d4bac <_Z21batteryContextMessagev>:
/**
 * @brief Returns a string describing the battery state.
 * 
 * @return String describing battery state.
 */
String batteryContextMessage() {
   d4bac:	b510      	push	{r4, lr}
  return batteryContext[sysStatus.batteryState];
   d4bae:	4b05      	ldr	r3, [pc, #20]	; (d4bc4 <_Z21batteryContextMessagev+0x18>)
   d4bb0:	7b1a      	ldrb	r2, [r3, #12]
   d4bb2:	4b05      	ldr	r3, [pc, #20]	; (d4bc8 <_Z21batteryContextMessagev+0x1c>)
String batteryContextMessage() {
   d4bb4:	4604      	mov	r4, r0
  return batteryContext[sysStatus.batteryState];
   d4bb6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d4bba:	f008 f83c 	bl	dcc36 <_ZN6StringC1EPKc>
}
   d4bbe:	4620      	mov	r0, r4
   d4bc0:	bd10      	pop	{r4, pc}
   d4bc2:	bf00      	nop
   d4bc4:	2003e3d8 	.word	0x2003e3d8
   d4bc8:	2003e058 	.word	0x2003e058

000d4bcc <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d4bcc:	b510      	push	{r4, lr}
   d4bce:	4b03      	ldr	r3, [pc, #12]	; (d4bdc <_ZN8MB85RC64D1Ev+0x10>)
   d4bd0:	6003      	str	r3, [r0, #0]
   d4bd2:	4604      	mov	r4, r0
   d4bd4:	f003 fd6b 	bl	d86ae <_ZN6MB85RCD1Ev>
   d4bd8:	4620      	mov	r0, r4
   d4bda:	bd10      	pop	{r4, pc}
   d4bdc:	000e093c 	.word	0x000e093c

000d4be0 <_ZN8MB85RC64D0Ev>:
   d4be0:	b510      	push	{r4, lr}
   d4be2:	4604      	mov	r4, r0
   d4be4:	f7ff fff2 	bl	d4bcc <_ZN8MB85RC64D1Ev>
   d4be8:	4620      	mov	r0, r4
   d4bea:	2110      	movs	r1, #16
   d4bec:	f008 ff12 	bl	dda14 <_ZdlPvj>
   d4bf0:	4620      	mov	r0, r4
   d4bf2:	bd10      	pop	{r4, pc}

000d4bf4 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d4bf4:	6943      	ldr	r3, [r0, #20]
   d4bf6:	b113      	cbz	r3, d4bfe <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4bf8:	6983      	ldr	r3, [r0, #24]
   d4bfa:	300c      	adds	r0, #12
   d4bfc:	4718      	bx	r3
            callback();
        }
    }
   d4bfe:	4770      	bx	lr

000d4c00 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4c00:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4c02:	2100      	movs	r1, #0
   d4c04:	4604      	mov	r4, r0
   d4c06:	4608      	mov	r0, r1
   d4c08:	f004 ff80 	bl	d9b0c <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4c0c:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4c0e:	4620      	mov	r0, r4
   d4c10:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d4c12:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d4c14:	f004 ff92 	bl	d9b3c <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4c18:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4c1a:	b10c      	cbz	r4, d4c20 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d4c1c:	2301      	movs	r3, #1
   d4c1e:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4c20:	2100      	movs	r1, #0
   d4c22:	2001      	movs	r0, #1
   d4c24:	f004 ff72 	bl	d9b0c <os_thread_scheduling>
            }
        }
        if (t) {
   d4c28:	b12c      	cbz	r4, d4c36 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d4c2a:	6823      	ldr	r3, [r4, #0]
   d4c2c:	4620      	mov	r0, r4
   d4c2e:	689b      	ldr	r3, [r3, #8]
   d4c30:	4798      	blx	r3
            t->running = false;
   d4c32:	2300      	movs	r3, #0
   d4c34:	7123      	strb	r3, [r4, #4]
        }
    }
   d4c36:	b002      	add	sp, #8
   d4c38:	bd10      	pop	{r4, pc}

000d4c3a <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>:
    }


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
   d4c3a:	b508      	push	{r3, lr}
          waitUntil(meterParticlePublish);
   d4c3c:	f002 f9b2 	bl	d6fa4 <_Z20meterParticlePublishv>
        while (_while() && !_condition()) {
   d4c40:	b910      	cbnz	r0, d4c48 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0+0xe>
            spark_process();
   d4c42:	f005 fb1f 	bl	da284 <spark_process>
        while (_while() && !_condition()) {
   d4c46:	e7f9      	b.n	d4c3c <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0+0x2>
        }
        return _condition();
    }
   d4c48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4c4c:	f002 b9aa 	b.w	d6fa4 <_Z20meterParticlePublishv>

000d4c50 <_Z11resetCounts6String>:
{
   d4c50:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4c52:	4907      	ldr	r1, [pc, #28]	; (d4c70 <_Z11resetCounts6String+0x20>)
   d4c54:	f008 f8a8 	bl	dcda8 <_ZNK6String6equalsEPKc>
   d4c58:	2300      	movs	r3, #0
  if (command == "1")
   d4c5a:	b140      	cbz	r0, d4c6e <_Z11resetCounts6String+0x1e>
    sysStatus.resetCount = 0;                                          // If so, store incremented number - watchdog must have done This
   d4c5c:	4a05      	ldr	r2, [pc, #20]	; (d4c74 <_Z11resetCounts6String+0x24>)
   d4c5e:	6113      	str	r3, [r2, #16]
    dataInFlight = false;
   d4c60:	4a05      	ldr	r2, [pc, #20]	; (d4c78 <_Z11resetCounts6String+0x28>)
   d4c62:	7013      	strb	r3, [r2, #0]
    currentCountsWriteNeeded = true;                                   // Make sure we write to FRAM back in the main loop
   d4c64:	4b05      	ldr	r3, [pc, #20]	; (d4c7c <_Z11resetCounts6String+0x2c>)
   d4c66:	2001      	movs	r0, #1
   d4c68:	7018      	strb	r0, [r3, #0]
    systemStatusWriteNeeded = true;
   d4c6a:	4b05      	ldr	r3, [pc, #20]	; (d4c80 <_Z11resetCounts6String+0x30>)
   d4c6c:	7018      	strb	r0, [r3, #0]
}
   d4c6e:	bd08      	pop	{r3, pc}
   d4c70:	000e01fa 	.word	0x000e01fa
   d4c74:	2003e3d8 	.word	0x2003e3d8
   d4c78:	2003e30f 	.word	0x2003e30f
   d4c7c:	2003e304 	.word	0x2003e304
   d4c80:	2003e404 	.word	0x2003e404

000d4c84 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d4c84:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4c86:	2000      	movs	r0, #0
   d4c88:	f005 fb34 	bl	da2f4 <spark_sync_time_pending>
   d4c8c:	b128      	cbz	r0, d4c9a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4c8e:	f005 fb09 	bl	da2a4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4c92:	f080 0001 	eor.w	r0, r0, #1
   d4c96:	b2c0      	uxtb	r0, r0
    }
   d4c98:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4c9a:	2001      	movs	r0, #1
   d4c9c:	e7fc      	b.n	d4c98 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d4c9e <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4c9e:	2300      	movs	r3, #0
   d4ca0:	2204      	movs	r2, #4
   d4ca2:	f005 badf 	b.w	da264 <spark_variable>
	...

000d4ca8 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_>:
    template<typename T, std::enable_if_t<std::is_function<T>::value, std::nullptr_t> = nullptr>
    static bool register_variable_fn(const char* varKey, const T& fn) {
        using VariableType = CloudVariableType<typename std::result_of<T&()>::type>;
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.copy = [](const void* var, void** data, size_t* size) {
   d4ca8:	b530      	push	{r4, r5, lr}
   d4caa:	b085      	sub	sp, #20
   d4cac:	4603      	mov	r3, r0
   d4cae:	4614      	mov	r4, r2
            const auto fn = (const T*)var;
            const typename VariableType::ValueType val = fn();
   d4cb0:	4668      	mov	r0, sp
        extra.copy = [](const void* var, void** data, size_t* size) {
   d4cb2:	460d      	mov	r5, r1
            const typename VariableType::ValueType val = fn();
   d4cb4:	4798      	blx	r3
        size = str.length();
   d4cb6:	9802      	ldr	r0, [sp, #8]
   d4cb8:	6020      	str	r0, [r4, #0]
        data = malloc(size);
   d4cba:	f005 fba3 	bl	da404 <malloc>
   d4cbe:	6028      	str	r0, [r5, #0]
        if (!data) {
   d4cc0:	b150      	cbz	r0, d4cd8 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x30>
        memcpy(data, str.c_str(), size);
   d4cc2:	6822      	ldr	r2, [r4, #0]
   d4cc4:	9900      	ldr	r1, [sp, #0]
   d4cc6:	f00a ffdf 	bl	dfc88 <memcpy>
        return 0;
   d4cca:	2400      	movs	r4, #0
            const typename VariableType::ValueType val = fn();
   d4ccc:	4668      	mov	r0, sp
   d4cce:	f007 ff67 	bl	dcba0 <_ZN6StringD1Ev>
        extra.copy = [](const void* var, void** data, size_t* size) {
   d4cd2:	4620      	mov	r0, r4
   d4cd4:	b005      	add	sp, #20
   d4cd6:	bd30      	pop	{r4, r5, pc}
            return SYSTEM_ERROR_NO_MEMORY;
   d4cd8:	4c00      	ldr	r4, [pc, #0]	; (d4cdc <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x34>)
   d4cda:	e7f7      	b.n	d4ccc <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x24>
   d4cdc:	fffffefc 	.word	0xfffffefc

000d4ce0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>:
    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d4ce0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4ce2:	f89d 5018 	ldrb.w	r5, [sp, #24]
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d4ce6:	431d      	orrs	r5, r3
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4ce8:	f88d 5000 	strb.w	r5, [sp]
   d4cec:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d4cee:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4cf0:	f005 fee0 	bl	daab4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }
   d4cf4:	4620      	mov	r0, r4
   d4cf6:	b003      	add	sp, #12
   d4cf8:	bd30      	pop	{r4, r5, pc}
	...

000d4cfc <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4cfc:	4b0a      	ldr	r3, [pc, #40]	; (d4d28 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d4cfe:	b510      	push	{r4, lr}
   d4d00:	4604      	mov	r4, r0
   d4d02:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4d04:	f006 fdfc 	bl	db900 <_ZN5spark10LogManager8instanceEv>
   d4d08:	4621      	mov	r1, r4
   d4d0a:	f006 fffa 	bl	dbd02 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d4d0e:	f008 fc9b 	bl	dd648 <_Z16_fetch_usbserialv>
   d4d12:	f008 fc8d 	bl	dd630 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d4d16:	4620      	mov	r0, r4
   d4d18:	4b04      	ldr	r3, [pc, #16]	; (d4d2c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d4d1a:	f840 3b04 	str.w	r3, [r0], #4
   d4d1e:	f006 fedd 	bl	dbadc <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4d22:	4620      	mov	r0, r4
   d4d24:	bd10      	pop	{r4, pc}
   d4d26:	bf00      	nop
   d4d28:	000e0924 	.word	0x000e0924
   d4d2c:	000e090c 	.word	0x000e090c

000d4d30 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4d30:	b510      	push	{r4, lr}
   d4d32:	4604      	mov	r4, r0
    }
   d4d34:	f7ff ffe2 	bl	d4cfc <_ZN5spark16SerialLogHandlerD1Ev>
   d4d38:	4620      	mov	r0, r4
   d4d3a:	2124      	movs	r1, #36	; 0x24
   d4d3c:	f008 fe6a 	bl	dda14 <_ZdlPvj>
   d4d40:	4620      	mov	r0, r4
   d4d42:	bd10      	pop	{r4, pc}

000d4d44 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4d44:	b510      	push	{r4, lr}
      if (_M_manager)
   d4d46:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4d48:	4604      	mov	r4, r0
      if (_M_manager)
   d4d4a:	b113      	cbz	r3, d4d52 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4d4c:	2203      	movs	r2, #3
   d4d4e:	4601      	mov	r1, r0
   d4d50:	4798      	blx	r3
    }
   d4d52:	4620      	mov	r0, r4
   d4d54:	bd10      	pop	{r4, pc}

000d4d56 <_ZN8particle24SystemPowerConfigurationC1Ev>:
};

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
   d4d56:	b538      	push	{r3, r4, r5, lr}
   d4d58:	4604      	mov	r4, r0
            : conf_{} {
   d4d5a:	2520      	movs	r5, #32
   d4d5c:	462a      	mov	r2, r5
   d4d5e:	2100      	movs	r1, #0
   d4d60:	f00a ffba 	bl	dfcd8 <memset>
        conf_.size = sizeof(conf_);
   d4d64:	7165      	strb	r5, [r4, #5]
    }
   d4d66:	4620      	mov	r0, r4
   d4d68:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4d6c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d4d6e:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4d70:	4605      	mov	r5, r0
   d4d72:	460f      	mov	r7, r1
   d4d74:	4616      	mov	r6, r2
        if (valid_) {
   d4d76:	b18b      	cbz	r3, d4d9c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4d78:	6803      	ldr	r3, [r0, #0]
   d4d7a:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d4d7c:	b183      	cbz	r3, d4da0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d4d7e:	889a      	ldrh	r2, [r3, #4]
   d4d80:	2a01      	cmp	r2, #1
   d4d82:	d006      	beq.n	d4d92 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   d4d84:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4d86:	e7f9      	b.n	d4d7c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d4d88:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d4d8a:	b14b      	cbz	r3, d4da0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d4d8c:	889a      	ldrh	r2, [r3, #4]
   d4d8e:	2a01      	cmp	r2, #1
   d4d90:	d1fa      	bne.n	d4d88 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   d4d92:	b12b      	cbz	r3, d4da0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   d4d94:	899a      	ldrh	r2, [r3, #12]
   d4d96:	42ba      	cmp	r2, r7
   d4d98:	d1f6      	bne.n	d4d88 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   d4d9a:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d4d9c:	4628      	mov	r0, r5
   d4d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d4da0:	490a      	ldr	r1, [pc, #40]	; (d4dcc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d4da2:	2010      	movs	r0, #16
   d4da4:	f008 fe38 	bl	dda18 <_ZnwjRKSt9nothrow_t>
   d4da8:	4604      	mov	r4, r0
   d4daa:	b168      	cbz	r0, d4dc8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d4dac:	2210      	movs	r2, #16
   d4dae:	2100      	movs	r1, #0
   d4db0:	f00a ff92 	bl	dfcd8 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d4db4:	4b06      	ldr	r3, [pc, #24]	; (d4dd0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d4db6:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d4db8:	2301      	movs	r3, #1
   d4dba:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4dbc:	692b      	ldr	r3, [r5, #16]
   d4dbe:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d4dc0:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d4dc2:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4dc4:	612c      	str	r4, [r5, #16]
   d4dc6:	e7e9      	b.n	d4d9c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   d4dc8:	7528      	strb	r0, [r5, #20]
                return *this;
   d4dca:	e7e7      	b.n	d4d9c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   d4dcc:	000e1368 	.word	0x000e1368
   d4dd0:	00030010 	.word	0x00030010

000d4dd4 <_ZN8particle24SystemSleepConfiguration8durationEm>:

    SystemSleepConfiguration& duration(system_tick_t ms) {
   d4dd4:	b570      	push	{r4, r5, r6, lr}
        if (valid_) {
   d4dd6:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& duration(system_tick_t ms) {
   d4dd8:	4605      	mov	r5, r0
   d4dda:	460e      	mov	r6, r1
        if (valid_) {
   d4ddc:	b1cb      	cbz	r3, d4e12 <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4dde:	6803      	ldr	r3, [r0, #0]
   d4de0:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d4de2:	b123      	cbz	r3, d4dee <_ZN8particle24SystemSleepConfiguration8durationEm+0x1a>
            if (start->type == type) {
   d4de4:	889a      	ldrh	r2, [r3, #4]
   d4de6:	2a04      	cmp	r2, #4
   d4de8:	d017      	beq.n	d4e1a <_ZN8particle24SystemSleepConfiguration8durationEm+0x46>
            start = start->next;
   d4dea:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4dec:	e7f9      	b.n	d4de2 <_ZN8particle24SystemSleepConfiguration8durationEm+0xe>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4dee:	490c      	ldr	r1, [pc, #48]	; (d4e20 <_ZN8particle24SystemSleepConfiguration8durationEm+0x4c>)
   d4df0:	2010      	movs	r0, #16
   d4df2:	f008 fe11 	bl	dda18 <_ZnwjRKSt9nothrow_t>
   d4df6:	4604      	mov	r4, r0
   d4df8:	b168      	cbz	r0, d4e16 <_ZN8particle24SystemSleepConfiguration8durationEm+0x42>
   d4dfa:	2210      	movs	r2, #16
   d4dfc:	2100      	movs	r1, #0
   d4dfe:	f00a ff6b 	bl	dfcd8 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d4e02:	4b08      	ldr	r3, [pc, #32]	; (d4e24 <_ZN8particle24SystemSleepConfiguration8durationEm+0x50>)
   d4e04:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4e06:	2304      	movs	r3, #4
   d4e08:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4e0a:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4e0c:	612c      	str	r4, [r5, #16]
            wakeupSource->ms = ms;
   d4e0e:	e9c4 3602 	strd	r3, r6, [r4, #8]
        }
        return *this;
    }
   d4e12:	4628      	mov	r0, r5
   d4e14:	bd70      	pop	{r4, r5, r6, pc}
                valid_ = false;
   d4e16:	7528      	strb	r0, [r5, #20]
                return *this;
   d4e18:	e7fb      	b.n	d4e12 <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d4e1a:	60de      	str	r6, [r3, #12]
                return *this;
   d4e1c:	e7f9      	b.n	d4e12 <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
   d4e1e:	bf00      	nop
   d4e20:	000e1368 	.word	0x000e1368
   d4e24:	00030010 	.word	0x00030010

000d4e28 <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d4e28:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4e2a:	468c      	mov	ip, r1
   d4e2c:	2500      	movs	r5, #0
   d4e2e:	4914      	ldr	r1, [pc, #80]	; (d4e80 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   d4e30:	7105      	strb	r5, [r0, #4]
   d4e32:	4604      	mov	r4, r0
   d4e34:	6085      	str	r5, [r0, #8]
   d4e36:	6001      	str	r1, [r0, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e38:	e892 0003 	ldmia.w	r2, {r0, r1}
   d4e3c:	b085      	sub	sp, #20
   d4e3e:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d4e40:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e44:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4e48:	e896 0003 	ldmia.w	r6, {r0, r1}
   d4e4c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4e50:	e897 0003 	ldmia.w	r7, {r0, r1}
   d4e54:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e58:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4e5a:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e5c:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e5e:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4e60:	6095      	str	r5, [r2, #8]
   d4e62:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e64:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4e66:	e9cd 3500 	strd	r3, r5, [sp]
   d4e6a:	4a06      	ldr	r2, [pc, #24]	; (d4e84 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   d4e6c:	4623      	mov	r3, r4
   d4e6e:	4661      	mov	r1, ip
   d4e70:	f104 0008 	add.w	r0, r4, #8
   d4e74:	f004 fe52 	bl	d9b1c <os_timer_create>
    }
   d4e78:	4620      	mov	r0, r4
   d4e7a:	b005      	add	sp, #20
   d4e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4e7e:	bf00      	nop
   d4e80:	000e08f8 	.word	0x000e08f8
   d4e84:	000d4c01 	.word	0x000d4c01

000d4e88 <_ZN5Timer5_stopEjb>:
    bool _stop(unsigned block, bool fromISR=false)
   d4e88:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d4e8a:	6880      	ldr	r0, [r0, #8]
   d4e8c:	2300      	movs	r3, #0
   d4e8e:	b138      	cbz	r0, d4ea0 <_ZN5Timer5_stopEjb+0x18>
   d4e90:	e9cd 1300 	strd	r1, r3, [sp]
   d4e94:	2102      	movs	r1, #2
   d4e96:	f004 fe59 	bl	d9b4c <os_timer_change>
   d4e9a:	fab0 f080 	clz	r0, r0
   d4e9e:	0940      	lsrs	r0, r0, #5
    }
   d4ea0:	b003      	add	sp, #12
   d4ea2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4ea8 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d4ea8:	b538      	push	{r3, r4, r5, lr}
   d4eaa:	4b10      	ldr	r3, [pc, #64]	; (d4eec <_ZN5TimerD1Ev+0x44>)
   d4eac:	6003      	str	r3, [r0, #0]
        if (handle) {
   d4eae:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   d4eb0:	4604      	mov	r4, r0
        if (handle) {
   d4eb2:	b1a3      	cbz	r3, d4ede <_ZN5TimerD1Ev+0x36>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4eb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4eb8:	2200      	movs	r2, #0
   d4eba:	f7ff ffe5 	bl	d4e88 <_ZN5Timer5_stopEjb>
            os_timer_set_id(handle, nullptr);
   d4ebe:	68a0      	ldr	r0, [r4, #8]
   d4ec0:	2100      	movs	r1, #0
   d4ec2:	f004 fe93 	bl	d9bec <os_timer_set_id>
            while (running) {
   d4ec6:	7923      	ldrb	r3, [r4, #4]
   d4ec8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d4ecc:	b113      	cbz	r3, d4ed4 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d4ece:	f004 fe05 	bl	d9adc <os_thread_yield>
            while (running) {
   d4ed2:	e7f8      	b.n	d4ec6 <_ZN5TimerD1Ev+0x1e>
            os_timer_destroy(handle, nullptr);
   d4ed4:	68a0      	ldr	r0, [r4, #8]
   d4ed6:	4629      	mov	r1, r5
   d4ed8:	f004 fe28 	bl	d9b2c <os_timer_destroy>
            handle = nullptr;
   d4edc:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d4ede:	f104 000c 	add.w	r0, r4, #12
   d4ee2:	f7ff ff2f 	bl	d4d44 <_ZNSt14_Function_baseD1Ev>
    }
   d4ee6:	4620      	mov	r0, r4
   d4ee8:	bd38      	pop	{r3, r4, r5, pc}
   d4eea:	bf00      	nop
   d4eec:	000e08f8 	.word	0x000e08f8

000d4ef0 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d4ef0:	b510      	push	{r4, lr}
   d4ef2:	4604      	mov	r4, r0
    }
   d4ef4:	f7ff ffd8 	bl	d4ea8 <_ZN5TimerD1Ev>
   d4ef8:	4620      	mov	r0, r4
   d4efa:	211c      	movs	r1, #28
   d4efc:	f008 fd8a 	bl	dda14 <_ZdlPvj>
   d4f00:	4620      	mov	r0, r4
   d4f02:	bd10      	pop	{r4, pc}

000d4f04 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4f04:	b40e      	push	{r1, r2, r3}
   d4f06:	b510      	push	{r4, lr}
   d4f08:	b08d      	sub	sp, #52	; 0x34
   d4f0a:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d4f0c:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d4f0e:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4f12:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4f14:	2300      	movs	r3, #0
   d4f16:	2020      	movs	r0, #32
   d4f18:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4f1c:	e9cd 4200 	strd	r4, r2, [sp]
   d4f20:	201e      	movs	r0, #30
   d4f22:	aa04      	add	r2, sp, #16
   d4f24:	f005 f8fa 	bl	da11c <log_message_v>
}
   d4f28:	b00d      	add	sp, #52	; 0x34
   d4f2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4f2e:	b003      	add	sp, #12
   d4f30:	4770      	bx	lr

000d4f32 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   d4f32:	b40e      	push	{r1, r2, r3}
   d4f34:	b510      	push	{r4, lr}
   d4f36:	b08d      	sub	sp, #52	; 0x34
   d4f38:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_ERROR, fmt, args);
   d4f3a:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::error(const char *fmt, ...) const {
   d4f3c:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4f40:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d4f42:	2300      	movs	r3, #0
   d4f44:	2020      	movs	r0, #32
   d4f46:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4f4a:	e9cd 4200 	strd	r4, r2, [sp]
   d4f4e:	2032      	movs	r0, #50	; 0x32
   d4f50:	aa04      	add	r2, sp, #16
   d4f52:	f005 f8e3 	bl	da11c <log_message_v>
}
   d4f56:	b00d      	add	sp, #52	; 0x34
   d4f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4f5c:	b003      	add	sp, #12
   d4f5e:	4770      	bx	lr

000d4f60 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	 * @return true if the event was queued or false if it was not.
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d4f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d4f62:	6804      	ldr	r4, [r0, #0]
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d4f64:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d4f68:	f88d 3000 	strb.w	r3, [sp]
   d4f6c:	f88d 5004 	strb.w	r5, [sp, #4]
   d4f70:	6824      	ldr	r4, [r4, #0]
   d4f72:	233c      	movs	r3, #60	; 0x3c
   d4f74:	47a0      	blx	r4
	}
   d4f76:	b003      	add	sp, #12
   d4f78:	bd30      	pop	{r4, r5, pc}
	...

000d4f7c <_Z21firmwareUpdateHandleryi>:
void firmwareUpdateHandler(system_event_t event, int param) {
   d4f7c:	b570      	push	{r4, r5, r6, lr}
   d4f7e:	b092      	sub	sp, #72	; 0x48
  switch(param) {
   d4f80:	b302      	cbz	r2, d4fc4 <_Z21firmwareUpdateHandleryi+0x48>
   d4f82:	2a01      	cmp	r2, #1
   d4f84:	d026      	beq.n	d4fd4 <_Z21firmwareUpdateHandleryi+0x58>
   d4f86:	3201      	adds	r2, #1
   d4f88:	d11f      	bne.n	d4fca <_Z21firmwareUpdateHandleryi+0x4e>
      firmwareUpdateInProgress = false;
   d4f8a:	4b20      	ldr	r3, [pc, #128]	; (d500c <_Z21firmwareUpdateHandleryi+0x90>)
      current.alerts = 6;                                              // Record a failed attempt
   d4f8c:	4c20      	ldr	r4, [pc, #128]	; (d5010 <_Z21firmwareUpdateHandleryi+0x94>)
      firmwareUpdateInProgress = false;
   d4f8e:	2500      	movs	r5, #0
      current.alerts = 6;                                              // Record a failed attempt
   d4f90:	2606      	movs	r6, #6
      firmwareUpdateInProgress = false;
   d4f92:	701d      	strb	r5, [r3, #0]
      current.alerts = 6;                                              // Record a failed attempt
   d4f94:	60a6      	str	r6, [r4, #8]
      snprintf(data, sizeof(data), "{\"alerts\":%i,\"timestamp\":%lu000 }",current.alerts, Time.now());
   d4f96:	f008 fa20 	bl	dd3da <_ZN9TimeClass3nowEv>
   d4f9a:	4a1e      	ldr	r2, [pc, #120]	; (d5014 <_Z21firmwareUpdateHandleryi+0x98>)
   d4f9c:	9000      	str	r0, [sp, #0]
   d4f9e:	4633      	mov	r3, r6
   d4fa0:	2140      	movs	r1, #64	; 0x40
   d4fa2:	a802      	add	r0, sp, #8
   d4fa4:	f005 fa56 	bl	da454 <snprintf>
      PublishQueuePosix::instance().publish("Ubidots_Alert_Hook", data, PRIVATE); // Put in publlish queue
   d4fa8:	f003 fdfe 	bl	d8ba8 <_ZN17PublishQueuePosix8instanceEv>
   d4fac:	4b1a      	ldr	r3, [pc, #104]	; (d5018 <_Z21firmwareUpdateHandleryi+0x9c>)
   d4fae:	f88d 5000 	strb.w	r5, [sp]
   d4fb2:	781b      	ldrb	r3, [r3, #0]
   d4fb4:	4919      	ldr	r1, [pc, #100]	; (d501c <_Z21firmwareUpdateHandleryi+0xa0>)
   d4fb6:	aa02      	add	r2, sp, #8
   d4fb8:	f7ff ffd2 	bl	d4f60 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      current.updateAttempts++;                                        // Increment the update attempts counter
   d4fbc:	7d23      	ldrb	r3, [r4, #20]
   d4fbe:	3301      	adds	r3, #1
   d4fc0:	7523      	strb	r3, [r4, #20]
      break;
   d4fc2:	e002      	b.n	d4fca <_Z21firmwareUpdateHandleryi+0x4e>
      firmwareUpdateInProgress = true;
   d4fc4:	4b11      	ldr	r3, [pc, #68]	; (d500c <_Z21firmwareUpdateHandleryi+0x90>)
   d4fc6:	2201      	movs	r2, #1
   d4fc8:	701a      	strb	r2, [r3, #0]
  currentCountsWriteNeeded = true;
   d4fca:	4b15      	ldr	r3, [pc, #84]	; (d5020 <_Z21firmwareUpdateHandleryi+0xa4>)
   d4fcc:	2201      	movs	r2, #1
   d4fce:	701a      	strb	r2, [r3, #0]
}
   d4fd0:	b012      	add	sp, #72	; 0x48
   d4fd2:	bd70      	pop	{r4, r5, r6, pc}
      firmwareUpdateInProgress = false;
   d4fd4:	4b0d      	ldr	r3, [pc, #52]	; (d500c <_Z21firmwareUpdateHandleryi+0x90>)
      current.alerts = 4;                                              // Record a successful attempt
   d4fd6:	4d0e      	ldr	r5, [pc, #56]	; (d5010 <_Z21firmwareUpdateHandleryi+0x94>)
      firmwareUpdateInProgress = false;
   d4fd8:	2400      	movs	r4, #0
      current.alerts = 4;                                              // Record a successful attempt
   d4fda:	2604      	movs	r6, #4
      firmwareUpdateInProgress = false;
   d4fdc:	701c      	strb	r4, [r3, #0]
      current.alerts = 4;                                              // Record a successful attempt
   d4fde:	60ae      	str	r6, [r5, #8]
      snprintf(data, sizeof(data), "{\"alerts\":%i,\"timestamp\":%lu000 }",current.alerts, Time.now());
   d4fe0:	f008 f9fb 	bl	dd3da <_ZN9TimeClass3nowEv>
   d4fe4:	4a0b      	ldr	r2, [pc, #44]	; (d5014 <_Z21firmwareUpdateHandleryi+0x98>)
   d4fe6:	9000      	str	r0, [sp, #0]
   d4fe8:	4633      	mov	r3, r6
   d4fea:	2140      	movs	r1, #64	; 0x40
   d4fec:	a802      	add	r0, sp, #8
   d4fee:	f005 fa31 	bl	da454 <snprintf>
      PublishQueuePosix::instance().publish("Ubidots_Alert_Hook", data, PRIVATE); // Put in publish queue
   d4ff2:	f003 fdd9 	bl	d8ba8 <_ZN17PublishQueuePosix8instanceEv>
   d4ff6:	4b08      	ldr	r3, [pc, #32]	; (d5018 <_Z21firmwareUpdateHandleryi+0x9c>)
   d4ff8:	f88d 4000 	strb.w	r4, [sp]
   d4ffc:	781b      	ldrb	r3, [r3, #0]
   d4ffe:	4907      	ldr	r1, [pc, #28]	; (d501c <_Z21firmwareUpdateHandleryi+0xa0>)
   d5000:	aa02      	add	r2, sp, #8
   d5002:	f7ff ffad 	bl	d4f60 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      current.updateAttempts = 0;                                      // Zero the update attempts counter
   d5006:	752c      	strb	r4, [r5, #20]
      break;
   d5008:	e7df      	b.n	d4fca <_Z21firmwareUpdateHandleryi+0x4e>
   d500a:	bf00      	nop
   d500c:	2003e310 	.word	0x2003e310
   d5010:	2003e2ec 	.word	0x2003e2ec
   d5014:	000e022f 	.word	0x000e022f
   d5018:	2003e1f4 	.word	0x2003e1f4
   d501c:	000e0251 	.word	0x000e0251
   d5020:	2003e304 	.word	0x2003e304

000d5024 <_Z9sendEventv>:
void sendEvent() {
   d5024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5028:	ed2d 8b06 	vpush	{d8-d10}
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"Pressure\":%4.1f, \"HeatIndex\":%4.1f, \"TVOClevel\":%5.1f, \"Altitude\":%4.1f, \"Battery\":%i, \"Resets\":%i, \"Alerts\":%i, \"connecttime\":%i,\"timestamp\":%lu000}", temperatureInC, relativeHumidity, pressureHpa, heatIndexC, gasResistanceKOhms,approxAltitudeInM, sysStatus.stateOfCharge , sysStatus.resetCount, current.alerts, sysStatus.lastConnectionDuration, Time.now());
   d502c:	4b25      	ldr	r3, [pc, #148]	; (d50c4 <_Z9sendEventv+0xa0>)
   d502e:	4e26      	ldr	r6, [pc, #152]	; (d50c8 <_Z9sendEventv+0xa4>)
   d5030:	e9d3 8900 	ldrd	r8, r9, [r3]
   d5034:	4b25      	ldr	r3, [pc, #148]	; (d50cc <_Z9sendEventv+0xa8>)
   d5036:	e9d3 ab00 	ldrd	sl, fp, [r3]
   d503a:	4b25      	ldr	r3, [pc, #148]	; (d50d0 <_Z9sendEventv+0xac>)
   d503c:	ed93 8b00 	vldr	d8, [r3]
   d5040:	4b24      	ldr	r3, [pc, #144]	; (d50d4 <_Z9sendEventv+0xb0>)
void sendEvent() {
   d5042:	b0d7      	sub	sp, #348	; 0x15c
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"Pressure\":%4.1f, \"HeatIndex\":%4.1f, \"TVOClevel\":%5.1f, \"Altitude\":%4.1f, \"Battery\":%i, \"Resets\":%i, \"Alerts\":%i, \"connecttime\":%i,\"timestamp\":%lu000}", temperatureInC, relativeHumidity, pressureHpa, heatIndexC, gasResistanceKOhms,approxAltitudeInM, sysStatus.stateOfCharge , sysStatus.resetCount, current.alerts, sysStatus.lastConnectionDuration, Time.now());
   d5044:	6818      	ldr	r0, [r3, #0]
   d5046:	f00a f855 	bl	df0f4 <__aeabi_f2d>
   d504a:	4b23      	ldr	r3, [pc, #140]	; (d50d8 <_Z9sendEventv+0xb4>)
   d504c:	ed93 9b00 	vldr	d9, [r3]
   d5050:	4b22      	ldr	r3, [pc, #136]	; (d50dc <_Z9sendEventv+0xb8>)
   d5052:	ed93 ab00 	vldr	d10, [r3]
   d5056:	4b22      	ldr	r3, [pc, #136]	; (d50e0 <_Z9sendEventv+0xbc>)
   d5058:	460d      	mov	r5, r1
   d505a:	689f      	ldr	r7, [r3, #8]
   d505c:	691a      	ldr	r2, [r3, #16]
   d505e:	68b1      	ldr	r1, [r6, #8]
   d5060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   d5062:	9215      	str	r2, [sp, #84]	; 0x54
   d5064:	4604      	mov	r4, r0
   d5066:	9114      	str	r1, [sp, #80]	; 0x50
   d5068:	9313      	str	r3, [sp, #76]	; 0x4c
   d506a:	f008 f9b6 	bl	dd3da <_ZN9TimeClass3nowEv>
   d506e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   d5070:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d5072:	9914      	ldr	r1, [sp, #80]	; 0x50
   d5074:	930f      	str	r3, [sp, #60]	; 0x3c
   d5076:	e9cd 720c 	strd	r7, r2, [sp, #48]	; 0x30
   d507a:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d507e:	4a19      	ldr	r2, [pc, #100]	; (d50e4 <_Z9sendEventv+0xc0>)
   d5080:	9010      	str	r0, [sp, #64]	; 0x40
   d5082:	910e      	str	r1, [sp, #56]	; 0x38
   d5084:	ed8d ab0a 	vstr	d10, [sp, #40]	; 0x28
   d5088:	f44f 7180 	mov.w	r1, #256	; 0x100
   d508c:	ed8d 9b08 	vstr	d9, [sp, #32]
   d5090:	ed8d 8b04 	vstr	d8, [sp, #16]
   d5094:	e9cd ab02 	strd	sl, fp, [sp, #8]
   d5098:	e9cd 8900 	strd	r8, r9, [sp]
   d509c:	a816      	add	r0, sp, #88	; 0x58
   d509e:	f005 f9d9 	bl	da454 <snprintf>
        val_(0) {
   d50a2:	2400      	movs	r4, #0
  PublishQueuePosix::instance().publish("Environmental_Hook", data, PRIVATE);
   d50a4:	f003 fd80 	bl	d8ba8 <_ZN17PublishQueuePosix8instanceEv>
   d50a8:	4b0f      	ldr	r3, [pc, #60]	; (d50e8 <_Z9sendEventv+0xc4>)
   d50aa:	f88d 4000 	strb.w	r4, [sp]
   d50ae:	781b      	ldrb	r3, [r3, #0]
   d50b0:	490e      	ldr	r1, [pc, #56]	; (d50ec <_Z9sendEventv+0xc8>)
   d50b2:	aa16      	add	r2, sp, #88	; 0x58
   d50b4:	f7ff ff54 	bl	d4f60 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  current.alerts = 0;                                                 // Reset the alert after publish
   d50b8:	60b4      	str	r4, [r6, #8]
}
   d50ba:	b057      	add	sp, #348	; 0x15c
   d50bc:	ecbd 8b06 	vpop	{d8-d10}
   d50c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d50c4:	2003e408 	.word	0x2003e408
   d50c8:	2003e2ec 	.word	0x2003e2ec
   d50cc:	2003e3b0 	.word	0x2003e3b0
   d50d0:	2003e398 	.word	0x2003e398
   d50d4:	2003e338 	.word	0x2003e338
   d50d8:	2003e330 	.word	0x2003e330
   d50dc:	2003e238 	.word	0x2003e238
   d50e0:	2003e3d8 	.word	0x2003e3d8
   d50e4:	000e0264 	.word	0x000e0264
   d50e8:	2003e1f4 	.word	0x2003e1f4
   d50ec:	000e0323 	.word	0x000e0323

000d50f0 <_Z9heatIndexff>:
{
   d50f0:	b508      	push	{r3, lr}
   d50f2:	ee10 0a10 	vmov	r0, s0
   d50f6:	ed2d 8b06 	vpush	{d8-d10}
   d50fa:	eeb0 aa60 	vmov.f32	s20, s1
    float TF = (TC * 1.8) + 32.0;                // Need to convert to Farenheit for the calculations
   d50fe:	f009 fff9 	bl	df0f4 <__aeabi_f2d>
   d5102:	a369      	add	r3, pc, #420	; (adr r3, d52a8 <_Z9heatIndexff+0x1b8>)
   d5104:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5108:	f00a f84c 	bl	df1a4 <__aeabi_dmul>
   d510c:	4b68      	ldr	r3, [pc, #416]	; (d52b0 <_Z9heatIndexff+0x1c0>)
   d510e:	2200      	movs	r2, #0
   d5110:	f009 fe92 	bl	dee38 <__adddf3>
   d5114:	f00a fb3e 	bl	df794 <__aeabi_d2f>
    float simpleHeatIndex = ((c10 * ((TF+c11+(TF-c12)*c13) + (R*c14))) -32.0) / 1.8;
   d5118:	ed9f 7a66 	vldr	s14, [pc, #408]	; d52b4 <_Z9heatIndexff+0x1c4>
   d511c:	eddf 7a66 	vldr	s15, [pc, #408]	; d52b8 <_Z9heatIndexff+0x1c8>
   d5120:	eddf 6a66 	vldr	s13, [pc, #408]	; d52bc <_Z9heatIndexff+0x1cc>
    float TF = (TC * 1.8) + 32.0;                // Need to convert to Farenheit for the calculations
   d5124:	ee08 0a10 	vmov	s16, r0
    float simpleHeatIndex = ((c10 * ((TF+c11+(TF-c12)*c13) + (R*c14))) -32.0) / 1.8;
   d5128:	ee38 7a47 	vsub.f32	s14, s16, s14
   d512c:	ee78 7a27 	vadd.f32	s15, s16, s15
   d5130:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
   d5134:	eee7 7a26 	vfma.f32	s15, s14, s13
   d5138:	ed9f 7a61 	vldr	s14, [pc, #388]	; d52c0 <_Z9heatIndexff+0x1d0>
   d513c:	eeea 7a07 	vfma.f32	s15, s20, s14
   d5140:	ee67 7aa8 	vmul.f32	s15, s15, s17
   d5144:	ee17 0a90 	vmov	r0, s15
   d5148:	f009 ffd4 	bl	df0f4 <__aeabi_f2d>
   d514c:	4b58      	ldr	r3, [pc, #352]	; (d52b0 <_Z9heatIndexff+0x1c0>)
   d514e:	2200      	movs	r2, #0
   d5150:	f009 fe70 	bl	dee34 <__aeabi_dsub>
   d5154:	a354      	add	r3, pc, #336	; (adr r3, d52a8 <_Z9heatIndexff+0x1b8>)
   d5156:	e9d3 2300 	ldrd	r2, r3, [r3]
   d515a:	f00a f94d 	bl	df3f8 <__aeabi_ddiv>
   d515e:	f00a fb19 	bl	df794 <__aeabi_d2f>
   d5162:	ee00 0a10 	vmov	s0, r0
    if (((TF+simpleHeatIndex)/2) > 80.0) {
   d5166:	ee78 7a00 	vadd.f32	s15, s16, s0
   d516a:	eddf 6a56 	vldr	s13, [pc, #344]	; d52c4 <_Z9heatIndexff+0x1d4>
   d516e:	ee67 7aa8 	vmul.f32	s15, s15, s17
   d5172:	eef4 7ae6 	vcmpe.f32	s15, s13
   d5176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d517a:	f340 8087 	ble.w	d528c <_Z9heatIndexff+0x19c>
      float A = (( c5 * TF) + c2) * TF + c1;
   d517e:	ed9f 7a52 	vldr	s14, [pc, #328]	; d52c8 <_Z9heatIndexff+0x1d8>
   d5182:	eddf 7a52 	vldr	s15, [pc, #328]	; d52cc <_Z9heatIndexff+0x1dc>
   d5186:	ed9f 9a52 	vldr	s18, [pc, #328]	; d52d0 <_Z9heatIndexff+0x1e0>
      float C = (((c9 * TF) + c8) * TF + c6) * R * R;
   d518a:	eddf 9a52 	vldr	s19, [pc, #328]	; d52d4 <_Z9heatIndexff+0x1e4>
      float A = (( c5 * TF) + c2) * TF + c1;
   d518e:	eee8 7a07 	vfma.f32	s15, s16, s14
      float B = (((c7 * TF) + c4) * TF + c3) * R;
   d5192:	ed9f 7a51 	vldr	s14, [pc, #324]	; d52d8 <_Z9heatIndexff+0x1e8>
      float A = (( c5 * TF) + c2) * TF + c1;
   d5196:	eea7 9a88 	vfma.f32	s18, s15, s16
      float B = (((c7 * TF) + c4) * TF + c3) * R;
   d519a:	eddf 7a50 	vldr	s15, [pc, #320]	; d52dc <_Z9heatIndexff+0x1ec>
   d519e:	eee8 7a07 	vfma.f32	s15, s16, s14
      float A = (( c5 * TF) + c2) * TF + c1;
   d51a2:	eef0 aa49 	vmov.f32	s21, s18
      float B = (((c7 * TF) + c4) * TF + c3) * R;
   d51a6:	ed9f 9a4e 	vldr	s18, [pc, #312]	; d52e0 <_Z9heatIndexff+0x1f0>
      float C = (((c9 * TF) + c8) * TF + c6) * R * R;
   d51aa:	ed9f 7a4e 	vldr	s14, [pc, #312]	; d52e4 <_Z9heatIndexff+0x1f4>
      float B = (((c7 * TF) + c4) * TF + c3) * R;
   d51ae:	eea7 9a88 	vfma.f32	s18, s15, s16
      float C = (((c9 * TF) + c8) * TF + c6) * R * R;
   d51b2:	eddf 7a4d 	vldr	s15, [pc, #308]	; d52e8 <_Z9heatIndexff+0x1f8>
   d51b6:	eea8 7a27 	vfma.f32	s14, s16, s15
      if (TF > 80 && TF < 112 && R < 13) {   // Low humidity adjustment
   d51ba:	eeb4 8ae6 	vcmpe.f32	s16, s13
      float C = (((c9 * TF) + c8) * TF + c6) * R * R;
   d51be:	eee7 9a08 	vfma.f32	s19, s14, s16
      if (TF > 80 && TF < 112 && R < 13) {   // Low humidity adjustment
   d51c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      float C = (((c9 * TF) + c8) * TF + c6) * R * R;
   d51c6:	ee69 9a8a 	vmul.f32	s19, s19, s20
      float B = (((c7 * TF) + c4) * TF + c3) * R;
   d51ca:	ee29 9a0a 	vmul.f32	s18, s18, s20
      float C = (((c9 * TF) + c8) * TF + c6) * R * R;
   d51ce:	ee69 9a8a 	vmul.f32	s19, s19, s20
      if (TF > 80 && TF < 112 && R < 13) {   // Low humidity adjustment
   d51d2:	dd5e      	ble.n	d5292 <_Z9heatIndexff+0x1a2>
   d51d4:	eddf 7a45 	vldr	s15, [pc, #276]	; d52ec <_Z9heatIndexff+0x1fc>
   d51d8:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d51dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d51e0:	d55c      	bpl.n	d529c <_Z9heatIndexff+0x1ac>
   d51e2:	eef2 8a0a 	vmov.f32	s17, #42	; 0x41500000  13.0
   d51e6:	eeb4 aae8 	vcmpe.f32	s20, s17
   d51ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d51ee:	d555      	bpl.n	d529c <_Z9heatIndexff+0x1ac>
        D = ((hl1-R)/hl2)*sqrt((hl3-abs(TF-hl4))/17);
   d51f0:	eddf 7a3f 	vldr	s15, [pc, #252]	; d52f0 <_Z9heatIndexff+0x200>
   d51f4:	ee78 7a67 	vsub.f32	s15, s16, s15
   d51f8:	eeb3 0a01 	vmov.f32	s0, #49	; 0x41880000  17.0
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
   d51fc:	eef0 7ae7 	vabs.f32	s15, s15
   d5200:	ee70 7a67 	vsub.f32	s15, s0, s15
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
   d5204:	ee87 0a80 	vdiv.f32	s0, s15, s0
   d5208:	f008 fdcc 	bl	ddda4 <sqrtf>
   d520c:	ee78 8aca 	vsub.f32	s17, s17, s20
   d5210:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
   d5214:	ee68 8aa7 	vmul.f32	s17, s17, s15
   d5218:	ee28 0a80 	vmul.f32	s0, s17, s0
      if (TF > 80 && TF < 87 && R > 85) {  // High humidity adjustment
   d521c:	ed9f 7a35 	vldr	s14, [pc, #212]	; d52f4 <_Z9heatIndexff+0x204>
   d5220:	eeb4 8ac7 	vcmpe.f32	s16, s14
   d5224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5228:	d402      	bmi.n	d5230 <_Z9heatIndexff+0x140>
    float E = 0;
   d522a:	eddf 7a33 	vldr	s15, [pc, #204]	; d52f8 <_Z9heatIndexff+0x208>
   d522e:	e014      	b.n	d525a <_Z9heatIndexff+0x16a>
      if (TF > 80 && TF < 87 && R > 85) {  // High humidity adjustment
   d5230:	eddf 7a32 	vldr	s15, [pc, #200]	; d52fc <_Z9heatIndexff+0x20c>
   d5234:	eeb4 aae7 	vcmpe.f32	s20, s15
   d5238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d523c:	ddf5      	ble.n	d522a <_Z9heatIndexff+0x13a>
        E = ((R-hh1)/hh2)*((hh3-TF)/hh4);
   d523e:	ee7a 0a67 	vsub.f32	s1, s20, s15
   d5242:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
   d5246:	ee37 8a48 	vsub.f32	s16, s14, s16
   d524a:	eec0 7aa6 	vdiv.f32	s15, s1, s13
   d524e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   d5252:	ee88 7a26 	vdiv.f32	s14, s16, s13
   d5256:	ee67 7a87 	vmul.f32	s15, s15, s14
      return ((A + B + C - D + E) - 32.0) / 1.8;
   d525a:	ee3a 9a89 	vadd.f32	s18, s21, s18
   d525e:	ee79 9a29 	vadd.f32	s19, s18, s19
   d5262:	ee39 0ac0 	vsub.f32	s0, s19, s0
   d5266:	ee70 7a27 	vadd.f32	s15, s0, s15
   d526a:	ee17 0a90 	vmov	r0, s15
   d526e:	f009 ff41 	bl	df0f4 <__aeabi_f2d>
   d5272:	4b0f      	ldr	r3, [pc, #60]	; (d52b0 <_Z9heatIndexff+0x1c0>)
   d5274:	2200      	movs	r2, #0
   d5276:	f009 fddd 	bl	dee34 <__aeabi_dsub>
   d527a:	a30b      	add	r3, pc, #44	; (adr r3, d52a8 <_Z9heatIndexff+0x1b8>)
   d527c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5280:	f00a f8ba 	bl	df3f8 <__aeabi_ddiv>
   d5284:	f00a fa86 	bl	df794 <__aeabi_d2f>
   d5288:	ee00 0a10 	vmov	s0, r0
}
   d528c:	ecbd 8b06 	vpop	{d8-d10}
   d5290:	bd08      	pop	{r3, pc}
    float D = 0;
   d5292:	ed9f 0a19 	vldr	s0, [pc, #100]	; d52f8 <_Z9heatIndexff+0x208>
    float E = 0;
   d5296:	eef0 7a40 	vmov.f32	s15, s0
   d529a:	e7de      	b.n	d525a <_Z9heatIndexff+0x16a>
    float D = 0;
   d529c:	ed9f 0a16 	vldr	s0, [pc, #88]	; d52f8 <_Z9heatIndexff+0x208>
   d52a0:	e7bc      	b.n	d521c <_Z9heatIndexff+0x12c>
   d52a2:	bf00      	nop
   d52a4:	f3af 8000 	nop.w
   d52a8:	cccccccd 	.word	0xcccccccd
   d52ac:	3ffccccc 	.word	0x3ffccccc
   d52b0:	40400000 	.word	0x40400000
   d52b4:	42880000 	.word	0x42880000
   d52b8:	42740000 	.word	0x42740000
   d52bc:	3f99999a 	.word	0x3f99999a
   d52c0:	3dc08312 	.word	0x3dc08312
   d52c4:	42a00000 	.word	0x42a00000
   d52c8:	bbe00fe0 	.word	0xbbe00fe0
   d52cc:	40032311 	.word	0x40032311
   d52d0:	c2298419 	.word	0xc2298419
   d52d4:	bd6087f8 	.word	0xbd6087f8
   d52d8:	3aa10dac 	.word	0x3aa10dac
   d52dc:	be662648 	.word	0xbe662648
   d52e0:	41224b16 	.word	0x41224b16
   d52e4:	3a5f8fc8 	.word	0x3a5f8fc8
   d52e8:	b6058bf1 	.word	0xb6058bf1
   d52ec:	42e00000 	.word	0x42e00000
   d52f0:	42be0000 	.word	0x42be0000
   d52f4:	42ae0000 	.word	0x42ae0000
   d52f8:	00000000 	.word	0x00000000
   d52fc:	42aa0000 	.word	0x42aa0000

000d5300 <_Z21publishToGoogleSheetsv>:
void publishToGoogleSheets() {
   d5300:	b510      	push	{r4, lr}
  (sysStatus.solarPowerMode) ? strncpy(solarString,"Solar",sizeof(solarString)) : strncpy(solarString,"Utility",sizeof(solarString));
   d5302:	4c1d      	ldr	r4, [pc, #116]	; (d5378 <_Z21publishToGoogleSheetsv+0x78>)
   d5304:	7962      	ldrb	r2, [r4, #5]
void publishToGoogleSheets() {
   d5306:	b0ce      	sub	sp, #312	; 0x138
  (sysStatus.solarPowerMode) ? strncpy(solarString,"Solar",sizeof(solarString)) : strncpy(solarString,"Utility",sizeof(solarString));
   d5308:	2a00      	cmp	r2, #0
   d530a:	d02f      	beq.n	d536c <_Z21publishToGoogleSheetsv+0x6c>
   d530c:	491b      	ldr	r1, [pc, #108]	; (d537c <_Z21publishToGoogleSheetsv+0x7c>)
   d530e:	2210      	movs	r2, #16
   d5310:	a806      	add	r0, sp, #24
   d5312:	f00a fd6e 	bl	dfdf2 <strncpy>
  (sysStatus.verboseMode) ? strncpy(verboseString, "Verbose",sizeof(verboseString)) : strncpy(verboseString, "Not Verbose",sizeof(verboseString));
   d5316:	7922      	ldrb	r2, [r4, #4]
   d5318:	ab0a      	add	r3, sp, #40	; 0x28
   d531a:	b352      	cbz	r2, d5372 <_Z21publishToGoogleSheetsv+0x72>
   d531c:	4918      	ldr	r1, [pc, #96]	; (d5380 <_Z21publishToGoogleSheetsv+0x80>)
   d531e:	2210      	movs	r2, #16
   d5320:	4618      	mov	r0, r3
   d5322:	f00a fd66 	bl	dfdf2 <strncpy>
  snprintf(data, sizeof(data), "[\"%s\",\"%s\",\"%s\",\"0:00\",\"24:00\",\"Environment\",\"%s\",\"%i sec\",\"%i%%\"]", solarString, lowPowerModeStr, currentOffsetStr, verboseString, current.maxConnectTime, current.minBatteryLevel);
   d5326:	4a17      	ldr	r2, [pc, #92]	; (d5384 <_Z21publishToGoogleSheetsv+0x84>)
   d5328:	4b17      	ldr	r3, [pc, #92]	; (d5388 <_Z21publishToGoogleSheetsv+0x88>)
   d532a:	6911      	ldr	r1, [r2, #16]
   d532c:	9104      	str	r1, [sp, #16]
   d532e:	8992      	ldrh	r2, [r2, #12]
   d5330:	9301      	str	r3, [sp, #4]
   d5332:	4b16      	ldr	r3, [pc, #88]	; (d538c <_Z21publishToGoogleSheetsv+0x8c>)
   d5334:	9300      	str	r3, [sp, #0]
   d5336:	e9cd 0202 	strd	r0, r2, [sp, #8]
   d533a:	ab06      	add	r3, sp, #24
   d533c:	4a14      	ldr	r2, [pc, #80]	; (d5390 <_Z21publishToGoogleSheetsv+0x90>)
   d533e:	f44f 7180 	mov.w	r1, #256	; 0x100
   d5342:	a80e      	add	r0, sp, #56	; 0x38
   d5344:	f005 f886 	bl	da454 <snprintf>
  PublishQueuePosix::instance().publish("GoogleSheetsExport", data, PRIVATE);
   d5348:	f003 fc2e 	bl	d8ba8 <_ZN17PublishQueuePosix8instanceEv>
   d534c:	2300      	movs	r3, #0
   d534e:	f88d 3000 	strb.w	r3, [sp]
   d5352:	4b10      	ldr	r3, [pc, #64]	; (d5394 <_Z21publishToGoogleSheetsv+0x94>)
   d5354:	4910      	ldr	r1, [pc, #64]	; (d5398 <_Z21publishToGoogleSheetsv+0x98>)
   d5356:	781b      	ldrb	r3, [r3, #0]
   d5358:	aa0e      	add	r2, sp, #56	; 0x38
   d535a:	f7ff fe01 	bl	d4f60 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  Log.info("published: %s", data);
   d535e:	490f      	ldr	r1, [pc, #60]	; (d539c <_Z21publishToGoogleSheetsv+0x9c>)
   d5360:	480f      	ldr	r0, [pc, #60]	; (d53a0 <_Z21publishToGoogleSheetsv+0xa0>)
   d5362:	aa0e      	add	r2, sp, #56	; 0x38
   d5364:	f7ff fdce 	bl	d4f04 <_ZNK5spark6Logger4infoEPKcz>
}
   d5368:	b04e      	add	sp, #312	; 0x138
   d536a:	bd10      	pop	{r4, pc}
  (sysStatus.solarPowerMode) ? strncpy(solarString,"Solar",sizeof(solarString)) : strncpy(solarString,"Utility",sizeof(solarString));
   d536c:	490d      	ldr	r1, [pc, #52]	; (d53a4 <_Z21publishToGoogleSheetsv+0xa4>)
   d536e:	2210      	movs	r2, #16
   d5370:	e7ce      	b.n	d5310 <_Z21publishToGoogleSheetsv+0x10>
  (sysStatus.verboseMode) ? strncpy(verboseString, "Verbose",sizeof(verboseString)) : strncpy(verboseString, "Not Verbose",sizeof(verboseString));
   d5372:	490d      	ldr	r1, [pc, #52]	; (d53a8 <_Z21publishToGoogleSheetsv+0xa8>)
   d5374:	2210      	movs	r2, #16
   d5376:	e7d3      	b.n	d5320 <_Z21publishToGoogleSheetsv+0x20>
   d5378:	2003e3d8 	.word	0x2003e3d8
   d537c:	000e0336 	.word	0x000e0336
   d5380:	000e0348 	.word	0x000e0348
   d5384:	2003e2ec 	.word	0x2003e2ec
   d5388:	2003e305 	.word	0x2003e305
   d538c:	2003e384 	.word	0x2003e384
   d5390:	000e0350 	.word	0x000e0350
   d5394:	2003e1f4 	.word	0x2003e1f4
   d5398:	000e0393 	.word	0x000e0393
   d539c:	000e03a6 	.word	0x000e03a6
   d53a0:	2003e544 	.word	0x2003e544
   d53a4:	000e033c 	.word	0x000e033c
   d53a8:	000e0344 	.word	0x000e0344

000d53ac <_Z7sendNow6String>:
{
   d53ac:	b508      	push	{r3, lr}
   d53ae:	4905      	ldr	r1, [pc, #20]	; (d53c4 <_Z7sendNow6String+0x18>)
   d53b0:	f007 fcfa 	bl	dcda8 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d53b4:	b128      	cbz	r0, d53c2 <_Z7sendNow6String+0x16>
    publishToGoogleSheets();                                         // Send data to Google Sheets on Product Status
   d53b6:	f7ff ffa3 	bl	d5300 <_Z21publishToGoogleSheetsv>
    state = REPORTING_STATE;
   d53ba:	4b03      	ldr	r3, [pc, #12]	; (d53c8 <_Z7sendNow6String+0x1c>)
   d53bc:	2206      	movs	r2, #6
   d53be:	701a      	strb	r2, [r3, #0]
    return 1;
   d53c0:	2001      	movs	r0, #1
}
   d53c2:	bd08      	pop	{r3, pc}
   d53c4:	000e01fa 	.word	0x000e01fa
   d53c8:	2003e3cd 	.word	0x2003e3cd

000d53cc <_Z16isItSafeToChargev>:
{         
   d53cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (current.temperature < 36 || current.temperature > 100 )  {       // Reference: https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures (32 to 113 but with safety)
   d53ce:	4d10      	ldr	r5, [pc, #64]	; (d5410 <_Z16isItSafeToChargev+0x44>)
  PMIC pmic(true);                                 
   d53d0:	2101      	movs	r1, #1
   d53d2:	a801      	add	r0, sp, #4
   d53d4:	f007 f9c1 	bl	dc75a <_ZN4PMICC1Eb>
  if (current.temperature < 36 || current.temperature > 100 )  {       // Reference: https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures (32 to 113 but with safety)
   d53d8:	686b      	ldr	r3, [r5, #4]
   d53da:	3b24      	subs	r3, #36	; 0x24
   d53dc:	2b40      	cmp	r3, #64	; 0x40
    pmic.disableCharging();                                            // It is too cold or too hot to safely charge the battery
   d53de:	a801      	add	r0, sp, #4
  if (current.temperature < 36 || current.temperature > 100 )  {       // Reference: https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures (32 to 113 but with safety)
   d53e0:	d90c      	bls.n	d53fc <_Z16isItSafeToChargev+0x30>
    pmic.disableCharging();                                            // It is too cold or too hot to safely charge the battery
   d53e2:	f007 fa4d 	bl	dc880 <_ZN4PMIC15disableChargingEv>
    sysStatus.batteryState = 1;                                        // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   d53e6:	4a0b      	ldr	r2, [pc, #44]	; (d5414 <_Z16isItSafeToChargev+0x48>)
   d53e8:	2301      	movs	r3, #1
   d53ea:	7313      	strb	r3, [r2, #12]
    current.alerts = 1;                                                // Set a value of 1 indicating that it is not safe to charge due to high / low temps
   d53ec:	60ab      	str	r3, [r5, #8]
    return false;
   d53ee:	2400      	movs	r4, #0
  PMIC pmic(true);                                 
   d53f0:	a801      	add	r0, sp, #4
   d53f2:	f007 f9c1 	bl	dc778 <_ZN4PMICD1Ev>
}
   d53f6:	4620      	mov	r0, r4
   d53f8:	b003      	add	sp, #12
   d53fa:	bd30      	pop	{r4, r5, pc}
    pmic.enableCharging();                                             // It is safe to charge the battery
   d53fc:	f007 fa29 	bl	dc852 <_ZN4PMIC14enableChargingEv>
    if (current.alerts == 1) current.alerts = 0;                       // Reset the alerts flag if we previously had disabled charging
   d5400:	68ac      	ldr	r4, [r5, #8]
   d5402:	2c01      	cmp	r4, #1
   d5404:	bf06      	itte	eq
   d5406:	2300      	moveq	r3, #0
   d5408:	60ab      	streq	r3, [r5, #8]
    return true;
   d540a:	2401      	movne	r4, #1
   d540c:	e7f0      	b.n	d53f0 <_Z16isItSafeToChargev+0x24>
   d540e:	bf00      	nop
   d5410:	2003e2ec 	.word	0x2003e2ec
   d5414:	2003e3d8 	.word	0x2003e3d8

000d5418 <_Z17getSignalStrengthv>:
void getSignalStrength() {
   d5418:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d541a:	4d19      	ldr	r5, [pc, #100]	; (d5480 <_Z17getSignalStrengthv+0x68>)
   d541c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   d541e:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d5420:	ac04      	add	r4, sp, #16
   d5422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5424:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5426:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5428:	e895 0003 	ldmia.w	r5, {r0, r1}
   d542c:	e884 0003 	stmia.w	r4, {r0, r1}
  CellularSignal sig = Cellular.RSSI();
   d5430:	4914      	ldr	r1, [pc, #80]	; (d5484 <_Z17getSignalStrengthv+0x6c>)
   d5432:	a80e      	add	r0, sp, #56	; 0x38
   d5434:	f005 f8b8 	bl	da5a8 <_ZN5spark13CellularClass4RSSIEv>
  auto rat = sig.getAccessTechnology();
   d5438:	a80e      	add	r0, sp, #56	; 0x38
   d543a:	f005 f908 	bl	da64e <_ZNK14CellularSignal19getAccessTechnologyEv>
   d543e:	4604      	mov	r4, r0
  float strengthPercentage = sig.getStrength();
   d5440:	a80e      	add	r0, sp, #56	; 0x38
   d5442:	f005 f91f 	bl	da684 <_ZNK14CellularSignal11getStrengthEv>
  float qualityPercentage = sig.getQuality();
   d5446:	a80e      	add	r0, sp, #56	; 0x38
  float strengthPercentage = sig.getStrength();
   d5448:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   d544c:	f005 f94a 	bl	da6e4 <_ZNK14CellularSignal10getQualityEv>
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d5450:	ab18      	add	r3, sp, #96	; 0x60
  float qualityPercentage = sig.getQuality();
   d5452:	ee10 0a10 	vmov	r0, s0
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d5456:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d545a:	f009 fe4b 	bl	df0f4 <__aeabi_f2d>
   d545e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d5462:	4628      	mov	r0, r5
   d5464:	f009 fe46 	bl	df0f4 <__aeabi_f2d>
   d5468:	e9cd 0100 	strd	r0, r1, [sp]
   d546c:	4a06      	ldr	r2, [pc, #24]	; (d5488 <_Z17getSignalStrengthv+0x70>)
   d546e:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d5472:	4806      	ldr	r0, [pc, #24]	; (d548c <_Z17getSignalStrengthv+0x74>)
   d5474:	2140      	movs	r1, #64	; 0x40
   d5476:	f004 ffed 	bl	da454 <snprintf>
}
   d547a:	b019      	add	sp, #100	; 0x64
   d547c:	bd30      	pop	{r4, r5, pc}
   d547e:	bf00      	nop
   d5480:	000e0950 	.word	0x000e0950
   d5484:	2003e470 	.word	0x2003e470
   d5488:	000e03b4 	.word	0x000e03b4
   d548c:	2003e198 	.word	0x2003e198

000d5490 <_Z14getTemperaturev>:
int getTemperature() {                                                // Get temperature and make sure we are not getting a spurrious value
   d5490:	b508      	push	{r3, lr}
  int reading = analogRead(tmp36Pin);                                 //getting the voltage reading from the temperature sensor
   d5492:	200f      	movs	r0, #15
   d5494:	f008 fa2d 	bl	dd8f2 <analogRead>
  if (reading < 400) {                                                // This ocrresponds to 0 degrees - less than this and we should take another reading to be sure
   d5498:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
   d549c:	da05      	bge.n	d54aa <_Z14getTemperaturev+0x1a>
    delay(50);
   d549e:	2032      	movs	r0, #50	; 0x32
   d54a0:	f005 f828 	bl	da4f4 <delay>
    reading = analogRead(tmp36Pin);
   d54a4:	200f      	movs	r0, #15
   d54a6:	f008 fa24 	bl	dd8f2 <analogRead>
  float voltage = reading * 3.3;                                      // converting that reading to voltage, for 3.3v arduino use 3.3
   d54aa:	f009 fe11 	bl	df0d0 <__aeabi_i2d>
   d54ae:	a320      	add	r3, pc, #128	; (adr r3, d5530 <_Z14getTemperaturev+0xa0>)
   d54b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d54b4:	f009 fe76 	bl	df1a4 <__aeabi_dmul>
   d54b8:	f00a f96c 	bl	df794 <__aeabi_d2f>
  int temperatureC = int(((voltage - 0.5) * 100));                    //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
   d54bc:	eddf 7a14 	vldr	s15, [pc, #80]	; d5510 <_Z14getTemperaturev+0x80>
   d54c0:	ee07 0a10 	vmov	s14, r0
   d54c4:	ee67 7a27 	vmul.f32	s15, s14, s15
   d54c8:	ee17 0a90 	vmov	r0, s15
   d54cc:	f009 fe12 	bl	df0f4 <__aeabi_f2d>
   d54d0:	4b10      	ldr	r3, [pc, #64]	; (d5514 <_Z14getTemperaturev+0x84>)
   d54d2:	2200      	movs	r2, #0
   d54d4:	f009 fcae 	bl	dee34 <__aeabi_dsub>
   d54d8:	4b0f      	ldr	r3, [pc, #60]	; (d5518 <_Z14getTemperaturev+0x88>)
   d54da:	2200      	movs	r2, #0
   d54dc:	f009 fe62 	bl	df1a4 <__aeabi_dmul>
   d54e0:	f00a f910 	bl	df704 <__aeabi_d2iz>
  current.temperature = int((temperatureC * 9.0 / 5.0) + 32.0);              // now convert to Fahrenheit
   d54e4:	f009 fdf4 	bl	df0d0 <__aeabi_i2d>
   d54e8:	4b0c      	ldr	r3, [pc, #48]	; (d551c <_Z14getTemperaturev+0x8c>)
   d54ea:	2200      	movs	r2, #0
   d54ec:	f009 fe5a 	bl	df1a4 <__aeabi_dmul>
   d54f0:	4b0b      	ldr	r3, [pc, #44]	; (d5520 <_Z14getTemperaturev+0x90>)
   d54f2:	2200      	movs	r2, #0
   d54f4:	f009 ff80 	bl	df3f8 <__aeabi_ddiv>
   d54f8:	4b0a      	ldr	r3, [pc, #40]	; (d5524 <_Z14getTemperaturev+0x94>)
   d54fa:	2200      	movs	r2, #0
   d54fc:	f009 fc9c 	bl	dee38 <__adddf3>
   d5500:	f00a f900 	bl	df704 <__aeabi_d2iz>
   d5504:	4b08      	ldr	r3, [pc, #32]	; (d5528 <_Z14getTemperaturev+0x98>)
   d5506:	6058      	str	r0, [r3, #4]
  currentCountsWriteNeeded=true;
   d5508:	4b08      	ldr	r3, [pc, #32]	; (d552c <_Z14getTemperaturev+0x9c>)
   d550a:	2201      	movs	r2, #1
   d550c:	701a      	strb	r2, [r3, #0]
}
   d550e:	bd08      	pop	{r3, pc}
   d5510:	39800000 	.word	0x39800000
   d5514:	3fe00000 	.word	0x3fe00000
   d5518:	40590000 	.word	0x40590000
   d551c:	40220000 	.word	0x40220000
   d5520:	40140000 	.word	0x40140000
   d5524:	40400000 	.word	0x40400000
   d5528:	2003e2ec 	.word	0x2003e2ec
   d552c:	2003e304 	.word	0x2003e304
   d5530:	66666666 	.word	0x66666666
   d5534:	400a6666 	.word	0x400a6666

000d5538 <_Z14setPowerConfigv>:
int setPowerConfig() {
   d5538:	b500      	push	{lr}
   d553a:	b091      	sub	sp, #68	; 0x44
  SystemPowerConfiguration conf;
   d553c:	4668      	mov	r0, sp
   d553e:	f7ff fc0a 	bl	d4d56 <_ZN8particle24SystemPowerConfigurationC1Ev>
  System.setPowerConfiguration(SystemPowerConfiguration());  // To restore the default configuration
   d5542:	a808      	add	r0, sp, #32
   d5544:	f7ff fc07 	bl	d4d56 <_ZN8particle24SystemPowerConfigurationC1Ev>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d5548:	2100      	movs	r1, #0
   d554a:	a808      	add	r0, sp, #32
   d554c:	f004 fe6c 	bl	da228 <system_power_management_set_config>
  if (sysStatus.solarPowerMode) {
   d5550:	4b13      	ldr	r3, [pc, #76]	; (d55a0 <_Z14setPowerConfigv+0x68>)
   d5552:	7959      	ldrb	r1, [r3, #5]
   d5554:	b1a1      	cbz	r1, d5580 <_Z14setPowerConfigv+0x48>

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d5556:	f241 33d8 	movw	r3, #5080	; 0x13d8
   d555a:	f8ad 3006 	strh.w	r3, [sp, #6]
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d555e:	4b11      	ldr	r3, [pc, #68]	; (d55a4 <_Z14setPowerConfigv+0x6c>)
   d5560:	9302      	str	r3, [sp, #8]
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d5562:	f241 0370 	movw	r3, #4208	; 0x1070
   d5566:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d556a:	9b00      	ldr	r3, [sp, #0]
   d556c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d5570:	9300      	str	r3, [sp, #0]
   d5572:	2100      	movs	r1, #0
   d5574:	4668      	mov	r0, sp
   d5576:	f004 fe57 	bl	da228 <system_power_management_set_config>
}
   d557a:	b011      	add	sp, #68	; 0x44
   d557c:	f85d fb04 	ldr.w	pc, [sp], #4
        conf_.vin_min_voltage = voltage;
   d5580:	f241 0370 	movw	r3, #4208	; 0x1070
   d5584:	f8ad 3006 	strh.w	r3, [sp, #6]
        conf_.vin_max_current = current;
   d5588:	4b07      	ldr	r3, [pc, #28]	; (d55a8 <_Z14setPowerConfigv+0x70>)
   d558a:	9302      	str	r3, [sp, #8]
        conf_.termination_voltage = voltage;
   d558c:	f241 0310 	movw	r3, #4112	; 0x1010
   d5590:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.flags |= f.value();
   d5594:	9b00      	ldr	r3, [sp, #0]
   d5596:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d559a:	9300      	str	r3, [sp, #0]
   d559c:	e7ea      	b.n	d5574 <_Z14setPowerConfigv+0x3c>
   d559e:	bf00      	nop
   d55a0:	2003e3d8 	.word	0x2003e3d8
   d55a4:	04000384 	.word	0x04000384
   d55a8:	03840384 	.word	0x03840384

000d55ac <_Z17checkSystemValuesv>:
void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range 
   d55ac:	b510      	push	{r4, lr}
  if (sysStatus.sensorType > 1) {                                   // Values are 0 for Pressure and 1 for PIR
   d55ae:	4b2d      	ldr	r3, [pc, #180]	; (d5664 <_Z17checkSystemValuesv+0xb8>)
   d55b0:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
   d55b4:	2a01      	cmp	r2, #1
   d55b6:	d90c      	bls.n	d55d2 <_Z17checkSystemValuesv+0x26>
    sysStatus.sensorType = 0;
   d55b8:	2200      	movs	r2, #0
   d55ba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    strncpy(sensorTypeConfigStr,"Pressure Sensor",sizeof(sensorTypeConfigStr));
   d55be:	4a2a      	ldr	r2, [pc, #168]	; (d5668 <_Z17checkSystemValuesv+0xbc>)
   d55c0:	492a      	ldr	r1, [pc, #168]	; (d566c <_Z17checkSystemValuesv+0xc0>)
   d55c2:	f102 0010 	add.w	r0, r2, #16
   d55c6:	f852 4b04 	ldr.w	r4, [r2], #4
   d55ca:	f841 4b04 	str.w	r4, [r1], #4
   d55ce:	4282      	cmp	r2, r0
   d55d0:	d1f9      	bne.n	d55c6 <_Z17checkSystemValuesv+0x1a>
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d55d2:	691a      	ldr	r2, [r3, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d55d4:	edd3 7a05 	vldr	s15, [r3, #20]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d55d8:	2aff      	cmp	r2, #255	; 0xff
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d55da:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d55de:	bf88      	it	hi
   d55e0:	2200      	movhi	r2, #0
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d55e2:	eef4 7ac7 	vcmpe.f32	s15, s14
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d55e6:	bf88      	it	hi
   d55e8:	611a      	strhi	r2, [r3, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d55ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d55ee:	d406      	bmi.n	d55fe <_Z17checkSystemValuesv+0x52>
   d55f0:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
   d55f4:	eef4 7ac7 	vcmpe.f32	s15, s14
   d55f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d55fc:	dd01      	ble.n	d5602 <_Z17checkSystemValuesv+0x56>
   d55fe:	4a1c      	ldr	r2, [pc, #112]	; (d5670 <_Z17checkSystemValuesv+0xc4>)
   d5600:	615a      	str	r2, [r3, #20]
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
   d5602:	edd3 7a06 	vldr	s15, [r3, #24]
   d5606:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d560a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d560e:	d406      	bmi.n	d561e <_Z17checkSystemValuesv+0x72>
   d5610:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d5614:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d561c:	dd02      	ble.n	d5624 <_Z17checkSystemValuesv+0x78>
   d561e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   d5622:	619a      	str	r2, [r3, #24]
  if (sysStatus.openTime < 0 || sysStatus.openTime > 12) sysStatus.openTime = 0;
   d5624:	7f1a      	ldrb	r2, [r3, #28]
  if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = 0;
   d5626:	8d19      	ldrh	r1, [r3, #40]	; 0x28
  if (sysStatus.openTime < 0 || sysStatus.openTime > 12) sysStatus.openTime = 0;
   d5628:	2a0c      	cmp	r2, #12
   d562a:	bf84      	itt	hi
   d562c:	2200      	movhi	r2, #0
   d562e:	771a      	strbhi	r2, [r3, #28]
  if (sysStatus.closeTime < 12 || sysStatus.closeTime > 24) sysStatus.closeTime = 24;
   d5630:	7f5a      	ldrb	r2, [r3, #29]
   d5632:	3a0c      	subs	r2, #12
   d5634:	2a0c      	cmp	r2, #12
   d5636:	bf84      	itt	hi
   d5638:	2218      	movhi	r2, #24
   d563a:	775a      	strbhi	r2, [r3, #29]
  if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = 0;
   d563c:	4a0d      	ldr	r2, [pc, #52]	; (d5674 <_Z17checkSystemValuesv+0xc8>)
   d563e:	6812      	ldr	r2, [r2, #0]
   d5640:	4291      	cmp	r1, r2
   d5642:	bf84      	itt	hi
   d5644:	2100      	movhi	r1, #0
   d5646:	8519      	strhhi	r1, [r3, #40]	; 0x28
  if (current.maxConnectTime > connectMaxTimeSec) {
   d5648:	4b0b      	ldr	r3, [pc, #44]	; (d5678 <_Z17checkSystemValuesv+0xcc>)
   d564a:	8999      	ldrh	r1, [r3, #12]
   d564c:	428a      	cmp	r2, r1
   d564e:	d204      	bcs.n	d565a <_Z17checkSystemValuesv+0xae>
    current.maxConnectTime = 0;
   d5650:	2200      	movs	r2, #0
   d5652:	819a      	strh	r2, [r3, #12]
    currentCountsWriteNeeded = true;
   d5654:	4b09      	ldr	r3, [pc, #36]	; (d567c <_Z17checkSystemValuesv+0xd0>)
   d5656:	2201      	movs	r2, #1
   d5658:	701a      	strb	r2, [r3, #0]
  systemStatusWriteNeeded = true;
   d565a:	4b09      	ldr	r3, [pc, #36]	; (d5680 <_Z17checkSystemValuesv+0xd4>)
   d565c:	2201      	movs	r2, #1
   d565e:	701a      	strb	r2, [r3, #0]
}
   d5660:	bd10      	pop	{r4, pc}
   d5662:	bf00      	nop
   d5664:	2003e3d8 	.word	0x2003e3d8
   d5668:	000e03cd 	.word	0x000e03cd
   d566c:	2003e3bd 	.word	0x2003e3bd
   d5670:	c0a00000 	.word	0xc0a00000
   d5674:	2003e074 	.word	0x2003e074
   d5678:	2003e2ec 	.word	0x2003e2ec
   d567c:	2003e304 	.word	0x2003e304
   d5680:	2003e404 	.word	0x2003e404

000d5684 <_Z20makeUpStringMessagesv>:
  if (sysStatus.lowPowerMode) strncpy(lowPowerModeStr,"Low Power", sizeof(lowPowerModeStr));
   d5684:	4b04      	ldr	r3, [pc, #16]	; (d5698 <_Z20makeUpStringMessagesv+0x14>)
   d5686:	799b      	ldrb	r3, [r3, #6]
   d5688:	2210      	movs	r2, #16
   d568a:	b11b      	cbz	r3, d5694 <_Z20makeUpStringMessagesv+0x10>
   d568c:	4903      	ldr	r1, [pc, #12]	; (d569c <_Z20makeUpStringMessagesv+0x18>)
  else strncpy(lowPowerModeStr,"Not Low Power", sizeof(lowPowerModeStr));
   d568e:	4804      	ldr	r0, [pc, #16]	; (d56a0 <_Z20makeUpStringMessagesv+0x1c>)
   d5690:	f00a bbaf 	b.w	dfdf2 <strncpy>
   d5694:	4903      	ldr	r1, [pc, #12]	; (d56a4 <_Z20makeUpStringMessagesv+0x20>)
   d5696:	e7fa      	b.n	d568e <_Z20makeUpStringMessagesv+0xa>
   d5698:	2003e3d8 	.word	0x2003e3d8
   d569c:	000e03e1 	.word	0x000e03e1
   d56a0:	2003e384 	.word	0x2003e384
   d56a4:	000e03dd 	.word	0x000e03dd

000d56a8 <_Z15resetEverythingv>:
void resetEverything() {                                              // The device is waking up in a new day or is a new install
   d56a8:	b570      	push	{r4, r5, r6, lr}
  current.lastReportTime = Time.now();                                 // Set the time context to the new day
   d56aa:	4c19      	ldr	r4, [pc, #100]	; (d5710 <_Z15resetEverythingv+0x68>)
  currentCountsWriteNeeded = true;
   d56ac:	4d19      	ldr	r5, [pc, #100]	; (d5714 <_Z15resetEverythingv+0x6c>)
void resetEverything() {                                              // The device is waking up in a new day or is a new install
   d56ae:	b092      	sub	sp, #72	; 0x48
  current.lastReportTime = Time.now();                                 // Set the time context to the new day
   d56b0:	f007 fe93 	bl	dd3da <_ZN9TimeClass3nowEv>
  currentCountsWriteNeeded = true;
   d56b4:	2101      	movs	r1, #1
   d56b6:	7029      	strb	r1, [r5, #0]
  if (current.alerts ==7 || current.updateAttempts >=3) {             // We had tried to update enough times that we disabled updates for the day - resetting
   d56b8:	68a1      	ldr	r1, [r4, #8]
  current.lastReportTime = Time.now();                                 // Set the time context to the new day
   d56ba:	6020      	str	r0, [r4, #0]
  current.maxConnectTime = 0;                                         // Reset values for this time period
   d56bc:	2200      	movs	r2, #0
   d56be:	81a2      	strh	r2, [r4, #12]
  if (current.alerts ==7 || current.updateAttempts >=3) {             // We had tried to update enough times that we disabled updates for the day - resetting
   d56c0:	2907      	cmp	r1, #7
  current.minBatteryLevel = 100;
   d56c2:	f04f 0264 	mov.w	r2, #100	; 0x64
   d56c6:	6122      	str	r2, [r4, #16]
  if (current.alerts ==7 || current.updateAttempts >=3) {             // We had tried to update enough times that we disabled updates for the day - resetting
   d56c8:	d002      	beq.n	d56d0 <_Z15resetEverythingv+0x28>
   d56ca:	7d23      	ldrb	r3, [r4, #20]
   d56cc:	2b02      	cmp	r3, #2
   d56ce:	d919      	bls.n	d5704 <_Z15resetEverythingv+0x5c>
        return value;
    }

    static inline void set_flag(system_flag_t flag, uint8_t value)
    {
        system_set_flag(flag, value, nullptr);
   d56d0:	2101      	movs	r1, #1
   d56d2:	2200      	movs	r2, #0
   d56d4:	4608      	mov	r0, r1
    current.alerts = 0;   
   d56d6:	2600      	movs	r6, #0
   d56d8:	f004 fd6a 	bl	da1b0 <system_set_flag>
   d56dc:	60a6      	str	r6, [r4, #8]
    snprintf(data, sizeof(data), "{\"alerts\":%i,\"timestamp\":%lu000 }",current.alerts, Time.now());
   d56de:	f007 fe7c 	bl	dd3da <_ZN9TimeClass3nowEv>
   d56e2:	4a0d      	ldr	r2, [pc, #52]	; (d5718 <_Z15resetEverythingv+0x70>)
   d56e4:	9000      	str	r0, [sp, #0]
   d56e6:	4633      	mov	r3, r6
   d56e8:	2140      	movs	r1, #64	; 0x40
   d56ea:	a802      	add	r0, sp, #8
   d56ec:	f004 feb2 	bl	da454 <snprintf>
    PublishQueuePosix::instance().publish("Ubidots_Alert_Hook", data, PRIVATE); // Put in publish queue
   d56f0:	f003 fa5a 	bl	d8ba8 <_ZN17PublishQueuePosix8instanceEv>
   d56f4:	4b09      	ldr	r3, [pc, #36]	; (d571c <_Z15resetEverythingv+0x74>)
   d56f6:	f88d 6000 	strb.w	r6, [sp]
   d56fa:	781b      	ldrb	r3, [r3, #0]
   d56fc:	4908      	ldr	r1, [pc, #32]	; (d5720 <_Z15resetEverythingv+0x78>)
   d56fe:	aa02      	add	r2, sp, #8
   d5700:	f7ff fc2e 	bl	d4f60 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  current.updateAttempts = 0;                                         // Reset the update attempts counter for the day
   d5704:	2300      	movs	r3, #0
   d5706:	7523      	strb	r3, [r4, #20]
  currentCountsWriteNeeded=true;                                      // Make sure that the values are updated in FRAM
   d5708:	2301      	movs	r3, #1
   d570a:	702b      	strb	r3, [r5, #0]
}
   d570c:	b012      	add	sp, #72	; 0x48
   d570e:	bd70      	pop	{r4, r5, r6, pc}
   d5710:	2003e2ec 	.word	0x2003e2ec
   d5714:	2003e304 	.word	0x2003e304
   d5718:	000e022f 	.word	0x000e022f
   d571c:	2003e1f4 	.word	0x2003e1f4
   d5720:	000e0251 	.word	0x000e0251

000d5724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5724:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d5726:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d5728:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d572a:	b17c      	cbz	r4, d574c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d572c:	6863      	ldr	r3, [r4, #4]
   d572e:	3b01      	subs	r3, #1
   d5730:	6063      	str	r3, [r4, #4]
   d5732:	b95b      	cbnz	r3, d574c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d5734:	6823      	ldr	r3, [r4, #0]
   d5736:	4620      	mov	r0, r4
   d5738:	689b      	ldr	r3, [r3, #8]
   d573a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d573c:	68a3      	ldr	r3, [r4, #8]
   d573e:	3b01      	subs	r3, #1
   d5740:	60a3      	str	r3, [r4, #8]
   d5742:	b91b      	cbnz	r3, d574c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d5744:	6823      	ldr	r3, [r4, #0]
   d5746:	4620      	mov	r0, r4
   d5748:	68db      	ldr	r3, [r3, #12]
   d574a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d574c:	4628      	mov	r0, r5
   d574e:	bd38      	pop	{r3, r4, r5, pc}

000d5750 <_Z23recordConnectionDetailsv>:
void  recordConnectionDetails()  {                                     // Whether the connection was successful or not, we will collect and publish metrics
   d5750:	b510      	push	{r4, lr}
  if (sysStatus.lastConnectionDuration > connectMaxTimeSec+1) sysStatus.lastConnectionDuration = 0;
   d5752:	4a1a      	ldr	r2, [pc, #104]	; (d57bc <_Z23recordConnectionDetailsv+0x6c>)
   d5754:	4c1a      	ldr	r4, [pc, #104]	; (d57c0 <_Z23recordConnectionDetailsv+0x70>)
   d5756:	6812      	ldr	r2, [r2, #0]
   d5758:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   d575a:	3201      	adds	r2, #1
   d575c:	4293      	cmp	r3, r2
void  recordConnectionDetails()  {                                     // Whether the connection was successful or not, we will collect and publish metrics
   d575e:	b08c      	sub	sp, #48	; 0x30
  if (sysStatus.lastConnectionDuration > connectMaxTimeSec+1) sysStatus.lastConnectionDuration = 0;
   d5760:	d925      	bls.n	d57ae <_Z23recordConnectionDetailsv+0x5e>
   d5762:	2300      	movs	r3, #0
   d5764:	8523      	strh	r3, [r4, #40]	; 0x28
  snprintf(connectionStr, sizeof(connectionStr),"Connected in %i secs",sysStatus.lastConnectionDuration);                   // Make up connection string and publish
   d5766:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   d5768:	4a16      	ldr	r2, [pc, #88]	; (d57c4 <_Z23recordConnectionDetailsv+0x74>)
   d576a:	2120      	movs	r1, #32
   d576c:	a804      	add	r0, sp, #16
   d576e:	f004 fe71 	bl	da454 <snprintf>
  Log.info(connectionStr);
   d5772:	4815      	ldr	r0, [pc, #84]	; (d57c8 <_Z23recordConnectionDetailsv+0x78>)
   d5774:	a904      	add	r1, sp, #16
   d5776:	f7ff fbc5 	bl	d4f04 <_ZNK5spark6Logger4infoEPKcz>
  if (sysStatus.verboseMode && sysStatus.connectedStatus) {            // If we connected, let's publish the connection time
   d577a:	7923      	ldrb	r3, [r4, #4]
   d577c:	b183      	cbz	r3, d57a0 <_Z23recordConnectionDetailsv+0x50>
   d577e:	78e3      	ldrb	r3, [r4, #3]
   d5780:	b173      	cbz	r3, d57a0 <_Z23recordConnectionDetailsv+0x50>
        return waitConditionWhile(_condition, []{ return true; });
   d5782:	f7ff fa5a 	bl	d4c3a <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
    Particle.publish("Cellular",connectionStr,PRIVATE);
   d5786:	2300      	movs	r3, #0
   d5788:	f88d 3000 	strb.w	r3, [sp]
   d578c:	4b0f      	ldr	r3, [pc, #60]	; (d57cc <_Z23recordConnectionDetailsv+0x7c>)
   d578e:	4910      	ldr	r1, [pc, #64]	; (d57d0 <_Z23recordConnectionDetailsv+0x80>)
   d5790:	781b      	ldrb	r3, [r3, #0]
   d5792:	a802      	add	r0, sp, #8
   d5794:	aa04      	add	r2, sp, #16
   d5796:	f7ff faa3 	bl	d4ce0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d579a:	a803      	add	r0, sp, #12
   d579c:	f7ff ffc2 	bl	d5724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  systemStatusWriteNeeded = true;
   d57a0:	4a0c      	ldr	r2, [pc, #48]	; (d57d4 <_Z23recordConnectionDetailsv+0x84>)
   d57a2:	2301      	movs	r3, #1
   d57a4:	7013      	strb	r3, [r2, #0]
  currentCountsWriteNeeded = true;
   d57a6:	4a0c      	ldr	r2, [pc, #48]	; (d57d8 <_Z23recordConnectionDetailsv+0x88>)
   d57a8:	7013      	strb	r3, [r2, #0]
}
   d57aa:	b00c      	add	sp, #48	; 0x30
   d57ac:	bd10      	pop	{r4, pc}
  else if (sysStatus.lastConnectionDuration > current.maxConnectTime) current.maxConnectTime = sysStatus.lastConnectionDuration; // Keep track of longest each day
   d57ae:	4a0b      	ldr	r2, [pc, #44]	; (d57dc <_Z23recordConnectionDetailsv+0x8c>)
   d57b0:	8991      	ldrh	r1, [r2, #12]
   d57b2:	4299      	cmp	r1, r3
   d57b4:	bf38      	it	cc
   d57b6:	8193      	strhcc	r3, [r2, #12]
   d57b8:	e7d5      	b.n	d5766 <_Z23recordConnectionDetailsv+0x16>
   d57ba:	bf00      	nop
   d57bc:	2003e074 	.word	0x2003e074
   d57c0:	2003e3d8 	.word	0x2003e3d8
   d57c4:	000e03eb 	.word	0x000e03eb
   d57c8:	2003e544 	.word	0x2003e544
   d57cc:	2003e1f4 	.word	0x2003e1f4
   d57d0:	000e0400 	.word	0x000e0400
   d57d4:	2003e404 	.word	0x2003e404
   d57d8:	2003e304 	.word	0x2003e304
   d57dc:	2003e2ec 	.word	0x2003e2ec

000d57e0 <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d57e0:	b530      	push	{r4, r5, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   d57e2:	780b      	ldrb	r3, [r1, #0]
   d57e4:	4d1f      	ldr	r5, [pc, #124]	; (d5864 <_Z14UbidotsHandlerPKcS0_+0x84>)
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d57e6:	b095      	sub	sp, #84	; 0x54
   d57e8:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   d57ea:	b9c3      	cbnz	r3, d581e <_Z14UbidotsHandlerPKcS0_+0x3e>
    snprintf(responseString, sizeof(responseString),"No Data");
   d57ec:	491e      	ldr	r1, [pc, #120]	; (d5868 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d57ee:	a804      	add	r0, sp, #16
   d57f0:	f00a fabf 	bl	dfd72 <strcpy>
  if (sysStatus.verboseMode && sysStatus.connectedStatus) {
   d57f4:	792b      	ldrb	r3, [r5, #4]
   d57f6:	b183      	cbz	r3, d581a <_Z14UbidotsHandlerPKcS0_+0x3a>
   d57f8:	78eb      	ldrb	r3, [r5, #3]
   d57fa:	b173      	cbz	r3, d581a <_Z14UbidotsHandlerPKcS0_+0x3a>
   d57fc:	f7ff fa1d 	bl	d4c3a <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
    Particle.publish("Ubidots Hook", responseString, PRIVATE);
   d5800:	2300      	movs	r3, #0
   d5802:	f88d 3000 	strb.w	r3, [sp]
   d5806:	4b19      	ldr	r3, [pc, #100]	; (d586c <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d5808:	4919      	ldr	r1, [pc, #100]	; (d5870 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d580a:	781b      	ldrb	r3, [r3, #0]
   d580c:	a802      	add	r0, sp, #8
   d580e:	aa04      	add	r2, sp, #16
   d5810:	f7ff fa66 	bl	d4ce0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   d5814:	a803      	add	r0, sp, #12
   d5816:	f7ff ff85 	bl	d5724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d581a:	b015      	add	sp, #84	; 0x54
   d581c:	bd30      	pop	{r4, r5, pc}
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d581e:	4608      	mov	r0, r1
   d5820:	f00a fa1c 	bl	dfc5c <atoi>
   d5824:	28c8      	cmp	r0, #200	; 0xc8
   d5826:	d10d      	bne.n	d5844 <_Z14UbidotsHandlerPKcS0_+0x64>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d5828:	4912      	ldr	r1, [pc, #72]	; (d5874 <_Z14UbidotsHandlerPKcS0_+0x94>)
   d582a:	a804      	add	r0, sp, #16
   d582c:	f00a faa1 	bl	dfd72 <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d5830:	f007 fdd3 	bl	dd3da <_ZN9TimeClass3nowEv>
    systemStatusWriteNeeded = true;
   d5834:	4b10      	ldr	r3, [pc, #64]	; (d5878 <_Z14UbidotsHandlerPKcS0_+0x98>)
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d5836:	6228      	str	r0, [r5, #32]
    systemStatusWriteNeeded = true;
   d5838:	2201      	movs	r2, #1
   d583a:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d583c:	4b0f      	ldr	r3, [pc, #60]	; (d587c <_Z14UbidotsHandlerPKcS0_+0x9c>)
   d583e:	2200      	movs	r2, #0
   d5840:	701a      	strb	r2, [r3, #0]
   d5842:	e7d7      	b.n	d57f4 <_Z14UbidotsHandlerPKcS0_+0x14>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d5844:	4620      	mov	r0, r4
   d5846:	f00a fa09 	bl	dfc5c <atoi>
   d584a:	28c9      	cmp	r0, #201	; 0xc9
   d584c:	d0ec      	beq.n	d5828 <_Z14UbidotsHandlerPKcS0_+0x48>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d584e:	4620      	mov	r0, r4
   d5850:	f00a fa04 	bl	dfc5c <atoi>
   d5854:	4a0a      	ldr	r2, [pc, #40]	; (d5880 <_Z14UbidotsHandlerPKcS0_+0xa0>)
   d5856:	4603      	mov	r3, r0
   d5858:	2140      	movs	r1, #64	; 0x40
   d585a:	a804      	add	r0, sp, #16
   d585c:	f004 fdfa 	bl	da454 <snprintf>
   d5860:	e7c8      	b.n	d57f4 <_Z14UbidotsHandlerPKcS0_+0x14>
   d5862:	bf00      	nop
   d5864:	2003e3d8 	.word	0x2003e3d8
   d5868:	000e0409 	.word	0x000e0409
   d586c:	2003e1f4 	.word	0x2003e1f4
   d5870:	000e0440 	.word	0x000e0440
   d5874:	000e0411 	.word	0x000e0411
   d5878:	2003e404 	.word	0x2003e404
   d587c:	2003e30f 	.word	0x2003e30f
   d5880:	000e0423 	.word	0x000e0423

000d5884 <_Z12hardResetNow6String>:
{
   d5884:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5886:	490e      	ldr	r1, [pc, #56]	; (d58c0 <_Z12hardResetNow6String+0x3c>)
   d5888:	f007 fa8e 	bl	dcda8 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d588c:	b1a8      	cbz	r0, d58ba <_Z12hardResetNow6String+0x36>
    Particle.publish("Reset","Hard Reset in 2 seconds",PRIVATE);
   d588e:	2300      	movs	r3, #0
   d5890:	f88d 3000 	strb.w	r3, [sp]
   d5894:	4b0b      	ldr	r3, [pc, #44]	; (d58c4 <_Z12hardResetNow6String+0x40>)
   d5896:	4a0c      	ldr	r2, [pc, #48]	; (d58c8 <_Z12hardResetNow6String+0x44>)
   d5898:	781b      	ldrb	r3, [r3, #0]
   d589a:	490c      	ldr	r1, [pc, #48]	; (d58cc <_Z12hardResetNow6String+0x48>)
   d589c:	a802      	add	r0, sp, #8
   d589e:	f7ff fa1f 	bl	d4ce0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   d58a2:	a803      	add	r0, sp, #12
   d58a4:	f7ff ff3e 	bl	d5724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(2000);
   d58a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d58ac:	f004 fe22 	bl	da4f4 <delay>
    ab1805.deepPowerDown(10);                                         // Power cycles the Boron and carrier board
   d58b0:	4807      	ldr	r0, [pc, #28]	; (d58d0 <_Z12hardResetNow6String+0x4c>)
   d58b2:	210a      	movs	r1, #10
   d58b4:	f001 ff60 	bl	d7778 <_ZN6AB180513deepPowerDownEi>
   d58b8:	2001      	movs	r0, #1
}
   d58ba:	b005      	add	sp, #20
   d58bc:	f85d fb04 	ldr.w	pc, [sp], #4
   d58c0:	000e01fa 	.word	0x000e01fa
   d58c4:	2003e1f4 	.word	0x2003e1f4
   d58c8:	000e044d 	.word	0x000e044d
   d58cc:	000e0834 	.word	0x000e0834
   d58d0:	2003e204 	.word	0x2003e204

000d58d4 <_Z12setSolarMode6String>:
{
   d58d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d58d6:	491b      	ldr	r1, [pc, #108]	; (d5944 <_Z12setSolarMode6String+0x70>)
   d58d8:	4604      	mov	r4, r0
   d58da:	f007 fa65 	bl	dcda8 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d58de:	4605      	mov	r5, r0
   d58e0:	b1d0      	cbz	r0, d5918 <_Z12setSolarMode6String+0x44>
    sysStatus.solarPowerMode = true;
   d58e2:	4d19      	ldr	r5, [pc, #100]	; (d5948 <_Z12setSolarMode6String+0x74>)
   d58e4:	2401      	movs	r4, #1
   d58e6:	716c      	strb	r4, [r5, #5]
    setPowerConfig();                                               // Change the power management Settings
   d58e8:	f7ff fe26 	bl	d5538 <_Z14setPowerConfigv>
    systemStatusWriteNeeded=true;
   d58ec:	4b17      	ldr	r3, [pc, #92]	; (d594c <_Z12setSolarMode6String+0x78>)
   d58ee:	701c      	strb	r4, [r3, #0]
    if (sysStatus.connectedStatus) Particle.publish("Mode","Set Solar Powered Mode", PRIVATE);
   d58f0:	78eb      	ldrb	r3, [r5, #3]
   d58f2:	b913      	cbnz	r3, d58fa <_Z12setSolarMode6String+0x26>
    return 1;
   d58f4:	2001      	movs	r0, #1
}
   d58f6:	b004      	add	sp, #16
   d58f8:	bd70      	pop	{r4, r5, r6, pc}
    if (sysStatus.connectedStatus) Particle.publish("Mode","Set Solar Powered Mode", PRIVATE);
   d58fa:	2300      	movs	r3, #0
   d58fc:	f88d 3000 	strb.w	r3, [sp]
   d5900:	4b13      	ldr	r3, [pc, #76]	; (d5950 <_Z12setSolarMode6String+0x7c>)
   d5902:	4a14      	ldr	r2, [pc, #80]	; (d5954 <_Z12setSolarMode6String+0x80>)
   d5904:	781b      	ldrb	r3, [r3, #0]
    if (sysStatus.connectedStatus) Particle.publish("Mode","Cleared Solar Powered Mode", PRIVATE);
   d5906:	4914      	ldr	r1, [pc, #80]	; (d5958 <_Z12setSolarMode6String+0x84>)
   d5908:	a802      	add	r0, sp, #8
   d590a:	f7ff f9e9 	bl	d4ce0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   d590e:	a803      	add	r0, sp, #12
   d5910:	f7ff ff08 	bl	d5724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5914:	4620      	mov	r0, r4
   d5916:	e7ee      	b.n	d58f6 <_Z12setSolarMode6String+0x22>
   d5918:	4910      	ldr	r1, [pc, #64]	; (d595c <_Z12setSolarMode6String+0x88>)
   d591a:	4620      	mov	r0, r4
   d591c:	f007 fa44 	bl	dcda8 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d5920:	2800      	cmp	r0, #0
   d5922:	d0e8      	beq.n	d58f6 <_Z12setSolarMode6String+0x22>
    systemStatusWriteNeeded=true;
   d5924:	4b09      	ldr	r3, [pc, #36]	; (d594c <_Z12setSolarMode6String+0x78>)
    sysStatus.solarPowerMode = false;
   d5926:	4e08      	ldr	r6, [pc, #32]	; (d5948 <_Z12setSolarMode6String+0x74>)
    systemStatusWriteNeeded=true;
   d5928:	2401      	movs	r4, #1
   d592a:	701c      	strb	r4, [r3, #0]
    sysStatus.solarPowerMode = false;
   d592c:	7175      	strb	r5, [r6, #5]
    setPowerConfig();                                                // Change the power management settings
   d592e:	f7ff fe03 	bl	d5538 <_Z14setPowerConfigv>
    if (sysStatus.connectedStatus) Particle.publish("Mode","Cleared Solar Powered Mode", PRIVATE);
   d5932:	78f3      	ldrb	r3, [r6, #3]
   d5934:	2b00      	cmp	r3, #0
   d5936:	d0dd      	beq.n	d58f4 <_Z12setSolarMode6String+0x20>
   d5938:	4b05      	ldr	r3, [pc, #20]	; (d5950 <_Z12setSolarMode6String+0x7c>)
   d593a:	f88d 5000 	strb.w	r5, [sp]
   d593e:	781b      	ldrb	r3, [r3, #0]
   d5940:	4a07      	ldr	r2, [pc, #28]	; (d5960 <_Z12setSolarMode6String+0x8c>)
   d5942:	e7e0      	b.n	d5906 <_Z12setSolarMode6String+0x32>
   d5944:	000e01fa 	.word	0x000e01fa
   d5948:	2003e3d8 	.word	0x2003e3d8
   d594c:	2003e404 	.word	0x2003e404
   d5950:	2003e1f4 	.word	0x2003e1f4
   d5954:	000e0465 	.word	0x000e0465
   d5958:	000e0494 	.word	0x000e0494
   d595c:	000e047c 	.word	0x000e047c
   d5960:	000e047e 	.word	0x000e047e

000d5964 <_Z14setVerboseMode6String>:
{
   d5964:	b530      	push	{r4, r5, lr}
   d5966:	491a      	ldr	r1, [pc, #104]	; (d59d0 <_Z14setVerboseMode6String+0x6c>)
   d5968:	b085      	sub	sp, #20
   d596a:	4604      	mov	r4, r0
   d596c:	f007 fa1c 	bl	dcda8 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d5970:	4605      	mov	r5, r0
   d5972:	b1c0      	cbz	r0, d59a6 <_Z14setVerboseMode6String+0x42>
    sysStatus.verboseMode = true;
   d5974:	4b17      	ldr	r3, [pc, #92]	; (d59d4 <_Z14setVerboseMode6String+0x70>)
    systemStatusWriteNeeded = true;
   d5976:	4a18      	ldr	r2, [pc, #96]	; (d59d8 <_Z14setVerboseMode6String+0x74>)
    sysStatus.verboseMode = true;
   d5978:	2401      	movs	r4, #1
   d597a:	711c      	strb	r4, [r3, #4]
    if (sysStatus.connectedStatus) Particle.publish("Mode","Set Verbose Mode", PRIVATE);                               // Make sure the sensor is on and correctly configured
   d597c:	78db      	ldrb	r3, [r3, #3]
    systemStatusWriteNeeded = true;
   d597e:	7014      	strb	r4, [r2, #0]
    if (sysStatus.connectedStatus) Particle.publish("Mode","Set Verbose Mode", PRIVATE);                               // Make sure the sensor is on and correctly configured
   d5980:	b913      	cbnz	r3, d5988 <_Z14setVerboseMode6String+0x24>
    return 1;
   d5982:	2001      	movs	r0, #1
}
   d5984:	b005      	add	sp, #20
   d5986:	bd30      	pop	{r4, r5, pc}
    if (sysStatus.connectedStatus) Particle.publish("Mode","Set Verbose Mode", PRIVATE);                               // Make sure the sensor is on and correctly configured
   d5988:	2300      	movs	r3, #0
   d598a:	f88d 3000 	strb.w	r3, [sp]
   d598e:	4b13      	ldr	r3, [pc, #76]	; (d59dc <_Z14setVerboseMode6String+0x78>)
   d5990:	4a13      	ldr	r2, [pc, #76]	; (d59e0 <_Z14setVerboseMode6String+0x7c>)
   d5992:	781b      	ldrb	r3, [r3, #0]
    if (sysStatus.connectedStatus) Particle.publish("Mode","Cleared Verbose Mode", PRIVATE);
   d5994:	4913      	ldr	r1, [pc, #76]	; (d59e4 <_Z14setVerboseMode6String+0x80>)
   d5996:	a802      	add	r0, sp, #8
   d5998:	f7ff f9a2 	bl	d4ce0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   d599c:	a803      	add	r0, sp, #12
   d599e:	f7ff fec1 	bl	d5724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d59a2:	4620      	mov	r0, r4
   d59a4:	e7ee      	b.n	d5984 <_Z14setVerboseMode6String+0x20>
   d59a6:	4910      	ldr	r1, [pc, #64]	; (d59e8 <_Z14setVerboseMode6String+0x84>)
   d59a8:	4620      	mov	r0, r4
   d59aa:	f007 f9fd 	bl	dcda8 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d59ae:	2800      	cmp	r0, #0
   d59b0:	d0e8      	beq.n	d5984 <_Z14setVerboseMode6String+0x20>
    sysStatus.verboseMode = false;
   d59b2:	4b08      	ldr	r3, [pc, #32]	; (d59d4 <_Z14setVerboseMode6String+0x70>)
    systemStatusWriteNeeded = true;
   d59b4:	4a08      	ldr	r2, [pc, #32]	; (d59d8 <_Z14setVerboseMode6String+0x74>)
    sysStatus.verboseMode = false;
   d59b6:	711d      	strb	r5, [r3, #4]
    if (sysStatus.connectedStatus) Particle.publish("Mode","Cleared Verbose Mode", PRIVATE);
   d59b8:	78db      	ldrb	r3, [r3, #3]
    systemStatusWriteNeeded = true;
   d59ba:	2401      	movs	r4, #1
   d59bc:	7014      	strb	r4, [r2, #0]
    if (sysStatus.connectedStatus) Particle.publish("Mode","Cleared Verbose Mode", PRIVATE);
   d59be:	2b00      	cmp	r3, #0
   d59c0:	d0df      	beq.n	d5982 <_Z14setVerboseMode6String+0x1e>
   d59c2:	4b06      	ldr	r3, [pc, #24]	; (d59dc <_Z14setVerboseMode6String+0x78>)
   d59c4:	f88d 5000 	strb.w	r5, [sp]
   d59c8:	781b      	ldrb	r3, [r3, #0]
   d59ca:	4a08      	ldr	r2, [pc, #32]	; (d59ec <_Z14setVerboseMode6String+0x88>)
   d59cc:	e7e2      	b.n	d5994 <_Z14setVerboseMode6String+0x30>
   d59ce:	bf00      	nop
   d59d0:	000e01fa 	.word	0x000e01fa
   d59d4:	2003e3d8 	.word	0x2003e3d8
   d59d8:	2003e404 	.word	0x2003e404
   d59dc:	2003e1f4 	.word	0x2003e1f4
   d59e0:	000e0499 	.word	0x000e0499
   d59e4:	000e0494 	.word	0x000e0494
   d59e8:	000e047c 	.word	0x000e047c
   d59ec:	000e04aa 	.word	0x000e04aa

000d59f0 <_Z15setLowPowerMode6String>:
 * will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d59f0:	b530      	push	{r4, r5, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d59f2:	4920      	ldr	r1, [pc, #128]	; (d5a74 <_Z15setLowPowerMode6String+0x84>)
   d59f4:	b085      	sub	sp, #20
   d59f6:	4605      	mov	r5, r0
   d59f8:	f007 f9d6 	bl	dcda8 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d59fc:	b1b8      	cbz	r0, d5a2e <_Z15setLowPowerMode6String+0x3e>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d59fe:	491d      	ldr	r1, [pc, #116]	; (d5a74 <_Z15setLowPowerMode6String+0x84>)
   d5a00:	4628      	mov	r0, r5
   d5a02:	f007 f9d1 	bl	dcda8 <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d5a06:	4604      	mov	r4, r0
   d5a08:	b9c8      	cbnz	r0, d5a3e <_Z15setLowPowerMode6String+0x4e>
   d5a0a:	491b      	ldr	r1, [pc, #108]	; (d5a78 <_Z15setLowPowerMode6String+0x88>)
   d5a0c:	4628      	mov	r0, r5
   d5a0e:	f007 f9cb 	bl	dcda8 <_ZNK6String6equalsEPKc>
    if (sysStatus.connectedStatus) {
      meterParticlePublish();
      Particle.publish("Mode",lowPowerModeStr, PRIVATE);
    }
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d5a12:	b140      	cbz	r0, d5a26 <_Z15setLowPowerMode6String+0x36>
  {
    sysStatus.lowPowerMode = false;
   d5a14:	4d19      	ldr	r5, [pc, #100]	; (d5a7c <_Z15setLowPowerMode6String+0x8c>)
   d5a16:	71ac      	strb	r4, [r5, #6]
    makeUpStringMessages();
   d5a18:	f7ff fe34 	bl	d5684 <_Z20makeUpStringMessagesv>
    if (!sysStatus.connectedStatus) {                                 // In case we are not connected, we will do so now.
   d5a1c:	78eb      	ldrb	r3, [r5, #3]
   d5a1e:	bb33      	cbnz	r3, d5a6e <_Z15setLowPowerMode6String+0x7e>
      state = CONNECTING_STATE;                                       // Will connect - if connection fails, will need to reset device
   d5a20:	4b17      	ldr	r3, [pc, #92]	; (d5a80 <_Z15setLowPowerMode6String+0x90>)
   d5a22:	2205      	movs	r2, #5
   d5a24:	701a      	strb	r2, [r3, #0]
    }
    else Particle.publish("Mode",lowPowerModeStr, PRIVATE);
  }
  systemStatusWriteNeeded = true;
   d5a26:	4b17      	ldr	r3, [pc, #92]	; (d5a84 <_Z15setLowPowerMode6String+0x94>)
   d5a28:	2001      	movs	r0, #1
   d5a2a:	7018      	strb	r0, [r3, #0]
  return 1;
   d5a2c:	e005      	b.n	d5a3a <_Z15setLowPowerMode6String+0x4a>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d5a2e:	4912      	ldr	r1, [pc, #72]	; (d5a78 <_Z15setLowPowerMode6String+0x88>)
   d5a30:	4628      	mov	r0, r5
   d5a32:	f007 f9b9 	bl	dcda8 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d5a36:	2800      	cmp	r0, #0
   d5a38:	d1e1      	bne.n	d59fe <_Z15setLowPowerMode6String+0xe>
}
   d5a3a:	b005      	add	sp, #20
   d5a3c:	bd30      	pop	{r4, r5, pc}
    sysStatus.lowPowerMode = true;
   d5a3e:	4c0f      	ldr	r4, [pc, #60]	; (d5a7c <_Z15setLowPowerMode6String+0x8c>)
   d5a40:	2301      	movs	r3, #1
   d5a42:	71a3      	strb	r3, [r4, #6]
    makeUpStringMessages();                                           // Updated system settings - refresh the string messages
   d5a44:	f7ff fe1e 	bl	d5684 <_Z20makeUpStringMessagesv>
    if (sysStatus.connectedStatus) {
   d5a48:	78e3      	ldrb	r3, [r4, #3]
   d5a4a:	2b00      	cmp	r3, #0
   d5a4c:	d0eb      	beq.n	d5a26 <_Z15setLowPowerMode6String+0x36>
      meterParticlePublish();
   d5a4e:	f001 faa9 	bl	d6fa4 <_Z20meterParticlePublishv>
      Particle.publish("Mode",lowPowerModeStr, PRIVATE);
   d5a52:	2300      	movs	r3, #0
   d5a54:	f88d 3000 	strb.w	r3, [sp]
    else Particle.publish("Mode",lowPowerModeStr, PRIVATE);
   d5a58:	4b0b      	ldr	r3, [pc, #44]	; (d5a88 <_Z15setLowPowerMode6String+0x98>)
   d5a5a:	4a0c      	ldr	r2, [pc, #48]	; (d5a8c <_Z15setLowPowerMode6String+0x9c>)
   d5a5c:	781b      	ldrb	r3, [r3, #0]
   d5a5e:	490c      	ldr	r1, [pc, #48]	; (d5a90 <_Z15setLowPowerMode6String+0xa0>)
   d5a60:	a802      	add	r0, sp, #8
   d5a62:	f7ff f93d 	bl	d4ce0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   d5a66:	a803      	add	r0, sp, #12
   d5a68:	f7ff fe5c 	bl	d5724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5a6c:	e7db      	b.n	d5a26 <_Z15setLowPowerMode6String+0x36>
   d5a6e:	f88d 4000 	strb.w	r4, [sp]
   d5a72:	e7f1      	b.n	d5a58 <_Z15setLowPowerMode6String+0x68>
   d5a74:	000e01fa 	.word	0x000e01fa
   d5a78:	000e047c 	.word	0x000e047c
   d5a7c:	2003e3d8 	.word	0x2003e3d8
   d5a80:	2003e3cd 	.word	0x2003e3cd
   d5a84:	2003e404 	.word	0x2003e404
   d5a88:	2003e1f4 	.word	0x2003e1f4
   d5a8c:	2003e384 	.word	0x2003e384
   d5a90:	000e0494 	.word	0x000e0494

000d5a94 <_Z16takeMeasurementsv>:
void takeMeasurements() {
   d5a94:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5a96:	ed2d 8b02 	vpush	{d8}
  bme.setGasHeater(320, 150); // 320*C for 150 ms
   d5a9a:	2296      	movs	r2, #150	; 0x96
void takeMeasurements() {
   d5a9c:	b08d      	sub	sp, #52	; 0x34
  bme.setGasHeater(320, 150); // 320*C for 150 ms
   d5a9e:	f44f 71a0 	mov.w	r1, #320	; 0x140
   d5aa2:	4879      	ldr	r0, [pc, #484]	; (d5c88 <_Z16takeMeasurementsv+0x1f4>)
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5aa4:	4d79      	ldr	r5, [pc, #484]	; (d5c8c <_Z16takeMeasurementsv+0x1f8>)
   d5aa6:	f002 fa6f 	bl	d7f88 <_ZN15Adafruit_BME68012setGasHeaterEtt>
  bme.performReading();                                     // Take measurement from all the sensors
   d5aaa:	4877      	ldr	r0, [pc, #476]	; (d5c88 <_Z16takeMeasurementsv+0x1f4>)
   d5aac:	f002 f9ba 	bl	d7e24 <_ZN15Adafruit_BME68014performReadingEv>
   d5ab0:	2200      	movs	r2, #0
   d5ab2:	6868      	ldr	r0, [r5, #4]
   d5ab4:	4611      	mov	r1, r2
   d5ab6:	f004 fc5d 	bl	da374 <network_ready>
  if (Cellular.ready()) getSignalStrength();                // Test signal strength if the cellular modem is on and ready
   d5aba:	b108      	cbz	r0, d5ac0 <_Z16takeMeasurementsv+0x2c>
   d5abc:	f7ff fcac 	bl	d5418 <_Z17getSignalStrengthv>
  temperatureInC = bme.temperature;
   d5ac0:	4c71      	ldr	r4, [pc, #452]	; (d5c88 <_Z16takeMeasurementsv+0x1f4>)
   d5ac2:	4e73      	ldr	r6, [pc, #460]	; (d5c90 <_Z16takeMeasurementsv+0x1fc>)
   d5ac4:	6820      	ldr	r0, [r4, #0]
  relativeHumidity = bme.humidity;
   d5ac6:	4f73      	ldr	r7, [pc, #460]	; (d5c94 <_Z16takeMeasurementsv+0x200>)
  temperatureInC = bme.temperature;
   d5ac8:	f009 fb14 	bl	df0f4 <__aeabi_f2d>
  snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", temperatureInC);
   d5acc:	4a72      	ldr	r2, [pc, #456]	; (d5c98 <_Z16takeMeasurementsv+0x204>)
  temperatureInC = bme.temperature;
   d5ace:	e9c6 0100 	strd	r0, r1, [r6]
  snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", temperatureInC);
   d5ad2:	e9cd 0100 	strd	r0, r1, [sp]
   d5ad6:	2110      	movs	r1, #16
   d5ad8:	4870      	ldr	r0, [pc, #448]	; (d5c9c <_Z16takeMeasurementsv+0x208>)
   d5ada:	f004 fcbb 	bl	da454 <snprintf>
  relativeHumidity = bme.humidity;
   d5ade:	68a0      	ldr	r0, [r4, #8]
   d5ae0:	f009 fb08 	bl	df0f4 <__aeabi_f2d>
  snprintf(humidityString,sizeof(humidityString),"%4.1f%%", relativeHumidity);
   d5ae4:	4a6e      	ldr	r2, [pc, #440]	; (d5ca0 <_Z16takeMeasurementsv+0x20c>)
  relativeHumidity = bme.humidity;
   d5ae6:	e9c7 0100 	strd	r0, r1, [r7]
  snprintf(humidityString,sizeof(humidityString),"%4.1f%%", relativeHumidity);
   d5aea:	e9cd 0100 	strd	r0, r1, [sp]
   d5aee:	2110      	movs	r1, #16
   d5af0:	486c      	ldr	r0, [pc, #432]	; (d5ca4 <_Z16takeMeasurementsv+0x210>)
   d5af2:	f004 fcaf 	bl	da454 <snprintf>
  pressureHpa = bme.pressure / 100.0;
   d5af6:	6860      	ldr	r0, [r4, #4]
   d5af8:	f009 fafc 	bl	df0f4 <__aeabi_f2d>
   d5afc:	4b6a      	ldr	r3, [pc, #424]	; (d5ca8 <_Z16takeMeasurementsv+0x214>)
   d5afe:	2200      	movs	r2, #0
   d5b00:	f009 fc7a 	bl	df3f8 <__aeabi_ddiv>
   d5b04:	4b69      	ldr	r3, [pc, #420]	; (d5cac <_Z16takeMeasurementsv+0x218>)
  snprintf(pressureString,sizeof(pressureString),"%4.1fHPa", pressureHpa);
   d5b06:	4a6a      	ldr	r2, [pc, #424]	; (d5cb0 <_Z16takeMeasurementsv+0x21c>)
  pressureHpa = bme.pressure / 100.0;
   d5b08:	e9c3 0100 	strd	r0, r1, [r3]
  snprintf(pressureString,sizeof(pressureString),"%4.1fHPa", pressureHpa);
   d5b0c:	e9cd 0100 	strd	r0, r1, [sp]
   d5b10:	2110      	movs	r1, #16
   d5b12:	4868      	ldr	r0, [pc, #416]	; (d5cb4 <_Z16takeMeasurementsv+0x220>)
   d5b14:	f004 fc9e 	bl	da454 <snprintf>
  gasResistanceKOhms = bme.gas_resistance / 1000.0;
   d5b18:	68e0      	ldr	r0, [r4, #12]
   d5b1a:	f009 faeb 	bl	df0f4 <__aeabi_f2d>
   d5b1e:	4b66      	ldr	r3, [pc, #408]	; (d5cb8 <_Z16takeMeasurementsv+0x224>)
   d5b20:	2200      	movs	r2, #0
   d5b22:	f009 fc69 	bl	df3f8 <__aeabi_ddiv>
   d5b26:	4b65      	ldr	r3, [pc, #404]	; (d5cbc <_Z16takeMeasurementsv+0x228>)
  snprintf(TVOCString,sizeof(TVOCString),"%4.1fkOhm", gasResistanceKOhms);
   d5b28:	4a65      	ldr	r2, [pc, #404]	; (d5cc0 <_Z16takeMeasurementsv+0x22c>)
  gasResistanceKOhms = bme.gas_resistance / 1000.0;
   d5b2a:	e9c3 0100 	strd	r0, r1, [r3]
  snprintf(TVOCString,sizeof(TVOCString),"%4.1fkOhm", gasResistanceKOhms);
   d5b2e:	e9cd 0100 	strd	r0, r1, [sp]
   d5b32:	2110      	movs	r1, #16
   d5b34:	4863      	ldr	r0, [pc, #396]	; (d5cc4 <_Z16takeMeasurementsv+0x230>)
   d5b36:	f004 fc8d 	bl	da454 <snprintf>
  approxAltitudeInM = bme.readAltitude(SEALEVELPRESSURE_HPA);
   d5b3a:	4620      	mov	r0, r4
   d5b3c:	ed9f 0a62 	vldr	s0, [pc, #392]	; d5cc8 <_Z16takeMeasurementsv+0x234>
   d5b40:	f002 f9ea 	bl	d7f18 <_ZN15Adafruit_BME68012readAltitudeEf>
   d5b44:	ee10 0a10 	vmov	r0, s0
   d5b48:	f009 fad4 	bl	df0f4 <__aeabi_f2d>
   d5b4c:	4b5f      	ldr	r3, [pc, #380]	; (d5ccc <_Z16takeMeasurementsv+0x238>)
  snprintf(altitudeString,sizeof(altitudeString),"%4.1fm", approxAltitudeInM);
   d5b4e:	4a60      	ldr	r2, [pc, #384]	; (d5cd0 <_Z16takeMeasurementsv+0x23c>)
  approxAltitudeInM = bme.readAltitude(SEALEVELPRESSURE_HPA);
   d5b50:	e9c3 0100 	strd	r0, r1, [r3]
  snprintf(altitudeString,sizeof(altitudeString),"%4.1fm", approxAltitudeInM);
   d5b54:	e9cd 0100 	strd	r0, r1, [sp]
   d5b58:	2110      	movs	r1, #16
   d5b5a:	485e      	ldr	r0, [pc, #376]	; (d5cd4 <_Z16takeMeasurementsv+0x240>)
   d5b5c:	f004 fc7a 	bl	da454 <snprintf>
  heatIndexC = heatIndex(temperatureInC,relativeHumidity);    // Calcualte the heat index when it is hot AND humid
   d5b60:	e9d7 0100 	ldrd	r0, r1, [r7]
   d5b64:	f009 fe16 	bl	df794 <__aeabi_d2f>
   d5b68:	ee08 0a10 	vmov	s16, r0
   d5b6c:	e9d6 0100 	ldrd	r0, r1, [r6]
   d5b70:	f009 fe10 	bl	df794 <__aeabi_d2f>
   d5b74:	eef0 0a48 	vmov.f32	s1, s16
   d5b78:	ee00 0a10 	vmov	s0, r0
   d5b7c:	f7ff fab8 	bl	d50f0 <_Z9heatIndexff>
   d5b80:	4b55      	ldr	r3, [pc, #340]	; (d5cd8 <_Z16takeMeasurementsv+0x244>)
   d5b82:	ee10 0a10 	vmov	r0, s0
   d5b86:	ed83 0a00 	vstr	s0, [r3]
  snprintf(heatIndexString,sizeof(heatIndexString),"%4.1f*C",heatIndexC);
   d5b8a:	f009 fab3 	bl	df0f4 <__aeabi_f2d>
   d5b8e:	4a42      	ldr	r2, [pc, #264]	; (d5c98 <_Z16takeMeasurementsv+0x204>)
   d5b90:	e9cd 0100 	strd	r0, r1, [sp]
   d5b94:	2110      	movs	r1, #16
   d5b96:	4851      	ldr	r0, [pc, #324]	; (d5cdc <_Z16takeMeasurementsv+0x248>)
   d5b98:	f004 fc5c 	bl	da454 <snprintf>
   d5b9c:	2200      	movs	r2, #0
   d5b9e:	6868      	ldr	r0, [r5, #4]
   d5ba0:	4611      	mov	r1, r2
   d5ba2:	f004 fbe7 	bl	da374 <network_ready>
  if (Cellular.ready()) getSignalStrength();                           // Test signal strength if the cellular modem is on and ready
   d5ba6:	b108      	cbz	r0, d5bac <_Z16takeMeasurementsv+0x118>
   d5ba8:	f7ff fc36 	bl	d5418 <_Z17getSignalStrengthv>
  getTemperature();                                                    // Get Temperature at startup as well
   d5bac:	f7ff fc70 	bl	d5490 <_Z14getTemperaturev>
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
   d5bb0:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d5bb2:	a903      	add	r1, sp, #12
   d5bb4:	2007      	movs	r0, #7
    const diag_source* src = nullptr;
   d5bb6:	9203      	str	r2, [sp, #12]
    const int ret = diag_get_source(id, &src, nullptr);
   d5bb8:	f004 fac8 	bl	da14c <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d5bbc:	b9b8      	cbnz	r0, d5bee <_Z16takeMeasurementsv+0x15a>
        return ret;
    }
    return get(src, val);
   d5bbe:	9c03      	ldr	r4, [sp, #12]
    SPARK_ASSERT(src && src->callback);
   d5bc0:	b10c      	cbz	r4, d5bc6 <_Z16takeMeasurementsv+0x132>
   d5bc2:	6923      	ldr	r3, [r4, #16]
   d5bc4:	b923      	cbnz	r3, d5bd0 <_Z16takeMeasurementsv+0x13c>
   d5bc6:	4a46      	ldr	r2, [pc, #280]	; (d5ce0 <_Z16takeMeasurementsv+0x24c>)
   d5bc8:	2100      	movs	r1, #0
   d5bca:	200a      	movs	r0, #10
   d5bcc:	f004 fa96 	bl	da0fc <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d5bd0:	2300      	movs	r3, #0
   d5bd2:	f8ad 3012 	strh.w	r3, [sp, #18]
   d5bd6:	230c      	movs	r3, #12
   d5bd8:	f8ad 3010 	strh.w	r3, [sp, #16]
   d5bdc:	ab02      	add	r3, sp, #8
   d5bde:	9305      	str	r3, [sp, #20]
   d5be0:	2304      	movs	r3, #4
   d5be2:	9306      	str	r3, [sp, #24]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d5be4:	6923      	ldr	r3, [r4, #16]
   d5be6:	aa04      	add	r2, sp, #16
   d5be8:	2101      	movs	r1, #1
   d5bea:	4620      	mov	r0, r4
   d5bec:	4798      	blx	r3
  sysStatus.batteryState = System.batteryState();                      // Call before isItSafeToCharge() as it may overwrite the context
   d5bee:	4c3d      	ldr	r4, [pc, #244]	; (d5ce4 <_Z16takeMeasurementsv+0x250>)
        if (r < 0) {
   d5bf0:	2800      	cmp	r0, #0
        return val;
   d5bf2:	bfa8      	it	ge
   d5bf4:	9802      	ldrge	r0, [sp, #8]
   d5bf6:	7320      	strb	r0, [r4, #12]
  isItSafeToCharge();                                                  // See if it is safe to charge
   d5bf8:	f7ff fbe8 	bl	d53cc <_Z16isItSafeToChargev>
  if (sysStatus.lowPowerMode) {                                        // Need to take these steps if we are sleeping
   d5bfc:	79a3      	ldrb	r3, [r4, #6]
   d5bfe:	b153      	cbz	r3, d5c16 <_Z16takeMeasurementsv+0x182>
    delay(500);
   d5c00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d5c04:	f004 fc76 	bl	da4f4 <delay>
    fuelGauge.quickStart();                                            // May help us re-establish a baseline for SoC
   d5c08:	4837      	ldr	r0, [pc, #220]	; (d5ce8 <_Z16takeMeasurementsv+0x254>)
   d5c0a:	f005 f9c6 	bl	daf9a <_ZN9FuelGauge10quickStartEv>
    delay(500);
   d5c0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d5c12:	f004 fc6f 	bl	da4f4 <delay>
  sysStatus.stateOfCharge = int(fuelGauge.getSoC());                   // Assign to system value
   d5c16:	4834      	ldr	r0, [pc, #208]	; (d5ce8 <_Z16takeMeasurementsv+0x254>)
   d5c18:	f005 f95a 	bl	daed0 <_ZN9FuelGauge6getSoCEv>
   d5c1c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   d5c20:	ee17 3a90 	vmov	r3, s15
  if (sysStatus.stateOfCharge < 65 && sysStatus.batteryState == 1) {
   d5c24:	2b40      	cmp	r3, #64	; 0x40
  sysStatus.stateOfCharge = int(fuelGauge.getSoC());                   // Assign to system value
   d5c26:	edc4 7a02 	vstr	s15, [r4, #8]
  if (sysStatus.stateOfCharge < 65 && sysStatus.batteryState == 1) {
   d5c2a:	dc09      	bgt.n	d5c40 <_Z16takeMeasurementsv+0x1ac>
   d5c2c:	7b23      	ldrb	r3, [r4, #12]
   d5c2e:	2b01      	cmp	r3, #1
   d5c30:	d106      	bne.n	d5c40 <_Z16takeMeasurementsv+0x1ac>
    System.setPowerConfiguration(SystemPowerConfiguration());          // Reset the PMIC
   d5c32:	a804      	add	r0, sp, #16
   d5c34:	f7ff f88f 	bl	d4d56 <_ZN8particle24SystemPowerConfigurationC1Ev>
        return system_power_management_set_config(conf.config(), nullptr);
   d5c38:	2100      	movs	r1, #0
   d5c3a:	a804      	add	r0, sp, #16
   d5c3c:	f004 faf4 	bl	da228 <system_power_management_set_config>
  if (sysStatus.stateOfCharge < current.minBatteryLevel) {
   d5c40:	4a2a      	ldr	r2, [pc, #168]	; (d5cec <_Z16takeMeasurementsv+0x258>)
   d5c42:	68a3      	ldr	r3, [r4, #8]
   d5c44:	6911      	ldr	r1, [r2, #16]
   d5c46:	428b      	cmp	r3, r1
    current.minBatteryLevel = sysStatus.stateOfCharge;                 // Keep track of lowest value for the day
   d5c48:	bfbf      	itttt	lt
   d5c4a:	6113      	strlt	r3, [r2, #16]
    currentCountsWriteNeeded = true;
   d5c4c:	4a28      	ldrlt	r2, [pc, #160]	; (d5cf0 <_Z16takeMeasurementsv+0x25c>)
   d5c4e:	2101      	movlt	r1, #1
   d5c50:	7011      	strblt	r1, [r2, #0]
  if (sysStatus.stateOfCharge < 30) {
   d5c52:	2b1d      	cmp	r3, #29
   d5c54:	dc14      	bgt.n	d5c80 <_Z16takeMeasurementsv+0x1ec>
    sysStatus.lowBatteryMode = true;                                   // Check to see if we are in low battery territory
   d5c56:	2301      	movs	r3, #1
   d5c58:	71e3      	strb	r3, [r4, #7]
    if (!sysStatus.lowPowerMode) setLowPowerMode("1");                 // Should be there already but just in case...              
   d5c5a:	79a3      	ldrb	r3, [r4, #6]
   d5c5c:	b94b      	cbnz	r3, d5c72 <_Z16takeMeasurementsv+0x1de>
   d5c5e:	4925      	ldr	r1, [pc, #148]	; (d5cf4 <_Z16takeMeasurementsv+0x260>)
   d5c60:	a804      	add	r0, sp, #16
   d5c62:	f006 ffe8 	bl	dcc36 <_ZN6StringC1EPKc>
   d5c66:	a804      	add	r0, sp, #16
   d5c68:	f7ff fec2 	bl	d59f0 <_Z15setLowPowerMode6String>
   d5c6c:	a804      	add	r0, sp, #16
   d5c6e:	f006 ff97 	bl	dcba0 <_ZN6StringD1Ev>
  systemStatusWriteNeeded = true;
   d5c72:	4b21      	ldr	r3, [pc, #132]	; (d5cf8 <_Z16takeMeasurementsv+0x264>)
   d5c74:	2201      	movs	r2, #1
   d5c76:	701a      	strb	r2, [r3, #0]
}
   d5c78:	b00d      	add	sp, #52	; 0x34
   d5c7a:	ecbd 8b02 	vpop	{d8}
   d5c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else sysStatus.lowBatteryMode = false;                               // We have sufficient to continue operations                          
   d5c80:	2300      	movs	r3, #0
   d5c82:	71e3      	strb	r3, [r4, #7]
   d5c84:	e7f5      	b.n	d5c72 <_Z16takeMeasurementsv+0x1de>
   d5c86:	bf00      	nop
   d5c88:	2003e240 	.word	0x2003e240
   d5c8c:	2003e470 	.word	0x2003e470
   d5c90:	2003e408 	.word	0x2003e408
   d5c94:	2003e3b0 	.word	0x2003e3b0
   d5c98:	000e04bf 	.word	0x000e04bf
   d5c9c:	2003e410 	.word	0x2003e410
   d5ca0:	000e04c7 	.word	0x000e04c7
   d5ca4:	2003e34c 	.word	0x2003e34c
   d5ca8:	40590000 	.word	0x40590000
   d5cac:	2003e398 	.word	0x2003e398
   d5cb0:	000e04cf 	.word	0x000e04cf
   d5cb4:	2003e3a0 	.word	0x2003e3a0
   d5cb8:	408f4000 	.word	0x408f4000
   d5cbc:	2003e330 	.word	0x2003e330
   d5cc0:	000e04d8 	.word	0x000e04d8
   d5cc4:	2003e1e4 	.word	0x2003e1e4
   d5cc8:	447d5000 	.word	0x447d5000
   d5ccc:	2003e238 	.word	0x2003e238
   d5cd0:	000e04e2 	.word	0x000e04e2
   d5cd4:	2003e224 	.word	0x2003e224
   d5cd8:	2003e338 	.word	0x2003e338
   d5cdc:	2003e33c 	.word	0x2003e33c
   d5ce0:	000d9c3d 	.word	0x000d9c3d
   d5ce4:	2003e3d8 	.word	0x2003e3d8
   d5ce8:	2003e324 	.word	0x2003e324
   d5cec:	2003e2ec 	.word	0x2003e2ec
   d5cf0:	2003e304 	.word	0x2003e304
   d5cf4:	000e01fa 	.word	0x000e01fa
   d5cf8:	2003e404 	.word	0x2003e404

000d5cfc <_Z20verboseCountsHandlerv>:
void verboseCountsHandler() {
   d5cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (sysStatus.verboseCounts) {                                       // Was on-turn them off
   d5cfe:	4c1f      	ldr	r4, [pc, #124]	; (d5d7c <_Z20verboseCountsHandlerv+0x80>)
  userSwitchDetect = false;                                            // Reset the flag
   d5d00:	4b1f      	ldr	r3, [pc, #124]	; (d5d80 <_Z20verboseCountsHandlerv+0x84>)
  if (sysStatus.verboseCounts) {                                       // Was on-turn them off
   d5d02:	78a6      	ldrb	r6, [r4, #2]
   d5d04:	4f1f      	ldr	r7, [pc, #124]	; (d5d84 <_Z20verboseCountsHandlerv+0x88>)
  userSwitchDetect = false;                                            // Reset the flag
   d5d06:	2500      	movs	r5, #0
void verboseCountsHandler() {
   d5d08:	b087      	sub	sp, #28
  userSwitchDetect = false;                                            // Reset the flag
   d5d0a:	701d      	strb	r5, [r3, #0]
  if (sysStatus.verboseCounts) {                                       // Was on-turn them off
   d5d0c:	b1c6      	cbz	r6, d5d40 <_Z20verboseCountsHandlerv+0x44>
    RGB.control(false);                                                // Release control of the RGB LEDs
   d5d0e:	4628      	mov	r0, r5
   d5d10:	f006 fe51 	bl	dc9b6 <_ZN8RGBClass7controlEb>
    setLowPowerMode("1");                                              // Put the device back into low power mode
   d5d14:	491c      	ldr	r1, [pc, #112]	; (d5d88 <_Z20verboseCountsHandlerv+0x8c>)
    sysStatus.verboseMode = false;
   d5d16:	7125      	strb	r5, [r4, #4]
    systemStatusWriteNeeded = true;                                    // Update FRAM
   d5d18:	2301      	movs	r3, #1
    setLowPowerMode("1");                                              // Put the device back into low power mode
   d5d1a:	a802      	add	r0, sp, #8
    systemStatusWriteNeeded = true;                                    // Update FRAM
   d5d1c:	703b      	strb	r3, [r7, #0]
    sysStatus.verboseCounts = false;                                   // Stop sending verbose counts
   d5d1e:	70a5      	strb	r5, [r4, #2]
    setLowPowerMode("1");                                              // Put the device back into low power mode
   d5d20:	f006 ff89 	bl	dcc36 <_ZN6StringC1EPKc>
   d5d24:	a802      	add	r0, sp, #8
   d5d26:	f7ff fe63 	bl	d59f0 <_Z15setLowPowerMode6String>
   d5d2a:	a802      	add	r0, sp, #8
   d5d2c:	f006 ff38 	bl	dcba0 <_ZN6StringD1Ev>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d5d30:	4816      	ldr	r0, [pc, #88]	; (d5d8c <_Z20verboseCountsHandlerv+0x90>)
   d5d32:	462a      	mov	r2, r5
   d5d34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d5d38:	f7ff f8a6 	bl	d4e88 <_ZN5Timer5_stopEjb>
}
   d5d3c:	b007      	add	sp, #28
   d5d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RGB.control(true);                                                 // Take control of the RGB Led
   d5d40:	2001      	movs	r0, #1
   d5d42:	f006 fe38 	bl	dc9b6 <_ZN8RGBClass7controlEb>
    RGB.color(255, 0, 255);                                            // Set the RGB LED to solid Red and Blue
   d5d46:	22ff      	movs	r2, #255	; 0xff
   d5d48:	4610      	mov	r0, r2
   d5d4a:	4631      	mov	r1, r6
   d5d4c:	f006 fe43 	bl	dc9d6 <_ZN8RGBClass5colorEiii>
    RGB.brightness(128);                                               // Brightness to 50%
   d5d50:	2101      	movs	r1, #1
   d5d52:	2080      	movs	r0, #128	; 0x80
   d5d54:	f006 fe52 	bl	dc9fc <_ZN8RGBClass10brightnessEhb>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_RESET, fromISR, 0, block, nullptr) : false;
   d5d58:	4b0c      	ldr	r3, [pc, #48]	; (d5d8c <_Z20verboseCountsHandlerv+0x90>)
   d5d5a:	6898      	ldr	r0, [r3, #8]
    sysStatus.verboseMode = true;
   d5d5c:	2101      	movs	r1, #1
   d5d5e:	7121      	strb	r1, [r4, #4]
    sysStatus.verboseCounts = true;                                    // Turn on the verbose counts flag
   d5d60:	70a1      	strb	r1, [r4, #2]
    systemStatusWriteNeeded = true;                                    // Update FRAM
   d5d62:	7039      	strb	r1, [r7, #0]
   d5d64:	2800      	cmp	r0, #0
   d5d66:	d0e9      	beq.n	d5d3c <_Z20verboseCountsHandlerv+0x40>
   d5d68:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d5d6c:	9300      	str	r3, [sp, #0]
   d5d6e:	9601      	str	r6, [sp, #4]
   d5d70:	4633      	mov	r3, r6
   d5d72:	4632      	mov	r2, r6
   d5d74:	f003 feea 	bl	d9b4c <os_timer_change>
}
   d5d78:	e7e0      	b.n	d5d3c <_Z20verboseCountsHandlerv+0x40>
   d5d7a:	bf00      	nop
   d5d7c:	2003e3d8 	.word	0x2003e3d8
   d5d80:	2003e420 	.word	0x2003e420
   d5d84:	2003e404 	.word	0x2003e404
   d5d88:	000e01fa 	.word	0x000e01fa
   d5d8c:	2003e424 	.word	0x2003e424

000d5d90 <_Z22publishStateTransitionv>:
 * @brief Publishes a state transition to the Log Handler and to the Particle monitoring system.
 * 
 * @details A good debugging tool.
 */
void publishStateTransition(void)
{
   d5d90:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d5d92:	4d16      	ldr	r5, [pc, #88]	; (d5dec <_Z22publishStateTransitionv+0x5c>)
   d5d94:	4c16      	ldr	r4, [pc, #88]	; (d5df0 <_Z22publishStateTransitionv+0x60>)
   d5d96:	4b17      	ldr	r3, [pc, #92]	; (d5df4 <_Z22publishStateTransitionv+0x64>)
   d5d98:	782a      	ldrb	r2, [r5, #0]
   d5d9a:	7821      	ldrb	r1, [r4, #0]
{
   d5d9c:	b08f      	sub	sp, #60	; 0x3c
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d5d9e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d5da2:	9200      	str	r2, [sp, #0]
   d5da4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   d5da8:	4a13      	ldr	r2, [pc, #76]	; (d5df8 <_Z22publishStateTransitionv+0x68>)
   d5daa:	2128      	movs	r1, #40	; 0x28
   d5dac:	a804      	add	r0, sp, #16
   d5dae:	f004 fb51 	bl	da454 <snprintf>
  oldState = state;
   d5db2:	782b      	ldrb	r3, [r5, #0]
   d5db4:	7023      	strb	r3, [r4, #0]
  if (sysStatus.verboseMode) {
   d5db6:	4b11      	ldr	r3, [pc, #68]	; (d5dfc <_Z22publishStateTransitionv+0x6c>)
   d5db8:	791a      	ldrb	r2, [r3, #4]
   d5dba:	b182      	cbz	r2, d5dde <_Z22publishStateTransitionv+0x4e>
    if (sysStatus.connectedStatus) {
   d5dbc:	78db      	ldrb	r3, [r3, #3]
   d5dbe:	b173      	cbz	r3, d5dde <_Z22publishStateTransitionv+0x4e>
        return waitConditionWhile(_condition, []{ return true; });
   d5dc0:	f7fe ff3b 	bl	d4c3a <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
      waitUntil(meterParticlePublish);
      Particle.publish("State Transition",stateTransitionString, PRIVATE);
   d5dc4:	2300      	movs	r3, #0
   d5dc6:	f88d 3000 	strb.w	r3, [sp]
   d5dca:	4b0d      	ldr	r3, [pc, #52]	; (d5e00 <_Z22publishStateTransitionv+0x70>)
   d5dcc:	490d      	ldr	r1, [pc, #52]	; (d5e04 <_Z22publishStateTransitionv+0x74>)
   d5dce:	781b      	ldrb	r3, [r3, #0]
   d5dd0:	a802      	add	r0, sp, #8
   d5dd2:	aa04      	add	r2, sp, #16
   d5dd4:	f7fe ff84 	bl	d4ce0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   d5dd8:	a803      	add	r0, sp, #12
   d5dda:	f7ff fca3 	bl	d5724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  Log.info(stateTransitionString);
   d5dde:	480a      	ldr	r0, [pc, #40]	; (d5e08 <_Z22publishStateTransitionv+0x78>)
   d5de0:	a904      	add	r1, sp, #16
   d5de2:	f7ff f88f 	bl	d4f04 <_ZNK5spark6Logger4infoEPKcz>
}
   d5de6:	b00f      	add	sp, #60	; 0x3c
   d5de8:	bd30      	pop	{r4, r5, pc}
   d5dea:	bf00      	nop
   d5dec:	2003e3cd 	.word	0x2003e3cd
   d5df0:	2003e394 	.word	0x2003e394
   d5df4:	2003e084 	.word	0x2003e084
   d5df8:	000e04e9 	.word	0x000e04e9
   d5dfc:	2003e3d8 	.word	0x2003e3d8
   d5e00:	2003e1f4 	.word	0x2003e1f4
   d5e04:	000e04f7 	.word	0x000e04f7
   d5e08:	2003e544 	.word	0x2003e544

000d5e0c <_Z12dailyCleanupv>:
 * @brief Cleanup function that is run at the beginning of the day.
 * 
 * @details May or may not be in connected state.  Syncs time with remote service and sets low power mode. 
 * Called from Reporting State ONLY. Cleans house at the beginning of a new day.
 */
void dailyCleanup() {
   d5e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5e10:	b086      	sub	sp, #24
   d5e12:	2500      	movs	r5, #0
  Particle.publish("Daily Cleanup","Running", PRIVATE);                // Make sure this is being run
   d5e14:	4b25      	ldr	r3, [pc, #148]	; (d5eac <_Z12dailyCleanupv+0xa0>)
   d5e16:	f88d 5000 	strb.w	r5, [sp]
   d5e1a:	781b      	ldrb	r3, [r3, #0]
   d5e1c:	4a24      	ldr	r2, [pc, #144]	; (d5eb0 <_Z12dailyCleanupv+0xa4>)
   d5e1e:	4925      	ldr	r1, [pc, #148]	; (d5eb4 <_Z12dailyCleanupv+0xa8>)
  sysStatus.verboseMode = false;                                       // Saves bandwidth - keep extra chatter off
   d5e20:	4c25      	ldr	r4, [pc, #148]	; (d5eb8 <_Z12dailyCleanupv+0xac>)
  Particle.publish("Daily Cleanup","Running", PRIVATE);                // Make sure this is being run
   d5e22:	a802      	add	r0, sp, #8
   d5e24:	f7fe ff5c 	bl	d4ce0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   d5e28:	a803      	add	r0, sp, #12
   d5e2a:	f7ff fc7b 	bl	d5724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  sysStatus.verboseMode = false;                                       // Saves bandwidth - keep extra chatter off
   d5e2e:	7125      	strb	r5, [r4, #4]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5e30:	f004 fa38 	bl	da2a4 <spark_cloud_flag_connected>

  if (Particle.connected()) {
   d5e34:	b308      	cbz	r0, d5e7a <_Z12dailyCleanupv+0x6e>
   d5e36:	f004 fa35 	bl	da2a4 <spark_cloud_flag_connected>
        if (!connected()) {
   d5e3a:	b110      	cbz	r0, d5e42 <_Z12dailyCleanupv+0x36>
        return spark_sync_time(NULL);
   d5e3c:	4628      	mov	r0, r5
   d5e3e:	f004 fa51 	bl	da2e4 <spark_sync_time>
        return hal_timer_millis(nullptr);
   d5e42:	2000      	movs	r0, #0
   d5e44:	f003 ff12 	bl	d9c6c <hal_timer_millis>
   d5e48:	f04f 0a00 	mov.w	sl, #0
   d5e4c:	4605      	mov	r5, r0
        while (_while() && !_condition()) {
   d5e4e:	f247 582f 	movw	r8, #29999	; 0x752f
   d5e52:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
   d5e56:	2000      	movs	r0, #0
   d5e58:	f003 ff08 	bl	d9c6c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5e5c:	1b46      	subs	r6, r0, r5
   d5e5e:	eb61 070a 	sbc.w	r7, r1, sl
        while (_while() && !_condition()) {
   d5e62:	45b9      	cmp	r9, r7
   d5e64:	bf08      	it	eq
   d5e66:	45b0      	cmpeq	r8, r6
   d5e68:	d305      	bcc.n	d5e76 <_Z12dailyCleanupv+0x6a>
    Particle.syncTime();                                               // Set the clock each day - if we are connected
    waitFor(Particle.syncTimeDone,30000);                              // Wait for up to 30 seconds for the SyncTime to complete
   d5e6a:	f7fe ff0b 	bl	d4c84 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d5e6e:	b910      	cbnz	r0, d5e76 <_Z12dailyCleanupv+0x6a>
            spark_process();
   d5e70:	f004 fa08 	bl	da284 <spark_process>
        while (_while() && !_condition()) {
   d5e74:	e7ef      	b.n	d5e56 <_Z12dailyCleanupv+0x4a>
   d5e76:	f7fe ff05 	bl	d4c84 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  }

  if (sysStatus.solarPowerMode || sysStatus.stateOfCharge <= 65) {     // If Solar or if the battery is being discharged
   d5e7a:	7963      	ldrb	r3, [r4, #5]
   d5e7c:	b913      	cbnz	r3, d5e84 <_Z12dailyCleanupv+0x78>
   d5e7e:	68a3      	ldr	r3, [r4, #8]
   d5e80:	2b41      	cmp	r3, #65	; 0x41
   d5e82:	dc09      	bgt.n	d5e98 <_Z12dailyCleanupv+0x8c>
    setLowPowerMode("1");
   d5e84:	490d      	ldr	r1, [pc, #52]	; (d5ebc <_Z12dailyCleanupv+0xb0>)
   d5e86:	a802      	add	r0, sp, #8
   d5e88:	f006 fed5 	bl	dcc36 <_ZN6StringC1EPKc>
   d5e8c:	a802      	add	r0, sp, #8
   d5e8e:	f7ff fdaf 	bl	d59f0 <_Z15setLowPowerMode6String>
   d5e92:	a802      	add	r0, sp, #8
   d5e94:	f006 fe84 	bl	dcba0 <_ZN6StringD1Ev>
  }

  publishToGoogleSheets();                                             // Send data to Google Sheets on Product Status - whether we are connected or not
   d5e98:	f7ff fa32 	bl	d5300 <_Z21publishToGoogleSheetsv>
  resetEverything();                                                   // If so, we need to Zero the counts for the new day
   d5e9c:	f7ff fc04 	bl	d56a8 <_Z15resetEverythingv>

  systemStatusWriteNeeded = true;
   d5ea0:	4b07      	ldr	r3, [pc, #28]	; (d5ec0 <_Z12dailyCleanupv+0xb4>)
   d5ea2:	2201      	movs	r2, #1
   d5ea4:	701a      	strb	r2, [r3, #0]
   d5ea6:	b006      	add	sp, #24
   d5ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5eac:	2003e1f4 	.word	0x2003e1f4
   d5eb0:	000e0508 	.word	0x000e0508
   d5eb4:	000e0510 	.word	0x000e0510
   d5eb8:	2003e3d8 	.word	0x2003e3d8
   d5ebc:	000e01fa 	.word	0x000e01fa
   d5ec0:	2003e404 	.word	0x2003e404

000d5ec4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5ec4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5ec6:	e9d0 5300 	ldrd	r5, r3, [r0]
   d5eca:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5ecc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d5ece:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d5ed2:	42ae      	cmp	r6, r5
   d5ed4:	d004      	beq.n	d5ee0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d5ed6:	4628      	mov	r0, r5
   d5ed8:	f006 fe62 	bl	dcba0 <_ZN6StringD1Ev>
   d5edc:	3514      	adds	r5, #20
   d5ede:	e7f8      	b.n	d5ed2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d5ee0:	6820      	ldr	r0, [r4, #0]
   d5ee2:	f004 fa97 	bl	da414 <free>
    AllocatorT::free(data_);
}
   d5ee6:	4620      	mov	r0, r4
   d5ee8:	bd70      	pop	{r4, r5, r6, pc}

000d5eea <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>:
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d5eea:	b538      	push	{r3, r4, r5, lr}
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5eec:	6803      	ldr	r3, [r0, #0]
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d5eee:	4614      	mov	r4, r2
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5ef0:	68dd      	ldr	r5, [r3, #12]
   d5ef2:	232c      	movs	r3, #44	; 0x2c
   d5ef4:	47a8      	blx	r5
    }
   d5ef6:	4620      	mov	r0, r4
   d5ef8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5efc <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                           // Default settings for the device - connected, not-low power and always on
   d5efc:	b510      	push	{r4, lr}
  if (sysStatus.connectedStatus) {
   d5efe:	4c1f      	ldr	r4, [pc, #124]	; (d5f7c <_Z18loadSystemDefaultsv+0x80>)
   d5f00:	78e3      	ldrb	r3, [r4, #3]
void loadSystemDefaults() {                                           // Default settings for the device - connected, not-low power and always on
   d5f02:	b086      	sub	sp, #24
  if (sysStatus.connectedStatus) {
   d5f04:	b173      	cbz	r3, d5f24 <_Z18loadSystemDefaultsv+0x28>
        return waitConditionWhile(_condition, []{ return true; });
   d5f06:	f7fe fe98 	bl	d4c3a <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
   d5f0a:	2300      	movs	r3, #0
    Particle.publish("Mode","Loading System Defaults", PRIVATE);
   d5f0c:	f88d 3000 	strb.w	r3, [sp]
   d5f10:	4b1b      	ldr	r3, [pc, #108]	; (d5f80 <_Z18loadSystemDefaultsv+0x84>)
   d5f12:	4a1c      	ldr	r2, [pc, #112]	; (d5f84 <_Z18loadSystemDefaultsv+0x88>)
   d5f14:	781b      	ldrb	r3, [r3, #0]
   d5f16:	491c      	ldr	r1, [pc, #112]	; (d5f88 <_Z18loadSystemDefaultsv+0x8c>)
   d5f18:	a802      	add	r0, sp, #8
   d5f1a:	f7fe fee1 	bl	d4ce0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   d5f1e:	a803      	add	r0, sp, #12
   d5f20:	f7ff fc00 	bl	d5724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Log.info("Loading system defaults");
   d5f24:	4819      	ldr	r0, [pc, #100]	; (d5f8c <_Z18loadSystemDefaultsv+0x90>)
   d5f26:	491a      	ldr	r1, [pc, #104]	; (d5f90 <_Z18loadSystemDefaultsv+0x94>)
   d5f28:	f7fe ffec 	bl	d4f04 <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.structuresVersion = 1;
   d5f2c:	2301      	movs	r3, #1
   d5f2e:	7023      	strb	r3, [r4, #0]
  if (digitalRead(userSwitch)) setLowPowerMode("1");                  // Low power mode or not depending on user switch
   d5f30:	2004      	movs	r0, #4
  sysStatus.verboseMode = false;
   d5f32:	2300      	movs	r3, #0
   d5f34:	7123      	strb	r3, [r4, #4]
  sysStatus.verboseCounts = false;
   d5f36:	70a3      	strb	r3, [r4, #2]
  sysStatus.lowBatteryMode = false;
   d5f38:	71e3      	strb	r3, [r4, #7]
  if (digitalRead(userSwitch)) setLowPowerMode("1");                  // Low power mode or not depending on user switch
   d5f3a:	f007 fcc7 	bl	dd8cc <digitalRead>
   d5f3e:	b1d8      	cbz	r0, d5f78 <_Z18loadSystemDefaultsv+0x7c>
   d5f40:	4914      	ldr	r1, [pc, #80]	; (d5f94 <_Z18loadSystemDefaultsv+0x98>)
  else setLowPowerMode("0");
   d5f42:	a802      	add	r0, sp, #8
   d5f44:	f006 fe77 	bl	dcc36 <_ZN6StringC1EPKc>
   d5f48:	a802      	add	r0, sp, #8
   d5f4a:	f7ff fd51 	bl	d59f0 <_Z15setLowPowerMode6String>
   d5f4e:	a802      	add	r0, sp, #8
   d5f50:	f006 fe26 	bl	dcba0 <_ZN6StringD1Ev>
  sysStatus.timezone = -5;                                            // Default is East Coast Time
   d5f54:	4b10      	ldr	r3, [pc, #64]	; (d5f98 <_Z18loadSystemDefaultsv+0x9c>)
   d5f56:	6163      	str	r3, [r4, #20]
  sysStatus.dstOffset = 1;
   d5f58:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   d5f5c:	61a3      	str	r3, [r4, #24]
  sysStatus.openTime = 0;
   d5f5e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
   d5f62:	83a3      	strh	r3, [r4, #28]
  sysStatus.solarPowerMode = true;  
   d5f64:	2101      	movs	r1, #1
  sysStatus.lastConnectionDuration = 0;                               // New measure
   d5f66:	2300      	movs	r3, #0
  fram.put(FRAM::systemStatusAddr,sysStatus);                         // Write it now since this is a big deal and I don't want values over written
   d5f68:	4a04      	ldr	r2, [pc, #16]	; (d5f7c <_Z18loadSystemDefaultsv+0x80>)
   d5f6a:	480c      	ldr	r0, [pc, #48]	; (d5f9c <_Z18loadSystemDefaultsv+0xa0>)
  sysStatus.solarPowerMode = true;  
   d5f6c:	7161      	strb	r1, [r4, #5]
  sysStatus.lastConnectionDuration = 0;                               // New measure
   d5f6e:	8523      	strh	r3, [r4, #40]	; 0x28
  fram.put(FRAM::systemStatusAddr,sysStatus);                         // Write it now since this is a big deal and I don't want values over written
   d5f70:	f7ff ffbb 	bl	d5eea <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
}
   d5f74:	b006      	add	sp, #24
   d5f76:	bd10      	pop	{r4, pc}
  else setLowPowerMode("0");
   d5f78:	4909      	ldr	r1, [pc, #36]	; (d5fa0 <_Z18loadSystemDefaultsv+0xa4>)
   d5f7a:	e7e2      	b.n	d5f42 <_Z18loadSystemDefaultsv+0x46>
   d5f7c:	2003e3d8 	.word	0x2003e3d8
   d5f80:	2003e1f4 	.word	0x2003e1f4
   d5f84:	000e051e 	.word	0x000e051e
   d5f88:	000e0494 	.word	0x000e0494
   d5f8c:	2003e544 	.word	0x2003e544
   d5f90:	000e0536 	.word	0x000e0536
   d5f94:	000e01fa 	.word	0x000e01fa
   d5f98:	c0a00000 	.word	0xc0a00000
   d5f9c:	2003e314 	.word	0x2003e314
   d5fa0:	000e047c 	.word	0x000e047c
   d5fa4:	00000000 	.word	0x00000000

000d5fa8 <setup>:
{
   d5fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
  delay(2000);
   d5faa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
{
   d5fae:	b0c9      	sub	sp, #292	; 0x124
  delay(2000);
   d5fb0:	f004 faa0 	bl	da4f4 <delay>
  char StartupMessage[64] = "Startup successful";
   d5fb4:	4bc2      	ldr	r3, [pc, #776]	; (d62c0 <setup+0x318>)
   d5fb6:	aa08      	add	r2, sp, #32
   d5fb8:	f103 0510 	add.w	r5, r3, #16
   d5fbc:	6818      	ldr	r0, [r3, #0]
   d5fbe:	6859      	ldr	r1, [r3, #4]
   d5fc0:	4614      	mov	r4, r2
   d5fc2:	c403      	stmia	r4!, {r0, r1}
   d5fc4:	3308      	adds	r3, #8
   d5fc6:	42ab      	cmp	r3, r5
   d5fc8:	4622      	mov	r2, r4
   d5fca:	d1f7      	bne.n	d5fbc <setup+0x14>
   d5fcc:	8819      	ldrh	r1, [r3, #0]
   d5fce:	789b      	ldrb	r3, [r3, #2]
   d5fd0:	70a3      	strb	r3, [r4, #2]
   d5fd2:	222d      	movs	r2, #45	; 0x2d
   d5fd4:	8021      	strh	r1, [r4, #0]
   d5fd6:	f10d 0033 	add.w	r0, sp, #51	; 0x33
   d5fda:	2100      	movs	r1, #0
   d5fdc:	f009 fe7c 	bl	dfcd8 <memset>
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d5fe0:	2100      	movs	r1, #0
   d5fe2:	2008      	movs	r0, #8
   d5fe4:	f007 fc48 	bl	dd878 <pinMode>
  pinMode(userSwitch,INPUT);                        // Momentary contact button on board for direct user input
   d5fe8:	2100      	movs	r1, #0
   d5fea:	2004      	movs	r0, #4
   d5fec:	f007 fc44 	bl	dd878 <pinMode>
  pinMode(blueLED, OUTPUT);                         // declare the Blue LED Pin as an output
   d5ff0:	2101      	movs	r1, #1
   d5ff2:	2007      	movs	r0, #7
   d5ff4:	f007 fc40 	bl	dd878 <pinMode>
  digitalWrite(blueLED,HIGH);                       // Turn on the led so we can see how long the Setup() takes
   d5ff8:	2101      	movs	r1, #1
   d5ffa:	2007      	movs	r0, #7
   d5ffc:	f007 fc4d 	bl	dd89a <digitalWrite>
    static String deviceID(void) { return spark_deviceID(); }
   d6000:	a804      	add	r0, sp, #16
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d6002:	2400      	movs	r4, #0
   d6004:	f004 f956 	bl	da2b4 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d6008:	2300      	movs	r3, #0
   d600a:	227d      	movs	r2, #125	; 0x7d
   d600c:	a928      	add	r1, sp, #160	; 0xa0
   d600e:	a804      	add	r0, sp, #16
   d6010:	f006 fef1 	bl	dcdf6 <_ZNK6String8getBytesEPhjj>
   d6014:	49ab      	ldr	r1, [pc, #684]	; (d62c4 <setup+0x31c>)
   d6016:	4eac      	ldr	r6, [pc, #688]	; (d62c8 <setup+0x320>)
   d6018:	4623      	mov	r3, r4
   d601a:	4622      	mov	r2, r4
   d601c:	e9cd 4400 	strd	r4, r4, [sp]
   d6020:	a828      	add	r0, sp, #160	; 0xa0
   d6022:	f004 f957 	bl	da2d4 <spark_subscribe>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d6026:	4aa9      	ldr	r2, [pc, #676]	; (d62cc <setup+0x324>)
   d6028:	4623      	mov	r3, r4
   d602a:	2100      	movs	r1, #0
   d602c:	f44f 7080 	mov.w	r0, #256	; 0x100
   d6030:	f004 f8ae 	bl	da190 <system_subscribe_event>
        return _variable(varKey, var, STRING);
   d6034:	49a6      	ldr	r1, [pc, #664]	; (d62d0 <setup+0x328>)
   d6036:	48a7      	ldr	r0, [pc, #668]	; (d62d4 <setup+0x32c>)
   d6038:	f7fe fe31 	bl	d4c9e <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d603c:	49a6      	ldr	r1, [pc, #664]	; (d62d8 <setup+0x330>)
   d603e:	48a7      	ldr	r0, [pc, #668]	; (d62dc <setup+0x334>)
   d6040:	f7fe fe2d 	bl	d4c9e <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d6044:	49a6      	ldr	r1, [pc, #664]	; (d62e0 <setup+0x338>)
   d6046:	48a7      	ldr	r0, [pc, #668]	; (d62e4 <setup+0x33c>)
   d6048:	f7fe fe29 	bl	d4c9e <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d604c:	49a6      	ldr	r1, [pc, #664]	; (d62e8 <setup+0x340>)
   d604e:	48a7      	ldr	r0, [pc, #668]	; (d62ec <setup+0x344>)
   d6050:	f7fe fe25 	bl	d4c9e <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d6054:	49a6      	ldr	r1, [pc, #664]	; (d62f0 <setup+0x348>)
   d6056:	48a7      	ldr	r0, [pc, #668]	; (d62f4 <setup+0x34c>)
   d6058:	f7fe fe21 	bl	d4c9e <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d605c:	49a6      	ldr	r1, [pc, #664]	; (d62f8 <setup+0x350>)
   d605e:	48a7      	ldr	r0, [pc, #668]	; (d62fc <setup+0x354>)
   d6060:	f7fe fe1d 	bl	d4c9e <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d6064:	49a6      	ldr	r1, [pc, #664]	; (d6300 <setup+0x358>)
   d6066:	48a7      	ldr	r0, [pc, #668]	; (d6304 <setup+0x35c>)
   d6068:	f7fe fe19 	bl	d4c9e <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d606c:	49a6      	ldr	r1, [pc, #664]	; (d6308 <setup+0x360>)
   d606e:	48a7      	ldr	r0, [pc, #668]	; (d630c <setup+0x364>)
   d6070:	4623      	mov	r3, r4
   d6072:	2202      	movs	r2, #2
   d6074:	f004 f8f6 	bl	da264 <spark_variable>
   d6078:	4623      	mov	r3, r4
   d607a:	2202      	movs	r2, #2
   d607c:	49a4      	ldr	r1, [pc, #656]	; (d6310 <setup+0x368>)
   d607e:	48a5      	ldr	r0, [pc, #660]	; (d6314 <setup+0x36c>)
   d6080:	f004 f8f0 	bl	da264 <spark_variable>
        return _variable(varKey, var, STRING);
   d6084:	49a4      	ldr	r1, [pc, #656]	; (d6318 <setup+0x370>)
   d6086:	48a5      	ldr	r0, [pc, #660]	; (d631c <setup+0x374>)
   d6088:	f7fe fe09 	bl	d4c9e <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d608c:	4623      	mov	r3, r4
   d608e:	2202      	movs	r2, #2
   d6090:	49a3      	ldr	r1, [pc, #652]	; (d6320 <setup+0x378>)
   d6092:	48a4      	ldr	r0, [pc, #656]	; (d6324 <setup+0x37c>)
   d6094:	f004 f8e6 	bl	da264 <spark_variable>
        return _variable(varKey, var, STRING);
   d6098:	49a3      	ldr	r1, [pc, #652]	; (d6328 <setup+0x380>)
   d609a:	48a4      	ldr	r0, [pc, #656]	; (d632c <setup+0x384>)
   d609c:	f7fe fdff 	bl	d4c9e <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d60a0:	4623      	mov	r3, r4
   d60a2:	2202      	movs	r2, #2
   d60a4:	49a2      	ldr	r1, [pc, #648]	; (d6330 <setup+0x388>)
   d60a6:	48a3      	ldr	r0, [pc, #652]	; (d6334 <setup+0x38c>)
   d60a8:	f004 f8dc 	bl	da264 <spark_variable>
        return _variable(varKey, var, STRING);
   d60ac:	49a2      	ldr	r1, [pc, #648]	; (d6338 <setup+0x390>)
   d60ae:	48a3      	ldr	r0, [pc, #652]	; (d633c <setup+0x394>)
   d60b0:	f7fe fdf5 	bl	d4c9e <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        extra.size = sizeof(extra);
   d60b4:	230c      	movs	r3, #12
        spark_variable_t extra = {};
   d60b6:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
        extra.size = sizeof(extra);
   d60ba:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
        extra.copy = [](const void* var, void** data, size_t* size) {
   d60be:	4ba0      	ldr	r3, [pc, #640]	; (d6340 <setup+0x398>)
            return copy_variable_value(val, *data, *size);
        };
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   d60c0:	49a0      	ldr	r1, [pc, #640]	; (d6344 <setup+0x39c>)
        extra.copy = [](const void* var, void** data, size_t* size) {
   d60c2:	931a      	str	r3, [sp, #104]	; 0x68
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   d60c4:	2204      	movs	r2, #4
   d60c6:	ab18      	add	r3, sp, #96	; 0x60
   d60c8:	489f      	ldr	r0, [pc, #636]	; (d6348 <setup+0x3a0>)
   d60ca:	f004 f8cb 	bl	da264 <spark_variable>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d60ce:	4a9f      	ldr	r2, [pc, #636]	; (d634c <setup+0x3a4>)
   d60d0:	499f      	ldr	r1, [pc, #636]	; (d6350 <setup+0x3a8>)
   d60d2:	48a0      	ldr	r0, [pc, #640]	; (d6354 <setup+0x3ac>)
   d60d4:	f004 fbc6 	bl	da864 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d60d8:	4a9f      	ldr	r2, [pc, #636]	; (d6358 <setup+0x3b0>)
   d60da:	49a0      	ldr	r1, [pc, #640]	; (d635c <setup+0x3b4>)
   d60dc:	489d      	ldr	r0, [pc, #628]	; (d6354 <setup+0x3ac>)
   d60de:	f004 fbc1 	bl	da864 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d60e2:	4a9f      	ldr	r2, [pc, #636]	; (d6360 <setup+0x3b8>)
   d60e4:	499f      	ldr	r1, [pc, #636]	; (d6364 <setup+0x3bc>)
   d60e6:	489b      	ldr	r0, [pc, #620]	; (d6354 <setup+0x3ac>)
   d60e8:	f004 fbbc 	bl	da864 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d60ec:	4a9e      	ldr	r2, [pc, #632]	; (d6368 <setup+0x3c0>)
   d60ee:	499f      	ldr	r1, [pc, #636]	; (d636c <setup+0x3c4>)
   d60f0:	4898      	ldr	r0, [pc, #608]	; (d6354 <setup+0x3ac>)
   d60f2:	f004 fbb7 	bl	da864 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d60f6:	4a9e      	ldr	r2, [pc, #632]	; (d6370 <setup+0x3c8>)
   d60f8:	499e      	ldr	r1, [pc, #632]	; (d6374 <setup+0x3cc>)
   d60fa:	4896      	ldr	r0, [pc, #600]	; (d6354 <setup+0x3ac>)
   d60fc:	f004 fbb2 	bl	da864 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d6100:	4a9d      	ldr	r2, [pc, #628]	; (d6378 <setup+0x3d0>)
   d6102:	499e      	ldr	r1, [pc, #632]	; (d637c <setup+0x3d4>)
   d6104:	4893      	ldr	r0, [pc, #588]	; (d6354 <setup+0x3ac>)
   d6106:	f004 fbad 	bl	da864 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d610a:	4a9d      	ldr	r2, [pc, #628]	; (d6380 <setup+0x3d8>)
   d610c:	499d      	ldr	r1, [pc, #628]	; (d6384 <setup+0x3dc>)
   d610e:	4891      	ldr	r0, [pc, #580]	; (d6354 <setup+0x3ac>)
   d6110:	f004 fba8 	bl	da864 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d6114:	4a9c      	ldr	r2, [pc, #624]	; (d6388 <setup+0x3e0>)
   d6116:	499d      	ldr	r1, [pc, #628]	; (d638c <setup+0x3e4>)
   d6118:	488e      	ldr	r0, [pc, #568]	; (d6354 <setup+0x3ac>)
   d611a:	f004 fba3 	bl	da864 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  if (!bme.begin()) {                                                   // Start the BME680 Sensor
   d611e:	489c      	ldr	r0, [pc, #624]	; (d6390 <setup+0x3e8>)
   d6120:	2177      	movs	r1, #119	; 0x77
   d6122:	f001 ffd7 	bl	d80d4 <_ZN15Adafruit_BME6805beginEh>
   d6126:	2800      	cmp	r0, #0
   d6128:	f040 81ab 	bne.w	d6482 <setup+0x4da>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d612c:	f003 fd8e 	bl	d9c4c <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d6130:	4c98      	ldr	r4, [pc, #608]	; (d6394 <setup+0x3ec>)
    Log.info("Error - BME6800 Initialization");
   d6132:	4999      	ldr	r1, [pc, #612]	; (d6398 <setup+0x3f0>)
    resetTimeStamp = millis();
   d6134:	6020      	str	r0, [r4, #0]
    Log.info("Error - BME6800 Initialization");
   d6136:	4899      	ldr	r0, [pc, #612]	; (d639c <setup+0x3f4>)
   d6138:	f7fe fee4 	bl	d4f04 <_ZNK5spark6Logger4infoEPKcz>
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - BME680 Initialization");
   d613c:	4998      	ldr	r1, [pc, #608]	; (d63a0 <setup+0x3f8>)
   d613e:	a808      	add	r0, sp, #32
   d6140:	f009 fe17 	bl	dfd72 <strcpy>
    state = ERROR_STATE;
   d6144:	2301      	movs	r3, #1
   d6146:	7033      	strb	r3, [r6, #0]
   d6148:	f003 fd80 	bl	d9c4c <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d614c:	6020      	str	r0, [r4, #0]
  bme.setTemperatureOversampling(BME680_OS_8X);
   d614e:	2104      	movs	r1, #4
   d6150:	488f      	ldr	r0, [pc, #572]	; (d6390 <setup+0x3e8>)
   d6152:	f001 ff27 	bl	d7fa4 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>
  bme.setHumidityOversampling(BME680_OS_2X);
   d6156:	2102      	movs	r1, #2
   d6158:	488d      	ldr	r0, [pc, #564]	; (d6390 <setup+0x3e8>)
   d615a:	f001 ff30 	bl	d7fbe <_ZN15Adafruit_BME68023setHumidityOversamplingEh>
  bme.setPressureOversampling(BME680_OS_4X);
   d615e:	2103      	movs	r1, #3
   d6160:	488b      	ldr	r0, [pc, #556]	; (d6390 <setup+0x3e8>)
   d6162:	f001 ff39 	bl	d7fd8 <_ZN15Adafruit_BME68023setPressureOversamplingEh>
  bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
   d6166:	2102      	movs	r1, #2
   d6168:	4889      	ldr	r0, [pc, #548]	; (d6390 <setup+0x3e8>)
   d616a:	f001 ff42 	bl	d7ff2 <_ZN15Adafruit_BME68016setIIRFilterSizeEh>
  bme.setGasHeater(320, 150); // 320*C for 150 ms
   d616e:	f44f 71a0 	mov.w	r1, #320	; 0x140
   d6172:	2296      	movs	r2, #150	; 0x96
   d6174:	4886      	ldr	r0, [pc, #536]	; (d6390 <setup+0x3e8>)
   d6176:	f001 ff07 	bl	d7f88 <_ZN15Adafruit_BME68012setGasHeaterEtt>
        graceful_(graceful),
        clearSession_(clearSession) {
}

inline CloudDisconnectOptions& CloudDisconnectOptions::graceful(bool enabled) {
    graceful_ = enabled;
   d617a:	2401      	movs	r4, #1
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
   d617c:	2203      	movs	r2, #3
   d617e:	f241 3388 	movw	r3, #5000	; 0x1388
  Particle.setDisconnectOptions(CloudDisconnectOptions().graceful(true).timeout(5s));  // Don't disconnect abruptly
   d6182:	a818      	add	r0, sp, #96	; 0x60
   d6184:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    graceful_ = enabled;
   d6188:	f8ad 4068 	strh.w	r4, [sp, #104]	; 0x68
   d618c:	f004 fb95 	bl	da8ba <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   d6190:	4884      	ldr	r0, [pc, #528]	; (d63a4 <setup+0x3fc>)
   d6192:	2308      	movs	r3, #8
  ab1805.withFOUT(D8).setup();                                         // The carrier board has D8 connected to FOUT for wake interrupts
   d6194:	4621      	mov	r1, r4
   d6196:	8143      	strh	r3, [r0, #10]
   d6198:	f001 fcac 	bl	d7af4 <_ZN6AB18055setupEb>
  ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);                         // Enable watchdog
   d619c:	217c      	movs	r1, #124	; 0x7c
   d619e:	4881      	ldr	r0, [pc, #516]	; (d63a4 <setup+0x3fc>)
   d61a0:	4c81      	ldr	r4, [pc, #516]	; (d63a8 <setup+0x400>)
   d61a2:	f001 f98f 	bl	d74c4 <_ZN6AB18056setWDTEi>
   d61a6:	2300      	movs	r3, #0
   d61a8:	4a80      	ldr	r2, [pc, #512]	; (d63ac <setup+0x404>)
   d61aa:	2100      	movs	r1, #0
   d61ac:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   d61b0:	f003 ffee 	bl	da190 <system_subscribe_event>
        int reason = RESET_REASON_NONE;
   d61b4:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d61b6:	4611      	mov	r1, r2
   d61b8:	a818      	add	r0, sp, #96	; 0x60
        int reason = RESET_REASON_NONE;
   d61ba:	9218      	str	r2, [sp, #96]	; 0x60
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d61bc:	f003 fd26 	bl	d9c0c <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d61c0:	9b18      	ldr	r3, [sp, #96]	; 0x60
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d61c2:	2b14      	cmp	r3, #20
   d61c4:	f04f 0200 	mov.w	r2, #0
   d61c8:	f040 8160 	bne.w	d648c <setup+0x4e4>
    sysStatus.resetCount++;
   d61cc:	6923      	ldr	r3, [r4, #16]
   d61ce:	3301      	adds	r3, #1
   d61d0:	6123      	str	r3, [r4, #16]
  fuelGauge.wakeup();                                                  // Expliciely wake the Feul gauge and give it a half-sec
   d61d2:	4877      	ldr	r0, [pc, #476]	; (d63b0 <setup+0x408>)
   d61d4:	f004 feea 	bl	dafac <_ZN9FuelGauge6wakeupEv>
  delay(500);
   d61d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d61dc:	f004 f98a 	bl	da4f4 <delay>
  fuelGauge.quickStart();                                              // May help us re-establish a baseline for SoC
   d61e0:	4873      	ldr	r0, [pc, #460]	; (d63b0 <setup+0x408>)
   d61e2:	f004 feda 	bl	daf9a <_ZN9FuelGauge10quickStartEv>
  fram.begin();                                                        // Initialize the FRAM module
   d61e6:	4873      	ldr	r0, [pc, #460]	; (d63b4 <setup+0x40c>)
   d61e8:	f002 fa78 	bl	d86dc <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d61ec:	2100      	movs	r1, #0
   d61ee:	4871      	ldr	r0, [pc, #452]	; (d63b4 <setup+0x40c>)
   d61f0:	2301      	movs	r3, #1
   d61f2:	f10d 020f 	add.w	r2, sp, #15
   d61f6:	f002 fab3 	bl	d8760 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                              // Check to see if the memory map in the sketch matches the data on the chip
   d61fa:	f89d 100f 	ldrb.w	r1, [sp, #15]
   d61fe:	2901      	cmp	r1, #1
   d6200:	f000 8151 	beq.w	d64a6 <setup+0x4fe>
    fram.erase();                                                      // Reset the FRAM to correct the issue
   d6204:	486b      	ldr	r0, [pc, #428]	; (d63b4 <setup+0x40c>)
   d6206:	f002 fa73 	bl	d86f0 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d620a:	4a6b      	ldr	r2, [pc, #428]	; (d63b8 <setup+0x410>)
   d620c:	4869      	ldr	r0, [pc, #420]	; (d63b4 <setup+0x40c>)
   d620e:	2304      	movs	r3, #4
   d6210:	2100      	movs	r1, #0
   d6212:	f002 faf0 	bl	d87f6 <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d6216:	2301      	movs	r3, #1
   d6218:	4866      	ldr	r0, [pc, #408]	; (d63b4 <setup+0x40c>)
   d621a:	f10d 020f 	add.w	r2, sp, #15
   d621e:	2100      	movs	r1, #0
   d6220:	f002 fa9e 	bl	d8760 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;         // Device will not work without FRAM
   d6224:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d6228:	2b01      	cmp	r3, #1
   d622a:	f000 8139 	beq.w	d64a0 <setup+0x4f8>
   d622e:	2301      	movs	r3, #1
   d6230:	7033      	strb	r3, [r6, #0]
  if (current.updateAttempts >= 3) {
   d6232:	4d62      	ldr	r5, [pc, #392]	; (d63bc <setup+0x414>)
  checkSystemValues();                                                 // Make sure System values are all in valid range
   d6234:	f7ff f9ba 	bl	d55ac <_Z17checkSystemValuesv>
  if (current.updateAttempts >= 3) {
   d6238:	7d2b      	ldrb	r3, [r5, #20]
   d623a:	2b02      	cmp	r3, #2
   d623c:	d91a      	bls.n	d6274 <setup+0x2cc>
        system_set_flag(flag, value, nullptr);
   d623e:	2200      	movs	r2, #0
   d6240:	4611      	mov	r1, r2
    current.alerts = 7;                                                // Set an alert that we have maxed out our updates for the day
   d6242:	2707      	movs	r7, #7
   d6244:	2001      	movs	r0, #1
   d6246:	f003 ffb3 	bl	da1b0 <system_set_flag>
   d624a:	60af      	str	r7, [r5, #8]
    snprintf(data, sizeof(data), "{\"alerts\":%i,\"timestamp\":%lu000 }",current.alerts, Time.now());
   d624c:	f007 f8c5 	bl	dd3da <_ZN9TimeClass3nowEv>
   d6250:	4a5b      	ldr	r2, [pc, #364]	; (d63c0 <setup+0x418>)
   d6252:	9000      	str	r0, [sp, #0]
   d6254:	463b      	mov	r3, r7
   d6256:	2140      	movs	r1, #64	; 0x40
   d6258:	a818      	add	r0, sp, #96	; 0x60
   d625a:	f004 f8fb 	bl	da454 <snprintf>
    PublishQueuePosix::instance().publish("Ubidots_Alert_Hook", data, PRIVATE); // Put in publish queue
   d625e:	f002 fca3 	bl	d8ba8 <_ZN17PublishQueuePosix8instanceEv>
   d6262:	2300      	movs	r3, #0
   d6264:	f88d 3000 	strb.w	r3, [sp]
   d6268:	4b56      	ldr	r3, [pc, #344]	; (d63c4 <setup+0x41c>)
   d626a:	4957      	ldr	r1, [pc, #348]	; (d63c8 <setup+0x420>)
   d626c:	781b      	ldrb	r3, [r3, #0]
   d626e:	aa18      	add	r2, sp, #96	; 0x60
   d6270:	f7fe fe76 	bl	d4f60 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  Time.setDSTOffset(sysStatus.dstOffset);                              // Set the value from FRAM if in limits
   d6274:	ed94 0a06 	vldr	s0, [r4, #24]
   d6278:	f006 ff66 	bl	dd148 <_ZN9TimeClass12setDSTOffsetEf>
  DSTRULES() ? Time.beginDST() : Time.endDST();                        // Perform the DST calculation here
   d627c:	f000 fea8 	bl	d6fd0 <_Z8isDSTusav>
   d6280:	2800      	cmp	r0, #0
   d6282:	f000 811c 	beq.w	d64be <setup+0x516>
   d6286:	f006 ff7d 	bl	dd184 <_ZN9TimeClass8beginDSTEv>
  Time.zone(sysStatus.timezone);                                       // Set the Time Zone for our device
   d628a:	ed94 0a05 	vldr	s0, [r4, #20]
   d628e:	f006 ff3b 	bl	dd108 <_ZN9TimeClass4zoneEf>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);   // Load the offset string
   d6292:	f007 f8db 	bl	dd44c <_ZN9TimeClass5localEv>
   d6296:	4607      	mov	r7, r0
   d6298:	f007 f89f 	bl	dd3da <_ZN9TimeClass3nowEv>
   d629c:	1a38      	subs	r0, r7, r0
   d629e:	f008 ff17 	bl	df0d0 <__aeabi_i2d>
   d62a2:	a305      	add	r3, pc, #20	; (adr r3, d62b8 <setup+0x310>)
   d62a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d62a8:	f009 f8a6 	bl	df3f8 <__aeabi_ddiv>
   d62ac:	4a47      	ldr	r2, [pc, #284]	; (d63cc <setup+0x424>)
   d62ae:	e9cd 0100 	strd	r0, r1, [sp]
   d62b2:	210a      	movs	r1, #10
   d62b4:	e08c      	b.n	d63d0 <setup+0x428>
   d62b6:	bf00      	nop
   d62b8:	00000000 	.word	0x00000000
   d62bc:	40ac2000 	.word	0x40ac2000
   d62c0:	000e0978 	.word	0x000e0978
   d62c4:	000d57e1 	.word	0x000d57e1
   d62c8:	2003e3cd 	.word	0x2003e3cd
   d62cc:	000d4f7d 	.word	0x000d4f7d
   d62d0:	2003e410 	.word	0x2003e410
   d62d4:	000e054e 	.word	0x000e054e
   d62d8:	2003e34c 	.word	0x2003e34c
   d62dc:	000e055a 	.word	0x000e055a
   d62e0:	2003e3a0 	.word	0x2003e3a0
   d62e4:	000e0563 	.word	0x000e0563
   d62e8:	2003e1e4 	.word	0x2003e1e4
   d62ec:	000e056c 	.word	0x000e056c
   d62f0:	2003e224 	.word	0x2003e224
   d62f4:	000e0570 	.word	0x000e0570
   d62f8:	2003e33c 	.word	0x2003e33c
   d62fc:	000e0579 	.word	0x000e0579
   d6300:	2003e198 	.word	0x2003e198
   d6304:	000e0584 	.word	0x000e0584
   d6308:	2003e3e8 	.word	0x2003e3e8
   d630c:	000e058b 	.word	0x000e058b
   d6310:	2003e2f0 	.word	0x2003e2f0
   d6314:	000e0596 	.word	0x000e0596
   d6318:	2003e078 	.word	0x2003e078
   d631c:	000e05a2 	.word	0x000e05a2
   d6320:	2003e3e0 	.word	0x2003e3e0
   d6324:	000e05aa 	.word	0x000e05aa
   d6328:	2003e384 	.word	0x2003e384
   d632c:	000e05b5 	.word	0x000e05b5
   d6330:	2003e2f4 	.word	0x2003e2f4
   d6334:	000e05c2 	.word	0x000e05c2
   d6338:	2003e305 	.word	0x2003e305
   d633c:	000e05c9 	.word	0x000e05c9
   d6340:	000d4ca9 	.word	0x000d4ca9
   d6344:	000d4bad 	.word	0x000d4bad
   d6348:	000e05d4 	.word	0x000e05d4
   d634c:	000e05e3 	.word	0x000e05e3
   d6350:	000d4c51 	.word	0x000d4c51
   d6354:	000da839 	.word	0x000da839
   d6358:	000e05ef 	.word	0x000e05ef
   d635c:	000d5885 	.word	0x000d5885
   d6360:	000e05f9 	.word	0x000e05f9
   d6364:	000d53ad 	.word	0x000d53ad
   d6368:	000e0601 	.word	0x000e0601
   d636c:	000d59f1 	.word	0x000d59f1
   d6370:	000e060e 	.word	0x000e060e
   d6374:	000d58d5 	.word	0x000d58d5
   d6378:	000e0619 	.word	0x000e0619
   d637c:	000d5965 	.word	0x000d5965
   d6380:	000e0626 	.word	0x000e0626
   d6384:	000d7011 	.word	0x000d7011
   d6388:	000e0633 	.word	0x000e0633
   d638c:	000d7159 	.word	0x000d7159
   d6390:	2003e240 	.word	0x2003e240
   d6394:	2003e3b8 	.word	0x2003e3b8
   d6398:	000e0641 	.word	0x000e0641
   d639c:	2003e544 	.word	0x2003e544
   d63a0:	000e0660 	.word	0x000e0660
   d63a4:	2003e204 	.word	0x2003e204
   d63a8:	2003e3d8 	.word	0x2003e3d8
   d63ac:	000d4b71 	.word	0x000d4b71
   d63b0:	2003e324 	.word	0x2003e324
   d63b4:	2003e314 	.word	0x2003e314
   d63b8:	000e09b8 	.word	0x000e09b8
   d63bc:	2003e2ec 	.word	0x2003e2ec
   d63c0:	000e022f 	.word	0x000e022f
   d63c4:	2003e1f4 	.word	0x2003e1f4
   d63c8:	000e0251 	.word	0x000e0251
   d63cc:	000e069f 	.word	0x000e069f
   d63d0:	483c      	ldr	r0, [pc, #240]	; (d64c4 <setup+0x51c>)
   d63d2:	f004 f83f 	bl	da454 <snprintf>
  PublishQueuePosix::instance().setup();                               // Tend to the queue
   d63d6:	f002 fbe7 	bl	d8ba8 <_ZN17PublishQueuePosix8instanceEv>
   d63da:	f002 fde9 	bl	d8fb0 <_ZN17PublishQueuePosix5setupEv>
  PublishQueuePosix::instance().withRamQueueSize(0);                   // Writes to memory immediately
   d63de:	f002 fbe3 	bl	d8ba8 <_ZN17PublishQueuePosix8instanceEv>
   d63e2:	2100      	movs	r1, #0
   d63e4:	f002 fdbc 	bl	d8f60 <_ZN17PublishQueuePosix16withRamQueueSizeEj>
  PublishQueuePosix::instance().withFileQueueSize(96);                 // This should last at least two days
   d63e8:	f002 fbde 	bl	d8ba8 <_ZN17PublishQueuePosix8instanceEv>
   d63ec:	2160      	movs	r1, #96	; 0x60
   d63ee:	f002 fdcb 	bl	d8f88 <_ZN17PublishQueuePosix17withFileQueueSizeEj>
  makeUpStringMessages();                                              // Updated system settings - refresh the string messages
   d63f2:	f7ff f947 	bl	d5684 <_Z20makeUpStringMessagesv>
  setPowerConfig();                                                    // Executes commands that set up the Power configuration between Solar and DC-Powered
   d63f6:	f7ff f89f 	bl	d5538 <_Z14setPowerConfigv>
  if (!digitalRead(userSwitch)) loadSystemDefaults();                  // Make sure the device wakes up and connects - reset to defaults and exit low power mode
   d63fa:	2004      	movs	r0, #4
   d63fc:	f007 fa66 	bl	dd8cc <digitalRead>
   d6400:	b908      	cbnz	r0, d6406 <setup+0x45e>
   d6402:	f7ff fd7b 	bl	d5efc <_Z18loadSystemDefaultsv>
  if (Time.day() != Time.day(current.lastReportTime)) {                 // Check to see if the device was last on in a different day
   d6406:	f007 f805 	bl	dd414 <_ZN9TimeClass3dayEv>
   d640a:	2100      	movs	r1, #0
   d640c:	4607      	mov	r7, r0
   d640e:	6828      	ldr	r0, [r5, #0]
   d6410:	f006 fe5e 	bl	dd0d0 <_ZN9TimeClass3dayEx>
   d6414:	4287      	cmp	r7, r0
   d6416:	d001      	beq.n	d641c <setup+0x474>
    resetEverything();                                                 // Zero the counts for the new day
   d6418:	f7ff f946 	bl	d56a8 <_Z15resetEverythingv>
  takeMeasurements();                                                  // Populates values so you can read them before the hour
   d641c:	f7ff fb3a 	bl	d5a94 <_Z16takeMeasurementsv>
  if (sysStatus.lowBatteryMode) setLowPowerMode("1");                  // If battery is low we need to go to low power state
   d6420:	79e3      	ldrb	r3, [r4, #7]
   d6422:	b14b      	cbz	r3, d6438 <setup+0x490>
   d6424:	4928      	ldr	r1, [pc, #160]	; (d64c8 <setup+0x520>)
   d6426:	a818      	add	r0, sp, #96	; 0x60
   d6428:	f006 fc05 	bl	dcc36 <_ZN6StringC1EPKc>
   d642c:	a818      	add	r0, sp, #96	; 0x60
   d642e:	f7ff fadf 	bl	d59f0 <_Z15setLowPowerMode6String>
   d6432:	a818      	add	r0, sp, #96	; 0x60
   d6434:	f006 fbb4 	bl	dcba0 <_ZN6StringD1Ev>
  if (sysStatus.verboseCounts) verboseCountsHandler();                 // If in verbose counts mode before, reset will clear it
   d6438:	78a3      	ldrb	r3, [r4, #2]
   d643a:	b10b      	cbz	r3, d6440 <setup+0x498>
   d643c:	f7ff fc5e 	bl	d5cfc <_Z20verboseCountsHandlerv>
  if ((Time.hour() >= sysStatus.openTime) && (Time.hour() < sysStatus.closeTime)) { // Park is open let's get ready for the day                                                            
   d6440:	f006 ffdc 	bl	dd3fc <_ZN9TimeClass4hourEv>
   d6444:	7f23      	ldrb	r3, [r4, #28]
   d6446:	4298      	cmp	r0, r3
   d6448:	db07      	blt.n	d645a <setup+0x4b2>
   d644a:	f006 ffd7 	bl	dd3fc <_ZN9TimeClass4hourEv>
   d644e:	7f63      	ldrb	r3, [r4, #29]
   d6450:	4298      	cmp	r0, r3
    stayAwake = stayAwakeLong;                                         // Keeps Boron awake after reboot - helps with recovery
   d6452:	bfbe      	ittt	lt
   d6454:	4b1d      	ldrlt	r3, [pc, #116]	; (d64cc <setup+0x524>)
   d6456:	4a1e      	ldrlt	r2, [pc, #120]	; (d64d0 <setup+0x528>)
   d6458:	601a      	strlt	r2, [r3, #0]
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;               // IDLE unless otherwise from above code
   d645a:	7833      	ldrb	r3, [r6, #0]
   d645c:	b90b      	cbnz	r3, d6462 <setup+0x4ba>
   d645e:	2302      	movs	r3, #2
   d6460:	7033      	strb	r3, [r6, #0]
  systemStatusWriteNeeded = true;                                      // Update FRAM with any changes from setup
   d6462:	4b1c      	ldr	r3, [pc, #112]	; (d64d4 <setup+0x52c>)
  Log.info("Startup complete");
   d6464:	491c      	ldr	r1, [pc, #112]	; (d64d8 <setup+0x530>)
   d6466:	481d      	ldr	r0, [pc, #116]	; (d64dc <setup+0x534>)
  systemStatusWriteNeeded = true;                                      // Update FRAM with any changes from setup
   d6468:	2201      	movs	r2, #1
   d646a:	701a      	strb	r2, [r3, #0]
  Log.info("Startup complete");
   d646c:	f7fe fd4a 	bl	d4f04 <_ZNK5spark6Logger4infoEPKcz>
  digitalWrite(blueLED,LOW);                                           // Signal the end of startup
   d6470:	2100      	movs	r1, #0
   d6472:	2007      	movs	r0, #7
   d6474:	f007 fa11 	bl	dd89a <digitalWrite>
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
   d6478:	a804      	add	r0, sp, #16
   d647a:	f006 fb91 	bl	dcba0 <_ZN6StringD1Ev>
}
   d647e:	b049      	add	sp, #292	; 0x124
   d6480:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else Log.info("Success - BME6800 Initialization");
   d6482:	4917      	ldr	r1, [pc, #92]	; (d64e0 <setup+0x538>)
   d6484:	4815      	ldr	r0, [pc, #84]	; (d64dc <setup+0x534>)
   d6486:	f7fe fd3d 	bl	d4f04 <_ZNK5spark6Logger4infoEPKcz>
   d648a:	e660      	b.n	d614e <setup+0x1a6>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d648c:	4611      	mov	r1, r2
   d648e:	a818      	add	r0, sp, #96	; 0x60
        int reason = RESET_REASON_NONE;
   d6490:	9218      	str	r2, [sp, #96]	; 0x60
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d6492:	f003 fbbb 	bl	d9c0c <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d6496:	9b18      	ldr	r3, [sp, #96]	; 0x60
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d6498:	2b8c      	cmp	r3, #140	; 0x8c
   d649a:	f47f ae9a 	bne.w	d61d2 <setup+0x22a>
   d649e:	e695      	b.n	d61cc <setup+0x224>
    else loadSystemDefaults();                                         // Out of the box, we need the device to be awake and connected
   d64a0:	f7ff fd2c 	bl	d5efc <_Z18loadSystemDefaultsv>
   d64a4:	e6c5      	b.n	d6232 <setup+0x28a>
   d64a6:	4a0f      	ldr	r2, [pc, #60]	; (d64e4 <setup+0x53c>)
   d64a8:	480f      	ldr	r0, [pc, #60]	; (d64e8 <setup+0x540>)
   d64aa:	232c      	movs	r3, #44	; 0x2c
   d64ac:	f002 f958 	bl	d8760 <_ZN6MB85RC8readDataEjPhj>
   d64b0:	4a0e      	ldr	r2, [pc, #56]	; (d64ec <setup+0x544>)
   d64b2:	480d      	ldr	r0, [pc, #52]	; (d64e8 <setup+0x540>)
   d64b4:	2318      	movs	r3, #24
   d64b6:	2150      	movs	r1, #80	; 0x50
   d64b8:	f002 f952 	bl	d8760 <_ZN6MB85RC8readDataEjPhj>
        return t;
   d64bc:	e6b9      	b.n	d6232 <setup+0x28a>
  DSTRULES() ? Time.beginDST() : Time.endDST();                        // Perform the DST calculation here
   d64be:	f006 fe6d 	bl	dd19c <_ZN9TimeClass6endDSTEv>
   d64c2:	e6e2      	b.n	d628a <setup+0x2e2>
   d64c4:	2003e305 	.word	0x2003e305
   d64c8:	000e01fa 	.word	0x000e01fa
   d64cc:	2003e3d0 	.word	0x2003e3d0
   d64d0:	00015f90 	.word	0x00015f90
   d64d4:	2003e404 	.word	0x2003e404
   d64d8:	000e06a9 	.word	0x000e06a9
   d64dc:	2003e544 	.word	0x2003e544
   d64e0:	000e067e 	.word	0x000e067e
   d64e4:	2003e3d8 	.word	0x2003e3d8
   d64e8:	2003e314 	.word	0x2003e314
   d64ec:	2003e2ec 	.word	0x2003e2ec

000d64f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d64f0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d64f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d64f4:	4604      	mov	r4, r0
   d64f6:	460d      	mov	r5, r1
   d64f8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d64fa:	d916      	bls.n	d652a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d64fc:	4290      	cmp	r0, r2
   d64fe:	d215      	bcs.n	d652c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d6500:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d6504:	1a75      	subs	r5, r6, r1
   d6506:	f1a1 0714 	sub.w	r7, r1, #20
   d650a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d650c:	42b7      	cmp	r7, r6
   d650e:	d01c      	beq.n	d654a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d6510:	b12c      	cbz	r4, d651e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d6512:	4631      	mov	r1, r6
   d6514:	4620      	mov	r0, r4
   d6516:	f006 fbbf 	bl	dcc98 <_ZN6StringC1EOS_>
   d651a:	7c33      	ldrb	r3, [r6, #16]
   d651c:	7423      	strb	r3, [r4, #16]
   d651e:	4630      	mov	r0, r6
   d6520:	f006 fb3e 	bl	dcba0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d6524:	3e14      	subs	r6, #20
   d6526:	3c14      	subs	r4, #20
   d6528:	e7f0      	b.n	d650c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d652a:	d00e      	beq.n	d654a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d652c:	42b5      	cmp	r5, r6
   d652e:	d00c      	beq.n	d654a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d6530:	b12c      	cbz	r4, d653e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d6532:	4629      	mov	r1, r5
   d6534:	4620      	mov	r0, r4
   d6536:	f006 fbaf 	bl	dcc98 <_ZN6StringC1EOS_>
   d653a:	7c2b      	ldrb	r3, [r5, #16]
   d653c:	7423      	strb	r3, [r4, #16]
   d653e:	4628      	mov	r0, r5
   d6540:	f006 fb2e 	bl	dcba0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d6544:	3514      	adds	r5, #20
   d6546:	3414      	adds	r4, #20
   d6548:	e7f0      	b.n	d652c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d654a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d654c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d654c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d6550:	2300      	movs	r3, #0
   d6552:	e9c0 3300 	strd	r3, r3, [r0]
   d6556:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d6558:	684f      	ldr	r7, [r1, #4]
   d655a:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d655c:	4604      	mov	r4, r0
   d655e:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d6560:	dd23      	ble.n	d65aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d6562:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d6566:	fb08 f007 	mul.w	r0, r8, r7
   d656a:	f003 ff4b 	bl	da404 <malloc>
            if (!d) {
   d656e:	4605      	mov	r5, r0
   d6570:	b1d8      	cbz	r0, d65aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d6572:	e9d4 1200 	ldrd	r1, r2, [r4]
   d6576:	fb08 1202 	mla	r2, r8, r2, r1
   d657a:	f7ff ffb9 	bl	d64f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d657e:	6820      	ldr	r0, [r4, #0]
   d6580:	f003 ff48 	bl	da414 <free>
        data_ = d;
   d6584:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d6586:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d6588:	e9d6 7300 	ldrd	r7, r3, [r6]
   d658c:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d6590:	45b8      	cmp	r8, r7
   d6592:	d008      	beq.n	d65a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d6594:	4639      	mov	r1, r7
   d6596:	4628      	mov	r0, r5
   d6598:	f006 fb98 	bl	dcccc <_ZN6StringC1ERKS_>
   d659c:	7c3b      	ldrb	r3, [r7, #16]
   d659e:	742b      	strb	r3, [r5, #16]
   d65a0:	3714      	adds	r7, #20
   d65a2:	3514      	adds	r5, #20
   d65a4:	e7f4      	b.n	d6590 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d65a6:	6873      	ldr	r3, [r6, #4]
   d65a8:	6063      	str	r3, [r4, #4]
}
   d65aa:	4620      	mov	r0, r4
   d65ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d65b0 <_GLOBAL__sub_I___appProductID>:
   d65b0:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   d65b2:	4b56      	ldr	r3, [pc, #344]	; (d670c <_GLOBAL__sub_I___appProductID+0x15c>)
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d65b4:	4e56      	ldr	r6, [pc, #344]	; (d6710 <_GLOBAL__sub_I___appProductID+0x160>)
   d65b6:	2501      	movs	r5, #1
   d65b8:	701d      	strb	r5, [r3, #0]
   d65ba:	4b56      	ldr	r3, [pc, #344]	; (d6714 <_GLOBAL__sub_I___appProductID+0x164>)
   d65bc:	2208      	movs	r2, #8
   d65be:	b08f      	sub	sp, #60	; 0x3c
   d65c0:	701a      	strb	r2, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d65c2:	f007 f903 	bl	dd7cc <spark_protocol_instance>
   d65c6:	2300      	movs	r3, #0
   d65c8:	461a      	mov	r2, r3
   d65ca:	210d      	movs	r1, #13
   d65cc:	f007 f906 	bl	dd7dc <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d65d0:	f007 f8fc 	bl	dd7cc <spark_protocol_instance>
   d65d4:	2300      	movs	r3, #0
   d65d6:	4629      	mov	r1, r5
   d65d8:	461a      	mov	r2, r3
   d65da:	f007 f907 	bl	dd7ec <spark_protocol_set_product_firmware_version>
struct currentCounts_structure {                    // currently 10 bytes long
   d65de:	4b4e      	ldr	r3, [pc, #312]	; (d6718 <_GLOBAL__sub_I___appProductID+0x168>)
   d65e0:	2400      	movs	r4, #0
   d65e2:	2264      	movs	r2, #100	; 0x64
   d65e4:	819c      	strh	r4, [r3, #12]
   d65e6:	611a      	str	r2, [r3, #16]
   d65e8:	751c      	strb	r4, [r3, #20]
              error_(SYSTEM_ERROR_NONE) {
   d65ea:	4b4c      	ldr	r3, [pc, #304]	; (d671c <_GLOBAL__sub_I___appProductID+0x16c>)
    SleepResult() {}
   d65ec:	4a4c      	ldr	r2, [pc, #304]	; (d6720 <_GLOBAL__sub_I___appProductID+0x170>)
              error_(SYSTEM_ERROR_NONE) {
   d65ee:	601c      	str	r4, [r3, #0]
   d65f0:	809c      	strh	r4, [r3, #4]
    SleepResult() {}
   d65f2:	719c      	strb	r4, [r3, #6]
   d65f4:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
   d65f6:	2002      	movs	r0, #2
   d65f8:	f003 fdba 	bl	da170 <set_system_mode>
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
   d65fc:	4621      	mov	r1, r4
   d65fe:	4628      	mov	r0, r5
   d6600:	f003 fdce 	bl	da1a0 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d6604:	4629      	mov	r1, r5
   d6606:	2004      	movs	r0, #4
   d6608:	f003 faf8 	bl	d9bfc <HAL_Feature_Set>
        : config_(config) {
   d660c:	4b45      	ldr	r3, [pc, #276]	; (d6724 <_GLOBAL__sub_I___appProductID+0x174>)
   d660e:	461a      	mov	r2, r3
   d6610:	1d19      	adds	r1, r3, #4
   d6612:	f842 1b09 	str.w	r1, [r2], #9
              valid_(true) {
   d6616:	f8a3 4009 	strh.w	r4, [r3, #9]
   d661a:	7094      	strb	r4, [r2, #2]
        config_.size = sizeof(hal_sleep_config_t);
   d661c:	4a42      	ldr	r2, [pc, #264]	; (d6728 <_GLOBAL__sub_I___appProductID+0x178>)
              valid_(true) {
   d661e:	751d      	strb	r5, [r3, #20]
        config_.wakeup_sources = nullptr;
   d6620:	e9c3 4403 	strd	r4, r4, [r3, #12]
        config_.size = sizeof(hal_sleep_config_t);
   d6624:	605a      	str	r2, [r3, #4]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d6626:	721c      	strb	r4, [r3, #8]
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d6628:	f007 f9ac 	bl	dd984 <_Z19__fetch_global_Wirev>
   d662c:	4623      	mov	r3, r4
   d662e:	4601      	mov	r1, r0
   d6630:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d6634:	4630      	mov	r0, r6
   d6636:	f002 f847 	bl	d86c8 <_ZN6MB85RCC1ER7TwoWireji>
   d663a:	4b3c      	ldr	r3, [pc, #240]	; (d672c <_GLOBAL__sub_I___appProductID+0x17c>)
   d663c:	6033      	str	r3, [r6, #0]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library  
   d663e:	f007 f9a1 	bl	dd984 <_Z19__fetch_global_Wirev>
   d6642:	2269      	movs	r2, #105	; 0x69
   d6644:	4601      	mov	r1, r0
   d6646:	483a      	ldr	r0, [pc, #232]	; (d6730 <_GLOBAL__sub_I___appProductID+0x180>)
   d6648:	f000 fe3e 	bl	d72c8 <_ZN6AB1805C1ER7TwoWireh>
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state
   d664c:	4621      	mov	r1, r4
   d664e:	4839      	ldr	r0, [pc, #228]	; (d6734 <_GLOBAL__sub_I___appProductID+0x184>)
   d6650:	f004 fbf0 	bl	dae34 <_ZN9FuelGaugeC1Eb>
Adafruit_BME680 bme;                                // Instantiate the I2C library
   d6654:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d6658:	4837      	ldr	r0, [pc, #220]	; (d6738 <_GLOBAL__sub_I___appProductID+0x188>)
   d665a:	f001 fbd1 	bl	d7e00 <_ZN15Adafruit_BME680C1Ea>
        capacity_(0) {
   d665e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d6662:	9403      	str	r4, [sp, #12]
            StreamLogHandler(Serial, level, filters) {
   d6664:	f006 fff0 	bl	dd648 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   d6668:	4c34      	ldr	r4, [pc, #208]	; (d673c <_GLOBAL__sub_I___appProductID+0x18c>)
   d666a:	4606      	mov	r6, r0
   d666c:	a901      	add	r1, sp, #4
   d666e:	a804      	add	r0, sp, #16
   d6670:	f7ff ff6c 	bl	d654c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6674:	4627      	mov	r7, r4
        stream_(&stream) {
   d6676:	a904      	add	r1, sp, #16
   d6678:	a807      	add	r0, sp, #28
   d667a:	f7ff ff67 	bl	d654c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d667e:	4b30      	ldr	r3, [pc, #192]	; (d6740 <_GLOBAL__sub_I___appProductID+0x190>)
   d6680:	f847 3b04 	str.w	r3, [r7], #4
   d6684:	a907      	add	r1, sp, #28
   d6686:	a80a      	add	r0, sp, #40	; 0x28
   d6688:	f7ff ff60 	bl	d654c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d668c:	aa0a      	add	r2, sp, #40	; 0x28
   d668e:	4629      	mov	r1, r5
   d6690:	4638      	mov	r0, r7
   d6692:	f005 fc90 	bl	dbfb6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6696:	a80a      	add	r0, sp, #40	; 0x28
   d6698:	f7ff fc14 	bl	d5ec4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d669c:	a807      	add	r0, sp, #28
   d669e:	f7ff fc11 	bl	d5ec4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d66a2:	4b28      	ldr	r3, [pc, #160]	; (d6744 <_GLOBAL__sub_I___appProductID+0x194>)
   d66a4:	6023      	str	r3, [r4, #0]
   d66a6:	6226      	str	r6, [r4, #32]
   d66a8:	a804      	add	r0, sp, #16
   d66aa:	f7ff fc0b 	bl	d5ec4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d66ae:	4b26      	ldr	r3, [pc, #152]	; (d6748 <_GLOBAL__sub_I___appProductID+0x198>)
   d66b0:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d66b2:	f006 ffc9 	bl	dd648 <_Z16_fetch_usbserialv>
   d66b6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d66ba:	f006 ffb5 	bl	dd628 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d66be:	f005 f91f 	bl	db900 <_ZN5spark10LogManager8instanceEv>
   d66c2:	4621      	mov	r1, r4
   d66c4:	f005 fc09 	bl	dbeda <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_ALL);
   d66c8:	a801      	add	r0, sp, #4
   d66ca:	f7ff fbfb 	bl	d5ec4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d66ce:	4b1f      	ldr	r3, [pc, #124]	; (d674c <_GLOBAL__sub_I___appProductID+0x19c>)
	    _M_invoker = &_My_handler::_M_invoke;
   d66d0:	4e1f      	ldr	r6, [pc, #124]	; (d6750 <_GLOBAL__sub_I___appProductID+0x1a0>)
	    _M_manager = &_My_handler::_M_manager;
   d66d2:	4c20      	ldr	r4, [pc, #128]	; (d6754 <_GLOBAL__sub_I___appProductID+0x1a4>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d66d4:	930a      	str	r3, [sp, #40]	; 0x28
Timer countSignalTimer(1000, countSignalTimerISR, true);      // This is how we will ensure the BlueLED stays on long enough for folks to see it.
   d66d6:	aa0a      	add	r2, sp, #40	; 0x28
   d66d8:	462b      	mov	r3, r5
   d66da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d66de:	481e      	ldr	r0, [pc, #120]	; (d6758 <_GLOBAL__sub_I___appProductID+0x1a8>)
	    _M_invoker = &_My_handler::_M_invoke;
   d66e0:	960d      	str	r6, [sp, #52]	; 0x34
	    _M_manager = &_My_handler::_M_manager;
   d66e2:	940c      	str	r4, [sp, #48]	; 0x30
   d66e4:	f7fe fba0 	bl	d4e28 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   d66e8:	a80a      	add	r0, sp, #40	; 0x28
   d66ea:	f7fe fb2b 	bl	d4d44 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d66ee:	4b1b      	ldr	r3, [pc, #108]	; (d675c <_GLOBAL__sub_I___appProductID+0x1ac>)
Timer verboseCountsTimer(2*3600*1000, userSwitchISR, true);   // This timer will turn off verbose counts after 2 hours
   d66f0:	491b      	ldr	r1, [pc, #108]	; (d6760 <_GLOBAL__sub_I___appProductID+0x1b0>)
   d66f2:	930a      	str	r3, [sp, #40]	; 0x28
   d66f4:	aa0a      	add	r2, sp, #40	; 0x28
   d66f6:	462b      	mov	r3, r5
   d66f8:	481a      	ldr	r0, [pc, #104]	; (d6764 <_GLOBAL__sub_I___appProductID+0x1b4>)
	    _M_manager = &_My_handler::_M_manager;
   d66fa:	e9cd 460c 	strd	r4, r6, [sp, #48]	; 0x30
   d66fe:	f7fe fb93 	bl	d4e28 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   d6702:	a80a      	add	r0, sp, #40	; 0x28
   d6704:	f7fe fb1e 	bl	d4d44 <_ZNSt14_Function_baseD1Ev>
   d6708:	b00f      	add	sp, #60	; 0x3c
   d670a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d670c:	2003e1f4 	.word	0x2003e1f4
   d6710:	2003e314 	.word	0x2003e314
   d6714:	2003e1f5 	.word	0x2003e1f5
   d6718:	2003e2ec 	.word	0x2003e2ec
   d671c:	2003e1d8 	.word	0x2003e1d8
   d6720:	ffff0000 	.word	0xffff0000
   d6724:	2003e2b8 	.word	0x2003e2b8
   d6728:	00030010 	.word	0x00030010
   d672c:	000e093c 	.word	0x000e093c
   d6730:	2003e204 	.word	0x2003e204
   d6734:	2003e324 	.word	0x2003e324
   d6738:	2003e240 	.word	0x2003e240
   d673c:	2003e360 	.word	0x2003e360
   d6740:	000e090c 	.word	0x000e090c
   d6744:	000e1214 	.word	0x000e1214
   d6748:	000e0924 	.word	0x000e0924
   d674c:	000d4ba3 	.word	0x000d4ba3
   d6750:	000d4b89 	.word	0x000d4b89
   d6754:	000d4b8d 	.word	0x000d4b8d
   d6758:	2003e2d0 	.word	0x2003e2d0
   d675c:	000d4b7d 	.word	0x000d4b7d
   d6760:	006ddd00 	.word	0x006ddd00
   d6764:	2003e424 	.word	0x2003e424

000d6768 <_Z22disconnectFromParticlev>:
{
   d6768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Log.info("In the disconnect from Particle function");
   d676c:	492f      	ldr	r1, [pc, #188]	; (d682c <_Z22disconnectFromParticlev+0xc4>)
   d676e:	4830      	ldr	r0, [pc, #192]	; (d6830 <_Z22disconnectFromParticlev+0xc8>)
{
   d6770:	b085      	sub	sp, #20
  Log.info("In the disconnect from Particle function");
   d6772:	f7fe fbc7 	bl	d4f04 <_ZNK5spark6Logger4infoEPKcz>
        clearSession_(clearSession) {
   d6776:	2400      	movs	r4, #0
  Particle.disconnect();
   d6778:	a801      	add	r0, sp, #4
   d677a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d677e:	f8ad 400c 	strh.w	r4, [sp, #12]
   d6782:	f004 f880 	bl	da886 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   d6786:	4620      	mov	r0, r4
   d6788:	f003 fa70 	bl	d9c6c <hal_timer_millis>
        while (_while() && !_condition()) {
   d678c:	f643 2a97 	movw	sl, #14999	; 0x3a97
        return hal_timer_millis(nullptr);
   d6790:	4605      	mov	r5, r0
        while (_while() && !_condition()) {
   d6792:	f04f 0b00 	mov.w	fp, #0
        return hal_timer_millis(nullptr);
   d6796:	2000      	movs	r0, #0
   d6798:	f003 fa68 	bl	d9c6c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d679c:	ebb0 0805 	subs.w	r8, r0, r5
   d67a0:	eb61 0904 	sbc.w	r9, r1, r4
        while (_while() && !_condition()) {
   d67a4:	45cb      	cmp	fp, r9
   d67a6:	bf08      	it	eq
   d67a8:	45c2      	cmpeq	sl, r8
   d67aa:	d305      	bcc.n	d67b8 <_Z22disconnectFromParticlev+0x50>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d67ac:	f003 fd7a 	bl	da2a4 <spark_cloud_flag_connected>
   d67b0:	b110      	cbz	r0, d67b8 <_Z22disconnectFromParticlev+0x50>
            spark_process();
   d67b2:	f003 fd67 	bl	da284 <spark_process>
        while (_while() && !_condition()) {
   d67b6:	e7ee      	b.n	d6796 <_Z22disconnectFromParticlev+0x2e>
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d67b8:	4c1e      	ldr	r4, [pc, #120]	; (d6834 <_Z22disconnectFromParticlev+0xcc>)
   d67ba:	f003 fd73 	bl	da2a4 <spark_cloud_flag_connected>
   d67be:	6860      	ldr	r0, [r4, #4]
   d67c0:	2200      	movs	r2, #0
   d67c2:	2102      	movs	r1, #2
   d67c4:	f003 fdce 	bl	da364 <network_disconnect>
        network_off(*this, 0, 0, NULL);
   d67c8:	2300      	movs	r3, #0
   d67ca:	6860      	ldr	r0, [r4, #4]
   d67cc:	461a      	mov	r2, r3
   d67ce:	4619      	mov	r1, r3
   d67d0:	f003 fde0 	bl	da394 <network_off>
        return hal_timer_millis(nullptr);
   d67d4:	2000      	movs	r0, #0
   d67d6:	f003 fa49 	bl	d9c6c <hal_timer_millis>
   d67da:	f04f 0a00 	mov.w	sl, #0
   d67de:	4605      	mov	r5, r0
        while (_while() && !_condition()) {
   d67e0:	f247 582f 	movw	r8, #29999	; 0x752f
   d67e4:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
   d67e8:	2000      	movs	r0, #0
   d67ea:	f003 fa3f 	bl	d9c6c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d67ee:	1b46      	subs	r6, r0, r5
   d67f0:	eb61 070a 	sbc.w	r7, r1, sl
        while (_while() && !_condition()) {
   d67f4:	45b9      	cmp	r9, r7
   d67f6:	bf08      	it	eq
   d67f8:	45b0      	cmpeq	r8, r6
   d67fa:	d306      	bcc.n	d680a <_Z22disconnectFromParticlev+0xa2>
  waitFor(Cellular.isOff, 30000);                                      // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   d67fc:	4620      	mov	r0, r4
   d67fe:	f005 ff19 	bl	dc634 <_ZN5spark12NetworkClass5isOffEv>
   d6802:	b910      	cbnz	r0, d680a <_Z22disconnectFromParticlev+0xa2>
            spark_process();
   d6804:	f003 fd3e 	bl	da284 <spark_process>
        while (_while() && !_condition()) {
   d6808:	e7ee      	b.n	d67e8 <_Z22disconnectFromParticlev+0x80>
   d680a:	480a      	ldr	r0, [pc, #40]	; (d6834 <_Z22disconnectFromParticlev+0xcc>)
   d680c:	f005 ff12 	bl	dc634 <_ZN5spark12NetworkClass5isOffEv>
  sysStatus.connectedStatus = false;
   d6810:	4b09      	ldr	r3, [pc, #36]	; (d6838 <_Z22disconnectFromParticlev+0xd0>)
   d6812:	2200      	movs	r2, #0
   d6814:	70da      	strb	r2, [r3, #3]
  systemStatusWriteNeeded = true;
   d6816:	4b09      	ldr	r3, [pc, #36]	; (d683c <_Z22disconnectFromParticlev+0xd4>)
   d6818:	2401      	movs	r4, #1
  detachInterrupt(userSwitch);                                         // Stop watching the userSwitch as we will no longer be connected
   d681a:	2004      	movs	r0, #4
  systemStatusWriteNeeded = true;
   d681c:	701c      	strb	r4, [r3, #0]
  detachInterrupt(userSwitch);                                         // Stop watching the userSwitch as we will no longer be connected
   d681e:	f004 fcbd 	bl	db19c <_Z15detachInterruptt>
}
   d6822:	4620      	mov	r0, r4
   d6824:	b005      	add	sp, #20
   d6826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d682a:	bf00      	nop
   d682c:	000e06ba 	.word	0x000e06ba
   d6830:	2003e544 	.word	0x2003e544
   d6834:	2003e470 	.word	0x2003e470
   d6838:	2003e3d8 	.word	0x2003e3d8
   d683c:	2003e404 	.word	0x2003e404

000d6840 <loop>:
{
   d6840:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  switch(state) {
   d6844:	4d88      	ldr	r5, [pc, #544]	; (d6a68 <loop+0x228>)
   d6846:	4c89      	ldr	r4, [pc, #548]	; (d6a6c <loop+0x22c>)
   d6848:	782b      	ldrb	r3, [r5, #0]
   d684a:	4f89      	ldr	r7, [pc, #548]	; (d6a70 <loop+0x230>)
   d684c:	f8df 8274 	ldr.w	r8, [pc, #628]	; d6ac4 <loop+0x284>
   d6850:	3b01      	subs	r3, #1
{
   d6852:	b097      	sub	sp, #92	; 0x5c
   d6854:	2b07      	cmp	r3, #7
   d6856:	d83a      	bhi.n	d68ce <loop+0x8e>
   d6858:	e8df f013 	tbh	[pc, r3, lsl #1]
   d685c:	000802d2 	.word	0x000802d2
   d6860:	0136008d 	.word	0x0136008d
   d6864:	025901ac 	.word	0x025901ac
   d6868:	033b0270 	.word	0x033b0270
    if (state != oldState) publishStateTransition();
   d686c:	4b81      	ldr	r3, [pc, #516]	; (d6a74 <loop+0x234>)
   d686e:	781b      	ldrb	r3, [r3, #0]
   d6870:	2b02      	cmp	r3, #2
   d6872:	d001      	beq.n	d6878 <loop+0x38>
   d6874:	f7ff fa8c 	bl	d5d90 <_Z22publishStateTransitionv>
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = NAPPING_STATE;         // When in low power mode, we can nap between taps
   d6878:	79a3      	ldrb	r3, [r4, #6]
   d687a:	b153      	cbz	r3, d6892 <loop+0x52>
   d687c:	f003 f9e6 	bl	d9c4c <HAL_Timer_Get_Milli_Seconds>
   d6880:	4b7d      	ldr	r3, [pc, #500]	; (d6a78 <loop+0x238>)
   d6882:	681b      	ldr	r3, [r3, #0]
   d6884:	1ac0      	subs	r0, r0, r3
   d6886:	4b7d      	ldr	r3, [pc, #500]	; (d6a7c <loop+0x23c>)
   d6888:	681b      	ldr	r3, [r3, #0]
   d688a:	4298      	cmp	r0, r3
   d688c:	bf84      	itt	hi
   d688e:	2304      	movhi	r3, #4
   d6890:	702b      	strbhi	r3, [r5, #0]
    if (firmwareUpdateInProgress) state= FIRMWARE_UPDATE;                                                     // This means there is a firemware update on deck
   d6892:	4b7b      	ldr	r3, [pc, #492]	; (d6a80 <loop+0x240>)
   d6894:	781b      	ldrb	r3, [r3, #0]
   d6896:	b10b      	cbz	r3, d689c <loop+0x5c>
   d6898:	2308      	movs	r3, #8
   d689a:	702b      	strb	r3, [r5, #0]
    if (Time.hour() != Time.hour(lastReportedTime)) state = REPORTING_STATE;                                  // We want to report on the hour but not after bedtime
   d689c:	f006 fdae 	bl	dd3fc <_ZN9TimeClass4hourEv>
   d68a0:	4b78      	ldr	r3, [pc, #480]	; (d6a84 <loop+0x244>)
   d68a2:	4606      	mov	r6, r0
   d68a4:	2100      	movs	r1, #0
   d68a6:	6818      	ldr	r0, [r3, #0]
   d68a8:	f006 fc0a 	bl	dd0c0 <_ZN9TimeClass4hourEx>
   d68ac:	4286      	cmp	r6, r0
   d68ae:	bf1c      	itt	ne
   d68b0:	2306      	movne	r3, #6
   d68b2:	702b      	strbne	r3, [r5, #0]
    if ((Time.hour() >= sysStatus.closeTime) || (Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;   // The park is closed - sleep
   d68b4:	f006 fda2 	bl	dd3fc <_ZN9TimeClass4hourEv>
   d68b8:	7f63      	ldrb	r3, [r4, #29]
   d68ba:	4298      	cmp	r0, r3
   d68bc:	db02      	blt.n	d68c4 <loop+0x84>
   d68be:	2303      	movs	r3, #3
          state = IDLE_STATE;
   d68c0:	702b      	strb	r3, [r5, #0]
    } break;
   d68c2:	e004      	b.n	d68ce <loop+0x8e>
    if ((Time.hour() >= sysStatus.closeTime) || (Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;   // The park is closed - sleep
   d68c4:	f006 fd9a 	bl	dd3fc <_ZN9TimeClass4hourEv>
   d68c8:	7f23      	ldrb	r3, [r4, #28]
   d68ca:	4298      	cmp	r0, r3
   d68cc:	dbf7      	blt.n	d68be <loop+0x7e>
  if (userSwitchDetect) verboseCountsHandler();                        // Will switch modes from verbose to not verbose counts based on current state
   d68ce:	4b6e      	ldr	r3, [pc, #440]	; (d6a88 <loop+0x248>)
   d68d0:	781b      	ldrb	r3, [r3, #0]
   d68d2:	b10b      	cbz	r3, d68d8 <loop+0x98>
   d68d4:	f7ff fa12 	bl	d5cfc <_Z20verboseCountsHandlerv>
  ab1805.loop();                                                       // Keeps the RTC synchronized with the Boron's clock
   d68d8:	486c      	ldr	r0, [pc, #432]	; (d6a8c <loop+0x24c>)
   d68da:	f001 f9eb 	bl	d7cb4 <_ZN6AB18054loopEv>
  PublishQueuePosix::instance().loop();                                // Check to see if we need to tend to the message queue
   d68de:	f002 f963 	bl	d8ba8 <_ZN17PublishQueuePosix8instanceEv>
   d68e2:	f002 f851 	bl	d8988 <_ZN17PublishQueuePosix4loopEv>
  if (systemStatusWriteNeeded) {                                       // These flags get set when a value is changed
   d68e6:	f898 3000 	ldrb.w	r3, [r8]
   d68ea:	b13b      	cbz	r3, d68fc <loop+0xbc>
    fram.put(FRAM::systemStatusAddr,sysStatus);
   d68ec:	4a5f      	ldr	r2, [pc, #380]	; (d6a6c <loop+0x22c>)
   d68ee:	4868      	ldr	r0, [pc, #416]	; (d6a90 <loop+0x250>)
   d68f0:	2101      	movs	r1, #1
   d68f2:	f7ff fafa 	bl	d5eea <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
    systemStatusWriteNeeded = false;
   d68f6:	2300      	movs	r3, #0
   d68f8:	f888 3000 	strb.w	r3, [r8]
  if (currentCountsWriteNeeded) {
   d68fc:	783b      	ldrb	r3, [r7, #0]
   d68fe:	b13b      	cbz	r3, d6910 <loop+0xd0>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d6900:	2318      	movs	r3, #24
   d6902:	4a64      	ldr	r2, [pc, #400]	; (d6a94 <loop+0x254>)
   d6904:	4862      	ldr	r0, [pc, #392]	; (d6a90 <loop+0x250>)
   d6906:	2150      	movs	r1, #80	; 0x50
   d6908:	f001 ff75 	bl	d87f6 <_ZN6MB85RC9writeDataEjPKhj>
    currentCountsWriteNeeded = false;
   d690c:	2300      	movs	r3, #0
   d690e:	703b      	strb	r3, [r7, #0]
  if (outOfMemory >= 0) {                                              // In this function we are going to reset the system if there is an out of memory error
   d6910:	4b61      	ldr	r3, [pc, #388]	; (d6a98 <loop+0x258>)
   d6912:	681b      	ldr	r3, [r3, #0]
   d6914:	2b00      	cmp	r3, #0
   d6916:	db1f      	blt.n	d6958 <loop+0x118>
    snprintf(message, sizeof(message), "Out of memory occurred size=%d",outOfMemory);
   d6918:	4a60      	ldr	r2, [pc, #384]	; (d6a9c <loop+0x25c>)
   d691a:	2140      	movs	r1, #64	; 0x40
   d691c:	a806      	add	r0, sp, #24
   d691e:	f003 fd99 	bl	da454 <snprintf>
    Log.info(message);
   d6922:	485f      	ldr	r0, [pc, #380]	; (d6aa0 <loop+0x260>)
   d6924:	a906      	add	r1, sp, #24
   d6926:	f7fe faed 	bl	d4f04 <_ZNK5spark6Logger4infoEPKcz>
    if (sysStatus.connectedStatus) {
   d692a:	78e3      	ldrb	r3, [r4, #3]
   d692c:	b173      	cbz	r3, d694c <loop+0x10c>
        return waitConditionWhile(_condition, []{ return true; });
   d692e:	f7fe f984 	bl	d4c3a <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
      Particle.publish("Memory",message,PRIVATE);                      // Publish to the console - this is important so we will not filter on verboseMod
   d6932:	2300      	movs	r3, #0
   d6934:	f88d 3000 	strb.w	r3, [sp]
   d6938:	4b5a      	ldr	r3, [pc, #360]	; (d6aa4 <loop+0x264>)
   d693a:	495b      	ldr	r1, [pc, #364]	; (d6aa8 <loop+0x268>)
   d693c:	781b      	ldrb	r3, [r3, #0]
   d693e:	a803      	add	r0, sp, #12
   d6940:	aa06      	add	r2, sp, #24
   d6942:	f7fe f9cd 	bl	d4ce0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   d6946:	a804      	add	r0, sp, #16
   d6948:	f7fe feec 	bl	d5724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(2000);
   d694c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d6950:	f003 fdd0 	bl	da4f4 <delay>
    System.reset();                                                    // An out of memory condition occurred - reset device.
   d6954:	f006 faf6 	bl	dcf44 <_ZN11SystemClass5resetEv>
  if (sysStatus.connectedStatus && !Particle.connected()) {            // If the system thinks we are connected, let's make sure that we are
   d6958:	78e3      	ldrb	r3, [r4, #3]
   d695a:	b14b      	cbz	r3, d6970 <loop+0x130>
   d695c:	f003 fca2 	bl	da2a4 <spark_cloud_flag_connected>
   d6960:	b930      	cbnz	r0, d6970 <loop+0x130>
    state = CONNECTING_STATE;                                          // Go the connecting state - that way we will have limits on connection attempt duration
   d6962:	2305      	movs	r3, #5
    sysStatus.connectedStatus = false;                                 // At least for now, this is the correct state value
   d6964:	70e0      	strb	r0, [r4, #3]
    Log.info("Particle connection failed, reverting to the connecting state");
   d6966:	4951      	ldr	r1, [pc, #324]	; (d6aac <loop+0x26c>)
   d6968:	484d      	ldr	r0, [pc, #308]	; (d6aa0 <loop+0x260>)
    state = CONNECTING_STATE;                                          // Go the connecting state - that way we will have limits on connection attempt duration
   d696a:	702b      	strb	r3, [r5, #0]
    Log.info("Particle connection failed, reverting to the connecting state");
   d696c:	f7fe faca 	bl	d4f04 <_ZNK5spark6Logger4infoEPKcz>
}
   d6970:	b017      	add	sp, #92	; 0x5c
   d6972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (state != oldState) publishStateTransition();
   d6976:	4b3f      	ldr	r3, [pc, #252]	; (d6a74 <loop+0x234>)
   d6978:	781b      	ldrb	r3, [r3, #0]
   d697a:	2b03      	cmp	r3, #3
   d697c:	d001      	beq.n	d6982 <loop+0x142>
   d697e:	f7ff fa07 	bl	d5d90 <_Z22publishStateTransitionv>
    if (sysStatus.connectedStatus || !Cellular.isOff()) disconnectFromParticle();           // Disconnect cleanly from Particle
   d6982:	78e3      	ldrb	r3, [r4, #3]
   d6984:	2b00      	cmp	r3, #0
   d6986:	d068      	beq.n	d6a5a <loop+0x21a>
   d6988:	f7ff feee 	bl	d6768 <_Z22disconnectFromParticlev>
    if (sysStatus.connectedStatus) disconnectFromParticle();           // Disconnect cleanly from Particle
   d698c:	78e3      	ldrb	r3, [r4, #3]
   d698e:	b10b      	cbz	r3, d6994 <loop+0x154>
   d6990:	f7ff feea 	bl	d6768 <_Z22disconnectFromParticlev>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   d6994:	2100      	movs	r1, #0
   d6996:	483d      	ldr	r0, [pc, #244]	; (d6a8c <loop+0x24c>)
    state = IDLE_STATE;                                                // Head back to the idle state to see what to do next
   d6998:	f04f 0902 	mov.w	r9, #2
   d699c:	f885 9000 	strb.w	r9, [r5]
   d69a0:	f000 fd90 	bl	d74c4 <_ZN6AB18056setWDTEi>
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d69a4:	f006 fd19 	bl	dd3da <_ZN9TimeClass3nowEv>
   d69a8:	f44f 6661 	mov.w	r6, #3600	; 0xe10
   d69ac:	fb90 f3f6 	sdiv	r3, r0, r6
   d69b0:	fb03 0616 	mls	r6, r3, r6, r0
        if (valid_) {
   d69b4:	4b3e      	ldr	r3, [pc, #248]	; (d6ab0 <loop+0x270>)
   d69b6:	f5c6 6661 	rsb	r6, r6, #3600	; 0xe10
   d69ba:	7d1a      	ldrb	r2, [r3, #20]
   d69bc:	f5b6 6f61 	cmp.w	r6, #3600	; 0xe10
   d69c0:	bfa8      	it	ge
   d69c2:	f44f 6661 	movge.w	r6, #3600	; 0xe10
   d69c6:	b10a      	cbz	r2, d69cc <loop+0x18c>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d69c8:	f883 9008 	strb.w	r9, [r3, #8]
      .gpio(userSwitch,CHANGE)
   d69cc:	2200      	movs	r2, #0
   d69ce:	2104      	movs	r1, #4
   d69d0:	4837      	ldr	r0, [pc, #220]	; (d6ab0 <loop+0x270>)
   d69d2:	f7fe f9cb 	bl	d4d6c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
      .duration(wakeInSeconds * 1000);
   d69d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d69da:	4371      	muls	r1, r6
   d69dc:	f7fe f9fa 	bl	d4dd4 <_ZN8particle24SystemSleepConfiguration8durationEm>
    SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device continues operations from here
   d69e0:	4933      	ldr	r1, [pc, #204]	; (d6ab0 <loop+0x270>)
   d69e2:	a803      	add	r0, sp, #12
   d69e4:	f006 fab2 	bl	dcf4c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   d69e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d69ec:	4827      	ldr	r0, [pc, #156]	; (d6a8c <loop+0x24c>)
   d69ee:	f000 fd69 	bl	d74c4 <_ZN6AB18056setWDTEi>
    fuelGauge.wakeup();                                                // Make sure the fuelGauge is woke
   d69f2:	4830      	ldr	r0, [pc, #192]	; (d6ab4 <loop+0x274>)
   d69f4:	f004 fada 	bl	dafac <_ZN9FuelGauge6wakeupEv>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d69f8:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   d69fa:	b1e3      	cbz	r3, d6a36 <loop+0x1f6>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d69fc:	889a      	ldrh	r2, [r3, #4]
   d69fe:	2a01      	cmp	r2, #1
   d6a00:	d119      	bne.n	d6a36 <loop+0x1f6>
    if (result.wakeupPin() == userSwitch) {                            // If the user woke the device we need to get up
   d6a02:	899b      	ldrh	r3, [r3, #12]
   d6a04:	2b04      	cmp	r3, #4
   d6a06:	d116      	bne.n	d6a36 <loop+0x1f6>
      setLowPowerMode("0");                                            // We are waking the device for a reaon
   d6a08:	492b      	ldr	r1, [pc, #172]	; (d6ab8 <loop+0x278>)
   d6a0a:	a806      	add	r0, sp, #24
   d6a0c:	f006 f913 	bl	dcc36 <_ZN6StringC1EPKc>
   d6a10:	a806      	add	r0, sp, #24
   d6a12:	f7fe ffed 	bl	d59f0 <_Z15setLowPowerMode6String>
   d6a16:	a806      	add	r0, sp, #24
   d6a18:	f006 f8c2 	bl	dcba0 <_ZN6StringD1Ev>
      if ((Time.hour() >= sysStatus.openTime) && (Time.hour() < sysStatus.closeTime)) {
   d6a1c:	f006 fcee 	bl	dd3fc <_ZN9TimeClass4hourEv>
   d6a20:	7f23      	ldrb	r3, [r4, #28]
   d6a22:	4298      	cmp	r0, r3
   d6a24:	db07      	blt.n	d6a36 <loop+0x1f6>
   d6a26:	f006 fce9 	bl	dd3fc <_ZN9TimeClass4hourEv>
   d6a2a:	7f63      	ldrb	r3, [r4, #29]
   d6a2c:	4298      	cmp	r0, r3
        sysStatus.openTime = 0;                                        // This is for the edge case where the clock is not set and the device won't connect as it thinks it is off hours
   d6a2e:	bfbc      	itt	lt
   d6a30:	f44f 53c0 	movlt.w	r3, #6144	; 0x1800
   d6a34:	83a3      	strhlt	r3, [r4, #28]
    if (Time.hour() < sysStatus.closeTime && Time.hour() >= sysStatus.openTime) { // We might wake up and find it is opening time.  Park is open let's get ready for the day
   d6a36:	f006 fce1 	bl	dd3fc <_ZN9TimeClass4hourEv>
   d6a3a:	7f63      	ldrb	r3, [r4, #29]
   d6a3c:	4298      	cmp	r0, r3
   d6a3e:	f280 80ac 	bge.w	d6b9a <loop+0x35a>
   d6a42:	f006 fcdb 	bl	dd3fc <_ZN9TimeClass4hourEv>
   d6a46:	7f23      	ldrb	r3, [r4, #28]
   d6a48:	4298      	cmp	r0, r3
   d6a4a:	f2c0 80a6 	blt.w	d6b9a <loop+0x35a>
      stayAwake = stayAwakeLong;                                       // Keeps Boron awake after deep sleep - may not be needed
   d6a4e:	4b0b      	ldr	r3, [pc, #44]	; (d6a7c <loop+0x23c>)
   d6a50:	4a1a      	ldr	r2, [pc, #104]	; (d6abc <loop+0x27c>)
   d6a52:	601a      	str	r2, [r3, #0]
    else state = IDLE_STATE;
   d6a54:	2302      	movs	r3, #2
   d6a56:	702b      	strb	r3, [r5, #0]
   d6a58:	e09f      	b.n	d6b9a <loop+0x35a>
    if (sysStatus.connectedStatus || !Cellular.isOff()) disconnectFromParticle();           // Disconnect cleanly from Particle
   d6a5a:	4819      	ldr	r0, [pc, #100]	; (d6ac0 <loop+0x280>)
   d6a5c:	f005 fdea 	bl	dc634 <_ZN5spark12NetworkClass5isOffEv>
   d6a60:	2800      	cmp	r0, #0
   d6a62:	d091      	beq.n	d6988 <loop+0x148>
   d6a64:	e792      	b.n	d698c <loop+0x14c>
   d6a66:	bf00      	nop
   d6a68:	2003e3cd 	.word	0x2003e3cd
   d6a6c:	2003e3d8 	.word	0x2003e3d8
   d6a70:	2003e304 	.word	0x2003e304
   d6a74:	2003e394 	.word	0x2003e394
   d6a78:	2003e3d4 	.word	0x2003e3d4
   d6a7c:	2003e3d0 	.word	0x2003e3d0
   d6a80:	2003e310 	.word	0x2003e310
   d6a84:	2003e35c 	.word	0x2003e35c
   d6a88:	2003e420 	.word	0x2003e420
   d6a8c:	2003e204 	.word	0x2003e204
   d6a90:	2003e314 	.word	0x2003e314
   d6a94:	2003e2ec 	.word	0x2003e2ec
   d6a98:	2003e080 	.word	0x2003e080
   d6a9c:	000e088b 	.word	0x000e088b
   d6aa0:	2003e544 	.word	0x2003e544
   d6aa4:	2003e1f4 	.word	0x2003e1f4
   d6aa8:	000e08aa 	.word	0x000e08aa
   d6aac:	000e08b1 	.word	0x000e08b1
   d6ab0:	2003e2b8 	.word	0x2003e2b8
   d6ab4:	2003e324 	.word	0x2003e324
   d6ab8:	000e047c 	.word	0x000e047c
   d6abc:	00015f90 	.word	0x00015f90
   d6ac0:	2003e470 	.word	0x2003e470
   d6ac4:	2003e404 	.word	0x2003e404
    if (state != oldState) publishStateTransition();
   d6ac8:	4ba8      	ldr	r3, [pc, #672]	; (d6d6c <loop+0x52c>)
   d6aca:	781b      	ldrb	r3, [r3, #0]
   d6acc:	2b04      	cmp	r3, #4
   d6ace:	d001      	beq.n	d6ad4 <loop+0x294>
   d6ad0:	f7ff f95e 	bl	d5d90 <_Z22publishStateTransitionv>
    if (sensorDetect || countSignalTimer.isActive())  break;           // Don't nap until we are done with event
   d6ad4:	4ba6      	ldr	r3, [pc, #664]	; (d6d70 <loop+0x530>)
   d6ad6:	781b      	ldrb	r3, [r3, #0]
   d6ad8:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   d6adc:	2b00      	cmp	r3, #0
   d6ade:	f47f aef6 	bne.w	d68ce <loop+0x8e>
    bool isValid() const { return handle!=nullptr; }
   d6ae2:	4ba4      	ldr	r3, [pc, #656]	; (d6d74 <loop+0x534>)
   d6ae4:	6898      	ldr	r0, [r3, #8]
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }
   d6ae6:	2800      	cmp	r0, #0
   d6ae8:	d15e      	bne.n	d6ba8 <loop+0x368>
    if (sysStatus.connectedStatus || !Cellular.isOff()) disconnectFromParticle();           // Disconnect cleanly from Particle
   d6aea:	78e3      	ldrb	r3, [r4, #3]
   d6aec:	b91b      	cbnz	r3, d6af6 <loop+0x2b6>
   d6aee:	48a2      	ldr	r0, [pc, #648]	; (d6d78 <loop+0x538>)
   d6af0:	f005 fda0 	bl	dc634 <_ZN5spark12NetworkClass5isOffEv>
   d6af4:	b908      	cbnz	r0, d6afa <loop+0x2ba>
   d6af6:	f7ff fe37 	bl	d6768 <_Z22disconnectFromParticlev>
    if (sysStatus.connectedStatus) disconnectFromParticle();           // Disconnect cleanly from Particle
   d6afa:	78e3      	ldrb	r3, [r4, #3]
   d6afc:	b10b      	cbz	r3, d6b02 <loop+0x2c2>
   d6afe:	f7ff fe33 	bl	d6768 <_Z22disconnectFromParticlev>
    stayAwake = 1000;                                                  // Once we come into this function, we need to reset stayAwake as it changes at the top of the hour
   d6b02:	4b9e      	ldr	r3, [pc, #632]	; (d6d7c <loop+0x53c>)
    bool stopWDT() { return setWDT(0); };
   d6b04:	489e      	ldr	r0, [pc, #632]	; (d6d80 <loop+0x540>)
   d6b06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6b0a:	2100      	movs	r1, #0
    state = IDLE_STATE;                                                // Back to the IDLE_STATE after a nap - not enabling updates here as napping is typicallly disconnected
   d6b0c:	f04f 0902 	mov.w	r9, #2
    stayAwake = 1000;                                                  // Once we come into this function, we need to reset stayAwake as it changes at the top of the hour
   d6b10:	601a      	str	r2, [r3, #0]
    state = IDLE_STATE;                                                // Back to the IDLE_STATE after a nap - not enabling updates here as napping is typicallly disconnected
   d6b12:	f885 9000 	strb.w	r9, [r5]
   d6b16:	f000 fcd5 	bl	d74c4 <_ZN6AB18056setWDTEi>
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d6b1a:	f006 fc5e 	bl	dd3da <_ZN9TimeClass3nowEv>
   d6b1e:	f44f 6661 	mov.w	r6, #3600	; 0xe10
   d6b22:	fb90 f3f6 	sdiv	r3, r0, r6
   d6b26:	fb03 0616 	mls	r6, r3, r6, r0
        if (valid_) {
   d6b2a:	4b96      	ldr	r3, [pc, #600]	; (d6d84 <loop+0x544>)
   d6b2c:	f5c6 6661 	rsb	r6, r6, #3600	; 0xe10
   d6b30:	7d1a      	ldrb	r2, [r3, #20]
   d6b32:	f5b6 6f61 	cmp.w	r6, #3600	; 0xe10
   d6b36:	bfa8      	it	ge
   d6b38:	f44f 6661 	movge.w	r6, #3600	; 0xe10
   d6b3c:	b10a      	cbz	r2, d6b42 <loop+0x302>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d6b3e:	f883 9008 	strb.w	r9, [r3, #8]
      .gpio(userSwitch,CHANGE)
   d6b42:	2200      	movs	r2, #0
   d6b44:	2104      	movs	r1, #4
   d6b46:	488f      	ldr	r0, [pc, #572]	; (d6d84 <loop+0x544>)
   d6b48:	f7fe f910 	bl	d4d6c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
      .duration(wakeInSeconds * 1000);
   d6b4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d6b50:	4371      	muls	r1, r6
   d6b52:	f7fe f93f 	bl	d4dd4 <_ZN8particle24SystemSleepConfiguration8durationEm>
    SystemSleepResult result = System.sleep(config);                   // Put the device to sleep
   d6b56:	498b      	ldr	r1, [pc, #556]	; (d6d84 <loop+0x544>)
   d6b58:	a803      	add	r0, sp, #12
   d6b5a:	f006 f9f7 	bl	dcf4c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
    bool resumeWDT() { return setWDT(-1); };
   d6b5e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d6b62:	4887      	ldr	r0, [pc, #540]	; (d6d80 <loop+0x540>)
   d6b64:	f000 fcae 	bl	d74c4 <_ZN6AB18056setWDTEi>
    fuelGauge.wakeup();                                                // Make sure the fuelGauge is woke
   d6b68:	4887      	ldr	r0, [pc, #540]	; (d6d88 <loop+0x548>)
   d6b6a:	f004 fa1f 	bl	dafac <_ZN9FuelGauge6wakeupEv>
   d6b6e:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   d6b70:	2b00      	cmp	r3, #0
   d6b72:	f43f af6f 	beq.w	d6a54 <loop+0x214>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d6b76:	889a      	ldrh	r2, [r3, #4]
   d6b78:	2a01      	cmp	r2, #1
   d6b7a:	f47f af6b 	bne.w	d6a54 <loop+0x214>
    if (result.wakeupPin() == userSwitch) setLowPowerMode("0");
   d6b7e:	899b      	ldrh	r3, [r3, #12]
   d6b80:	2b04      	cmp	r3, #4
   d6b82:	f47f af67 	bne.w	d6a54 <loop+0x214>
   d6b86:	4981      	ldr	r1, [pc, #516]	; (d6d8c <loop+0x54c>)
   d6b88:	a806      	add	r0, sp, #24
   d6b8a:	f006 f854 	bl	dcc36 <_ZN6StringC1EPKc>
   d6b8e:	a806      	add	r0, sp, #24
   d6b90:	f7fe ff2e 	bl	d59f0 <_Z15setLowPowerMode6String>
   d6b94:	a806      	add	r0, sp, #24
   d6b96:	f006 f803 	bl	dcba0 <_ZN6StringD1Ev>
        if (wakeupSource_) {
   d6b9a:	9803      	ldr	r0, [sp, #12]
   d6b9c:	2800      	cmp	r0, #0
   d6b9e:	f43f ae96 	beq.w	d68ce <loop+0x8e>
            free(wakeupSource_);
   d6ba2:	f003 fc37 	bl	da414 <free>
            wakeupSource_ = nullptr;
   d6ba6:	e692      	b.n	d68ce <loop+0x8e>
   d6ba8:	f003 f810 	bl	d9bcc <os_timer_is_active>
   d6bac:	2800      	cmp	r0, #0
   d6bae:	f47f ae8e 	bne.w	d68ce <loop+0x8e>
   d6bb2:	e79a      	b.n	d6aea <loop+0x2aa>
    if (state != oldState) {                                           // Non-blocking function - these are first time items
   d6bb4:	4b6d      	ldr	r3, [pc, #436]	; (d6d6c <loop+0x52c>)
   d6bb6:	781b      	ldrb	r3, [r3, #0]
   d6bb8:	2b05      	cmp	r3, #5
   d6bba:	d035      	beq.n	d6c28 <loop+0x3e8>
      retainedOldState = oldState;                                     // Keep track for where to go next
   d6bbc:	4e74      	ldr	r6, [pc, #464]	; (d6d90 <loop+0x550>)
   d6bbe:	7033      	strb	r3, [r6, #0]
      sysStatus.lastConnectionDuration = 0;                            // Will exit with 0 if we do not connect or are connected or the connection time if we do
   d6bc0:	2300      	movs	r3, #0
   d6bc2:	8523      	strh	r3, [r4, #40]	; 0x28
      publishStateTransition();
   d6bc4:	f7ff f8e4 	bl	d5d90 <_Z22publishStateTransitionv>
      if (sysStatus.connectedStatus && Particle.connected()) {
   d6bc8:	78e3      	ldrb	r3, [r4, #3]
   d6bca:	b953      	cbnz	r3, d6be2 <loop+0x3a2>
      if (sysStatus.lowBatteryMode && digitalRead(userSwitch)) {
   d6bcc:	79e3      	ldrb	r3, [r4, #7]
   d6bce:	b1db      	cbz	r3, d6c08 <loop+0x3c8>
   d6bd0:	2004      	movs	r0, #4
   d6bd2:	f006 fe7b 	bl	dd8cc <digitalRead>
   d6bd6:	b1b8      	cbz	r0, d6c08 <loop+0x3c8>
        Log.info("Connecting state but low battery mode");
   d6bd8:	496e      	ldr	r1, [pc, #440]	; (d6d94 <loop+0x554>)
          Log.info("firmware update completed");
   d6bda:	486f      	ldr	r0, [pc, #444]	; (d6d98 <loop+0x558>)
   d6bdc:	f7fe f992 	bl	d4f04 <_ZNK5spark6Logger4infoEPKcz>
          state = IDLE_STATE;
   d6be0:	e04f      	b.n	d6c82 <loop+0x442>
   d6be2:	f003 fb5f 	bl	da2a4 <spark_cloud_flag_connected>
      if (sysStatus.connectedStatus && Particle.connected()) {
   d6be6:	2800      	cmp	r0, #0
   d6be8:	d0f0      	beq.n	d6bcc <loop+0x38c>
        Log.info("Connecting state but already connected");
   d6bea:	496c      	ldr	r1, [pc, #432]	; (d6d9c <loop+0x55c>)
   d6bec:	486a      	ldr	r0, [pc, #424]	; (d6d98 <loop+0x558>)
   d6bee:	f7fe f989 	bl	d4f04 <_ZNK5spark6Logger4infoEPKcz>
        stayAwake = stayAwakeLong;                                       // Keeps device awake after reboot - helps with recovery
   d6bf2:	4b62      	ldr	r3, [pc, #392]	; (d6d7c <loop+0x53c>)
   d6bf4:	4a6a      	ldr	r2, [pc, #424]	; (d6da0 <loop+0x560>)
   d6bf6:	601a      	str	r2, [r3, #0]
   d6bf8:	f003 f828 	bl	d9c4c <HAL_Timer_Get_Milli_Seconds>
        stayAwakeTimeStamp = millis();
   d6bfc:	4b69      	ldr	r3, [pc, #420]	; (d6da4 <loop+0x564>)
   d6bfe:	6018      	str	r0, [r3, #0]
        (retainedOldState = REPORTING_STATE) ? state = RESP_WAIT_STATE : state = IDLE_STATE;
   d6c00:	2306      	movs	r3, #6
   d6c02:	7033      	strb	r3, [r6, #0]
      if (retainedOldState == REPORTING_STATE) state = RESP_WAIT_STATE;
   d6c04:	2307      	movs	r3, #7
   d6c06:	e65b      	b.n	d68c0 <loop+0x80>
      if (sysStatus.lowPowerMode && digitalRead(userSwitch)) {         // Low power mode and user switch not pressed
   d6c08:	79a3      	ldrb	r3, [r4, #6]
   d6c0a:	2b00      	cmp	r3, #0
   d6c0c:	d13b      	bne.n	d6c86 <loop+0x446>
   d6c0e:	f003 f81d 	bl	d9c4c <HAL_Timer_Get_Milli_Seconds>
      connectionStartTimeStamp = millis();                             // Have to use millis as the clock will get reset on connect
   d6c12:	4b65      	ldr	r3, [pc, #404]	; (d6da8 <loop+0x568>)
   d6c14:	6018      	str	r0, [r3, #0]
        network_on(*this, 0, 0, NULL);
   d6c16:	4858      	ldr	r0, [pc, #352]	; (d6d78 <loop+0x538>)
   d6c18:	2300      	movs	r3, #0
   d6c1a:	6840      	ldr	r0, [r0, #4]
   d6c1c:	461a      	mov	r2, r3
   d6c1e:	4619      	mov	r1, r3
   d6c20:	f003 fbb0 	bl	da384 <network_on>
        spark_cloud_flag_connect();
   d6c24:	f003 fb36 	bl	da294 <spark_cloud_flag_connect>
   d6c28:	f003 f810 	bl	d9c4c <HAL_Timer_Get_Milli_Seconds>
    sysStatus.lastConnectionDuration = int((millis() - connectionStartTimeStamp)/1000);
   d6c2c:	4b5e      	ldr	r3, [pc, #376]	; (d6da8 <loop+0x568>)
   d6c2e:	681b      	ldr	r3, [r3, #0]
   d6c30:	1ac0      	subs	r0, r0, r3
   d6c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6c36:	fbb0 f0f3 	udiv	r0, r0, r3
   d6c3a:	8520      	strh	r0, [r4, #40]	; 0x28
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6c3c:	f003 fb32 	bl	da2a4 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d6c40:	2800      	cmp	r0, #0
   d6c42:	d037      	beq.n	d6cb4 <loop+0x474>
      sysStatus.connectedStatus = true;
   d6c44:	2301      	movs	r3, #1
   d6c46:	70e3      	strb	r3, [r4, #3]
      sysStatus.lastConnection = Time.now();                           // This is the last time we attempted to connect
   d6c48:	f006 fbc7 	bl	dd3da <_ZN9TimeClass3nowEv>
      stayAwake = stayAwakeLong;                                       // Keeps device awake after reboot - helps with recovery
   d6c4c:	4b4b      	ldr	r3, [pc, #300]	; (d6d7c <loop+0x53c>)
   d6c4e:	4a54      	ldr	r2, [pc, #336]	; (d6da0 <loop+0x560>)
   d6c50:	601a      	str	r2, [r3, #0]
      sysStatus.lastConnection = Time.now();                           // This is the last time we attempted to connect
   d6c52:	6260      	str	r0, [r4, #36]	; 0x24
   d6c54:	f002 fffa 	bl	d9c4c <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   d6c58:	4b52      	ldr	r3, [pc, #328]	; (d6da4 <loop+0x564>)
   d6c5a:	6018      	str	r0, [r3, #0]
      recordConnectionDetails();                                       // Record outcome of connection attempt
   d6c5c:	f7fe fd78 	bl	d5750 <_Z23recordConnectionDetailsv>
      Log.info("Cloud connection successful");
   d6c60:	4952      	ldr	r1, [pc, #328]	; (d6dac <loop+0x56c>)
   d6c62:	484d      	ldr	r0, [pc, #308]	; (d6d98 <loop+0x558>)
   d6c64:	f7fe f94e 	bl	d4f04 <_ZNK5spark6Logger4infoEPKcz>
      attachInterrupt(userSwitch, userSwitchISR,FALLING);              // Attach interrupt for the user switch to enable verbose counts
   d6c68:	2300      	movs	r3, #0
   d6c6a:	9300      	str	r3, [sp, #0]
   d6c6c:	4950      	ldr	r1, [pc, #320]	; (d6db0 <loop+0x570>)
   d6c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6c72:	2202      	movs	r2, #2
   d6c74:	2004      	movs	r0, #4
   d6c76:	f004 fa67 	bl	db148 <_Z15attachInterrupttPFvvE13InterruptModeah>
      if (retainedOldState == REPORTING_STATE) state = RESP_WAIT_STATE;
   d6c7a:	4b45      	ldr	r3, [pc, #276]	; (d6d90 <loop+0x550>)
   d6c7c:	781b      	ldrb	r3, [r3, #0]
   d6c7e:	2b06      	cmp	r3, #6
   d6c80:	d0c0      	beq.n	d6c04 <loop+0x3c4>
          state = IDLE_STATE;
   d6c82:	2302      	movs	r3, #2
   d6c84:	e61c      	b.n	d68c0 <loop+0x80>
      if (sysStatus.lowPowerMode && digitalRead(userSwitch)) {         // Low power mode and user switch not pressed
   d6c86:	2004      	movs	r0, #4
   d6c88:	f006 fe20 	bl	dd8cc <digitalRead>
   d6c8c:	2800      	cmp	r0, #0
   d6c8e:	d0be      	beq.n	d6c0e <loop+0x3ce>
        if (sysStatus.stateOfCharge <= 50 && (Time.hour() % 4)) {      // If the battery level is <50%, only connect every fourth hour
   d6c90:	68a3      	ldr	r3, [r4, #8]
   d6c92:	2b32      	cmp	r3, #50	; 0x32
   d6c94:	dd08      	ble.n	d6ca8 <loop+0x468>
        else if (sysStatus.stateOfCharge <= 65 && (Time.hour() % 2)) { // If the battery level is 50% -  65%, only connect every other hour
   d6c96:	68a3      	ldr	r3, [r4, #8]
   d6c98:	2b41      	cmp	r3, #65	; 0x41
   d6c9a:	dcb8      	bgt.n	d6c0e <loop+0x3ce>
   d6c9c:	f006 fbae 	bl	dd3fc <_ZN9TimeClass4hourEv>
   d6ca0:	07c3      	lsls	r3, r0, #31
   d6ca2:	d5b4      	bpl.n	d6c0e <loop+0x3ce>
          Log.info("Connecting but 50-65%% charge - two hour schedule"); 
   d6ca4:	4943      	ldr	r1, [pc, #268]	; (d6db4 <loop+0x574>)
   d6ca6:	e798      	b.n	d6bda <loop+0x39a>
        if (sysStatus.stateOfCharge <= 50 && (Time.hour() % 4)) {      // If the battery level is <50%, only connect every fourth hour
   d6ca8:	f006 fba8 	bl	dd3fc <_ZN9TimeClass4hourEv>
   d6cac:	0782      	lsls	r2, r0, #30
   d6cae:	d0f2      	beq.n	d6c96 <loop+0x456>
          Log.info("Connecting but <50%% charge - four hour schedule"); 
   d6cb0:	4941      	ldr	r1, [pc, #260]	; (d6db8 <loop+0x578>)
   d6cb2:	e792      	b.n	d6bda <loop+0x39a>
    else if (sysStatus.lastConnectionDuration > connectMaxTimeSec) {
   d6cb4:	4b41      	ldr	r3, [pc, #260]	; (d6dbc <loop+0x57c>)
   d6cb6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   d6cb8:	681b      	ldr	r3, [r3, #0]
   d6cba:	429a      	cmp	r2, r3
   d6cbc:	f67f ae07 	bls.w	d68ce <loop+0x8e>
      current.alerts = 2;                                              // Connection timed out alert
   d6cc0:	4b3f      	ldr	r3, [pc, #252]	; (d6dc0 <loop+0x580>)
      sysStatus.connectedStatus = false;
   d6cc2:	70e0      	strb	r0, [r4, #3]
      current.alerts = 2;                                              // Connection timed out alert
   d6cc4:	2202      	movs	r2, #2
   d6cc6:	609a      	str	r2, [r3, #8]
      recordConnectionDetails();                                       // Record outcome of connection attempt
   d6cc8:	f7fe fd42 	bl	d5750 <_Z23recordConnectionDetailsv>
      Log.info("cloud connection unsuccessful");
   d6ccc:	493d      	ldr	r1, [pc, #244]	; (d6dc4 <loop+0x584>)
   d6cce:	4832      	ldr	r0, [pc, #200]	; (d6d98 <loop+0x558>)
   d6cd0:	f7fe f918 	bl	d4f04 <_ZNK5spark6Logger4infoEPKcz>
      disconnectFromParticle();                                        // Make sure the modem is turned off
   d6cd4:	f7ff fd48 	bl	d6768 <_Z22disconnectFromParticlev>
      if (sysStatus.solarPowerMode) setLowPowerMode("1");              // If we cannot connect, there is no point to stayng out of low power mode
   d6cd8:	7963      	ldrb	r3, [r4, #5]
   d6cda:	b14b      	cbz	r3, d6cf0 <loop+0x4b0>
   d6cdc:	493a      	ldr	r1, [pc, #232]	; (d6dc8 <loop+0x588>)
   d6cde:	a806      	add	r0, sp, #24
   d6ce0:	f005 ffa9 	bl	dcc36 <_ZN6StringC1EPKc>
   d6ce4:	a806      	add	r0, sp, #24
   d6ce6:	f7fe fe83 	bl	d59f0 <_Z15setLowPowerMode6String>
   d6cea:	a806      	add	r0, sp, #24
   d6cec:	f005 ff58 	bl	dcba0 <_ZN6StringD1Ev>
      if ((Time.now() - sysStatus.lastConnection) > 3 * 3600L) {       // Only sends to ERROR_STATE if it has been over three hours - this ties to reporting and low battery state
   d6cf0:	f006 fb73 	bl	dd3da <_ZN9TimeClass3nowEv>
   d6cf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d6cf6:	1ac0      	subs	r0, r0, r3
   d6cf8:	f642 2330 	movw	r3, #10800	; 0x2a30
   d6cfc:	4298      	cmp	r0, r3
   d6cfe:	d9c0      	bls.n	d6c82 <loop+0x442>
        state = ERROR_STATE;     
   d6d00:	2301      	movs	r3, #1
   d6d02:	702b      	strb	r3, [r5, #0]
   d6d04:	f002 ffa2 	bl	d9c4c <HAL_Timer_Get_Milli_Seconds>
        resetTimeStamp = millis();
   d6d08:	4b30      	ldr	r3, [pc, #192]	; (d6dcc <loop+0x58c>)
   d6d0a:	6018      	str	r0, [r3, #0]
        break;
   d6d0c:	e5df      	b.n	d68ce <loop+0x8e>
    if (state != oldState) publishStateTransition();
   d6d0e:	4b17      	ldr	r3, [pc, #92]	; (d6d6c <loop+0x52c>)
   d6d10:	781b      	ldrb	r3, [r3, #0]
   d6d12:	2b06      	cmp	r3, #6
   d6d14:	d001      	beq.n	d6d1a <loop+0x4da>
   d6d16:	f7ff f83b 	bl	d5d90 <_Z22publishStateTransitionv>
    lastReportedTime = Time.now();                                    // We are only going to report once each hour from the IDLE state.  We may or may not connect to Particle
   d6d1a:	f006 fb5e 	bl	dd3da <_ZN9TimeClass3nowEv>
   d6d1e:	4b2c      	ldr	r3, [pc, #176]	; (d6dd0 <loop+0x590>)
   d6d20:	6018      	str	r0, [r3, #0]
    takeMeasurements();                                               // Take Measurements here for reporting
   d6d22:	f7fe feb7 	bl	d5a94 <_Z16takeMeasurementsv>
    if (Time.hour() == sysStatus.openTime) dailyCleanup();            // Once a day, clean house and publish to Google Sheets
   d6d26:	f006 fb69 	bl	dd3fc <_ZN9TimeClass4hourEv>
   d6d2a:	7f23      	ldrb	r3, [r4, #28]
   d6d2c:	4298      	cmp	r0, r3
   d6d2e:	d101      	bne.n	d6d34 <loop+0x4f4>
   d6d30:	f7ff f86c 	bl	d5e0c <_Z12dailyCleanupv>
    sendEvent();                                                      // Publish hourly but not at opening time as there is nothing to publish
   d6d34:	f7fe f976 	bl	d5024 <_Z9sendEventv>
    state = CONNECTING_STATE;                                         // We are only passing through this state once each hour    
   d6d38:	2305      	movs	r3, #5
   d6d3a:	e5c1      	b.n	d68c0 <loop+0x80>
    if (state != oldState) {
   d6d3c:	4b0b      	ldr	r3, [pc, #44]	; (d6d6c <loop+0x52c>)
   d6d3e:	4e25      	ldr	r6, [pc, #148]	; (d6dd4 <loop+0x594>)
   d6d40:	781b      	ldrb	r3, [r3, #0]
   d6d42:	2b07      	cmp	r3, #7
   d6d44:	d007      	beq.n	d6d56 <loop+0x516>
   d6d46:	f002 ff81 	bl	d9c4c <HAL_Timer_Get_Milli_Seconds>
      webhookTimeStamp = millis();                                    // We are connected and we have published, head to the response wait state
   d6d4a:	4b23      	ldr	r3, [pc, #140]	; (d6dd8 <loop+0x598>)
   d6d4c:	6018      	str	r0, [r3, #0]
      dataInFlight = true;                                            // set the data inflight flag
   d6d4e:	2301      	movs	r3, #1
   d6d50:	7033      	strb	r3, [r6, #0]
      publishStateTransition();
   d6d52:	f7ff f81d 	bl	d5d90 <_Z22publishStateTransitionv>
    if (!dataInFlight)  {                                             // Response received --> back to IDLE state
   d6d56:	7833      	ldrb	r3, [r6, #0]
   d6d58:	2b00      	cmp	r3, #0
   d6d5a:	d13f      	bne.n	d6ddc <loop+0x59c>
      state = IDLE_STATE;
   d6d5c:	2302      	movs	r3, #2
      state = ERROR_STATE;                                            // Response timed out
   d6d5e:	702b      	strb	r3, [r5, #0]
    currentCountsWriteNeeded = true;
   d6d60:	2301      	movs	r3, #1
   d6d62:	703b      	strb	r3, [r7, #0]
    systemStatusWriteNeeded = true;
   d6d64:	f888 3000 	strb.w	r3, [r8]
  } break;
   d6d68:	e5b1      	b.n	d68ce <loop+0x8e>
   d6d6a:	bf00      	nop
   d6d6c:	2003e394 	.word	0x2003e394
   d6d70:	2003e3bc 	.word	0x2003e3bc
   d6d74:	2003e2d0 	.word	0x2003e2d0
   d6d78:	2003e470 	.word	0x2003e470
   d6d7c:	2003e3d0 	.word	0x2003e3d0
   d6d80:	2003e204 	.word	0x2003e204
   d6d84:	2003e2b8 	.word	0x2003e2b8
   d6d88:	2003e324 	.word	0x2003e324
   d6d8c:	000e047c 	.word	0x000e047c
   d6d90:	2003e1f6 	.word	0x2003e1f6
   d6d94:	000e070a 	.word	0x000e070a
   d6d98:	2003e544 	.word	0x2003e544
   d6d9c:	000e06e3 	.word	0x000e06e3
   d6da0:	00015f90 	.word	0x00015f90
   d6da4:	2003e3d4 	.word	0x2003e3d4
   d6da8:	2003e1fc 	.word	0x2003e1fc
   d6dac:	000e0793 	.word	0x000e0793
   d6db0:	000d4b7d 	.word	0x000d4b7d
   d6db4:	000e0761 	.word	0x000e0761
   d6db8:	000e0730 	.word	0x000e0730
   d6dbc:	2003e074 	.word	0x2003e074
   d6dc0:	2003e2ec 	.word	0x2003e2ec
   d6dc4:	000e07af 	.word	0x000e07af
   d6dc8:	000e01fa 	.word	0x000e01fa
   d6dcc:	2003e3b8 	.word	0x2003e3b8
   d6dd0:	2003e35c 	.word	0x2003e35c
   d6dd4:	2003e30f 	.word	0x2003e30f
   d6dd8:	2003e1f8 	.word	0x2003e1f8
   d6ddc:	f002 ff36 	bl	d9c4c <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d6de0:	4b5a      	ldr	r3, [pc, #360]	; (d6f4c <loop+0x70c>)
   d6de2:	681b      	ldr	r3, [r3, #0]
   d6de4:	1ac0      	subs	r0, r0, r3
   d6de6:	f247 5330 	movw	r3, #30000	; 0x7530
   d6dea:	4298      	cmp	r0, r3
   d6dec:	d9b8      	bls.n	d6d60 <loop+0x520>
   d6dee:	f002 ff2d 	bl	d9c4c <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d6df2:	4b57      	ldr	r3, [pc, #348]	; (d6f50 <loop+0x710>)
   d6df4:	6018      	str	r0, [r3, #0]
      current.alerts = 3;                                             // Raise the missed webhook flag
   d6df6:	4b57      	ldr	r3, [pc, #348]	; (d6f54 <loop+0x714>)
   d6df8:	2203      	movs	r2, #3
   d6dfa:	609a      	str	r2, [r3, #8]
      state = ERROR_STATE;                                            // Response timed out
   d6dfc:	2301      	movs	r3, #1
   d6dfe:	e7ae      	b.n	d6d5e <loop+0x51e>
    if (state != oldState) publishStateTransition();
   d6e00:	4b55      	ldr	r3, [pc, #340]	; (d6f58 <loop+0x718>)
   d6e02:	781b      	ldrb	r3, [r3, #0]
   d6e04:	2b01      	cmp	r3, #1
   d6e06:	d001      	beq.n	d6e0c <loop+0x5cc>
   d6e08:	f7fe ffc2 	bl	d5d90 <_Z22publishStateTransitionv>
   d6e0c:	f002 ff1e 	bl	d9c4c <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {
   d6e10:	4b4f      	ldr	r3, [pc, #316]	; (d6f50 <loop+0x710>)
   d6e12:	681b      	ldr	r3, [r3, #0]
   d6e14:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d6e18:	3330      	adds	r3, #48	; 0x30
   d6e1a:	4283      	cmp	r3, r0
   d6e1c:	f4bf ad57 	bcs.w	d68ce <loop+0x8e>
      if ((Time.now() - sysStatus.lastConnection) > 7200L) {           // It is been over two hours since we last connected to the cloud - time for a reset
   d6e20:	f006 fadb 	bl	dd3da <_ZN9TimeClass3nowEv>
   d6e24:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d6e26:	1ac0      	subs	r0, r0, r3
   d6e28:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d6e2c:	d913      	bls.n	d6e56 <loop+0x616>
        sysStatus.lastConnection = Time.now();                         // Make sure we don't do this very often
   d6e2e:	f006 fad4 	bl	dd3da <_ZN9TimeClass3nowEv>
   d6e32:	6260      	str	r0, [r4, #36]	; 0x24
        disconnectFromParticle();                                      // Make sure cellular modem is off
   d6e34:	f7ff fc98 	bl	d6768 <_Z22disconnectFromParticlev>
        fram.put(FRAM::systemStatusAddr,sysStatus);
   d6e38:	4a48      	ldr	r2, [pc, #288]	; (d6f5c <loop+0x71c>)
   d6e3a:	4849      	ldr	r0, [pc, #292]	; (d6f60 <loop+0x720>)
   d6e3c:	2101      	movs	r1, #1
   d6e3e:	f7ff f854 	bl	d5eea <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
        Log.error("failed to connect to cloud, doing deep reset");
   d6e42:	4848      	ldr	r0, [pc, #288]	; (d6f64 <loop+0x724>)
   d6e44:	4948      	ldr	r1, [pc, #288]	; (d6f68 <loop+0x728>)
   d6e46:	f7fe f874 	bl	d4f32 <_ZNK5spark6Logger5errorEPKcz>
        delay(100);
   d6e4a:	2064      	movs	r0, #100	; 0x64
        delay(2000);
   d6e4c:	f003 fb52 	bl	da4f4 <delay>
        System.reset();
   d6e50:	f006 f878 	bl	dcf44 <_ZN11SystemClass5resetEv>
   d6e54:	e53b      	b.n	d68ce <loop+0x8e>
      else if (sysStatus.resetCount <= 3) {                            // First try simple reset
   d6e56:	6922      	ldr	r2, [r4, #16]
   d6e58:	78e3      	ldrb	r3, [r4, #3]
   d6e5a:	2a03      	cmp	r2, #3
   d6e5c:	dc13      	bgt.n	d6e86 <loop+0x646>
        if (sysStatus.connectedStatus) {
   d6e5e:	b17b      	cbz	r3, d6e80 <loop+0x640>
        return waitConditionWhile(_condition, []{ return true; });
   d6e60:	f7fd feeb 	bl	d4c3a <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
inline ValueT particle::Flag<TagT, ValueT>::value() const {
   d6e64:	4b41      	ldr	r3, [pc, #260]	; (d6f6c <loop+0x72c>)
          Particle.publish("State","Error State - System Reset", PRIVATE, WITH_ACK);    // Brodcast Reset Action
   d6e66:	4a42      	ldr	r2, [pc, #264]	; (d6f70 <loop+0x730>)
   d6e68:	781b      	ldrb	r3, [r3, #0]
   d6e6a:	f88d 3000 	strb.w	r3, [sp]
   d6e6e:	4b41      	ldr	r3, [pc, #260]	; (d6f74 <loop+0x734>)
   d6e70:	4941      	ldr	r1, [pc, #260]	; (d6f78 <loop+0x738>)
   d6e72:	781b      	ldrb	r3, [r3, #0]
   d6e74:	a806      	add	r0, sp, #24
   d6e76:	f7fd ff33 	bl	d4ce0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   d6e7a:	a807      	add	r0, sp, #28
   d6e7c:	f7fe fc52 	bl	d5724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d6e80:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d6e84:	e7e2      	b.n	d6e4c <loop+0x60c>
        if (sysStatus.connectedStatus) {
   d6e86:	b17b      	cbz	r3, d6ea8 <loop+0x668>
   d6e88:	f7fd fed7 	bl	d4c3a <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
   d6e8c:	4b37      	ldr	r3, [pc, #220]	; (d6f6c <loop+0x72c>)
          Particle.publish("State","Error State - Full Modem Reset", PRIVATE, WITH_ACK);            // Brodcast Reset Action
   d6e8e:	4a3b      	ldr	r2, [pc, #236]	; (d6f7c <loop+0x73c>)
   d6e90:	781b      	ldrb	r3, [r3, #0]
   d6e92:	f88d 3000 	strb.w	r3, [sp]
   d6e96:	4b37      	ldr	r3, [pc, #220]	; (d6f74 <loop+0x734>)
   d6e98:	4937      	ldr	r1, [pc, #220]	; (d6f78 <loop+0x738>)
   d6e9a:	781b      	ldrb	r3, [r3, #0]
   d6e9c:	a806      	add	r0, sp, #24
   d6e9e:	f7fd ff1f 	bl	d4ce0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   d6ea2:	a807      	add	r0, sp, #28
   d6ea4:	f7fe fc3e 	bl	d5724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);  
   d6ea8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d6eac:	f003 fb22 	bl	da4f4 <delay>
        disconnectFromParticle();                                      // Make sure we shut down connections gracefully
   d6eb0:	f7ff fc5a 	bl	d6768 <_Z22disconnectFromParticlev>
        sysStatus.resetCount = 0;                                      // Zero the ResetCount
   d6eb4:	2300      	movs	r3, #0
        fram.put(FRAM::systemStatusAddr,sysStatus);                    // Won't get back to the main loop
   d6eb6:	4a29      	ldr	r2, [pc, #164]	; (d6f5c <loop+0x71c>)
   d6eb8:	4829      	ldr	r0, [pc, #164]	; (d6f60 <loop+0x720>)
        sysStatus.resetCount = 0;                                      // Zero the ResetCount
   d6eba:	6123      	str	r3, [r4, #16]
        fram.put(FRAM::systemStatusAddr,sysStatus);                    // Won't get back to the main loop
   d6ebc:	2101      	movs	r1, #1
   d6ebe:	f7ff f814 	bl	d5eea <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
        delay (100);
   d6ec2:	2064      	movs	r0, #100	; 0x64
   d6ec4:	f003 fb16 	bl	da4f4 <delay>
        ab1805.deepPowerDown();                                        // 30 second power cycle of Boron including cellular modem, carrier board and all peripherals
   d6ec8:	211e      	movs	r1, #30
   d6eca:	482d      	ldr	r0, [pc, #180]	; (d6f80 <loop+0x740>)
   d6ecc:	f000 fc54 	bl	d7778 <_ZN6AB180513deepPowerDownEi>
   d6ed0:	e4fd      	b.n	d68ce <loop+0x8e>
      if (state != oldState) {
   d6ed2:	4b21      	ldr	r3, [pc, #132]	; (d6f58 <loop+0x718>)
   d6ed4:	781b      	ldrb	r3, [r3, #0]
   d6ed6:	2b08      	cmp	r3, #8
   d6ed8:	d009      	beq.n	d6eee <loop+0x6ae>
   d6eda:	f002 feb7 	bl	d9c4c <HAL_Timer_Get_Milli_Seconds>
        stateTime = millis();                                          // When did we start the firmware update?
   d6ede:	4b29      	ldr	r3, [pc, #164]	; (d6f84 <loop+0x744>)
        Log.info("In the firmware update state");
   d6ee0:	4929      	ldr	r1, [pc, #164]	; (d6f88 <loop+0x748>)
        stateTime = millis();                                          // When did we start the firmware update?
   d6ee2:	6018      	str	r0, [r3, #0]
        Log.info("In the firmware update state");
   d6ee4:	481f      	ldr	r0, [pc, #124]	; (d6f64 <loop+0x724>)
   d6ee6:	f7fe f80d 	bl	d4f04 <_ZNK5spark6Logger4infoEPKcz>
        publishStateTransition();
   d6eea:	f7fe ff51 	bl	d5d90 <_Z22publishStateTransitionv>
      if (!firmwareUpdateInProgress) {                                 // Done with the update 
   d6eee:	4b27      	ldr	r3, [pc, #156]	; (d6f8c <loop+0x74c>)
   d6ef0:	781b      	ldrb	r3, [r3, #0]
   d6ef2:	b90b      	cbnz	r3, d6ef8 <loop+0x6b8>
          Log.info("firmware update completed");
   d6ef4:	4926      	ldr	r1, [pc, #152]	; (d6f90 <loop+0x750>)
   d6ef6:	e670      	b.n	d6bda <loop+0x39a>
   d6ef8:	f002 fea8 	bl	d9c4c <HAL_Timer_Get_Milli_Seconds>
      if (millis() - stateTime >= firmwareUpdateMaxTime.count()) {     // Ran out of time
   d6efc:	4b21      	ldr	r3, [pc, #132]	; (d6f84 <loop+0x744>)
   d6efe:	681b      	ldr	r3, [r3, #0]
   d6f00:	1ac0      	subs	r0, r0, r3
   d6f02:	4b24      	ldr	r3, [pc, #144]	; (d6f94 <loop+0x754>)
   d6f04:	4298      	cmp	r0, r3
   d6f06:	f67f ace2 	bls.w	d68ce <loop+0x8e>
          current.alerts = 5;                                          // Record alert for timeout
   d6f0a:	4e12      	ldr	r6, [pc, #72]	; (d6f54 <loop+0x714>)
          Log.info("firmware update timed out");
   d6f0c:	4922      	ldr	r1, [pc, #136]	; (d6f98 <loop+0x758>)
   d6f0e:	4815      	ldr	r0, [pc, #84]	; (d6f64 <loop+0x724>)
          current.alerts = 5;                                          // Record alert for timeout
   d6f10:	f04f 0905 	mov.w	r9, #5
          Log.info("firmware update timed out");
   d6f14:	f7fd fff6 	bl	d4f04 <_ZNK5spark6Logger4infoEPKcz>
          current.alerts = 5;                                          // Record alert for timeout
   d6f18:	f8c6 9008 	str.w	r9, [r6, #8]
          snprintf(data, sizeof(data), "{\"alerts\":%i,\"timestamp\":%lu000 }",current.alerts, Time.now());
   d6f1c:	f006 fa5d 	bl	dd3da <_ZN9TimeClass3nowEv>
   d6f20:	4a1e      	ldr	r2, [pc, #120]	; (d6f9c <loop+0x75c>)
   d6f22:	9000      	str	r0, [sp, #0]
   d6f24:	464b      	mov	r3, r9
   d6f26:	2140      	movs	r1, #64	; 0x40
   d6f28:	a806      	add	r0, sp, #24
   d6f2a:	f003 fa93 	bl	da454 <snprintf>
          PublishQueuePosix::instance().publish("Ubidots_Alert_Hook", data, PRIVATE);
   d6f2e:	f001 fe3b 	bl	d8ba8 <_ZN17PublishQueuePosix8instanceEv>
        val_(0) {
   d6f32:	2300      	movs	r3, #0
   d6f34:	f88d 3000 	strb.w	r3, [sp]
   d6f38:	4b0e      	ldr	r3, [pc, #56]	; (d6f74 <loop+0x734>)
   d6f3a:	4919      	ldr	r1, [pc, #100]	; (d6fa0 <loop+0x760>)
   d6f3c:	781b      	ldrb	r3, [r3, #0]
   d6f3e:	aa06      	add	r2, sp, #24
   d6f40:	f7fe f80e 	bl	d4f60 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
          current.updateAttempts++;                                    // Increment the update attempt counter
   d6f44:	7d33      	ldrb	r3, [r6, #20]
   d6f46:	3301      	adds	r3, #1
   d6f48:	7533      	strb	r3, [r6, #20]
   d6f4a:	e69a      	b.n	d6c82 <loop+0x442>
   d6f4c:	2003e1f8 	.word	0x2003e1f8
   d6f50:	2003e3b8 	.word	0x2003e3b8
   d6f54:	2003e2ec 	.word	0x2003e2ec
   d6f58:	2003e394 	.word	0x2003e394
   d6f5c:	2003e3d8 	.word	0x2003e3d8
   d6f60:	2003e314 	.word	0x2003e314
   d6f64:	2003e544 	.word	0x2003e544
   d6f68:	000e07cd 	.word	0x000e07cd
   d6f6c:	2003e1f5 	.word	0x2003e1f5
   d6f70:	000e07fa 	.word	0x000e07fa
   d6f74:	2003e1f4 	.word	0x2003e1f4
   d6f78:	000e0815 	.word	0x000e0815
   d6f7c:	000e081b 	.word	0x000e081b
   d6f80:	2003e204 	.word	0x2003e204
   d6f84:	2003e200 	.word	0x2003e200
   d6f88:	000e083a 	.word	0x000e083a
   d6f8c:	2003e310 	.word	0x2003e310
   d6f90:	000e0857 	.word	0x000e0857
   d6f94:	000927bf 	.word	0x000927bf
   d6f98:	000e0871 	.word	0x000e0871
   d6f9c:	000e022f 	.word	0x000e022f
   d6fa0:	000e0251 	.word	0x000e0251

000d6fa4 <_Z20meterParticlePublishv>:
 * @details Forces a wait so we don't get rate limited
 * 
 * @returns Returns true if it has been more than a second since last publish
 * 
 */
bool meterParticlePublish() {
   d6fa4:	b508      	push	{r3, lr}
   d6fa6:	f002 fe51 	bl	d9c4c <HAL_Timer_Get_Milli_Seconds>
  static unsigned long lastPublish = 0;  
  
  if (millis() - lastPublish >= 1000) return 1;
  
  return 0;
   d6faa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d6fae:	bf34      	ite	cc
   d6fb0:	2000      	movcc	r0, #0
   d6fb2:	2001      	movcs	r0, #1
   d6fb4:	bd08      	pop	{r3, pc}

000d6fb6 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d6fb6:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6fb8:	2000      	movs	r0, #0
   d6fba:	f003 f99b 	bl	da2f4 <spark_sync_time_pending>
   d6fbe:	b128      	cbz	r0, d6fcc <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6fc0:	f003 f970 	bl	da2a4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6fc4:	f080 0001 	eor.w	r0, r0, #1
   d6fc8:	b2c0      	uxtb	r0, r0
    }
   d6fca:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6fcc:	2001      	movs	r0, #1
   d6fce:	e7fc      	b.n	d6fca <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d6fd0 <_Z8isDSTusav>:
 * Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
 * The code works in from months, days and hours in succession toward the two transitions
 *
 * @return true if currently observing DST, false if observing standard time
 */
bool isDSTusa() {
   d6fd0:	b538      	push	{r3, r4, r5, lr}
  int dayOfMonth = Time.day();
   d6fd2:	f006 fa1f 	bl	dd414 <_ZN9TimeClass3dayEv>
   d6fd6:	4605      	mov	r5, r0
  int month = Time.month();
   d6fd8:	f006 fa30 	bl	dd43c <_ZN9TimeClass5monthEv>
   d6fdc:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d6fde:	f006 fa25 	bl	dd42c <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
   d6fe2:	1f23      	subs	r3, r4, #4
   d6fe4:	2b06      	cmp	r3, #6
   d6fe6:	d90e      	bls.n	d7006 <_Z8isDSTusav+0x36>
  { // April to October definetly DST
    return true;
  }
  else if (month < 3 || month > 11)
   d6fe8:	1ee3      	subs	r3, r4, #3
   d6fea:	2b08      	cmp	r3, #8
   d6fec:	d80d      	bhi.n	d700a <_Z8isDSTusav+0x3a>
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d6fee:	3801      	subs	r0, #1
  }

  boolean beforeFirstSunday = (dayOfMonth - dayOfWeek < 0);
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 7);

  if (beforeFirstSunday && !secondSundayOrAfter) return (month == 11);
   d6ff0:	1a2d      	subs	r5, r5, r0
   d6ff2:	d504      	bpl.n	d6ffe <_Z8isDSTusav+0x2e>
   d6ff4:	2c0b      	cmp	r4, #11
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d6ff6:	bf14      	ite	ne
   d6ff8:	2000      	movne	r0, #0
   d6ffa:	2001      	moveq	r0, #1
  if (secSinceMidnightLocal >= 2*3600)
  { // In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d6ffc:	bd38      	pop	{r3, r4, r5, pc}
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
   d6ffe:	2d07      	cmp	r5, #7
   d7000:	dd03      	ble.n	d700a <_Z8isDSTusav+0x3a>
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d7002:	2c03      	cmp	r4, #3
   d7004:	e7f7      	b.n	d6ff6 <_Z8isDSTusav+0x26>
    return true;
   d7006:	2001      	movs	r0, #1
   d7008:	e7f8      	b.n	d6ffc <_Z8isDSTusav+0x2c>
    return false;
   d700a:	2000      	movs	r0, #0
   d700c:	e7f6      	b.n	d6ffc <_Z8isDSTusav+0x2c>
	...

000d7010 <_Z11setTimeZone6String>:
{
   d7010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7014:	b0ca      	sub	sp, #296	; 0x128
   d7016:	4680      	mov	r8, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7018:	f003 f944 	bl	da2a4 <spark_cloud_flag_connected>
        if (!connected()) {
   d701c:	b110      	cbz	r0, d7024 <_Z11setTimeZone6String+0x14>
        return spark_sync_time(NULL);
   d701e:	2000      	movs	r0, #0
   d7020:	f003 f960 	bl	da2e4 <spark_sync_time>
        return hal_timer_millis(nullptr);
   d7024:	2000      	movs	r0, #0
   d7026:	f002 fe21 	bl	d9c6c <hal_timer_millis>
   d702a:	f04f 0a00 	mov.w	sl, #0
   d702e:	4681      	mov	r9, r0
        while (_while() && !_condition()) {
   d7030:	f247 562f 	movw	r6, #29999	; 0x752f
   d7034:	2700      	movs	r7, #0
        return hal_timer_millis(nullptr);
   d7036:	2000      	movs	r0, #0
   d7038:	f002 fe18 	bl	d9c6c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d703c:	ebb0 0409 	subs.w	r4, r0, r9
   d7040:	eb61 050a 	sbc.w	r5, r1, sl
        while (_while() && !_condition()) {
   d7044:	42af      	cmp	r7, r5
   d7046:	bf08      	it	eq
   d7048:	42a6      	cmpeq	r6, r4
   d704a:	d305      	bcc.n	d7058 <_Z11setTimeZone6String+0x48>
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
   d704c:	f7ff ffb3 	bl	d6fb6 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d7050:	b910      	cbnz	r0, d7058 <_Z11setTimeZone6String+0x48>
            spark_process();
   d7052:	f003 f917 	bl	da284 <spark_process>
        while (_while() && !_condition()) {
   d7056:	e7ee      	b.n	d7036 <_Z11setTimeZone6String+0x26>
   d7058:	f7ff ffad 	bl	d6fb6 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d705c:	f8d8 0000 	ldr.w	r0, [r8]
   d7060:	220a      	movs	r2, #10
   d7062:	a903      	add	r1, sp, #12
   d7064:	f008 ff66 	bl	dff34 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d7068:	f100 030c 	add.w	r3, r0, #12
   d706c:	b2db      	uxtb	r3, r3
   d706e:	2b18      	cmp	r3, #24
   d7070:	d859      	bhi.n	d7126 <_Z11setTimeZone6String+0x116>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d7072:	b244      	sxtb	r4, r0
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d7074:	ee07 4a90 	vmov	s15, r4
   d7078:	4f2f      	ldr	r7, [pc, #188]	; (d7138 <_Z11setTimeZone6String+0x128>)
   d707a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d707e:	2501      	movs	r5, #1
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d7080:	ed87 0a05 	vstr	s0, [r7, #20]
  Time.zone(sysStatus.timezone);
   d7084:	f006 f840 	bl	dd108 <_ZN9TimeClass4zoneEf>
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d7088:	4b2c      	ldr	r3, [pc, #176]	; (d713c <_Z11setTimeZone6String+0x12c>)
   d708a:	701d      	strb	r5, [r3, #0]
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d708c:	f006 f9de 	bl	dd44c <_ZN9TimeClass5localEv>
   d7090:	4606      	mov	r6, r0
   d7092:	f006 f9a2 	bl	dd3da <_ZN9TimeClass3nowEv>
   d7096:	1a30      	subs	r0, r6, r0
   d7098:	f008 f81a 	bl	df0d0 <__aeabi_i2d>
   d709c:	a324      	add	r3, pc, #144	; (adr r3, d7130 <_Z11setTimeZone6String+0x120>)
   d709e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d70a2:	f008 f9a9 	bl	df3f8 <__aeabi_ddiv>
   d70a6:	4a26      	ldr	r2, [pc, #152]	; (d7140 <_Z11setTimeZone6String+0x130>)
   d70a8:	e9cd 0100 	strd	r0, r1, [sp]
   d70ac:	4825      	ldr	r0, [pc, #148]	; (d7144 <_Z11setTimeZone6String+0x134>)
   d70ae:	210a      	movs	r1, #10
   d70b0:	f003 f9d0 	bl	da454 <snprintf>
  if (sysStatus.connectedStatus) {
   d70b4:	78fb      	ldrb	r3, [r7, #3]
   d70b6:	2b00      	cmp	r3, #0
   d70b8:	d037      	beq.n	d712a <_Z11setTimeZone6String+0x11a>
    snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
   d70ba:	4623      	mov	r3, r4
   d70bc:	4c22      	ldr	r4, [pc, #136]	; (d7148 <_Z11setTimeZone6String+0x138>)
   d70be:	4a23      	ldr	r2, [pc, #140]	; (d714c <_Z11setTimeZone6String+0x13c>)
   d70c0:	f44f 7180 	mov.w	r1, #256	; 0x100
   d70c4:	a80a      	add	r0, sp, #40	; 0x28
   d70c6:	f003 f9c5 	bl	da454 <snprintf>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d70ca:	7823      	ldrb	r3, [r4, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d70cc:	f88d 3000 	strb.w	r3, [sp]
   d70d0:	a806      	add	r0, sp, #24
   d70d2:	491f      	ldr	r1, [pc, #124]	; (d7150 <_Z11setTimeZone6String+0x140>)
   d70d4:	233c      	movs	r3, #60	; 0x3c
   d70d6:	aa0a      	add	r2, sp, #40	; 0x28
   d70d8:	f003 fcec 	bl	daab4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d70dc:	a807      	add	r0, sp, #28
   d70de:	f7fe fb21 	bl	d5724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    waitUntil(meterParticlePublish);
   d70e2:	f7ff ff5f 	bl	d6fa4 <_Z20meterParticlePublishv>
   d70e6:	b910      	cbnz	r0, d70ee <_Z11setTimeZone6String+0xde>
            spark_process();
   d70e8:	f003 f8cc 	bl	da284 <spark_process>
        while (_while() && !_condition()) {
   d70ec:	e7f9      	b.n	d70e2 <_Z11setTimeZone6String+0xd2>
   d70ee:	f7ff ff59 	bl	d6fa4 <_Z20meterParticlePublishv>
    Particle.publish("Time",Time.timeStr(Time.now()), PRIVATE);
   d70f2:	f006 f972 	bl	dd3da <_ZN9TimeClass3nowEv>
   d70f6:	4602      	mov	r2, r0
   d70f8:	17c3      	asrs	r3, r0, #31
   d70fa:	a806      	add	r0, sp, #24
   d70fc:	f006 f86a 	bl	dd1d4 <_ZN9TimeClass7timeStrEx>
   d7100:	7823      	ldrb	r3, [r4, #0]
   d7102:	9a06      	ldr	r2, [sp, #24]
   d7104:	4912      	ldr	r1, [pc, #72]	; (d7150 <_Z11setTimeZone6String+0x140>)
   d7106:	f88d 3000 	strb.w	r3, [sp]
   d710a:	a804      	add	r0, sp, #16
   d710c:	233c      	movs	r3, #60	; 0x3c
   d710e:	f003 fcd1 	bl	daab4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d7112:	a805      	add	r0, sp, #20
   d7114:	f7fe fb06 	bl	d5724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7118:	a806      	add	r0, sp, #24
   d711a:	f005 fd41 	bl	dcba0 <_ZN6StringD1Ev>
  return 1;
   d711e:	2001      	movs	r0, #1
}
   d7120:	b04a      	add	sp, #296	; 0x128
   d7122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d7126:	2000      	movs	r0, #0
   d7128:	e7fa      	b.n	d7120 <_Z11setTimeZone6String+0x110>
  return 1;
   d712a:	4628      	mov	r0, r5
   d712c:	e7f8      	b.n	d7120 <_Z11setTimeZone6String+0x110>
   d712e:	bf00      	nop
   d7130:	00000000 	.word	0x00000000
   d7134:	40ac2000 	.word	0x40ac2000
   d7138:	2003e3d8 	.word	0x2003e3d8
   d713c:	2003e404 	.word	0x2003e404
   d7140:	000e069f 	.word	0x000e069f
   d7144:	2003e305 	.word	0x2003e305
   d7148:	2003e440 	.word	0x2003e440
   d714c:	000e09bc 	.word	0x000e09bc
   d7150:	000e09d0 	.word	0x000e09d0
   d7154:	00000000 	.word	0x00000000

000d7158 <_Z12setDSTOffset6String>:
int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
   d7158:	b530      	push	{r4, r5, lr}
   d715a:	ed2d 8b02 	vpush	{d8}
   d715e:	b0cb      	sub	sp, #300	; 0x12c
   d7160:	4604      	mov	r4, r0
  time_t t = Time.now();
   d7162:	f006 f93a 	bl	dd3da <_ZN9TimeClass3nowEv>
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d7166:	220a      	movs	r2, #10
  time_t t = Time.now();
   d7168:	4605      	mov	r5, r0
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d716a:	a903      	add	r1, sp, #12
   d716c:	6820      	ldr	r0, [r4, #0]
   d716e:	f008 fee1 	bl	dff34 <strtol>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d7172:	b2c3      	uxtb	r3, r0
   d7174:	2b02      	cmp	r3, #2
   d7176:	d867      	bhi.n	d7248 <_Z12setDSTOffset6String+0xf0>
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
   d7178:	b243      	sxtb	r3, r0
   d717a:	ee08 3a10 	vmov	s16, r3
   d717e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   d7182:	eeb0 0a48 	vmov.f32	s0, s16
   d7186:	f005 ffdf 	bl	dd148 <_ZN9TimeClass12setDSTOffsetEf>
  sysStatus.dstOffset = (float)tempDSTOffset;
   d718a:	4b35      	ldr	r3, [pc, #212]	; (d7260 <_Z12setDSTOffset6String+0x108>)
   d718c:	ed83 8a06 	vstr	s16, [r3, #24]
  systemStatusWriteNeeded = true;
   d7190:	4b34      	ldr	r3, [pc, #208]	; (d7264 <_Z12setDSTOffset6String+0x10c>)
   d7192:	2201      	movs	r2, #1
   d7194:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
   d7196:	ee18 0a10 	vmov	r0, s16
   d719a:	f007 ffab 	bl	df0f4 <__aeabi_f2d>
   d719e:	4a32      	ldr	r2, [pc, #200]	; (d7268 <_Z12setDSTOffset6String+0x110>)
   d71a0:	e9cd 0100 	strd	r0, r1, [sp]
   d71a4:	f44f 7180 	mov.w	r1, #256	; 0x100
   d71a8:	a80a      	add	r0, sp, #40	; 0x28
   d71aa:	f003 f953 	bl	da454 <snprintf>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d71ae:	f006 f8f7 	bl	dd3a0 <_ZN9TimeClass7isValidEv>
   d71b2:	b120      	cbz	r0, d71be <_Z12setDSTOffset6String+0x66>
   d71b4:	f7ff ff0c 	bl	d6fd0 <_Z8isDSTusav>
   d71b8:	b358      	cbz	r0, d7212 <_Z12setDSTOffset6String+0xba>
   d71ba:	f005 ffe3 	bl	dd184 <_ZN9TimeClass8beginDSTEv>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d71be:	f006 f945 	bl	dd44c <_ZN9TimeClass5localEv>
   d71c2:	4604      	mov	r4, r0
   d71c4:	f006 f909 	bl	dd3da <_ZN9TimeClass3nowEv>
   d71c8:	1a20      	subs	r0, r4, r0
   d71ca:	f007 ff81 	bl	df0d0 <__aeabi_i2d>
   d71ce:	a322      	add	r3, pc, #136	; (adr r3, d7258 <_Z12setDSTOffset6String+0x100>)
   d71d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d71d4:	f008 f910 	bl	df3f8 <__aeabi_ddiv>
   d71d8:	4a24      	ldr	r2, [pc, #144]	; (d726c <_Z12setDSTOffset6String+0x114>)
   d71da:	e9cd 0100 	strd	r0, r1, [sp]
   d71de:	210a      	movs	r1, #10
   d71e0:	4823      	ldr	r0, [pc, #140]	; (d7270 <_Z12setDSTOffset6String+0x118>)
   d71e2:	f003 f937 	bl	da454 <snprintf>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d71e6:	f003 f85d 	bl	da2a4 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d71ea:	b358      	cbz	r0, d7244 <_Z12setDSTOffset6String+0xec>
   d71ec:	4c21      	ldr	r4, [pc, #132]	; (d7274 <_Z12setDSTOffset6String+0x11c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d71ee:	4922      	ldr	r1, [pc, #136]	; (d7278 <_Z12setDSTOffset6String+0x120>)
   d71f0:	7823      	ldrb	r3, [r4, #0]
   d71f2:	f88d 3000 	strb.w	r3, [sp]
   d71f6:	a806      	add	r0, sp, #24
   d71f8:	233c      	movs	r3, #60	; 0x3c
   d71fa:	aa0a      	add	r2, sp, #40	; 0x28
   d71fc:	f003 fc5a 	bl	daab4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d7200:	a807      	add	r0, sp, #28
   d7202:	f7fe fa8f 	bl	d5724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    waitUntil(meterParticlePublish);
   d7206:	f7ff fecd 	bl	d6fa4 <_Z20meterParticlePublishv>
   d720a:	b928      	cbnz	r0, d7218 <_Z12setDSTOffset6String+0xc0>
            spark_process();
   d720c:	f003 f83a 	bl	da284 <spark_process>
        while (_while() && !_condition()) {
   d7210:	e7f9      	b.n	d7206 <_Z12setDSTOffset6String+0xae>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d7212:	f005 ffc3 	bl	dd19c <_ZN9TimeClass6endDSTEv>
   d7216:	e7d2      	b.n	d71be <_Z12setDSTOffset6String+0x66>
    waitUntil(meterParticlePublish);
   d7218:	f7ff fec4 	bl	d6fa4 <_Z20meterParticlePublishv>
    Particle.publish("Time",Time.timeStr(t), PRIVATE);
   d721c:	462a      	mov	r2, r5
   d721e:	17eb      	asrs	r3, r5, #31
   d7220:	a806      	add	r0, sp, #24
   d7222:	f005 ffd7 	bl	dd1d4 <_ZN9TimeClass7timeStrEx>
   d7226:	7823      	ldrb	r3, [r4, #0]
   d7228:	9a06      	ldr	r2, [sp, #24]
   d722a:	4913      	ldr	r1, [pc, #76]	; (d7278 <_Z12setDSTOffset6String+0x120>)
   d722c:	f88d 3000 	strb.w	r3, [sp]
   d7230:	a804      	add	r0, sp, #16
   d7232:	233c      	movs	r3, #60	; 0x3c
   d7234:	f003 fc3e 	bl	daab4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d7238:	a805      	add	r0, sp, #20
   d723a:	f7fe fa73 	bl	d5724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d723e:	a806      	add	r0, sp, #24
   d7240:	f005 fcae 	bl	dcba0 <_ZN6StringD1Ev>
  return 1;
   d7244:	2001      	movs	r0, #1
   d7246:	e000      	b.n	d724a <_Z12setDSTOffset6String+0xf2>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d7248:	2000      	movs	r0, #0
}
   d724a:	b04b      	add	sp, #300	; 0x12c
   d724c:	ecbd 8b02 	vpop	{d8}
   d7250:	bd30      	pop	{r4, r5, pc}
   d7252:	bf00      	nop
   d7254:	f3af 8000 	nop.w
   d7258:	00000000 	.word	0x00000000
   d725c:	40ac2000 	.word	0x40ac2000
   d7260:	2003e3d8 	.word	0x2003e3d8
   d7264:	2003e404 	.word	0x2003e404
   d7268:	000e09d5 	.word	0x000e09d5
   d726c:	000e069f 	.word	0x000e069f
   d7270:	2003e305 	.word	0x2003e305
   d7274:	2003e440 	.word	0x2003e440
   d7278:	000e09d0 	.word	0x000e09d0

000d727c <_GLOBAL__sub_I__Z11setTimeZone6String>:
        val_(val) {
   d727c:	4b01      	ldr	r3, [pc, #4]	; (d7284 <_GLOBAL__sub_I__Z11setTimeZone6String+0x8>)
   d727e:	2201      	movs	r2, #1
   d7280:	701a      	strb	r2, [r3, #0]
  if (secSinceMidnightLocal >= 2*3600)
  { // Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d7282:	4770      	bx	lr
   d7284:	2003e440 	.word	0x2003e440

000d7288 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   d7288:	4770      	bx	lr

000d728a <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   d728a:	b510      	push	{r4, lr}
}
   d728c:	2120      	movs	r1, #32
AB1805::~AB1805() {
   d728e:	4604      	mov	r4, r0
}
   d7290:	f006 fbc0 	bl	dda14 <_ZdlPvj>
   d7294:	4620      	mov	r0, r4
   d7296:	bd10      	pop	{r4, pc}

000d7298 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   d7298:	b40e      	push	{r1, r2, r3}
   d729a:	b510      	push	{r4, lr}
   d729c:	b08d      	sub	sp, #52	; 0x34
   d729e:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_TRACE, fmt, args);
   d72a0:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::trace(const char *fmt, ...) const {
   d72a2:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d72a6:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d72a8:	2300      	movs	r3, #0
   d72aa:	2020      	movs	r0, #32
   d72ac:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d72b0:	e9cd 4200 	strd	r4, r2, [sp]
   d72b4:	2001      	movs	r0, #1
   d72b6:	aa04      	add	r2, sp, #16
   d72b8:	f002 ff30 	bl	da11c <log_message_v>
}
   d72bc:	b00d      	add	sp, #52	; 0x34
   d72be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d72c2:	b003      	add	sp, #12
   d72c4:	4770      	bx	lr
	...

000d72c8 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d72c8:	b510      	push	{r4, lr}
   d72ca:	7202      	strb	r2, [r0, #8]
   d72cc:	22ff      	movs	r2, #255	; 0xff
   d72ce:	8142      	strh	r2, [r0, #10]
   d72d0:	2200      	movs	r2, #0
   d72d2:	e9c0 2203 	strd	r2, r2, [r0, #12]
   d72d6:	6142      	str	r2, [r0, #20]
   d72d8:	7602      	strb	r2, [r0, #24]
   d72da:	61c2      	str	r2, [r0, #28]
    instance = this;
   d72dc:	4a02      	ldr	r2, [pc, #8]	; (d72e8 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d72de:	4c03      	ldr	r4, [pc, #12]	; (d72ec <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   d72e0:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d72e2:	e9c0 4100 	strd	r4, r1, [r0]
}
   d72e6:	bd10      	pop	{r4, pc}
   d72e8:	2003e448 	.word	0x2003e448
   d72ec:	000e0c38 	.word	0x000e0c38

000d72f0 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   d72f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d72f4:	f89d 8020 	ldrb.w	r8, [sp, #32]
   d72f8:	4604      	mov	r4, r0
   d72fa:	4689      	mov	r9, r1
   d72fc:	4616      	mov	r6, r2
   d72fe:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   d7300:	f1b8 0f00 	cmp.w	r8, #0
   d7304:	d002      	beq.n	d730c <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   d7306:	6840      	ldr	r0, [r0, #4]
   d7308:	f003 ff0a 	bl	db120 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d730c:	7a21      	ldrb	r1, [r4, #8]
   d730e:	6860      	ldr	r0, [r4, #4]
   d7310:	f003 fee0 	bl	db0d4 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d7314:	6860      	ldr	r0, [r4, #4]
   d7316:	6803      	ldr	r3, [r0, #0]
   d7318:	4649      	mov	r1, r9
   d731a:	689b      	ldr	r3, [r3, #8]
   d731c:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   d731e:	6860      	ldr	r0, [r4, #4]
   d7320:	2100      	movs	r1, #0
   d7322:	f003 fef6 	bl	db112 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d7326:	4605      	mov	r5, r0
   d7328:	bb00      	cbnz	r0, d736c <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d732a:	2301      	movs	r3, #1
   d732c:	7a21      	ldrb	r1, [r4, #8]
   d732e:	6860      	ldr	r0, [r4, #4]
   d7330:	463a      	mov	r2, r7
   d7332:	f003 feba 	bl	db0aa <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   d7336:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d7338:	4603      	mov	r3, r0
        if (count == num) {
   d733a:	d109      	bne.n	d7350 <_ZN6AB180513readRegistersEhPhjb+0x60>
   d733c:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   d733e:	42be      	cmp	r6, r7
   d7340:	d01c      	beq.n	d737c <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   d7342:	6860      	ldr	r0, [r4, #4]
   d7344:	6803      	ldr	r3, [r0, #0]
   d7346:	695b      	ldr	r3, [r3, #20]
   d7348:	4798      	blx	r3
   d734a:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   d734e:	e7f6      	b.n	d733e <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   d7350:	490b      	ldr	r1, [pc, #44]	; (d7380 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   d7352:	480c      	ldr	r0, [pc, #48]	; (d7384 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d7354:	464a      	mov	r2, r9
   d7356:	f7fd fdec 	bl	d4f32 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   d735a:	f1b8 0f00 	cmp.w	r8, #0
   d735e:	d002      	beq.n	d7366 <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   d7360:	6860      	ldr	r0, [r4, #4]
   d7362:	f003 fee6 	bl	db132 <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   d7366:	4628      	mov	r0, r5
   d7368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   d736c:	4603      	mov	r3, r0
   d736e:	4906      	ldr	r1, [pc, #24]	; (d7388 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   d7370:	4804      	ldr	r0, [pc, #16]	; (d7384 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d7372:	464a      	mov	r2, r9
   d7374:	f7fd fddd 	bl	d4f32 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d7378:	2500      	movs	r5, #0
   d737a:	e7ee      	b.n	d735a <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   d737c:	2501      	movs	r5, #1
   d737e:	e7ec      	b.n	d735a <_ZN6AB180513readRegistersEhPhjb+0x6a>
   d7380:	000e09e6 	.word	0x000e09e6
   d7384:	2003e444 	.word	0x2003e444
   d7388:	000e0a0b 	.word	0x000e0a0b

000d738c <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   d738c:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   d738e:	9300      	str	r3, [sp, #0]
   d7390:	2301      	movs	r3, #1
   d7392:	f7ff ffad 	bl	d72f0 <_ZN6AB180513readRegistersEhPhjb>
}
   d7396:	b003      	add	sp, #12
   d7398:	f85d fb04 	ldr.w	pc, [sp], #4

000d739c <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   d739c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   d739e:	8943      	ldrh	r3, [r0, #10]
   d73a0:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   d73a2:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   d73a4:	d010      	beq.n	d73c8 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d73a6:	4e19      	ldr	r6, [pc, #100]	; (d740c <_ZN6AB180510detectChipEv+0x70>)
   d73a8:	4d19      	ldr	r5, [pc, #100]	; (d7410 <_ZN6AB180510detectChipEv+0x74>)
   d73aa:	f002 fc4f 	bl	d9c4c <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   d73ae:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d73b2:	d209      	bcs.n	d73c8 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   d73b4:	8960      	ldrh	r0, [r4, #10]
   d73b6:	f006 fa89 	bl	dd8cc <digitalRead>
   d73ba:	2801      	cmp	r0, #1
   d73bc:	d004      	beq.n	d73c8 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d73be:	4631      	mov	r1, r6
   d73c0:	4628      	mov	r0, r5
   d73c2:	f7fd fd9f 	bl	d4f04 <_ZNK5spark6Logger4infoEPKcz>
   d73c6:	e7f0      	b.n	d73aa <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   d73c8:	2301      	movs	r3, #1
   d73ca:	f10d 0207 	add.w	r2, sp, #7
   d73ce:	2128      	movs	r1, #40	; 0x28
   d73d0:	4620      	mov	r0, r4
   d73d2:	f7ff ffdb 	bl	d738c <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   d73d6:	b930      	cbnz	r0, d73e6 <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   d73d8:	480d      	ldr	r0, [pc, #52]	; (d7410 <_ZN6AB180510detectChipEv+0x74>)
   d73da:	490e      	ldr	r1, [pc, #56]	; (d7414 <_ZN6AB180510detectChipEv+0x78>)
   d73dc:	f7fd fd92 	bl	d4f04 <_ZNK5spark6Logger4infoEPKcz>
   d73e0:	2000      	movs	r0, #0
}
   d73e2:	b002      	add	sp, #8
   d73e4:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   d73e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d73ea:	2b18      	cmp	r3, #24
   d73ec:	d1f4      	bne.n	d73d8 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   d73ee:	2301      	movs	r3, #1
   d73f0:	f10d 0207 	add.w	r2, sp, #7
   d73f4:	2129      	movs	r1, #41	; 0x29
   d73f6:	4620      	mov	r0, r4
   d73f8:	f7ff ffc8 	bl	d738c <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   d73fc:	2800      	cmp	r0, #0
   d73fe:	d0eb      	beq.n	d73d8 <_ZN6AB180510detectChipEv+0x3c>
   d7400:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d7404:	2b05      	cmp	r3, #5
   d7406:	d1e7      	bne.n	d73d8 <_ZN6AB180510detectChipEv+0x3c>
   d7408:	e7eb      	b.n	d73e2 <_ZN6AB180510detectChipEv+0x46>
   d740a:	bf00      	nop
   d740c:	000e0a2f 	.word	0x000e0a2f
   d7410:	2003e444 	.word	0x2003e444
   d7414:	000e0a44 	.word	0x000e0a44

000d7418 <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   d7418:	b507      	push	{r0, r1, r2, lr}
   d741a:	4613      	mov	r3, r2
    uint8_t value = 0;
   d741c:	2200      	movs	r2, #0
   d741e:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   d7422:	f10d 0207 	add.w	r2, sp, #7
   d7426:	f7ff ffb1 	bl	d738c <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   d742a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d742e:	b003      	add	sp, #12
   d7430:	f85d fb04 	ldr.w	pc, [sp], #4

000d7434 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   d7434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7438:	f89d 8018 	ldrb.w	r8, [sp, #24]
   d743c:	4604      	mov	r4, r0
   d743e:	460f      	mov	r7, r1
   d7440:	4615      	mov	r5, r2
   d7442:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   d7444:	f1b8 0f00 	cmp.w	r8, #0
   d7448:	d002      	beq.n	d7450 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   d744a:	6840      	ldr	r0, [r0, #4]
   d744c:	f003 fe68 	bl	db120 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d7450:	7a21      	ldrb	r1, [r4, #8]
   d7452:	6860      	ldr	r0, [r4, #4]
   d7454:	f003 fe3e 	bl	db0d4 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d7458:	6860      	ldr	r0, [r4, #4]
   d745a:	6803      	ldr	r3, [r0, #0]
   d745c:	4639      	mov	r1, r7
   d745e:	689b      	ldr	r3, [r3, #8]
   d7460:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d7462:	442e      	add	r6, r5
   d7464:	42b5      	cmp	r5, r6
   d7466:	6860      	ldr	r0, [r4, #4]
   d7468:	d005      	beq.n	d7476 <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   d746a:	6803      	ldr	r3, [r0, #0]
   d746c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7470:	689b      	ldr	r3, [r3, #8]
   d7472:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d7474:	e7f6      	b.n	d7464 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   d7476:	2101      	movs	r1, #1
   d7478:	f003 fe4b 	bl	db112 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d747c:	4603      	mov	r3, r0
   d747e:	b170      	cbz	r0, d749e <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   d7480:	4908      	ldr	r1, [pc, #32]	; (d74a4 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   d7482:	4809      	ldr	r0, [pc, #36]	; (d74a8 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   d7484:	463a      	mov	r2, r7
   d7486:	f7fd fd54 	bl	d4f32 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d748a:	2500      	movs	r5, #0
    }

    if (lock) {
   d748c:	f1b8 0f00 	cmp.w	r8, #0
   d7490:	d002      	beq.n	d7498 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   d7492:	6860      	ldr	r0, [r4, #4]
   d7494:	f003 fe4d 	bl	db132 <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   d7498:	4628      	mov	r0, r5
   d749a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   d749e:	2501      	movs	r5, #1
   d74a0:	e7f4      	b.n	d748c <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   d74a2:	bf00      	nop
   d74a4:	000e0a51 	.word	0x000e0a51
   d74a8:	2003e444 	.word	0x2003e444

000d74ac <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   d74ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d74ae:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   d74b2:	9300      	str	r3, [sp, #0]
   d74b4:	f10d 020f 	add.w	r2, sp, #15
   d74b8:	2301      	movs	r3, #1
   d74ba:	f7ff ffbb 	bl	d7434 <_ZN6AB180514writeRegistersEhPKhjb>
}
   d74be:	b005      	add	sp, #20
   d74c0:	f85d fb04 	ldr.w	pc, [sp], #4

000d74c4 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   d74c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   d74c6:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   d74c8:	460c      	mov	r4, r1
   d74ca:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   d74cc:	491a      	ldr	r1, [pc, #104]	; (d7538 <_ZN6AB18056setWDTEi+0x74>)
   d74ce:	481b      	ldr	r0, [pc, #108]	; (d753c <_ZN6AB18056setWDTEi+0x78>)
   d74d0:	f7fd fd18 	bl	d4f04 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   d74d4:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   d74d6:	bfb8      	it	lt
   d74d8:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   d74da:	b97c      	cbnz	r4, d74fc <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   d74dc:	2301      	movs	r3, #1
   d74de:	4622      	mov	r2, r4
   d74e0:	211b      	movs	r1, #27
   d74e2:	4628      	mov	r0, r5
   d74e4:	f7ff ffe2 	bl	d74ac <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   d74e8:	4915      	ldr	r1, [pc, #84]	; (d7540 <_ZN6AB18056setWDTEi+0x7c>)
   d74ea:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   d74ec:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   d74ee:	4813      	ldr	r0, [pc, #76]	; (d753c <_ZN6AB18056setWDTEi+0x78>)
   d74f0:	f7ff fed2 	bl	d7298 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   d74f4:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   d74f6:	616c      	str	r4, [r5, #20]
}
   d74f8:	4630      	mov	r0, r6
   d74fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   d74fc:	2c03      	cmp	r4, #3
   d74fe:	dd19      	ble.n	d7534 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   d7500:	10a7      	asrs	r7, r4, #2
   d7502:	2f1f      	cmp	r7, #31
   d7504:	bfa8      	it	ge
   d7506:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d7508:	00ba      	lsls	r2, r7, #2
   d750a:	f062 027c 	orn	r2, r2, #124	; 0x7c
   d750e:	2301      	movs	r3, #1
   d7510:	b2d2      	uxtb	r2, r2
   d7512:	211b      	movs	r1, #27
   d7514:	4628      	mov	r0, r5
   d7516:	f7ff ffc9 	bl	d74ac <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d751a:	463a      	mov	r2, r7
   d751c:	4603      	mov	r3, r0
   d751e:	4909      	ldr	r1, [pc, #36]	; (d7544 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d7520:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d7522:	4806      	ldr	r0, [pc, #24]	; (d753c <_ZN6AB18056setWDTEi+0x78>)
   d7524:	f7ff feb8 	bl	d7298 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   d7528:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   d752c:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   d752e:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   d7530:	616f      	str	r7, [r5, #20]
   d7532:	e7e1      	b.n	d74f8 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   d7534:	2701      	movs	r7, #1
   d7536:	e7e7      	b.n	d7508 <_ZN6AB18056setWDTEi+0x44>
   d7538:	000e0a76 	.word	0x000e0a76
   d753c:	2003e444 	.word	0x2003e444
   d7540:	000e0a80 	.word	0x000e0a80
   d7544:	000e0a9c 	.word	0x000e0a9c

000d7548 <_ZN6AB180517systemEventStaticEyi>:
        }
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
   d7548:	460b      	mov	r3, r1
    if (instance) {
   d754a:	4907      	ldr	r1, [pc, #28]	; (d7568 <_ZN6AB180517systemEventStaticEyi+0x20>)
void AB1805::systemEventStatic(system_event_t event, int param) {
   d754c:	4602      	mov	r2, r0
    if (instance) {
   d754e:	6808      	ldr	r0, [r1, #0]
   d7550:	b148      	cbz	r0, d7566 <_ZN6AB180517systemEventStaticEyi+0x1e>
    if (event == reset) {
   d7552:	2b00      	cmp	r3, #0
   d7554:	bf08      	it	eq
   d7556:	f5b2 6f00 	cmpeq.w	r2, #2048	; 0x800
   d755a:	d104      	bne.n	d7566 <_ZN6AB180517systemEventStaticEyi+0x1e>
        if (watchdogSecs != 0) {
   d755c:	68c3      	ldr	r3, [r0, #12]
   d755e:	b113      	cbz	r3, d7566 <_ZN6AB180517systemEventStaticEyi+0x1e>
            setWDT(0);
   d7560:	2100      	movs	r1, #0
   d7562:	f7ff bfaf 	b.w	d74c4 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   d7566:	4770      	bx	lr
   d7568:	2003e448 	.word	0x2003e448

000d756c <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   d756c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d7570:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d7574:	4605      	mov	r5, r0
   d7576:	4616      	mov	r6, r2
   d7578:	461f      	mov	r7, r3
    if (lock) {
   d757a:	f1b8 0f00 	cmp.w	r8, #0
   d757e:	d004      	beq.n	d758a <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   d7580:	6840      	ldr	r0, [r0, #4]
   d7582:	9101      	str	r1, [sp, #4]
   d7584:	f003 fdcc 	bl	db120 <_ZN7TwoWire4lockEv>
   d7588:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   d758a:	9101      	str	r1, [sp, #4]
   d758c:	2300      	movs	r3, #0
   d758e:	f10d 020f 	add.w	r2, sp, #15
   d7592:	4628      	mov	r0, r5
   d7594:	f7ff fefa 	bl	d738c <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   d7598:	4604      	mov	r4, r0
   d759a:	b160      	cbz	r0, d75b6 <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   d759c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d75a0:	ea03 0206 	and.w	r2, r3, r6
   d75a4:	433a      	orrs	r2, r7
        if (newValue != value) {
   d75a6:	4293      	cmp	r3, r2
   d75a8:	d005      	beq.n	d75b6 <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   d75aa:	9901      	ldr	r1, [sp, #4]
   d75ac:	2300      	movs	r3, #0
   d75ae:	4628      	mov	r0, r5
   d75b0:	f7ff ff7c 	bl	d74ac <_ZN6AB180513writeRegisterEhhb>
   d75b4:	4604      	mov	r4, r0
    if (lock) {
   d75b6:	f1b8 0f00 	cmp.w	r8, #0
   d75ba:	d002      	beq.n	d75c2 <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   d75bc:	6868      	ldr	r0, [r5, #4]
   d75be:	f003 fdb8 	bl	db132 <_ZN7TwoWire6unlockEv>
}
   d75c2:	4620      	mov	r0, r4
   d75c4:	b004      	add	sp, #16
   d75c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d75ca <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d75ca:	b513      	push	{r0, r1, r4, lr}
   d75cc:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d75ce:	f10d 0207 	add.w	r2, sp, #7
   d75d2:	f7ff fedb 	bl	d738c <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   d75d6:	b128      	cbz	r0, d75e4 <_ZN6AB180510isBitClearEhhb+0x1a>
   d75d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d75dc:	421c      	tst	r4, r3
   d75de:	bf0c      	ite	eq
   d75e0:	2001      	moveq	r0, #1
   d75e2:	2000      	movne	r0, #0
}
   d75e4:	b002      	add	sp, #8
   d75e6:	bd10      	pop	{r4, pc}

000d75e8 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d75e8:	b513      	push	{r0, r1, r4, lr}
   d75ea:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d75ec:	f10d 0207 	add.w	r2, sp, #7
   d75f0:	f7ff fecc 	bl	d738c <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   d75f4:	b128      	cbz	r0, d7602 <_ZN6AB18058isBitSetEhhb+0x1a>
   d75f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d75fa:	421c      	tst	r4, r3
   d75fc:	bf14      	ite	ne
   d75fe:	2001      	movne	r0, #1
   d7600:	2000      	moveq	r0, #0
}
   d7602:	b002      	add	sp, #8
   d7604:	bd10      	pop	{r4, pc}

000d7606 <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d7606:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   d7608:	43d2      	mvns	r2, r2
   d760a:	9300      	str	r3, [sp, #0]
   d760c:	b2d2      	uxtb	r2, r2
   d760e:	2300      	movs	r3, #0
   d7610:	f7ff ffac 	bl	d756c <_ZN6AB180512maskRegisterEhhhb>
}
   d7614:	b003      	add	sp, #12
   d7616:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d761c <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   d761c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   d761e:	2301      	movs	r3, #1
   d7620:	f10d 0207 	add.w	r2, sp, #7
   d7624:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   d7626:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   d7628:	f7ff feb0 	bl	d738c <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   d762c:	4605      	mov	r5, r0
   d762e:	b938      	cbnz	r0, d7640 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   d7630:	491e      	ldr	r1, [pc, #120]	; (d76ac <_ZN6AB180516updateWakeReasonEv+0x90>)
   d7632:	481f      	ldr	r0, [pc, #124]	; (d76b0 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d7634:	22ad      	movs	r2, #173	; 0xad
   d7636:	f7fd fc7c 	bl	d4f32 <_ZNK5spark6Logger5errorEPKcz>
}
   d763a:	4628      	mov	r0, r5
   d763c:	b003      	add	sp, #12
   d763e:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   d7640:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d7644:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   d7648:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   d764c:	d00b      	beq.n	d7666 <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d764e:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   d7650:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d7652:	210f      	movs	r1, #15
   d7654:	4620      	mov	r0, r4
   d7656:	f7ff ffd6 	bl	d7606 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   d765a:	4a16      	ldr	r2, [pc, #88]	; (d76b4 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   d765c:	4916      	ldr	r1, [pc, #88]	; (d76b8 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   d765e:	4814      	ldr	r0, [pc, #80]	; (d76b0 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d7660:	f7fd fc50 	bl	d4f04 <_ZNK5spark6Logger4infoEPKcz>
   d7664:	e7e9      	b.n	d763a <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   d7666:	2208      	movs	r2, #8
   d7668:	2117      	movs	r1, #23
   d766a:	4620      	mov	r0, r4
   d766c:	f7ff ffbc 	bl	d75e8 <_ZN6AB18058isBitSetEhhb>
   d7670:	b118      	cbz	r0, d767a <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d7672:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   d7674:	4a11      	ldr	r2, [pc, #68]	; (d76bc <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d7676:	61e3      	str	r3, [r4, #28]
   d7678:	e7f0      	b.n	d765c <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   d767a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d767e:	071a      	lsls	r2, r3, #28
   d7680:	d509      	bpl.n	d7696 <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   d7682:	2303      	movs	r3, #3
   d7684:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   d7686:	2208      	movs	r2, #8
   d7688:	2301      	movs	r3, #1
   d768a:	210f      	movs	r1, #15
   d768c:	4620      	mov	r0, r4
   d768e:	f7ff ffba 	bl	d7606 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   d7692:	4a0b      	ldr	r2, [pc, #44]	; (d76c0 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   d7694:	e7e2      	b.n	d765c <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   d7696:	075b      	lsls	r3, r3, #29
   d7698:	d5cf      	bpl.n	d763a <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   d769a:	2204      	movs	r2, #4
   d769c:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   d769e:	2301      	movs	r3, #1
   d76a0:	210f      	movs	r1, #15
   d76a2:	4620      	mov	r0, r4
   d76a4:	f7ff ffaf 	bl	d7606 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   d76a8:	4a06      	ldr	r2, [pc, #24]	; (d76c4 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   d76aa:	e7d7      	b.n	d765c <_ZN6AB180516updateWakeReasonEv+0x40>
   d76ac:	000e0aef 	.word	0x000e0aef
   d76b0:	2003e444 	.word	0x2003e444
   d76b4:	000e0ac0 	.word	0x000e0ac0
   d76b8:	000e0b0e 	.word	0x000e0b0e
   d76bc:	000e0ac9 	.word	0x000e0ac9
   d76c0:	000e0ad9 	.word	0x000e0ad9
   d76c4:	000e0ae9 	.word	0x000e0ae9

000d76c8 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d76c8:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   d76ca:	9300      	str	r3, [sp, #0]
   d76cc:	4613      	mov	r3, r2
   d76ce:	22ff      	movs	r2, #255	; 0xff
   d76d0:	f7ff ff4c 	bl	d756c <_ZN6AB180512maskRegisterEhhhb>
}
   d76d4:	b003      	add	sp, #12
   d76d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d76dc <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   d76dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d76de:	460f      	mov	r7, r1
   d76e0:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   d76e2:	2301      	movs	r3, #1
   d76e4:	2200      	movs	r2, #0
   d76e6:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   d76e8:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   d76ea:	f7ff fedf 	bl	d74ac <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d76ee:	4604      	mov	r4, r0
   d76f0:	b938      	cbnz	r0, d7702 <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   d76f2:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   d76f6:	491e      	ldr	r1, [pc, #120]	; (d7770 <_ZN6AB180517setCountdownTimerEib+0x94>)
   d76f8:	481e      	ldr	r0, [pc, #120]	; (d7774 <_ZN6AB180517setCountdownTimerEib+0x98>)
   d76fa:	f7fd fc1a 	bl	d4f32 <_ZNK5spark6Logger5errorEPKcz>
}
   d76fe:	4620      	mov	r0, r4
   d7700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   d7702:	2301      	movs	r3, #1
   d7704:	2223      	movs	r2, #35	; 0x23
   d7706:	2118      	movs	r1, #24
   d7708:	4628      	mov	r0, r5
   d770a:	f7ff fecf 	bl	d74ac <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d770e:	4604      	mov	r4, r0
   d7710:	b910      	cbnz	r0, d7718 <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   d7712:	f240 229b 	movw	r2, #667	; 0x29b
   d7716:	e7ee      	b.n	d76f6 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   d7718:	2fff      	cmp	r7, #255	; 0xff
   d771a:	bfa8      	it	ge
   d771c:	27ff      	movge	r7, #255	; 0xff
   d771e:	2f01      	cmp	r7, #1
   d7720:	bfb8      	it	lt
   d7722:	2701      	movlt	r7, #1
   d7724:	2301      	movs	r3, #1
   d7726:	b2fa      	uxtb	r2, r7
   d7728:	2119      	movs	r1, #25
   d772a:	4628      	mov	r0, r5
   d772c:	f7ff febe 	bl	d74ac <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d7730:	4604      	mov	r4, r0
   d7732:	b910      	cbnz	r0, d773a <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   d7734:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   d7738:	e7dd      	b.n	d76f6 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   d773a:	2301      	movs	r3, #1
   d773c:	2208      	movs	r2, #8
   d773e:	2112      	movs	r1, #18
   d7740:	4628      	mov	r0, r5
   d7742:	f7ff ffc1 	bl	d76c8 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d7746:	4604      	mov	r4, r0
   d7748:	b910      	cbnz	r0, d7750 <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   d774a:	f240 22af 	movw	r2, #687	; 0x2af
   d774e:	e7d2      	b.n	d76f6 <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   d7750:	2e00      	cmp	r6, #0
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   d7752:	f04f 0301 	mov.w	r3, #1
   d7756:	bf14      	ite	ne
   d7758:	2283      	movne	r2, #131	; 0x83
   d775a:	2282      	moveq	r2, #130	; 0x82
   d775c:	2118      	movs	r1, #24
   d775e:	4628      	mov	r0, r5
   d7760:	f7ff fea4 	bl	d74ac <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d7764:	4604      	mov	r4, r0
   d7766:	2800      	cmp	r0, #0
   d7768:	d1c9      	bne.n	d76fe <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   d776a:	f240 22b9 	movw	r2, #697	; 0x2b9
   d776e:	e7c2      	b.n	d76f6 <_ZN6AB180517setCountdownTimerEib+0x1a>
   d7770:	000e0b1f 	.word	0x000e0b1f
   d7774:	2003e444 	.word	0x2003e444

000d7778 <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   d7778:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   d777c:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   d777e:	4605      	mov	r5, r0
   d7780:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   d7782:	484f      	ldr	r0, [pc, #316]	; (d78c0 <_ZN6AB180513deepPowerDownEi+0x148>)
   d7784:	494f      	ldr	r1, [pc, #316]	; (d78c4 <_ZN6AB180513deepPowerDownEi+0x14c>)
   d7786:	f7fd fbbd 	bl	d4f04 <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   d778a:	2100      	movs	r1, #0
   d778c:	4628      	mov	r0, r5
   d778e:	f7ff fe99 	bl	d74c4 <_ZN6AB18056setWDTEi>
    if (!bResult) {
   d7792:	4604      	mov	r4, r0
   d7794:	b948      	cbnz	r0, d77aa <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   d7796:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   d779a:	494b      	ldr	r1, [pc, #300]	; (d78c8 <_ZN6AB180513deepPowerDownEi+0x150>)
   d779c:	4848      	ldr	r0, [pc, #288]	; (d78c0 <_ZN6AB180513deepPowerDownEi+0x148>)
   d779e:	f7fd fbc8 	bl	d4f32 <_ZNK5spark6Logger5errorEPKcz>
}
   d77a2:	4620      	mov	r0, r4
   d77a4:	b003      	add	sp, #12
   d77a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   d77aa:	2301      	movs	r3, #1
   d77ac:	461a      	mov	r2, r3
   d77ae:	2130      	movs	r1, #48	; 0x30
   d77b0:	4628      	mov	r0, r5
   d77b2:	f7ff ff89 	bl	d76c8 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d77b6:	4604      	mov	r4, r0
   d77b8:	b910      	cbnz	r0, d77c0 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   d77ba:	f240 2205 	movw	r2, #517	; 0x205
   d77be:	e7ec      	b.n	d779a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   d77c0:	2210      	movs	r2, #16
   d77c2:	2301      	movs	r3, #1
   d77c4:	4611      	mov	r1, r2
   d77c6:	4628      	mov	r0, r5
   d77c8:	f7ff ff1d 	bl	d7606 <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   d77cc:	4604      	mov	r4, r0
   d77ce:	b910      	cbnz	r0, d77d6 <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   d77d0:	f44f 7203 	mov.w	r2, #524	; 0x20c
   d77d4:	e7e1      	b.n	d779a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   d77d6:	2301      	movs	r3, #1
   d77d8:	2226      	movs	r2, #38	; 0x26
   d77da:	2113      	movs	r1, #19
   d77dc:	4628      	mov	r0, r5
   d77de:	f7ff fe65 	bl	d74ac <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d77e2:	4604      	mov	r4, r0
   d77e4:	b910      	cbnz	r0, d77ec <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   d77e6:	f240 2213 	movw	r2, #531	; 0x213
   d77ea:	e7d6      	b.n	d779a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   d77ec:	2601      	movs	r6, #1
   d77ee:	9600      	str	r6, [sp, #0]
   d77f0:	4633      	mov	r3, r6
   d77f2:	22fc      	movs	r2, #252	; 0xfc
   d77f4:	2111      	movs	r1, #17
   d77f6:	4628      	mov	r0, r5
   d77f8:	f7ff feb8 	bl	d756c <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d77fc:	4604      	mov	r4, r0
   d77fe:	b910      	cbnz	r0, d7806 <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   d7800:	f240 221b 	movw	r2, #539	; 0x21b
   d7804:	e7c9      	b.n	d779a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   d7806:	2200      	movs	r2, #0
   d7808:	4639      	mov	r1, r7
   d780a:	4628      	mov	r0, r5
   d780c:	f7ff ff66 	bl	d76dc <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   d7810:	4604      	mov	r4, r0
   d7812:	b910      	cbnz	r0, d781a <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   d7814:	f240 2222 	movw	r2, #546	; 0x222
   d7818:	e7bf      	b.n	d779a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   d781a:	9600      	str	r6, [sp, #0]
   d781c:	2302      	movs	r3, #2
   d781e:	2277      	movs	r2, #119	; 0x77
   d7820:	2110      	movs	r1, #16
   d7822:	4628      	mov	r0, r5
   d7824:	f7ff fea2 	bl	d756c <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d7828:	4604      	mov	r4, r0
   d782a:	b910      	cbnz	r0, d7832 <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   d782c:	f240 222b 	movw	r2, #555	; 0x22b
   d7830:	e7b3      	b.n	d779a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   d7832:	4633      	mov	r3, r6
   d7834:	2204      	movs	r2, #4
   d7836:	211c      	movs	r1, #28
   d7838:	4628      	mov	r0, r5
   d783a:	f7ff ff45 	bl	d76c8 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d783e:	4604      	mov	r4, r0
   d7840:	b910      	cbnz	r0, d7848 <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   d7842:	f240 2232 	movw	r2, #562	; 0x232
   d7846:	e7a8      	b.n	d779a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   d7848:	9600      	str	r6, [sp, #0]
   d784a:	2318      	movs	r3, #24
   d784c:	22e3      	movs	r2, #227	; 0xe3
   d784e:	2111      	movs	r1, #17
   d7850:	4628      	mov	r0, r5
   d7852:	f7ff fe8b 	bl	d756c <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d7856:	4604      	mov	r4, r0
   d7858:	b910      	cbnz	r0, d7860 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   d785a:	f240 2239 	movw	r2, #569	; 0x239
   d785e:	e79c      	b.n	d779a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   d7860:	4633      	mov	r3, r6
   d7862:	22c0      	movs	r2, #192	; 0xc0
   d7864:	2117      	movs	r1, #23
   d7866:	4628      	mov	r0, r5
   d7868:	f7ff fe20 	bl	d74ac <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d786c:	4604      	mov	r4, r0
   d786e:	b910      	cbnz	r0, d7876 <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   d7870:	f44f 7210 	mov.w	r2, #576	; 0x240
   d7874:	e791      	b.n	d779a <_ZN6AB180513deepPowerDownEi+0x22>
   d7876:	f002 f9e9 	bl	d9c4c <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   d787a:	f8df 9054 	ldr.w	r9, [pc, #84]	; d78d0 <_ZN6AB180513deepPowerDownEi+0x158>
   d787e:	f8df 8040 	ldr.w	r8, [pc, #64]	; d78c0 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   d7882:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d7886:	4606      	mov	r6, r0
   d7888:	434f      	muls	r7, r1
   d788a:	f002 f9df 	bl	d9c4c <HAL_Timer_Get_Milli_Seconds>
   d788e:	1b80      	subs	r0, r0, r6
   d7890:	42b8      	cmp	r0, r7
   d7892:	d20e      	bcs.n	d78b2 <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   d7894:	2201      	movs	r2, #1
   d7896:	2117      	movs	r1, #23
   d7898:	4628      	mov	r0, r5
   d789a:	f7ff fdbd 	bl	d7418 <_ZN6AB180512readRegisterEhb>
   d789e:	4649      	mov	r1, r9
   d78a0:	4602      	mov	r2, r0
   d78a2:	4640      	mov	r0, r8
   d78a4:	f7fd fb2e 	bl	d4f04 <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   d78a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d78ac:	f002 fe22 	bl	da4f4 <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   d78b0:	e7eb      	b.n	d788a <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   d78b2:	4906      	ldr	r1, [pc, #24]	; (d78cc <_ZN6AB180513deepPowerDownEi+0x154>)
   d78b4:	4802      	ldr	r0, [pc, #8]	; (d78c0 <_ZN6AB180513deepPowerDownEi+0x148>)
   d78b6:	f7fd fb3c 	bl	d4f32 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   d78ba:	f005 fb43 	bl	dcf44 <_ZN11SystemClass5resetEv>
    return true;
   d78be:	e770      	b.n	d77a2 <_ZN6AB180513deepPowerDownEi+0x2a>
   d78c0:	2003e444 	.word	0x2003e444
   d78c4:	000e0b4a 	.word	0x000e0b4a
   d78c8:	000e0b3f 	.word	0x000e0b3f
   d78cc:	000e0b70 	.word	0x000e0b70
   d78d0:	000e0b5b 	.word	0x000e0b5b

000d78d4 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   d78d4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d78d8:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d78dc:	4605      	mov	r5, r0
   d78de:	460c      	mov	r4, r1
   d78e0:	4691      	mov	r9, r2
   d78e2:	461f      	mov	r7, r3
    if (lock) {
   d78e4:	f1ba 0f00 	cmp.w	sl, #0
   d78e8:	d002      	beq.n	d78f0 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   d78ea:	6840      	ldr	r0, [r0, #4]
   d78ec:	f003 fc18 	bl	db120 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d78f0:	b307      	cbz	r7, d7934 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   d78f2:	2f20      	cmp	r7, #32
   d78f4:	463e      	mov	r6, r7
   d78f6:	bf28      	it	cs
   d78f8:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d78fa:	2c7f      	cmp	r4, #127	; 0x7f
   d78fc:	d826      	bhi.n	d794c <_ZN6AB18057readRamEjPhjb+0x78>
   d78fe:	1933      	adds	r3, r6, r4
   d7900:	2b80      	cmp	r3, #128	; 0x80
   d7902:	d901      	bls.n	d7908 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   d7904:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d7908:	2301      	movs	r3, #1
   d790a:	2204      	movs	r2, #4
   d790c:	213f      	movs	r1, #63	; 0x3f
   d790e:	4628      	mov	r0, r5
   d7910:	f7ff fe79 	bl	d7606 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d7914:	2300      	movs	r3, #0
   d7916:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d791a:	9300      	str	r3, [sp, #0]
   d791c:	464a      	mov	r2, r9
   d791e:	4633      	mov	r3, r6
   d7920:	b2c9      	uxtb	r1, r1
   d7922:	4628      	mov	r0, r5
   d7924:	f7ff fce4 	bl	d72f0 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   d7928:	4680      	mov	r8, r0
   d792a:	b128      	cbz	r0, d7938 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   d792c:	4434      	add	r4, r6
        dataLen -= count;
   d792e:	1bbf      	subs	r7, r7, r6
        data += count;
   d7930:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d7932:	e7dd      	b.n	d78f0 <_ZN6AB18057readRamEjPhjb+0x1c>
   d7934:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d7938:	f1ba 0f00 	cmp.w	sl, #0
   d793c:	d002      	beq.n	d7944 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   d793e:	6868      	ldr	r0, [r5, #4]
   d7940:	f003 fbf7 	bl	db132 <_ZN7TwoWire6unlockEv>
}
   d7944:	4640      	mov	r0, r8
   d7946:	b002      	add	sp, #8
   d7948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d794c:	2301      	movs	r3, #1
   d794e:	2204      	movs	r2, #4
   d7950:	213f      	movs	r1, #63	; 0x3f
   d7952:	4628      	mov	r0, r5
   d7954:	f7ff feb8 	bl	d76c8 <_ZN6AB180514setRegisterBitEhhb>
   d7958:	e7dc      	b.n	d7914 <_ZN6AB18057readRamEjPhjb+0x40>

000d795a <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   d795a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d795e:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d7962:	4605      	mov	r5, r0
   d7964:	460c      	mov	r4, r1
   d7966:	4691      	mov	r9, r2
   d7968:	461f      	mov	r7, r3
    if (lock) {
   d796a:	f1ba 0f00 	cmp.w	sl, #0
   d796e:	d002      	beq.n	d7976 <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   d7970:	6840      	ldr	r0, [r0, #4]
   d7972:	f003 fbd5 	bl	db120 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d7976:	b307      	cbz	r7, d79ba <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   d7978:	2f1f      	cmp	r7, #31
   d797a:	463e      	mov	r6, r7
   d797c:	bf28      	it	cs
   d797e:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d7980:	2c7f      	cmp	r4, #127	; 0x7f
   d7982:	d826      	bhi.n	d79d2 <_ZN6AB18058writeRamEjPKhjb+0x78>
   d7984:	1933      	adds	r3, r6, r4
   d7986:	2b80      	cmp	r3, #128	; 0x80
   d7988:	d901      	bls.n	d798e <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   d798a:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d798e:	2301      	movs	r3, #1
   d7990:	2204      	movs	r2, #4
   d7992:	213f      	movs	r1, #63	; 0x3f
   d7994:	4628      	mov	r0, r5
   d7996:	f7ff fe36 	bl	d7606 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d799a:	2300      	movs	r3, #0
   d799c:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d79a0:	9300      	str	r3, [sp, #0]
   d79a2:	464a      	mov	r2, r9
   d79a4:	4633      	mov	r3, r6
   d79a6:	b2c9      	uxtb	r1, r1
   d79a8:	4628      	mov	r0, r5
   d79aa:	f7ff fd43 	bl	d7434 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   d79ae:	4680      	mov	r8, r0
   d79b0:	b128      	cbz	r0, d79be <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   d79b2:	4434      	add	r4, r6
        dataLen -= count;
   d79b4:	1bbf      	subs	r7, r7, r6
        data += count;
   d79b6:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d79b8:	e7dd      	b.n	d7976 <_ZN6AB18058writeRamEjPKhjb+0x1c>
   d79ba:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d79be:	f1ba 0f00 	cmp.w	sl, #0
   d79c2:	d002      	beq.n	d79ca <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   d79c4:	6868      	ldr	r0, [r5, #4]
   d79c6:	f003 fbb4 	bl	db132 <_ZN7TwoWire6unlockEv>
}
   d79ca:	4640      	mov	r0, r8
   d79cc:	b002      	add	sp, #8
   d79ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d79d2:	2301      	movs	r3, #1
   d79d4:	2204      	movs	r2, #4
   d79d6:	213f      	movs	r1, #63	; 0x3f
   d79d8:	4628      	mov	r0, r5
   d79da:	f7ff fe75 	bl	d76c8 <_ZN6AB180514setRegisterBitEhhb>
   d79de:	e7dc      	b.n	d799a <_ZN6AB18058writeRamEjPKhjb+0x40>

000d79e0 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   d79e0:	b530      	push	{r4, r5, lr}
   d79e2:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d79e4:	680d      	ldr	r5, [r1, #0]
   d79e6:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   d79ea:	9503      	str	r5, [sp, #12]
   d79ec:	684d      	ldr	r5, [r1, #4]
   d79ee:	9502      	str	r5, [sp, #8]
   d79f0:	688d      	ldr	r5, [r1, #8]
   d79f2:	9501      	str	r5, [sp, #4]
   d79f4:	68c9      	ldr	r1, [r1, #12]
   d79f6:	9100      	str	r1, [sp, #0]
   d79f8:	3301      	adds	r3, #1
   d79fa:	4904      	ldr	r1, [pc, #16]	; (d7a0c <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   d79fc:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   d7a00:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d7a02:	f005 fa31 	bl	dce68 <_ZN6String6formatEPKcz>
}
   d7a06:	4620      	mov	r0, r4
   d7a08:	b005      	add	sp, #20
   d7a0a:	bd30      	pop	{r4, r5, pc}
   d7a0c:	000e0b82 	.word	0x000e0b82

000d7a10 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d7a10:	1103      	asrs	r3, r0, #4
}
   d7a12:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d7a14:	f000 000f 	and.w	r0, r0, #15
}
   d7a18:	fb02 0003 	mla	r0, r2, r3, r0
   d7a1c:	4770      	bx	lr

000d7a1e <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d7a1e:	b538      	push	{r3, r4, r5, lr}
   d7a20:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   d7a22:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d7a24:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   d7a26:	f7ff fff3 	bl	d7a10 <_ZN6AB180510bcdToValueEh>
   d7a2a:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   d7a2c:	7860      	ldrb	r0, [r4, #1]
   d7a2e:	f7ff ffef 	bl	d7a10 <_ZN6AB180510bcdToValueEh>
   d7a32:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   d7a34:	78a0      	ldrb	r0, [r4, #2]
   d7a36:	f7ff ffeb 	bl	d7a10 <_ZN6AB180510bcdToValueEh>
   d7a3a:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   d7a3c:	78e0      	ldrb	r0, [r4, #3]
   d7a3e:	f7ff ffe7 	bl	d7a10 <_ZN6AB180510bcdToValueEh>
   d7a42:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d7a44:	7920      	ldrb	r0, [r4, #4]
   d7a46:	f7ff ffe3 	bl	d7a10 <_ZN6AB180510bcdToValueEh>
   d7a4a:	3801      	subs	r0, #1
   d7a4c:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   d7a4e:	b92d      	cbnz	r5, d7a5c <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d7a50:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   d7a52:	7828      	ldrb	r0, [r5, #0]
   d7a54:	f7ff ffdc 	bl	d7a10 <_ZN6AB180510bcdToValueEh>
   d7a58:	6188      	str	r0, [r1, #24]
}
   d7a5a:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   d7a5c:	7960      	ldrb	r0, [r4, #5]
   d7a5e:	f7ff ffd7 	bl	d7a10 <_ZN6AB180510bcdToValueEh>
   d7a62:	3064      	adds	r0, #100	; 0x64
   d7a64:	1da5      	adds	r5, r4, #6
   d7a66:	6148      	str	r0, [r1, #20]
   d7a68:	e7f3      	b.n	d7a52 <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000d7a6c <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d7a6c:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d7a6e:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d7a70:	b088      	sub	sp, #32
   d7a72:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d7a74:	461a      	mov	r2, r3
   d7a76:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d7a78:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d7a7a:	f7ff fda6 	bl	d75ca <_ZN6AB180510isBitClearEhhb>
   d7a7e:	b1f0      	cbz	r0, d7abe <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   d7a80:	2308      	movs	r3, #8
   d7a82:	2601      	movs	r6, #1
   d7a84:	4620      	mov	r0, r4
   d7a86:	9600      	str	r6, [sp, #0]
   d7a88:	eb0d 0203 	add.w	r2, sp, r3
   d7a8c:	2100      	movs	r1, #0
   d7a8e:	f7ff fc2f 	bl	d72f0 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   d7a92:	4604      	mov	r4, r0
   d7a94:	b198      	cbz	r0, d7abe <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   d7a96:	4632      	mov	r2, r6
   d7a98:	4629      	mov	r1, r5
   d7a9a:	f10d 0009 	add.w	r0, sp, #9
   d7a9e:	f7ff ffbe 	bl	d7a1e <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   d7aa2:	a804      	add	r0, sp, #16
   d7aa4:	f7ff ff9c 	bl	d79e0 <_ZN6AB180510tmToStringEPK2tm>
   d7aa8:	4808      	ldr	r0, [pc, #32]	; (d7acc <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   d7aaa:	9a04      	ldr	r2, [sp, #16]
   d7aac:	4908      	ldr	r1, [pc, #32]	; (d7ad0 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   d7aae:	f7fd fa29 	bl	d4f04 <_ZNK5spark6Logger4infoEPKcz>
   d7ab2:	a804      	add	r0, sp, #16
   d7ab4:	f005 f874 	bl	dcba0 <_ZN6StringD1Ev>
}
   d7ab8:	4620      	mov	r0, r4
   d7aba:	b008      	add	sp, #32
   d7abc:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   d7abe:	2224      	movs	r2, #36	; 0x24
   d7ac0:	2100      	movs	r1, #0
   d7ac2:	4628      	mov	r0, r5
   d7ac4:	f008 f908 	bl	dfcd8 <memset>
   d7ac8:	2400      	movs	r4, #0
   d7aca:	e7f5      	b.n	d7ab8 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   d7acc:	2003e444 	.word	0x2003e444
   d7ad0:	000e0ba0 	.word	0x000e0ba0

000d7ad4 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   d7ad4:	b530      	push	{r4, r5, lr}
   d7ad6:	b08b      	sub	sp, #44	; 0x2c
   d7ad8:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   d7ada:	a901      	add	r1, sp, #4
   d7adc:	f7ff ffc6 	bl	d7a6c <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   d7ae0:	4604      	mov	r4, r0
   d7ae2:	b120      	cbz	r0, d7aee <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   d7ae4:	a801      	add	r0, sp, #4
   d7ae6:	f002 fcfd 	bl	da4e4 <mktime>
   d7aea:	e9c5 0100 	strd	r0, r1, [r5]
}
   d7aee:	4620      	mov	r0, r4
   d7af0:	b00b      	add	sp, #44	; 0x2c
   d7af2:	bd30      	pop	{r4, r5, pc}

000d7af4 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   d7af4:	b510      	push	{r4, lr}
   d7af6:	4604      	mov	r4, r0
   d7af8:	b088      	sub	sp, #32
    if (callBegin) {
   d7afa:	b111      	cbz	r1, d7b02 <_ZN6AB18055setupEb+0xe>
        wire.begin();
   d7afc:	6840      	ldr	r0, [r0, #4]
   d7afe:	f003 fab7 	bl	db070 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   d7b02:	4620      	mov	r0, r4
   d7b04:	f7ff fc4a 	bl	d739c <_ZN6AB180510detectChipEv>
   d7b08:	b370      	cbz	r0, d7b68 <_ZN6AB18055setupEb+0x74>
        updateWakeReason();
   d7b0a:	4620      	mov	r0, r4
   d7b0c:	f7ff fd86 	bl	d761c <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   d7b10:	2301      	movs	r3, #1
   d7b12:	461a      	mov	r2, r3
   d7b14:	2110      	movs	r1, #16
   d7b16:	4620      	mov	r0, r4
   d7b18:	f7ff fd57 	bl	d75ca <_ZN6AB180510isBitClearEhhb>
   d7b1c:	b1d8      	cbz	r0, d7b56 <_ZN6AB18055setupEb+0x62>
   d7b1e:	f005 fc3f 	bl	dd3a0 <_ZN9TimeClass7isValidEv>
   d7b22:	b9c0      	cbnz	r0, d7b56 <_ZN6AB18055setupEb+0x62>
            getRtcAsTime(time);
   d7b24:	a902      	add	r1, sp, #8
   d7b26:	4620      	mov	r0, r4
   d7b28:	f7ff ffd4 	bl	d7ad4 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   d7b2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d7b30:	f005 fb3c 	bl	dd1ac <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d7b34:	4b0f      	ldr	r3, [pc, #60]	; (d7b74 <_ZN6AB18055setupEb+0x80>)
   d7b36:	4910      	ldr	r1, [pc, #64]	; (d7b78 <_ZN6AB18055setupEb+0x84>)
   d7b38:	681b      	ldr	r3, [r3, #0]
   d7b3a:	9300      	str	r3, [sp, #0]
   d7b3c:	a804      	add	r0, sp, #16
   d7b3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d7b42:	f005 fbeb 	bl	dd31c <_ZN9TimeClass6formatExPKc>
   d7b46:	480d      	ldr	r0, [pc, #52]	; (d7b7c <_ZN6AB18055setupEb+0x88>)
   d7b48:	9a04      	ldr	r2, [sp, #16]
   d7b4a:	490d      	ldr	r1, [pc, #52]	; (d7b80 <_ZN6AB18055setupEb+0x8c>)
   d7b4c:	f7fd f9da 	bl	d4f04 <_ZNK5spark6Logger4infoEPKcz>
   d7b50:	a804      	add	r0, sp, #16
   d7b52:	f005 f825 	bl	dcba0 <_ZN6StringD1Ev>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d7b56:	4a0b      	ldr	r2, [pc, #44]	; (d7b84 <_ZN6AB18055setupEb+0x90>)
   d7b58:	2300      	movs	r3, #0
   d7b5a:	2100      	movs	r1, #0
   d7b5c:	f44f 6000 	mov.w	r0, #2048	; 0x800
   d7b60:	f002 fb16 	bl	da190 <system_subscribe_event>
}
   d7b64:	b008      	add	sp, #32
   d7b66:	bd10      	pop	{r4, pc}
        _log.error("failed to detect AB1805");
   d7b68:	4907      	ldr	r1, [pc, #28]	; (d7b88 <_ZN6AB18055setupEb+0x94>)
   d7b6a:	4804      	ldr	r0, [pc, #16]	; (d7b7c <_ZN6AB18055setupEb+0x88>)
   d7b6c:	f7fd f9e1 	bl	d4f32 <_ZNK5spark6Logger5errorEPKcz>
   d7b70:	e7f1      	b.n	d7b56 <_ZN6AB18055setupEb+0x62>
   d7b72:	bf00      	nop
   d7b74:	2003e11c 	.word	0x2003e11c
   d7b78:	2003e598 	.word	0x2003e598
   d7b7c:	2003e444 	.word	0x2003e444
   d7b80:	000e0bae 	.word	0x000e0bae
   d7b84:	000d7549 	.word	0x000d7549
   d7b88:	000e0bcb 	.word	0x000e0bcb

000d7b8c <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   d7b8c:	220a      	movs	r2, #10
   d7b8e:	fb90 f3f2 	sdiv	r3, r0, r2
    int ones = value % 10;
   d7b92:	fb02 0013 	mls	r0, r2, r3, r0
    int tens = (value / 10) % 10;
   d7b96:	fb93 f1f2 	sdiv	r1, r3, r2
   d7b9a:	fb02 3111 	mls	r1, r2, r1, r3
    return (uint8_t) ((tens << 4) | ones);
   d7b9e:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
}
   d7ba2:	b2c0      	uxtb	r0, r0
   d7ba4:	4770      	bx	lr

000d7ba6 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d7ba6:	b570      	push	{r4, r5, r6, lr}
   d7ba8:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   d7baa:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d7bac:	460c      	mov	r4, r1
   d7bae:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   d7bb0:	f7ff ffec 	bl	d7b8c <_ZN6AB180510valueToBcdEi>
   d7bb4:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   d7bb6:	6868      	ldr	r0, [r5, #4]
   d7bb8:	f7ff ffe8 	bl	d7b8c <_ZN6AB180510valueToBcdEi>
   d7bbc:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   d7bbe:	68a8      	ldr	r0, [r5, #8]
   d7bc0:	f7ff ffe4 	bl	d7b8c <_ZN6AB180510valueToBcdEi>
   d7bc4:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   d7bc6:	68e8      	ldr	r0, [r5, #12]
   d7bc8:	f7ff ffe0 	bl	d7b8c <_ZN6AB180510valueToBcdEi>
   d7bcc:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d7bce:	6928      	ldr	r0, [r5, #16]
   d7bd0:	3001      	adds	r0, #1
   d7bd2:	f7ff ffdb 	bl	d7b8c <_ZN6AB180510valueToBcdEi>
   d7bd6:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   d7bd8:	b92e      	cbnz	r6, d7be6 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d7bda:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   d7bdc:	69a8      	ldr	r0, [r5, #24]
   d7bde:	f7ff ffd5 	bl	d7b8c <_ZN6AB180510valueToBcdEi>
   d7be2:	7030      	strb	r0, [r6, #0]
}
   d7be4:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   d7be6:	696a      	ldr	r2, [r5, #20]
   d7be8:	2364      	movs	r3, #100	; 0x64
   d7bea:	fb92 f0f3 	sdiv	r0, r2, r3
   d7bee:	fb03 2010 	mls	r0, r3, r0, r2
   d7bf2:	f7ff ffcb 	bl	d7b8c <_ZN6AB180510valueToBcdEi>
   d7bf6:	1da6      	adds	r6, r4, #6
   d7bf8:	7160      	strb	r0, [r4, #5]
   d7bfa:	e7ef      	b.n	d7bdc <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000d7bfc <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d7bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7bfe:	b087      	sub	sp, #28
   d7c00:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d7c02:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d7c04:	4616      	mov	r6, r2
   d7c06:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d7c08:	f7ff feea 	bl	d79e0 <_ZN6AB180510tmToStringEPK2tm>
   d7c0c:	481e      	ldr	r0, [pc, #120]	; (d7c88 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d7c0e:	9a02      	ldr	r2, [sp, #8]
   d7c10:	491e      	ldr	r1, [pc, #120]	; (d7c8c <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   d7c12:	f7fd f977 	bl	d4f04 <_ZNK5spark6Logger4infoEPKcz>
   d7c16:	a802      	add	r0, sp, #8
   d7c18:	f004 ffc2 	bl	dcba0 <_ZN6StringD1Ev>
    if (lock) {
   d7c1c:	b116      	cbz	r6, d7c24 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   d7c1e:	6868      	ldr	r0, [r5, #4]
   d7c20:	f003 fa7e 	bl	db120 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   d7c24:	4620      	mov	r0, r4
   d7c26:	2201      	movs	r2, #1
   d7c28:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   d7c2c:	2700      	movs	r7, #0
   d7c2e:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   d7c32:	f7ff ffb8 	bl	d7ba6 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d7c36:	2301      	movs	r3, #1
   d7c38:	461a      	mov	r2, r3
   d7c3a:	2110      	movs	r1, #16
   d7c3c:	4628      	mov	r0, r5
   d7c3e:	f7ff fd43 	bl	d76c8 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   d7c42:	4604      	mov	r4, r0
   d7c44:	b1e8      	cbz	r0, d7c82 <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   d7c46:	2308      	movs	r3, #8
   d7c48:	9700      	str	r7, [sp, #0]
   d7c4a:	eb0d 0203 	add.w	r2, sp, r3
   d7c4e:	4639      	mov	r1, r7
   d7c50:	4628      	mov	r0, r5
   d7c52:	f7ff fbef 	bl	d7434 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   d7c56:	4604      	mov	r4, r0
   d7c58:	b160      	cbz	r0, d7c74 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d7c5a:	2301      	movs	r3, #1
   d7c5c:	461a      	mov	r2, r3
   d7c5e:	2110      	movs	r1, #16
   d7c60:	4628      	mov	r0, r5
   d7c62:	f7ff fcd0 	bl	d7606 <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   d7c66:	b116      	cbz	r6, d7c6e <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   d7c68:	6868      	ldr	r0, [r5, #4]
   d7c6a:	f003 fa62 	bl	db132 <_ZN7TwoWire6unlockEv>
}
   d7c6e:	4620      	mov	r0, r4
   d7c70:	b007      	add	sp, #28
   d7c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   d7c74:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   d7c78:	4905      	ldr	r1, [pc, #20]	; (d7c90 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   d7c7a:	4803      	ldr	r0, [pc, #12]	; (d7c88 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d7c7c:	f7fd f959 	bl	d4f32 <_ZNK5spark6Logger5errorEPKcz>
   d7c80:	e7f1      	b.n	d7c66 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   d7c82:	f44f 728f 	mov.w	r2, #286	; 0x11e
   d7c86:	e7f7      	b.n	d7c78 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   d7c88:	2003e444 	.word	0x2003e444
   d7c8c:	000e0be3 	.word	0x000e0be3
   d7c90:	000e0bf1 	.word	0x000e0bf1

000d7c94 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d7c94:	b513      	push	{r0, r1, r4, lr}
   d7c96:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   d7c98:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d7c9a:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   d7c9e:	f007 ffe1 	bl	dfc64 <gmtime>
    return setRtcFromTm(tm, lock);
   d7ca2:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   d7ca6:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   d7ca8:	4620      	mov	r0, r4
   d7caa:	f7ff ffa7 	bl	d7bfc <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   d7cae:	b002      	add	sp, #8
   d7cb0:	bd10      	pop	{r4, pc}
	...

000d7cb4 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   d7cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d7cb6:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   d7cb8:	b089      	sub	sp, #36	; 0x24
   d7cba:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d7cbc:	bb75      	cbnz	r5, d7d1c <_ZN6AB18054loopEv+0x68>
   d7cbe:	f005 fb6f 	bl	dd3a0 <_ZN9TimeClass7isValidEv>
   d7cc2:	b358      	cbz	r0, d7d1c <_ZN6AB18054loopEv+0x68>
        tm = 0;
   d7cc4:	2600      	movs	r6, #0
   d7cc6:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   d7cc8:	a904      	add	r1, sp, #16
   d7cca:	4628      	mov	r0, r5
        tm = 0;
   d7ccc:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   d7cd0:	f002 fb18 	bl	da304 <spark_sync_time_last>
   d7cd4:	b310      	cbz	r0, d7d1c <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   d7cd6:	2501      	movs	r5, #1
   d7cd8:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   d7cda:	f005 fb7e 	bl	dd3da <_ZN9TimeClass3nowEv>
        setRtcFromTime(time);
   d7cde:	9500      	str	r5, [sp, #0]
        time_t time = Time.now();
   d7ce0:	4602      	mov	r2, r0
   d7ce2:	17c3      	asrs	r3, r0, #31
        setRtcFromTime(time);
   d7ce4:	4620      	mov	r0, r4
        time_t time = Time.now();
   d7ce6:	e9cd 2302 	strd	r2, r3, [sp, #8]
        setRtcFromTime(time);
   d7cea:	f7ff ffd3 	bl	d7c94 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   d7cee:	a902      	add	r1, sp, #8
   d7cf0:	4620      	mov	r0, r4
        time = 0;
   d7cf2:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   d7cf6:	f7ff feed 	bl	d7ad4 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d7cfa:	4b12      	ldr	r3, [pc, #72]	; (d7d44 <_ZN6AB18054loopEv+0x90>)
   d7cfc:	4912      	ldr	r1, [pc, #72]	; (d7d48 <_ZN6AB18054loopEv+0x94>)
   d7cfe:	681b      	ldr	r3, [r3, #0]
   d7d00:	9300      	str	r3, [sp, #0]
   d7d02:	a804      	add	r0, sp, #16
   d7d04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d7d08:	f005 fb08 	bl	dd31c <_ZN9TimeClass6formatExPKc>
   d7d0c:	480f      	ldr	r0, [pc, #60]	; (d7d4c <_ZN6AB18054loopEv+0x98>)
   d7d0e:	9a04      	ldr	r2, [sp, #16]
   d7d10:	490f      	ldr	r1, [pc, #60]	; (d7d50 <_ZN6AB18054loopEv+0x9c>)
   d7d12:	f7fd f8f7 	bl	d4f04 <_ZNK5spark6Logger4infoEPKcz>
   d7d16:	a804      	add	r0, sp, #16
   d7d18:	f004 ff42 	bl	dcba0 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   d7d1c:	6963      	ldr	r3, [r4, #20]
   d7d1e:	b173      	cbz	r3, d7d3e <_ZN6AB18054loopEv+0x8a>
   d7d20:	f001 ff94 	bl	d9c4c <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   d7d24:	6923      	ldr	r3, [r4, #16]
   d7d26:	1ac0      	subs	r0, r0, r3
   d7d28:	6963      	ldr	r3, [r4, #20]
   d7d2a:	4298      	cmp	r0, r3
   d7d2c:	d307      	bcc.n	d7d3e <_ZN6AB18054loopEv+0x8a>
   d7d2e:	f001 ff8d 	bl	d9c4c <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   d7d32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   d7d36:	6120      	str	r0, [r4, #16]
            setWDT();
   d7d38:	4620      	mov	r0, r4
   d7d3a:	f7ff fbc3 	bl	d74c4 <_ZN6AB18056setWDTEi>
}
   d7d3e:	b009      	add	sp, #36	; 0x24
   d7d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7d42:	bf00      	nop
   d7d44:	2003e11c 	.word	0x2003e11c
   d7d48:	2003e598 	.word	0x2003e598
   d7d4c:	2003e444 	.word	0x2003e444
   d7d50:	000e0c0c 	.word	0x000e0c0c

000d7d54 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   d7d54:	4b01      	ldr	r3, [pc, #4]	; (d7d5c <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   d7d56:	4a02      	ldr	r2, [pc, #8]	; (d7d60 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   d7d58:	601a      	str	r2, [r3, #0]
}
   d7d5a:	4770      	bx	lr
   d7d5c:	2003e444 	.word	0x2003e444
   d7d60:	000e0c22 	.word	0x000e0c22

000d7d64 <_ZL10delay_msecm>:
  return reply;
}


static void delay_msec(uint32_t ms){
  delay(ms);
   d7d64:	f002 bbc6 	b.w	da4f4 <delay>

000d7d68 <_ZL9i2c_writehhPht>:
int8_t i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
   d7d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7d6a:	4607      	mov	r7, r0
   d7d6c:	4614      	mov	r4, r2
   d7d6e:	461d      	mov	r5, r3
   d7d70:	460e      	mov	r6, r1
  Wire.beginTransmission((uint8_t)dev_id);
   d7d72:	f005 fe07 	bl	dd984 <_Z19__fetch_global_Wirev>
   d7d76:	4639      	mov	r1, r7
   d7d78:	f003 f9ac 	bl	db0d4 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg_addr);
   d7d7c:	f005 fe02 	bl	dd984 <_Z19__fetch_global_Wirev>
   d7d80:	6803      	ldr	r3, [r0, #0]
   d7d82:	4631      	mov	r1, r6
   d7d84:	689b      	ldr	r3, [r3, #8]
   d7d86:	4798      	blx	r3
   d7d88:	4425      	add	r5, r4
  while (len--) {
   d7d8a:	42ac      	cmp	r4, r5
   d7d8c:	d007      	beq.n	d7d9e <_ZL9i2c_writehhPht+0x36>
    Wire.write(*reg_data);
   d7d8e:	f005 fdf9 	bl	dd984 <_Z19__fetch_global_Wirev>
   d7d92:	6803      	ldr	r3, [r0, #0]
   d7d94:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7d98:	689b      	ldr	r3, [r3, #8]
   d7d9a:	4798      	blx	r3
  while (len--) {
   d7d9c:	e7f5      	b.n	d7d8a <_ZL9i2c_writehhPht+0x22>
  Wire.endTransmission();
   d7d9e:	f005 fdf1 	bl	dd984 <_Z19__fetch_global_Wirev>
   d7da2:	f003 f9ba 	bl	db11a <_ZN7TwoWire15endTransmissionEv>
}
   d7da6:	2000      	movs	r0, #0
   d7da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7daa <_ZL8i2c_readhhPht>:
int8_t i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
   d7daa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7dac:	4606      	mov	r6, r0
   d7dae:	4615      	mov	r5, r2
   d7db0:	461c      	mov	r4, r3
   d7db2:	460f      	mov	r7, r1
  Wire.beginTransmission((uint8_t)dev_id);
   d7db4:	f005 fde6 	bl	dd984 <_Z19__fetch_global_Wirev>
   d7db8:	4631      	mov	r1, r6
   d7dba:	f003 f98b 	bl	db0d4 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg_addr);
   d7dbe:	f005 fde1 	bl	dd984 <_Z19__fetch_global_Wirev>
   d7dc2:	6803      	ldr	r3, [r0, #0]
   d7dc4:	4639      	mov	r1, r7
   d7dc6:	689b      	ldr	r3, [r3, #8]
   d7dc8:	4798      	blx	r3
  Wire.endTransmission();
   d7dca:	f005 fddb 	bl	dd984 <_Z19__fetch_global_Wirev>
   d7dce:	f003 f9a4 	bl	db11a <_ZN7TwoWire15endTransmissionEv>
  if (len != Wire.requestFrom((uint8_t)dev_id, (byte)len)) {
   d7dd2:	f005 fdd7 	bl	dd984 <_Z19__fetch_global_Wirev>
   d7dd6:	b2e2      	uxtb	r2, r4
   d7dd8:	4631      	mov	r1, r6
   d7dda:	f003 f978 	bl	db0ce <_ZN7TwoWire11requestFromEhj>
   d7dde:	4284      	cmp	r4, r0
   d7de0:	d10a      	bne.n	d7df8 <_ZL8i2c_readhhPht+0x4e>
   d7de2:	442c      	add	r4, r5
  while (len--) {
   d7de4:	42ac      	cmp	r4, r5
   d7de6:	d009      	beq.n	d7dfc <_ZL8i2c_readhhPht+0x52>
    *reg_data = (uint8_t)Wire.read();
   d7de8:	f005 fdcc 	bl	dd984 <_Z19__fetch_global_Wirev>
   d7dec:	6803      	ldr	r3, [r0, #0]
   d7dee:	695b      	ldr	r3, [r3, #20]
   d7df0:	4798      	blx	r3
   d7df2:	f805 0b01 	strb.w	r0, [r5], #1
  while (len--) {
   d7df6:	e7f5      	b.n	d7de4 <_ZL8i2c_readhhPht+0x3a>
    return 1;
   d7df8:	2001      	movs	r0, #1
}
   d7dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d7dfc:	2000      	movs	r0, #0
   d7dfe:	e7fc      	b.n	d7dfa <_ZL8i2c_readhhPht+0x50>

000d7e00 <_ZN15Adafruit_BME680C1Ea>:
  : _cs(cspin)
   d7e00:	7701      	strb	r1, [r0, #28]
  _BME680_SoftwareSPI_MOSI = -1;
   d7e02:	4905      	ldr	r1, [pc, #20]	; (d7e18 <_ZN15Adafruit_BME680C1Ea+0x18>)
   d7e04:	22ff      	movs	r2, #255	; 0xff
   d7e06:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_MISO = -1;
   d7e08:	4904      	ldr	r1, [pc, #16]	; (d7e1c <_ZN15Adafruit_BME680C1Ea+0x1c>)
   d7e0a:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_SCK = -1;
   d7e0c:	4904      	ldr	r1, [pc, #16]	; (d7e20 <_ZN15Adafruit_BME680C1Ea+0x20>)
   d7e0e:	700a      	strb	r2, [r1, #0]
  _filterEnabled = _tempEnabled = _humEnabled = _presEnabled = _gasEnabled = false;
   d7e10:	2200      	movs	r2, #0
   d7e12:	6102      	str	r2, [r0, #16]
   d7e14:	7502      	strb	r2, [r0, #20]
}
   d7e16:	4770      	bx	lr
   d7e18:	2003e459 	.word	0x2003e459
   d7e1c:	2003e458 	.word	0x2003e458
   d7e20:	2003e45a 	.word	0x2003e45a

000d7e24 <_ZN15Adafruit_BME68014performReadingEv>:
bool Adafruit_BME680::performReading(void) {
   d7e24:	b510      	push	{r4, lr}
  gas_sensor.power_mode = BME680_FORCED_MODE;
   d7e26:	2301      	movs	r3, #1
bool Adafruit_BME680::performReading(void) {
   d7e28:	4604      	mov	r4, r0
  gas_sensor.power_mode = BME680_FORCED_MODE;
   d7e2a:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
  if (_humEnabled)
   d7e2e:	7ca3      	ldrb	r3, [r4, #18]
  uint8_t set_required_settings = 0;
   d7e30:	7c40      	ldrb	r0, [r0, #17]
bool Adafruit_BME680::performReading(void) {
   d7e32:	b088      	sub	sp, #32
  if (_humEnabled)
   d7e34:	b10b      	cbz	r3, d7e3a <_ZN15Adafruit_BME68014performReadingEv+0x16>
    set_required_settings |= BME680_OSH_SEL;
   d7e36:	f040 0004 	orr.w	r0, r0, #4
  if (_presEnabled)
   d7e3a:	7ce3      	ldrb	r3, [r4, #19]
   d7e3c:	b10b      	cbz	r3, d7e42 <_ZN15Adafruit_BME68014performReadingEv+0x1e>
    set_required_settings |= BME680_OSP_SEL;
   d7e3e:	f040 0002 	orr.w	r0, r0, #2
  if (_filterEnabled)
   d7e42:	7c23      	ldrb	r3, [r4, #16]
   d7e44:	b10b      	cbz	r3, d7e4a <_ZN15Adafruit_BME68014performReadingEv+0x26>
    set_required_settings |= BME680_FILTER_SEL;
   d7e46:	f040 0010 	orr.w	r0, r0, #16
  if (_gasEnabled)
   d7e4a:	7d23      	ldrb	r3, [r4, #20]
   d7e4c:	b10b      	cbz	r3, d7e52 <_ZN15Adafruit_BME68014performReadingEv+0x2e>
    set_required_settings |= BME680_GAS_SENSOR_SEL;
   d7e4e:	f040 00c8 	orr.w	r0, r0, #200	; 0xc8
  rslt = bme680_set_sensor_settings(set_required_settings, &gas_sensor);
   d7e52:	f104 0120 	add.w	r1, r4, #32
   d7e56:	9101      	str	r1, [sp, #4]
   d7e58:	f7fc fb52 	bl	d4500 <bme680_set_sensor_settings>
  if (rslt != BME680_OK)
   d7e5c:	9901      	ldr	r1, [sp, #4]
   d7e5e:	b110      	cbz	r0, d7e66 <_ZN15Adafruit_BME68014performReadingEv+0x42>
    return false;
   d7e60:	2000      	movs	r0, #0
}
   d7e62:	b008      	add	sp, #32
   d7e64:	bd10      	pop	{r4, pc}
  rslt = bme680_set_sensor_mode(&gas_sensor);
   d7e66:	4608      	mov	r0, r1
   d7e68:	9101      	str	r1, [sp, #4]
   d7e6a:	f7fc fb0a 	bl	d4482 <bme680_set_sensor_mode>
  if (rslt != BME680_OK)
   d7e6e:	2800      	cmp	r0, #0
   d7e70:	d1f6      	bne.n	d7e60 <_ZN15Adafruit_BME68014performReadingEv+0x3c>
  bme680_get_profile_dur(&meas_period, &gas_sensor);
   d7e72:	9901      	ldr	r1, [sp, #4]
   d7e74:	f10d 000a 	add.w	r0, sp, #10
   d7e78:	f7fc fcbc 	bl	d47f4 <bme680_get_profile_dur>
  delay(meas_period * 2); /* Delay till the measurement is ready */
   d7e7c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   d7e80:	0040      	lsls	r0, r0, #1
   d7e82:	f002 fb37 	bl	da4f4 <delay>
  rslt = bme680_get_sensor_data(&data, &gas_sensor);
   d7e86:	9901      	ldr	r1, [sp, #4]
   d7e88:	a803      	add	r0, sp, #12
   d7e8a:	f7fc fce7 	bl	d485c <bme680_get_sensor_data>
  if (rslt != BME680_OK)
   d7e8e:	2800      	cmp	r0, #0
   d7e90:	d1e6      	bne.n	d7e60 <_ZN15Adafruit_BME68014performReadingEv+0x3c>
  if (_tempEnabled) {
   d7e92:	7c63      	ldrb	r3, [r4, #17]
   d7e94:	b373      	cbz	r3, d7ef4 <_ZN15Adafruit_BME68014performReadingEv+0xd0>
    temperature = data.temperature / 100.0;
   d7e96:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
   d7e9a:	f007 f919 	bl	df0d0 <__aeabi_i2d>
   d7e9e:	4b1a      	ldr	r3, [pc, #104]	; (d7f08 <_ZN15Adafruit_BME68014performReadingEv+0xe4>)
   d7ea0:	2200      	movs	r2, #0
   d7ea2:	f007 faa9 	bl	df3f8 <__aeabi_ddiv>
   d7ea6:	f007 fc75 	bl	df794 <__aeabi_d2f>
  if (_humEnabled) {
   d7eaa:	7ca3      	ldrb	r3, [r4, #18]
   d7eac:	6020      	str	r0, [r4, #0]
   d7eae:	b31b      	cbz	r3, d7ef8 <_ZN15Adafruit_BME68014performReadingEv+0xd4>
    humidity = data.humidity / 1000.0;
   d7eb0:	9806      	ldr	r0, [sp, #24]
   d7eb2:	f007 f8fd 	bl	df0b0 <__aeabi_ui2d>
   d7eb6:	4b15      	ldr	r3, [pc, #84]	; (d7f0c <_ZN15Adafruit_BME68014performReadingEv+0xe8>)
   d7eb8:	2200      	movs	r2, #0
   d7eba:	f007 fa9d 	bl	df3f8 <__aeabi_ddiv>
   d7ebe:	f007 fc69 	bl	df794 <__aeabi_d2f>
  if (_presEnabled) {
   d7ec2:	7ce3      	ldrb	r3, [r4, #19]
   d7ec4:	60a0      	str	r0, [r4, #8]
   d7ec6:	b1cb      	cbz	r3, d7efc <_ZN15Adafruit_BME68014performReadingEv+0xd8>
    pressure = data.pressure;
   d7ec8:	eddd 7a05 	vldr	s15, [sp, #20]
   d7ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
  if (_gasEnabled) {
   d7ed0:	7d20      	ldrb	r0, [r4, #20]
   d7ed2:	edc4 7a01 	vstr	s15, [r4, #4]
   d7ed6:	b1a0      	cbz	r0, d7f02 <_ZN15Adafruit_BME68014performReadingEv+0xde>
    if (data.status & BME680_HEAT_STAB_MSK) {
   d7ed8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d7edc:	06db      	lsls	r3, r3, #27
      gas_resistance = data.gas_resistance;
   d7ede:	bf45      	ittet	mi
   d7ee0:	eddd 7a07 	vldrmi	s15, [sp, #28]
   d7ee4:	eef8 7a67 	vcvtmi.f32.u32	s15, s15
      gas_resistance = 0;
   d7ee8:	2300      	movpl	r3, #0
      gas_resistance = data.gas_resistance;
   d7eea:	edc4 7a03 	vstrmi	s15, [r4, #12]
      gas_resistance = 0;
   d7eee:	bf58      	it	pl
   d7ef0:	60e3      	strpl	r3, [r4, #12]
   d7ef2:	e7b6      	b.n	d7e62 <_ZN15Adafruit_BME68014performReadingEv+0x3e>
    temperature = NAN;
   d7ef4:	4806      	ldr	r0, [pc, #24]	; (d7f10 <_ZN15Adafruit_BME68014performReadingEv+0xec>)
   d7ef6:	e7d8      	b.n	d7eaa <_ZN15Adafruit_BME68014performReadingEv+0x86>
    humidity = NAN;
   d7ef8:	4805      	ldr	r0, [pc, #20]	; (d7f10 <_ZN15Adafruit_BME68014performReadingEv+0xec>)
   d7efa:	e7e2      	b.n	d7ec2 <_ZN15Adafruit_BME68014performReadingEv+0x9e>
    pressure = NAN;
   d7efc:	eddf 7a05 	vldr	s15, [pc, #20]	; d7f14 <_ZN15Adafruit_BME68014performReadingEv+0xf0>
   d7f00:	e7e6      	b.n	d7ed0 <_ZN15Adafruit_BME68014performReadingEv+0xac>
  return true;
   d7f02:	2001      	movs	r0, #1
   d7f04:	e7ad      	b.n	d7e62 <_ZN15Adafruit_BME68014performReadingEv+0x3e>
   d7f06:	bf00      	nop
   d7f08:	40590000 	.word	0x40590000
   d7f0c:	408f4000 	.word	0x408f4000
   d7f10:	7fc00000 	.word	0x7fc00000
   d7f14:	7fc00000 	.word	0x7fc00000

000d7f18 <_ZN15Adafruit_BME68012readAltitudeEf>:
{
   d7f18:	b510      	push	{r4, lr}
   d7f1a:	4604      	mov	r4, r0
   d7f1c:	ed2d 8b02 	vpush	{d8}
   d7f20:	eeb0 8a40 	vmov.f32	s16, s0
  performReading();
   d7f24:	f7ff ff7e 	bl	d7e24 <_ZN15Adafruit_BME68014performReadingEv>
    float atmospheric = readPressure() / 100.0F;
   d7f28:	edd4 6a01 	vldr	s13, [r4, #4]
   d7f2c:	ed9f 7a14 	vldr	s14, [pc, #80]	; d7f80 <_ZN15Adafruit_BME68012readAltitudeEf+0x68>
   d7f30:	eec6 7a87 	vdiv.f32	s15, s13, s14
      return pow(__type(__x), __type(__y));
   d7f34:	eec7 7a88 	vdiv.f32	s15, s15, s16
   d7f38:	ee17 0a90 	vmov	r0, s15
   d7f3c:	f007 f8da 	bl	df0f4 <__aeabi_f2d>
   d7f40:	ed9f 1b0b 	vldr	d1, [pc, #44]	; d7f70 <_ZN15Adafruit_BME68012readAltitudeEf+0x58>
   d7f44:	ec41 0b10 	vmov	d0, r0, r1
   d7f48:	f005 fd76 	bl	dda38 <pow>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
   d7f4c:	490d      	ldr	r1, [pc, #52]	; (d7f84 <_ZN15Adafruit_BME68012readAltitudeEf+0x6c>)
   d7f4e:	ec53 2b10 	vmov	r2, r3, d0
   d7f52:	2000      	movs	r0, #0
   d7f54:	f006 ff6e 	bl	dee34 <__aeabi_dsub>
   d7f58:	a307      	add	r3, pc, #28	; (adr r3, d7f78 <_ZN15Adafruit_BME68012readAltitudeEf+0x60>)
   d7f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7f5e:	f007 f921 	bl	df1a4 <__aeabi_dmul>
   d7f62:	f007 fc17 	bl	df794 <__aeabi_d2f>
}
   d7f66:	ecbd 8b02 	vpop	{d8}
   d7f6a:	ee00 0a10 	vmov	s0, r0
   d7f6e:	bd10      	pop	{r4, pc}
   d7f70:	1a36e2eb 	.word	0x1a36e2eb
   d7f74:	3fc85bc0 	.word	0x3fc85bc0
   d7f78:	00000000 	.word	0x00000000
   d7f7c:	40e5a540 	.word	0x40e5a540
   d7f80:	42c80000 	.word	0x42c80000
   d7f84:	3ff00000 	.word	0x3ff00000

000d7f88 <_ZN15Adafruit_BME68012setGasHeaterEtt>:
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
   d7f88:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
  gas_sensor.gas_sett.heatr_dur = heaterTime;
   d7f8c:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
  if ( (heaterTemp == 0) || (heaterTime == 0) ) {
   d7f90:	b101      	cbz	r1, d7f94 <_ZN15Adafruit_BME68012setGasHeaterEtt+0xc>
   d7f92:	b92a      	cbnz	r2, d7fa0 <_ZN15Adafruit_BME68012setGasHeaterEtt+0x18>
    gas_sensor.gas_sett.run_gas = BME680_DISABLE_GAS_MEAS;
   d7f94:	2300      	movs	r3, #0
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
   d7f96:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
    _gasEnabled = true;
   d7f9a:	7503      	strb	r3, [r0, #20]
}
   d7f9c:	2001      	movs	r0, #1
   d7f9e:	4770      	bx	lr
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
   d7fa0:	2301      	movs	r3, #1
   d7fa2:	e7f8      	b.n	d7f96 <_ZN15Adafruit_BME68012setGasHeaterEtt+0xe>

000d7fa4 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>:
  if (oversample > BME680_OS_16X) return false;
   d7fa4:	2905      	cmp	r1, #5
bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
   d7fa6:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
   d7fa8:	d807      	bhi.n	d7fba <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x16>
  gas_sensor.tph_sett.os_temp = oversample;
   d7faa:	f880 1059 	strb.w	r1, [r0, #89]	; 0x59
  if (oversample == BME680_OS_NONE)
   d7fae:	2001      	movs	r0, #1
   d7fb0:	b909      	cbnz	r1, d7fb6 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x12>
    _tempEnabled = false;
   d7fb2:	7459      	strb	r1, [r3, #17]
   d7fb4:	4770      	bx	lr
    _tempEnabled = true;
   d7fb6:	7458      	strb	r0, [r3, #17]
   d7fb8:	4770      	bx	lr
  if (oversample > BME680_OS_16X) return false;
   d7fba:	2000      	movs	r0, #0
}
   d7fbc:	4770      	bx	lr

000d7fbe <_ZN15Adafruit_BME68023setHumidityOversamplingEh>:
  if (oversample > BME680_OS_16X) return false;
   d7fbe:	2905      	cmp	r1, #5
bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
   d7fc0:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
   d7fc2:	d807      	bhi.n	d7fd4 <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x16>
  gas_sensor.tph_sett.os_hum = oversample;
   d7fc4:	f880 1058 	strb.w	r1, [r0, #88]	; 0x58
  if (oversample == BME680_OS_NONE)
   d7fc8:	2001      	movs	r0, #1
   d7fca:	b909      	cbnz	r1, d7fd0 <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x12>
    _humEnabled = false;
   d7fcc:	7499      	strb	r1, [r3, #18]
   d7fce:	4770      	bx	lr
    _humEnabled = true;
   d7fd0:	7498      	strb	r0, [r3, #18]
   d7fd2:	4770      	bx	lr
  if (oversample > BME680_OS_16X) return false;
   d7fd4:	2000      	movs	r0, #0
}
   d7fd6:	4770      	bx	lr

000d7fd8 <_ZN15Adafruit_BME68023setPressureOversamplingEh>:
  if (oversample > BME680_OS_16X) return false;
   d7fd8:	2905      	cmp	r1, #5
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
   d7fda:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
   d7fdc:	d807      	bhi.n	d7fee <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x16>
  gas_sensor.tph_sett.os_pres = oversample;
   d7fde:	f880 105a 	strb.w	r1, [r0, #90]	; 0x5a
  if (oversample == BME680_OS_NONE)
   d7fe2:	2001      	movs	r0, #1
   d7fe4:	b909      	cbnz	r1, d7fea <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x12>
    _presEnabled = false;
   d7fe6:	74d9      	strb	r1, [r3, #19]
   d7fe8:	4770      	bx	lr
    _presEnabled = true;
   d7fea:	74d8      	strb	r0, [r3, #19]
   d7fec:	4770      	bx	lr
  if (oversample > BME680_OS_16X) return false;
   d7fee:	2000      	movs	r0, #0
}
   d7ff0:	4770      	bx	lr

000d7ff2 <_ZN15Adafruit_BME68016setIIRFilterSizeEh>:
  if (filtersize > BME680_FILTER_SIZE_127) return false;
   d7ff2:	2907      	cmp	r1, #7
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
   d7ff4:	4603      	mov	r3, r0
  if (filtersize > BME680_FILTER_SIZE_127) return false;
   d7ff6:	d807      	bhi.n	d8008 <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x16>
  gas_sensor.tph_sett.filter = filtersize;
   d7ff8:	f880 105b 	strb.w	r1, [r0, #91]	; 0x5b
  if (filtersize == BME680_FILTER_SIZE_0)
   d7ffc:	2001      	movs	r0, #1
   d7ffe:	b909      	cbnz	r1, d8004 <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x12>
    _filterEnabled = false;
   d8000:	7419      	strb	r1, [r3, #16]
   d8002:	4770      	bx	lr
    _filterEnabled = true;
   d8004:	7418      	strb	r0, [r3, #16]
   d8006:	4770      	bx	lr
  if (filtersize > BME680_FILTER_SIZE_127) return false;
   d8008:	2000      	movs	r0, #0
}
   d800a:	4770      	bx	lr

000d800c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d800c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d800e:	4c0b      	ldr	r4, [pc, #44]	; (d803c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d8010:	7821      	ldrb	r1, [r4, #0]
   d8012:	f3bf 8f5b 	dmb	ish
   d8016:	f011 0101 	ands.w	r1, r1, #1
   d801a:	d10b      	bne.n	d8034 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d801c:	4620      	mov	r0, r4
   d801e:	9101      	str	r1, [sp, #4]
   d8020:	f7fc f84a 	bl	d40b8 <__cxa_guard_acquire>
   d8024:	9901      	ldr	r1, [sp, #4]
   d8026:	b128      	cbz	r0, d8034 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d8028:	4805      	ldr	r0, [pc, #20]	; (d8040 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d802a:	f004 fd01 	bl	dca30 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d802e:	4620      	mov	r0, r4
   d8030:	f7fc f847 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d8034:	4802      	ldr	r0, [pc, #8]	; (d8040 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d8036:	b002      	add	sp, #8
   d8038:	bd10      	pop	{r4, pc}
   d803a:	bf00      	nop
   d803c:	2003e44c 	.word	0x2003e44c
   d8040:	2003e450 	.word	0x2003e450

000d8044 <_ZL12spi_transferh>:
static uint8_t spi_transfer(uint8_t x) {
   d8044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (_BME680_SoftwareSPI_SCK == -1)
   d8048:	4d1b      	ldr	r5, [pc, #108]	; (d80b8 <_ZL12spi_transferh+0x74>)
   d804a:	f995 3000 	ldrsb.w	r3, [r5]
   d804e:	3301      	adds	r3, #1
static uint8_t spi_transfer(uint8_t x) {
   d8050:	4680      	mov	r8, r0
  if (_BME680_SoftwareSPI_SCK == -1)
   d8052:	d106      	bne.n	d8062 <_ZL12spi_transferh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d8054:	f7ff ffda 	bl	d800c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d8058:	4641      	mov	r1, r8
}
   d805a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d805e:	f004 bd99 	b.w	dcb94 <_ZN8SPIClass8transferEh>
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
   d8062:	f8df 9058 	ldr.w	r9, [pc, #88]	; d80bc <_ZL12spi_transferh+0x78>
    if (digitalRead(_BME680_SoftwareSPI_MISO))
   d8066:	f8df a058 	ldr.w	sl, [pc, #88]	; d80c0 <_ZL12spi_transferh+0x7c>
  uint8_t reply = 0;
   d806a:	2400      	movs	r4, #0
  for (int i=7; i>=0; i--) {
   d806c:	2607      	movs	r6, #7
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
   d806e:	f995 0000 	ldrsb.w	r0, [r5]
   d8072:	2100      	movs	r1, #0
   d8074:	b280      	uxth	r0, r0
   d8076:	f005 fc10 	bl	dd89a <digitalWrite>
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
   d807a:	2701      	movs	r7, #1
   d807c:	f999 0000 	ldrsb.w	r0, [r9]
   d8080:	fa07 f106 	lsl.w	r1, r7, r6
   d8084:	ea01 0108 	and.w	r1, r1, r8
   d8088:	b280      	uxth	r0, r0
   d808a:	f005 fc06 	bl	dd89a <digitalWrite>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
   d808e:	f995 0000 	ldrsb.w	r0, [r5]
   d8092:	4639      	mov	r1, r7
   d8094:	b280      	uxth	r0, r0
   d8096:	f005 fc00 	bl	dd89a <digitalWrite>
    if (digitalRead(_BME680_SoftwareSPI_MISO))
   d809a:	f99a 0000 	ldrsb.w	r0, [sl]
    reply <<= 1;
   d809e:	0064      	lsls	r4, r4, #1
    if (digitalRead(_BME680_SoftwareSPI_MISO))
   d80a0:	b280      	uxth	r0, r0
    reply <<= 1;
   d80a2:	b2e4      	uxtb	r4, r4
    if (digitalRead(_BME680_SoftwareSPI_MISO))
   d80a4:	f005 fc12 	bl	dd8cc <digitalRead>
   d80a8:	b100      	cbz	r0, d80ac <_ZL12spi_transferh+0x68>
      reply |= 1;
   d80aa:	433c      	orrs	r4, r7
  for (int i=7; i>=0; i--) {
   d80ac:	3e01      	subs	r6, #1
   d80ae:	d2de      	bcs.n	d806e <_ZL12spi_transferh+0x2a>
}
   d80b0:	4620      	mov	r0, r4
   d80b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d80b6:	bf00      	nop
   d80b8:	2003e45a 	.word	0x2003e45a
   d80bc:	2003e459 	.word	0x2003e459
   d80c0:	2003e458 	.word	0x2003e458

000d80c4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE5beginEv.isra.0>:
    void begin() {
   d80c4:	b508      	push	{r3, lr}
        instance().begin();
   d80c6:	f7ff ffa1 	bl	d800c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   d80ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().begin();
   d80ce:	f004 bcb9 	b.w	dca44 <_ZN8SPIClass5beginEv>
	...

000d80d4 <_ZN15Adafruit_BME6805beginEh>:
bool Adafruit_BME680::begin(uint8_t addr) {
   d80d4:	b538      	push	{r3, r4, r5, lr}
   d80d6:	4604      	mov	r4, r0
  _i2caddr = addr;
   d80d8:	7541      	strb	r1, [r0, #21]
  if (_cs == -1) {
   d80da:	f990 001c 	ldrsb.w	r0, [r0, #28]
   d80de:	1c42      	adds	r2, r0, #1
bool Adafruit_BME680::begin(uint8_t addr) {
   d80e0:	460d      	mov	r5, r1
  if (_cs == -1) {
   d80e2:	d122      	bne.n	d812a <_ZN15Adafruit_BME6805beginEh+0x56>
    Wire.begin();
   d80e4:	f005 fc4e 	bl	dd984 <_Z19__fetch_global_Wirev>
   d80e8:	f002 ffc2 	bl	db070 <_ZN7TwoWire5beginEv>
    gas_sensor.intf = BME680_I2C_INTF;
   d80ec:	2301      	movs	r3, #1
   d80ee:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    gas_sensor.read = &i2c_read;
   d80f2:	4b26      	ldr	r3, [pc, #152]	; (d818c <_ZN15Adafruit_BME6805beginEh+0xb8>)
   d80f4:	66a3      	str	r3, [r4, #104]	; 0x68
    gas_sensor.write = &i2c_write;
   d80f6:	4b26      	ldr	r3, [pc, #152]	; (d8190 <_ZN15Adafruit_BME6805beginEh+0xbc>)
    gas_sensor.dev_id = addr;
   d80f8:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    gas_sensor.write = &spi_write;
   d80fc:	66e3      	str	r3, [r4, #108]	; 0x6c
  gas_sensor.delay_ms = delay_msec;
   d80fe:	4b25      	ldr	r3, [pc, #148]	; (d8194 <_ZN15Adafruit_BME6805beginEh+0xc0>)
   d8100:	6723      	str	r3, [r4, #112]	; 0x70
  rslt = bme680_init(&gas_sensor);
   d8102:	f104 0020 	add.w	r0, r4, #32
   d8106:	f7fc f8e4 	bl	d42d2 <bme680_init>
  if (rslt != BME680_OK)
   d810a:	2800      	cmp	r0, #0
   d810c:	d13b      	bne.n	d8186 <_ZN15Adafruit_BME6805beginEh+0xb2>
  gas_sensor.tph_sett.os_hum = oversample;
   d810e:	4b22      	ldr	r3, [pc, #136]	; (d8198 <_ZN15Adafruit_BME6805beginEh+0xc4>)
   d8110:	65a3      	str	r3, [r4, #88]	; 0x58
    _filterEnabled = true;
   d8112:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
   d8116:	2001      	movs	r0, #1
    _filterEnabled = true;
   d8118:	6123      	str	r3, [r4, #16]
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
   d811a:	4b20      	ldr	r3, [pc, #128]	; (d819c <_ZN15Adafruit_BME6805beginEh+0xc8>)
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
   d811c:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    _gasEnabled = true;
   d8120:	7520      	strb	r0, [r4, #20]
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
   d8122:	6623      	str	r3, [r4, #96]	; 0x60
  gas_sensor.power_mode = BME680_FORCED_MODE;
   d8124:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
}
   d8128:	bd38      	pop	{r3, r4, r5, pc}
    digitalWrite(_cs, HIGH);
   d812a:	2101      	movs	r1, #1
   d812c:	b280      	uxth	r0, r0
   d812e:	f005 fbb4 	bl	dd89a <digitalWrite>
    pinMode(_cs, OUTPUT);
   d8132:	f994 001c 	ldrsb.w	r0, [r4, #28]
   d8136:	2101      	movs	r1, #1
   d8138:	b280      	uxth	r0, r0
   d813a:	f005 fb9d 	bl	dd878 <pinMode>
    if (_BME680_SoftwareSPI_SCK == -1) {
   d813e:	4b18      	ldr	r3, [pc, #96]	; (d81a0 <_ZN15Adafruit_BME6805beginEh+0xcc>)
   d8140:	f993 0000 	ldrsb.w	r0, [r3]
   d8144:	1c43      	adds	r3, r0, #1
   d8146:	d10b      	bne.n	d8160 <_ZN15Adafruit_BME6805beginEh+0x8c>
      SPI.begin();
   d8148:	f7ff ffbc 	bl	d80c4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE5beginEv.isra.0>
    gas_sensor.dev_id = _cs;
   d814c:	7f23      	ldrb	r3, [r4, #28]
   d814e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    gas_sensor.intf = BME680_SPI_INTF;
   d8152:	2300      	movs	r3, #0
   d8154:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    gas_sensor.read = &spi_read;
   d8158:	4b12      	ldr	r3, [pc, #72]	; (d81a4 <_ZN15Adafruit_BME6805beginEh+0xd0>)
   d815a:	66a3      	str	r3, [r4, #104]	; 0x68
    gas_sensor.write = &spi_write;
   d815c:	4b12      	ldr	r3, [pc, #72]	; (d81a8 <_ZN15Adafruit_BME6805beginEh+0xd4>)
   d815e:	e7cd      	b.n	d80fc <_ZN15Adafruit_BME6805beginEh+0x28>
      pinMode(_BME680_SoftwareSPI_SCK, OUTPUT);
   d8160:	2101      	movs	r1, #1
   d8162:	b280      	uxth	r0, r0
   d8164:	f005 fb88 	bl	dd878 <pinMode>
      pinMode(_BME680_SoftwareSPI_MOSI, OUTPUT);
   d8168:	4b10      	ldr	r3, [pc, #64]	; (d81ac <_ZN15Adafruit_BME6805beginEh+0xd8>)
   d816a:	f993 0000 	ldrsb.w	r0, [r3]
   d816e:	2101      	movs	r1, #1
   d8170:	b280      	uxth	r0, r0
   d8172:	f005 fb81 	bl	dd878 <pinMode>
      pinMode(_BME680_SoftwareSPI_MISO, INPUT);
   d8176:	4b0e      	ldr	r3, [pc, #56]	; (d81b0 <_ZN15Adafruit_BME6805beginEh+0xdc>)
   d8178:	f993 0000 	ldrsb.w	r0, [r3]
   d817c:	2100      	movs	r1, #0
   d817e:	b280      	uxth	r0, r0
   d8180:	f005 fb7a 	bl	dd878 <pinMode>
   d8184:	e7e2      	b.n	d814c <_ZN15Adafruit_BME6805beginEh+0x78>
    return false;
   d8186:	2000      	movs	r0, #0
   d8188:	e7ce      	b.n	d8128 <_ZN15Adafruit_BME6805beginEh+0x54>
   d818a:	bf00      	nop
   d818c:	000d7dab 	.word	0x000d7dab
   d8190:	000d7d69 	.word	0x000d7d69
   d8194:	000d7d65 	.word	0x000d7d65
   d8198:	02030402 	.word	0x02030402
   d819c:	00960140 	.word	0x00960140
   d81a0:	2003e45a 	.word	0x2003e45a
   d81a4:	000d81b5 	.word	0x000d81b5
   d81a8:	000d822d 	.word	0x000d822d
   d81ac:	2003e459 	.word	0x2003e459
   d81b0:	2003e458 	.word	0x2003e458

000d81b4 <_ZL8spi_readhhPht>:
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
   d81b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (_BME680_SoftwareSPI_SCK == -1) {
   d81b8:	4f1b      	ldr	r7, [pc, #108]	; (d8228 <_ZL8spi_readhhPht+0x74>)
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
   d81ba:	4688      	mov	r8, r1
  digitalWrite(cspin, LOW);
   d81bc:	2100      	movs	r1, #0
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
   d81be:	4614      	mov	r4, r2
   d81c0:	461d      	mov	r5, r3
  digitalWrite(cspin, LOW);
   d81c2:	4606      	mov	r6, r0
   d81c4:	f005 fb69 	bl	dd89a <digitalWrite>
  if (_BME680_SoftwareSPI_SCK == -1) {
   d81c8:	f997 2000 	ldrsb.w	r2, [r7]
   d81cc:	3201      	adds	r2, #1
   d81ce:	d110      	bne.n	d81f2 <_ZL8spi_readhhPht+0x3e>
    SPI.begin();
   d81d0:	f7ff ff78 	bl	d80c4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE5beginEv.isra.0>
        instance().setClockDivider(divider);
   d81d4:	f7ff ff1a 	bl	d800c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d81d8:	2140      	movs	r1, #64	; 0x40
   d81da:	f004 fcb5 	bl	dcb48 <_ZN8SPIClass15setClockDividerEh>
        instance().setBitOrder(order);
   d81de:	f7ff ff15 	bl	d800c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d81e2:	2101      	movs	r1, #1
   d81e4:	f004 fc3f 	bl	dca66 <_ZN8SPIClass11setBitOrderEh>
        instance().setDataMode(mode);
   d81e8:	f7ff ff10 	bl	d800c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d81ec:	2100      	movs	r1, #0
   d81ee:	f004 fc4d 	bl	dca8c <_ZN8SPIClass11setDataModeEh>
  spi_transfer(reg_addr);
   d81f2:	4640      	mov	r0, r8
   d81f4:	f7ff ff26 	bl	d8044 <_ZL12spi_transferh>
   d81f8:	4425      	add	r5, r4
  while (len--) {
   d81fa:	42ac      	cmp	r4, r5
   d81fc:	d005      	beq.n	d820a <_ZL8spi_readhhPht+0x56>
    *reg_data = spi_transfer(0x00);
   d81fe:	2000      	movs	r0, #0
   d8200:	f7ff ff20 	bl	d8044 <_ZL12spi_transferh>
   d8204:	f804 0b01 	strb.w	r0, [r4], #1
  while (len--) {
   d8208:	e7f7      	b.n	d81fa <_ZL8spi_readhhPht+0x46>
  if (_BME680_SoftwareSPI_SCK == -1) {
   d820a:	f997 3000 	ldrsb.w	r3, [r7]
   d820e:	3301      	adds	r3, #1
   d8210:	d103      	bne.n	d821a <_ZL8spi_readhhPht+0x66>
        instance().endTransaction();
   d8212:	f7ff fefb 	bl	d800c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d8216:	f004 fc4c 	bl	dcab2 <_ZN8SPIClass14endTransactionEv>
  digitalWrite(cspin, HIGH);
   d821a:	4630      	mov	r0, r6
   d821c:	2101      	movs	r1, #1
   d821e:	f005 fb3c 	bl	dd89a <digitalWrite>
}
   d8222:	2000      	movs	r0, #0
   d8224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8228:	2003e45a 	.word	0x2003e45a

000d822c <_ZL9spi_writehhPht>:
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
   d822c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (_BME680_SoftwareSPI_SCK == -1) {
   d8230:	4f1b      	ldr	r7, [pc, #108]	; (d82a0 <_ZL9spi_writehhPht+0x74>)
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
   d8232:	4688      	mov	r8, r1
  digitalWrite(cspin, LOW);
   d8234:	2100      	movs	r1, #0
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
   d8236:	4614      	mov	r4, r2
   d8238:	461d      	mov	r5, r3
  digitalWrite(cspin, LOW);
   d823a:	4606      	mov	r6, r0
   d823c:	f005 fb2d 	bl	dd89a <digitalWrite>
  if (_BME680_SoftwareSPI_SCK == -1) {
   d8240:	f997 2000 	ldrsb.w	r2, [r7]
   d8244:	3201      	adds	r2, #1
   d8246:	d110      	bne.n	d826a <_ZL9spi_writehhPht+0x3e>
    SPI.begin();
   d8248:	f7ff ff3c 	bl	d80c4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE5beginEv.isra.0>
        instance().setClockDivider(divider);
   d824c:	f7ff fede 	bl	d800c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d8250:	2140      	movs	r1, #64	; 0x40
   d8252:	f004 fc79 	bl	dcb48 <_ZN8SPIClass15setClockDividerEh>
        instance().setBitOrder(order);
   d8256:	f7ff fed9 	bl	d800c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d825a:	2101      	movs	r1, #1
   d825c:	f004 fc03 	bl	dca66 <_ZN8SPIClass11setBitOrderEh>
        instance().setDataMode(mode);
   d8260:	f7ff fed4 	bl	d800c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d8264:	2100      	movs	r1, #0
   d8266:	f004 fc11 	bl	dca8c <_ZN8SPIClass11setDataModeEh>
  spi_transfer(reg_addr);
   d826a:	4640      	mov	r0, r8
   d826c:	f7ff feea 	bl	d8044 <_ZL12spi_transferh>
   d8270:	4425      	add	r5, r4
  while (len--) {
   d8272:	42ac      	cmp	r4, r5
   d8274:	d004      	beq.n	d8280 <_ZL9spi_writehhPht+0x54>
    spi_transfer(*reg_data);
   d8276:	f814 0b01 	ldrb.w	r0, [r4], #1
   d827a:	f7ff fee3 	bl	d8044 <_ZL12spi_transferh>
  while (len--) {
   d827e:	e7f8      	b.n	d8272 <_ZL9spi_writehhPht+0x46>
  if (_BME680_SoftwareSPI_SCK == -1) {
   d8280:	f997 3000 	ldrsb.w	r3, [r7]
   d8284:	3301      	adds	r3, #1
   d8286:	d103      	bne.n	d8290 <_ZL9spi_writehhPht+0x64>
        instance().endTransaction();
   d8288:	f7ff fec0 	bl	d800c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d828c:	f004 fc11 	bl	dcab2 <_ZN8SPIClass14endTransactionEv>
  digitalWrite(cspin, HIGH);
   d8290:	4630      	mov	r0, r6
   d8292:	2101      	movs	r1, #1
   d8294:	f005 fb01 	bl	dd89a <digitalWrite>
}
   d8298:	2000      	movs	r0, #0
   d829a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d829e:	bf00      	nop
   d82a0:	2003e45a 	.word	0x2003e45a

000d82a4 <_ZNSt14_Function_base13_Base_managerIZN17BackgroundPublish5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d82a4:	2a02      	cmp	r2, #2
   d82a6:	d006      	beq.n	d82b6 <_ZNSt14_Function_base13_Base_managerIZN17BackgroundPublish5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x12>
   d82a8:	2a03      	cmp	r2, #3
   d82aa:	d002      	beq.n	d82b2 <_ZNSt14_Function_base13_Base_managerIZN17BackgroundPublish5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d82ac:	2a01      	cmp	r2, #1
   d82ae:	d100      	bne.n	d82b2 <_ZNSt14_Function_base13_Base_managerIZN17BackgroundPublish5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d82b0:	6001      	str	r1, [r0, #0]
	}
   d82b2:	2000      	movs	r0, #0
   d82b4:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d82b6:	680b      	ldr	r3, [r1, #0]
   d82b8:	6003      	str	r3, [r0, #0]
	}
   d82ba:	e7fa      	b.n	d82b2 <_ZNSt14_Function_base13_Base_managerIZN17BackgroundPublish5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>

000d82bc <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d82bc:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d82be:	2301      	movs	r3, #1
   d82c0:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d82c2:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d82c4:	4604      	mov	r4, r0
        if (th->func) {
   d82c6:	b143      	cbz	r3, d82da <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d82c8:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d82ca:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d82cc:	2301      	movs	r3, #1
   d82ce:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d82d0:	2000      	movs	r0, #0
    }
   d82d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d82d6:	f001 bc81 	b.w	d9bdc <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d82da:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d82dc:	2800      	cmp	r0, #0
   d82de:	d0f5      	beq.n	d82cc <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d82e0:	6883      	ldr	r3, [r0, #8]
   d82e2:	b90b      	cbnz	r3, d82e8 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d82e4:	f005 fba2 	bl	dda2c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d82e8:	68c3      	ldr	r3, [r0, #12]
   d82ea:	e7ee      	b.n	d82ca <_ZN6Thread3runEPv+0xe>

000d82ec <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>:
      operator()(_Tp* __ptr) const
   d82ec:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   d82ee:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   d82f0:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   d82f2:	b135      	cbz	r5, d8302 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   d82f4:	4628      	mov	r0, r5
   d82f6:	f7fc fd25 	bl	d4d44 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d82fa:	2110      	movs	r1, #16
   d82fc:	4628      	mov	r0, r5
   d82fe:	f005 fb89 	bl	dda14 <_ZdlPvj>
   d8302:	4620      	mov	r0, r4
   d8304:	2114      	movs	r1, #20
      }
   d8306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   d830a:	f005 bb83 	b.w	dda14 <_ZdlPvj>

000d830e <_ZN6Thread7disposeEv>:
    void dispose()
   d830e:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d8310:	6803      	ldr	r3, [r0, #0]
   d8312:	4604      	mov	r4, r0
        if (!isValid())
   d8314:	b1ab      	cbz	r3, d8342 <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   d8316:	6858      	ldr	r0, [r3, #4]
   d8318:	f001 fbd8 	bl	d9acc <os_thread_is_current>
   d831c:	b988      	cbnz	r0, d8342 <_ZN6Thread7disposeEv+0x34>
   d831e:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   d8320:	7c5a      	ldrb	r2, [r3, #17]
   d8322:	b912      	cbnz	r2, d832a <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   d8324:	6858      	ldr	r0, [r3, #4]
   d8326:	f001 fbe1 	bl	d9aec <os_thread_join>
        os_thread_cleanup(d_->handle);
   d832a:	6823      	ldr	r3, [r4, #0]
   d832c:	6858      	ldr	r0, [r3, #4]
   d832e:	f001 fbe5 	bl	d9afc <os_thread_cleanup>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8332:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d8334:	2300      	movs	r3, #0
   d8336:	6023      	str	r3, [r4, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d8338:	b118      	cbz	r0, d8342 <_ZN6Thread7disposeEv+0x34>
    }
   d833a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d833e:	f7ff bfd5 	b.w	d82ec <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
   d8342:	bd10      	pop	{r4, pc}

000d8344 <_ZN17BackgroundPublishC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublish *BackgroundPublish::_instance;

BackgroundPublish::BackgroundPublish() {
   d8344:	4a05      	ldr	r2, [pc, #20]	; (d835c <_ZN17BackgroundPublishC1Ev+0x18>)
   d8346:	6002      	str	r2, [r0, #0]
   d8348:	2200      	movs	r2, #0
   d834a:	6042      	str	r2, [r0, #4]
   d834c:	7302      	strb	r2, [r0, #12]
        val_(0) {
   d834e:	f880 22bd 	strb.w	r2, [r0, #701]	; 0x2bd
    _Function_base() : _M_manager(nullptr) { }
   d8352:	f8c0 22c8 	str.w	r2, [r0, #712]	; 0x2c8
   d8356:	f8c0 22d0 	str.w	r2, [r0, #720]	; 0x2d0
}
   d835a:	4770      	bx	lr
   d835c:	000e0c64 	.word	0x000e0c64

000d8360 <_ZN17BackgroundPublish8instanceEv>:
BackgroundPublish::~BackgroundPublish()
{
    stop();
}

BackgroundPublish &BackgroundPublish::instance() {
   d8360:	b510      	push	{r4, lr}
    if (!_instance) {
   d8362:	4c07      	ldr	r4, [pc, #28]	; (d8380 <_ZN17BackgroundPublish8instanceEv+0x20>)
   d8364:	6823      	ldr	r3, [r4, #0]
   d8366:	b943      	cbnz	r3, d837a <_ZN17BackgroundPublish8instanceEv+0x1a>
        _instance = new BackgroundPublish();
   d8368:	f44f 7035 	mov.w	r0, #724	; 0x2d4
   d836c:	f7fb fe93 	bl	d4096 <_Znwj>
   d8370:	4603      	mov	r3, r0
   d8372:	b108      	cbz	r0, d8378 <_ZN17BackgroundPublish8instanceEv+0x18>
   d8374:	f7ff ffe6 	bl	d8344 <_ZN17BackgroundPublishC1Ev>
   d8378:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   d837a:	6820      	ldr	r0, [r4, #0]
   d837c:	bd10      	pop	{r4, pc}
   d837e:	bf00      	nop
   d8380:	2003e45c 	.word	0x2003e45c

000d8384 <_ZN17BackgroundPublish4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublish::stop()
{
   d8384:	b538      	push	{r3, r4, r5, lr}
   d8386:	4604      	mov	r4, r0
    if(thread)
   d8388:	6840      	ldr	r0, [r0, #4]
   d838a:	b190      	cbz	r0, d83b2 <_ZN17BackgroundPublish4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   d838c:	2302      	movs	r3, #2
   d838e:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   d8390:	f7ff ffbd 	bl	d830e <_ZN6Thread7disposeEv>
        delete thread;
   d8394:	6865      	ldr	r5, [r4, #4]
   d8396:	b155      	cbz	r5, d83ae <_ZN17BackgroundPublish4stopEv+0x2a>
        dispose();
   d8398:	4628      	mov	r0, r5
   d839a:	f7ff ffb8 	bl	d830e <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   d839e:	6828      	ldr	r0, [r5, #0]
   d83a0:	b108      	cbz	r0, d83a6 <_ZN17BackgroundPublish4stopEv+0x22>
      operator()(_Tp* __ptr) const
   d83a2:	f7ff ffa3 	bl	d82ec <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
   d83a6:	2104      	movs	r1, #4
   d83a8:	4628      	mov	r0, r5
   d83aa:	f005 fb33 	bl	dda14 <_ZdlPvj>
        thread = NULL;
   d83ae:	2300      	movs	r3, #0
   d83b0:	6063      	str	r3, [r4, #4]
    }
}
   d83b2:	bd38      	pop	{r3, r4, r5, pc}

000d83b4 <_ZN17BackgroundPublishD1Ev>:
BackgroundPublish::~BackgroundPublish()
   d83b4:	b510      	push	{r4, lr}
   d83b6:	4b05      	ldr	r3, [pc, #20]	; (d83cc <_ZN17BackgroundPublishD1Ev+0x18>)
   d83b8:	6003      	str	r3, [r0, #0]
   d83ba:	4604      	mov	r4, r0
    stop();
   d83bc:	f7ff ffe2 	bl	d8384 <_ZN17BackgroundPublish4stopEv>
    class function<_Res(_ArgTypes...)>
   d83c0:	f504 7030 	add.w	r0, r4, #704	; 0x2c0
   d83c4:	f7fc fcbe 	bl	d4d44 <_ZNSt14_Function_baseD1Ev>
}
   d83c8:	4620      	mov	r0, r4
   d83ca:	bd10      	pop	{r4, pc}
   d83cc:	000e0c64 	.word	0x000e0c64

000d83d0 <_ZN17BackgroundPublishD0Ev>:
BackgroundPublish::~BackgroundPublish()
   d83d0:	b510      	push	{r4, lr}
   d83d2:	4604      	mov	r4, r0
}
   d83d4:	f7ff ffee 	bl	d83b4 <_ZN17BackgroundPublishD1Ev>
   d83d8:	4620      	mov	r0, r4
   d83da:	f44f 7135 	mov.w	r1, #724	; 0x2d4
   d83de:	f005 fb19 	bl	dda14 <_ZdlPvj>
   d83e2:	4620      	mov	r0, r4
   d83e4:	bd10      	pop	{r4, pc}

000d83e6 <_ZN17BackgroundPublish8thread_fEv>:

void BackgroundPublish::thread_f()
{
   d83e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   d83e8:	4604      	mov	r4, r0
   d83ea:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   d83ec:	f100 060d 	add.w	r6, r0, #13
   d83f0:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   d83f4:	7b23      	ldrb	r3, [r4, #12]
   d83f6:	b91b      	cbnz	r3, d8400 <_ZN17BackgroundPublish8thread_fEv+0x1a>
            delay(1);
   d83f8:	2001      	movs	r0, #1
   d83fa:	f002 f87b 	bl	da4f4 <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   d83fe:	e7f9      	b.n	d83f4 <_ZN17BackgroundPublish8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   d8400:	7b23      	ldrb	r3, [r4, #12]
   d8402:	2b02      	cmp	r3, #2
   d8404:	d062      	beq.n	d84cc <_ZN17BackgroundPublish8thread_fEv+0xe6>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   d8406:	68a0      	ldr	r0, [r4, #8]
   d8408:	f001 fbb0 	bl	d9b6c <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   d840c:	68a0      	ldr	r0, [r4, #8]
   d840e:	f001 fbb5 	bl	d9b7c <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d8412:	f894 32bd 	ldrb.w	r3, [r4, #701]	; 0x2bd
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d8416:	f88d 3000 	strb.w	r3, [sp]
   d841a:	463a      	mov	r2, r7
   d841c:	233c      	movs	r3, #60	; 0x3c
   d841e:	4631      	mov	r1, r6
   d8420:	a806      	add	r0, sp, #24
   d8422:	f002 fb47 	bl	daab4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d8426:	9d06      	ldr	r5, [sp, #24]
   d8428:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   d842a:	b933      	cbnz	r3, d843a <_ZN17BackgroundPublish8thread_fEv+0x54>
   d842c:	7b23      	ldrb	r3, [r4, #12]
   d842e:	2b02      	cmp	r3, #2
   d8430:	d003      	beq.n	d843a <_ZN17BackgroundPublish8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   d8432:	2001      	movs	r0, #1
   d8434:	f002 f85e 	bl	da4f4 <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   d8438:	e7f5      	b.n	d8426 <_ZN17BackgroundPublish8thread_fEv+0x40>
        }

        if(completed_cb)
   d843a:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
   d843e:	b31b      	cbz	r3, d8488 <_ZN17BackgroundPublish8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d8440:	2000      	movs	r0, #0
   d8442:	f001 febd 	bl	da1c0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8446:	b120      	cbz	r0, d8452 <_ZN17BackgroundPublish8thread_fEv+0x6c>
   d8448:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d844a:	b913      	cbnz	r3, d8452 <_ZN17BackgroundPublish8thread_fEv+0x6c>
        spark_process();
   d844c:	f001 ff1a 	bl	da284 <spark_process>
    }
   d8450:	e7fa      	b.n	d8448 <_ZN17BackgroundPublish8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d8452:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   d8454:	f8d4 22d0 	ldr.w	r2, [r4, #720]	; 0x2d0
   d8458:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   d845a:	1e59      	subs	r1, r3, #1
   d845c:	424b      	negs	r3, r1
   d845e:	414b      	adcs	r3, r1
   d8460:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   d8464:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
   d8468:	e9cd 6703 	strd	r6, r7, [sp, #12]
   d846c:	b90b      	cbnz	r3, d8472 <_ZN17BackgroundPublish8thread_fEv+0x8c>
	__throw_bad_function_call();
   d846e:	f005 fadd 	bl	dda2c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8472:	ab05      	add	r3, sp, #20
   d8474:	9300      	str	r3, [sp, #0]
   d8476:	f8d4 52cc 	ldr.w	r5, [r4, #716]	; 0x2cc
   d847a:	ab04      	add	r3, sp, #16
   d847c:	aa03      	add	r2, sp, #12
   d847e:	f10d 010b 	add.w	r1, sp, #11
   d8482:	f504 7030 	add.w	r0, r4, #704	; 0x2c0
   d8486:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   d8488:	68a0      	ldr	r0, [r4, #8]
   d848a:	f001 fb6f 	bl	d9b6c <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   d848e:	7b23      	ldrb	r3, [r4, #12]
   d8490:	2b02      	cmp	r3, #2
   d8492:	d015      	beq.n	d84c0 <_ZN17BackgroundPublish8thread_fEv+0xda>
	if (_M_manager)
   d8494:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
            {
                return;
            }
            event_context = NULL;
   d8498:	2500      	movs	r5, #0
   d849a:	f8c4 52d0 	str.w	r5, [r4, #720]	; 0x2d0
   d849e:	b133      	cbz	r3, d84ae <_ZN17BackgroundPublish8thread_fEv+0xc8>
            completed_cb = NULL;
   d84a0:	f504 7130 	add.w	r1, r4, #704	; 0x2c0
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   d84a4:	2203      	movs	r2, #3
   d84a6:	4608      	mov	r0, r1
   d84a8:	4798      	blx	r3
	    _M_invoker = nullptr;
   d84aa:	e9c4 55b2 	strd	r5, r5, [r4, #712]	; 0x2c8
            state = BACKGROUND_PUBLISH_IDLE;
   d84ae:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   d84b0:	68a0      	ldr	r0, [r4, #8]
   d84b2:	7323      	strb	r3, [r4, #12]
   d84b4:	f001 fb62 	bl	d9b7c <os_mutex_unlock>
   d84b8:	a807      	add	r0, sp, #28
   d84ba:	f7fd f933 	bl	d5724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d84be:	e799      	b.n	d83f4 <_ZN17BackgroundPublish8thread_fEv+0xe>
   d84c0:	68a0      	ldr	r0, [r4, #8]
   d84c2:	f001 fb5b 	bl	d9b7c <os_mutex_unlock>
   d84c6:	a807      	add	r0, sp, #28
   d84c8:	f7fd f92c 	bl	d5724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d84cc:	b009      	add	sp, #36	; 0x24
   d84ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d84d0 <_ZNSt17_Function_handlerIFvvEZN17BackgroundPublish5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   d84d0:	6800      	ldr	r0, [r0, #0]
   d84d2:	f7ff bf88 	b.w	d83e6 <_ZN17BackgroundPublish8thread_fEv>

000d84d6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d84d6:	b513      	push	{r0, r1, r4, lr}
   d84d8:	460b      	mov	r3, r1
   d84da:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d84dc:	e9d0 0100 	ldrd	r0, r1, [r0]
   d84e0:	466c      	mov	r4, sp
   d84e2:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d84e6:	e893 0003 	ldmia.w	r3, {r0, r1}
   d84ea:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d84ee:	e894 0003 	ldmia.w	r4, {r0, r1}
   d84f2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d84f6:	b002      	add	sp, #8
   d84f8:	bd10      	pop	{r4, pc}
	...

000d84fc <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   d84fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d8500:	4606      	mov	r6, r0
   d8502:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   d8504:	2014      	movs	r0, #20
   d8506:	4926      	ldr	r1, [pc, #152]	; (d85a0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   d8508:	4617      	mov	r7, r2
   d850a:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   d850c:	f005 fa84 	bl	dda18 <_ZnwjRKSt9nothrow_t>
   d8510:	4604      	mov	r4, r0
   d8512:	b130      	cbz	r0, d8522 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d8514:	2200      	movs	r2, #0
            exited(false) {
   d8516:	e9c0 2200 	strd	r2, r2, [r0]
   d851a:	e9c0 2202 	strd	r2, r2, [r0, #8]
   d851e:	7402      	strb	r2, [r0, #16]
   d8520:	7442      	strb	r2, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d8522:	6034      	str	r4, [r6, #0]
        if (!d_) {
   d8524:	2c00      	cmp	r4, #0
   d8526:	d031      	beq.n	d858c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   d8528:	491d      	ldr	r1, [pc, #116]	; (d85a0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   d852a:	2010      	movs	r0, #16
   d852c:	f005 fa74 	bl	dda18 <_ZnwjRKSt9nothrow_t>
   d8530:	4605      	mov	r5, r0
   d8532:	b168      	cbz	r0, d8550 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   d8534:	2300      	movs	r3, #0
   d8536:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8538:	4601      	mov	r1, r0
   d853a:	4638      	mov	r0, r7
   d853c:	f7ff ffcb 	bl	d84d6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8540:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   d8542:	68aa      	ldr	r2, [r5, #8]
   d8544:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8546:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d8548:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d854a:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d854c:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d854e:	60fa      	str	r2, [r7, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8550:	6827      	ldr	r7, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d8552:	6025      	str	r5, [r4, #0]
	if (__p != pointer())
   d8554:	b137      	cbz	r7, d8564 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   d8556:	4638      	mov	r0, r7
   d8558:	f7fc fbf4 	bl	d4d44 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d855c:	2110      	movs	r1, #16
   d855e:	4638      	mov	r0, r7
   d8560:	f005 fa58 	bl	dda14 <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d8564:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   d8566:	6803      	ldr	r3, [r0, #0]
   d8568:	b183      	cbz	r3, d858c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d856a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d856c:	464a      	mov	r2, r9
   d856e:	e9cd 0300 	strd	r0, r3, [sp]
   d8572:	4641      	mov	r1, r8
   d8574:	4b0b      	ldr	r3, [pc, #44]	; (d85a4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   d8576:	3004      	adds	r0, #4
   d8578:	f001 faa0 	bl	d9abc <os_thread_create>
   d857c:	b930      	cbnz	r0, d858c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   d857e:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   d8580:	7c1b      	ldrb	r3, [r3, #16]
   d8582:	b94b      	cbnz	r3, d8598 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   d8584:	2001      	movs	r0, #1
   d8586:	f001 fb51 	bl	d9c2c <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d858a:	e7f8      	b.n	d857e <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d858c:	6830      	ldr	r0, [r6, #0]
      __a = _GLIBCXX_MOVE(__b);
   d858e:	2300      	movs	r3, #0
   d8590:	6033      	str	r3, [r6, #0]
	if (__p != pointer())
   d8592:	b108      	cbz	r0, d8598 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   d8594:	f7ff feaa 	bl	d82ec <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
    }
   d8598:	4630      	mov	r0, r6
   d859a:	b003      	add	sp, #12
   d859c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d85a0:	000e1368 	.word	0x000e1368
   d85a4:	000d82bd 	.word	0x000d82bd

000d85a8 <_ZN17BackgroundPublish5startEv>:
{
   d85a8:	b530      	push	{r4, r5, lr}
    if(!thread)
   d85aa:	6843      	ldr	r3, [r0, #4]
{
   d85ac:	b087      	sub	sp, #28
   d85ae:	4604      	mov	r4, r0
    if(!thread)
   d85b0:	b9c3      	cbnz	r3, d85e4 <_ZN17BackgroundPublish5startEv+0x3c>
        os_mutex_create(&mutex);
   d85b2:	3008      	adds	r0, #8
   d85b4:	f001 fad2 	bl	d9b5c <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   d85b8:	4b0b      	ldr	r3, [pc, #44]	; (d85e8 <_ZN17BackgroundPublish5startEv+0x40>)
   d85ba:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   d85bc:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   d85be:	4b0b      	ldr	r3, [pc, #44]	; (d85ec <_ZN17BackgroundPublish5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d85c0:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   d85c2:	9304      	str	r3, [sp, #16]
   d85c4:	f7fb fd67 	bl	d4096 <_Znwj>
   d85c8:	4605      	mov	r5, r0
   d85ca:	b138      	cbz	r0, d85dc <_ZN17BackgroundPublish5startEv+0x34>
   d85cc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d85d0:	9300      	str	r3, [sp, #0]
   d85d2:	4907      	ldr	r1, [pc, #28]	; (d85f0 <_ZN17BackgroundPublish5startEv+0x48>)
   d85d4:	2302      	movs	r3, #2
   d85d6:	aa02      	add	r2, sp, #8
   d85d8:	f7ff ff90 	bl	d84fc <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublish",
   d85dc:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   d85de:	a802      	add	r0, sp, #8
   d85e0:	f7fc fbb0 	bl	d4d44 <_ZNSt14_Function_baseD1Ev>
}
   d85e4:	b007      	add	sp, #28
   d85e6:	bd30      	pop	{r4, r5, pc}
   d85e8:	000d84d1 	.word	0x000d84d1
   d85ec:	000d82a5 	.word	0x000d82a5
   d85f0:	000e0c48 	.word	0x000e0c48

000d85f4 <_ZN17BackgroundPublish7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublish::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   d85f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d85f8:	4604      	mov	r4, r0
   d85fa:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   d85fc:	6880      	ldr	r0, [r0, #8]
   d85fe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   d8600:	4698      	mov	r8, r3
   d8602:	460d      	mov	r5, r1
   d8604:	4616      	mov	r6, r2
   d8606:	f001 fab1 	bl	d9b6c <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   d860a:	6863      	ldr	r3, [r4, #4]
   d860c:	b11b      	cbz	r3, d8616 <_ZN17BackgroundPublish7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   d860e:	7b23      	ldrb	r3, [r4, #12]
   d8610:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   d8614:	b133      	cbz	r3, d8624 <_ZN17BackgroundPublish7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   d8616:	68a0      	ldr	r0, [r4, #8]
   d8618:	f001 fab0 	bl	d9b7c <os_mutex_unlock>
    {
        return false;
   d861c:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   d861e:	b005      	add	sp, #20
   d8620:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d8624:	68a0      	ldr	r0, [r4, #8]
   d8626:	f001 faa9 	bl	d9b7c <os_mutex_unlock>
    if(!name)
   d862a:	2d00      	cmp	r5, #0
   d862c:	d03d      	beq.n	d86aa <_ZN17BackgroundPublish7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   d862e:	2241      	movs	r2, #65	; 0x41
   d8630:	4629      	mov	r1, r5
   d8632:	f104 000d 	add.w	r0, r4, #13
   d8636:	f007 fbdc 	bl	dfdf2 <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   d863a:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   d863e:	b38e      	cbz	r6, d86a4 <_ZN17BackgroundPublish7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   d8640:	f240 226f 	movw	r2, #623	; 0x26f
   d8644:	4631      	mov	r1, r6
   d8646:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   d864a:	f007 fbd2 	bl	dfdf2 <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   d864e:	f884 92bc 	strb.w	r9, [r4, #700]	; 0x2bc
    _Function_base() : _M_manager(nullptr) { }
   d8652:	2300      	movs	r3, #0
   d8654:	9302      	str	r3, [sp, #8]
      { return !_M_empty(); }
   d8656:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   d8658:	f504 7530 	add.w	r5, r4, #704	; 0x2c0
      if (static_cast<bool>(__x))
   d865c:	b13b      	cbz	r3, d866e <_ZN17BackgroundPublish7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d865e:	2202      	movs	r2, #2
   d8660:	4639      	mov	r1, r7
   d8662:	4668      	mov	r0, sp
   d8664:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8666:	68fb      	ldr	r3, [r7, #12]
   d8668:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   d866a:	68bb      	ldr	r3, [r7, #8]
   d866c:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   d866e:	4629      	mov	r1, r5
   d8670:	4668      	mov	r0, sp
   d8672:	f7ff ff30 	bl	d84d6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8676:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d8678:	f8d4 22c8 	ldr.w	r2, [r4, #712]	; 0x2c8
      __b = _GLIBCXX_MOVE(__tmp);
   d867c:	f8c4 32c8 	str.w	r3, [r4, #712]	; 0x2c8
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8680:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d8682:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   d8684:	4668      	mov	r0, sp
   d8686:	f8d4 22cc 	ldr.w	r2, [r4, #716]	; 0x2cc
      __b = _GLIBCXX_MOVE(__tmp);
   d868a:	f8c4 32cc 	str.w	r3, [r4, #716]	; 0x2cc
      __a = _GLIBCXX_MOVE(__b);
   d868e:	9203      	str	r2, [sp, #12]
   d8690:	f7fc fb58 	bl	d4d44 <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   d8694:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d8696:	f8c4 32d0 	str.w	r3, [r4, #720]	; 0x2d0
    state = BACKGROUND_PUBLISH_REQUESTED;
   d869a:	2001      	movs	r0, #1
    event_flags = flags;
   d869c:	f884 82bd 	strb.w	r8, [r4, #701]	; 0x2bd
    state = BACKGROUND_PUBLISH_REQUESTED;
   d86a0:	7320      	strb	r0, [r4, #12]
    return true;
   d86a2:	e7bc      	b.n	d861e <_ZN17BackgroundPublish7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   d86a4:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   d86a8:	e7d3      	b.n	d8652 <_ZN17BackgroundPublish7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   d86aa:	4628      	mov	r0, r5
   d86ac:	e7b7      	b.n	d861e <_ZN17BackgroundPublish7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>

000d86ae <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d86ae:	4770      	bx	lr

000d86b0 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d86b0:	b510      	push	{r4, lr}
}
   d86b2:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d86b4:	4604      	mov	r4, r0
}
   d86b6:	f005 f9ad 	bl	dda14 <_ZdlPvj>
   d86ba:	4620      	mov	r0, r4
   d86bc:	bd10      	pop	{r4, pc}

000d86be <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d86be:	6803      	ldr	r3, [r0, #0]
   d86c0:	b2c9      	uxtb	r1, r1
   d86c2:	689b      	ldr	r3, [r3, #8]
   d86c4:	4718      	bx	r3
	...

000d86c8 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d86c8:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d86ca:	4d03      	ldr	r5, [pc, #12]	; (d86d8 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d86cc:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d86d0:	e9c0 5100 	strd	r5, r1, [r0]
}
   d86d4:	bd30      	pop	{r4, r5, pc}
   d86d6:	bf00      	nop
   d86d8:	000e0ca0 	.word	0x000e0ca0

000d86dc <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d86dc:	6840      	ldr	r0, [r0, #4]
   d86de:	f002 bcc7 	b.w	db070 <_ZN7TwoWire5beginEv>

000d86e2 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d86e2:	b510      	push	{r4, lr}
   d86e4:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d86e6:	6800      	ldr	r0, [r0, #0]
   d86e8:	f002 fd23 	bl	db132 <_ZN7TwoWire6unlockEv>
   d86ec:	4620      	mov	r0, r4
   d86ee:	bd10      	pop	{r4, pc}

000d86f0 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d86f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d86f4:	b08a      	sub	sp, #40	; 0x28
   d86f6:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d86f8:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d86fa:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d86fc:	f002 fd10 	bl	db120 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d8700:	221e      	movs	r2, #30
   d8702:	2100      	movs	r1, #0
   d8704:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d8706:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d8708:	f007 fae6 	bl	dfcd8 <memset>
		size_t framAddr = 0;
   d870c:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d870e:	b1ef      	cbz	r7, d874c <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d8710:	6823      	ldr	r3, [r4, #0]
   d8712:	2f1e      	cmp	r7, #30
   d8714:	46b8      	mov	r8, r7
   d8716:	bf28      	it	cs
   d8718:	f04f 081e 	movcs.w	r8, #30
   d871c:	68dd      	ldr	r5, [r3, #12]
   d871e:	aa02      	add	r2, sp, #8
   d8720:	4643      	mov	r3, r8
   d8722:	4631      	mov	r1, r6
   d8724:	4620      	mov	r0, r4
   d8726:	47a8      	blx	r5
			if (!result) {
   d8728:	4605      	mov	r5, r0
   d872a:	b958      	cbnz	r0, d8744 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d872c:	480a      	ldr	r0, [pc, #40]	; (d8758 <_ZN6MB85RC5eraseEv+0x68>)
   d872e:	490b      	ldr	r1, [pc, #44]	; (d875c <_ZN6MB85RC5eraseEv+0x6c>)
   d8730:	4632      	mov	r2, r6
   d8732:	f7fc fbe7 	bl	d4f04 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d8736:	a801      	add	r0, sp, #4
   d8738:	f7ff ffd3 	bl	d86e2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d873c:	4628      	mov	r0, r5
   d873e:	b00a      	add	sp, #40	; 0x28
   d8740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d8744:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d8748:	4446      	add	r6, r8
		while(totalLen > 0) {
   d874a:	e7e0      	b.n	d870e <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d874c:	a801      	add	r0, sp, #4
   d874e:	f7ff ffc8 	bl	d86e2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d8752:	2501      	movs	r5, #1
   d8754:	e7f2      	b.n	d873c <_ZN6MB85RC5eraseEv+0x4c>
   d8756:	bf00      	nop
   d8758:	2003e544 	.word	0x2003e544
   d875c:	000e0c6c 	.word	0x000e0c6c

000d8760 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d8760:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d8764:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d8766:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8768:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d876a:	460d      	mov	r5, r1
   d876c:	4616      	mov	r6, r2
   d876e:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d8770:	f002 fcd6 	bl	db120 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d8774:	b1a7      	cbz	r7, d87a0 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d8776:	68e1      	ldr	r1, [r4, #12]
   d8778:	6860      	ldr	r0, [r4, #4]
   d877a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d877e:	f002 fcad 	bl	db0dc <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d8782:	0a29      	lsrs	r1, r5, #8
   d8784:	6860      	ldr	r0, [r4, #4]
   d8786:	f7ff ff9a 	bl	d86be <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d878a:	4629      	mov	r1, r5
   d878c:	6860      	ldr	r0, [r4, #4]
   d878e:	f7ff ff96 	bl	d86be <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d8792:	6860      	ldr	r0, [r4, #4]
   d8794:	2100      	movs	r1, #0
   d8796:	f002 fcbc 	bl	db112 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d879a:	b148      	cbz	r0, d87b0 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d879c:	2400      	movs	r4, #0
   d879e:	e000      	b.n	d87a2 <_ZN6MB85RC8readDataEjPhj+0x42>
   d87a0:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d87a2:	a801      	add	r0, sp, #4
   d87a4:	f7ff ff9d 	bl	d86e2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d87a8:	4620      	mov	r0, r4
   d87aa:	b003      	add	sp, #12
   d87ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d87b0:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d87b2:	7b21      	ldrb	r1, [r4, #12]
   d87b4:	6860      	ldr	r0, [r4, #4]
   d87b6:	46b8      	mov	r8, r7
   d87b8:	bf28      	it	cs
   d87ba:	f04f 0820 	movcs.w	r8, #32
   d87be:	2301      	movs	r3, #1
   d87c0:	4642      	mov	r2, r8
   d87c2:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d87c6:	f002 fc70 	bl	db0aa <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d87ca:	f005 f8db 	bl	dd984 <_Z19__fetch_global_Wirev>
   d87ce:	6803      	ldr	r3, [r0, #0]
   d87d0:	691b      	ldr	r3, [r3, #16]
   d87d2:	4798      	blx	r3
   d87d4:	4540      	cmp	r0, r8
   d87d6:	dbe1      	blt.n	d879c <_ZN6MB85RC8readDataEjPhj+0x3c>
   d87d8:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d87dc:	f005 f8d2 	bl	dd984 <_Z19__fetch_global_Wirev>
   d87e0:	6803      	ldr	r3, [r0, #0]
   d87e2:	695b      	ldr	r3, [r3, #20]
   d87e4:	4798      	blx	r3
   d87e6:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d87ea:	454e      	cmp	r6, r9
   d87ec:	d1f6      	bne.n	d87dc <_ZN6MB85RC8readDataEjPhj+0x7c>
   d87ee:	4445      	add	r5, r8
   d87f0:	eba7 0708 	sub.w	r7, r7, r8
   d87f4:	e7be      	b.n	d8774 <_ZN6MB85RC8readDataEjPhj+0x14>

000d87f6 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d87f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d87fa:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d87fc:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d87fe:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d8800:	460e      	mov	r6, r1
   d8802:	4690      	mov	r8, r2
   d8804:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d8806:	f002 fc8b 	bl	db120 <_ZN7TwoWire4lockEv>
   d880a:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d880e:	f1b9 0f00 	cmp.w	r9, #0
   d8812:	d02a      	beq.n	d886a <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d8814:	b34d      	cbz	r5, d886a <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d8816:	68e1      	ldr	r1, [r4, #12]
   d8818:	6860      	ldr	r0, [r4, #4]
   d881a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d881e:	f002 fc5d 	bl	db0dc <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d8822:	0a31      	lsrs	r1, r6, #8
   d8824:	6860      	ldr	r0, [r4, #4]
   d8826:	f7ff ff4a 	bl	d86be <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d882a:	6860      	ldr	r0, [r4, #4]
   d882c:	4631      	mov	r1, r6
   d882e:	f7ff ff46 	bl	d86be <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d8832:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d8836:	4647      	mov	r7, r8
   d8838:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d883c:	6860      	ldr	r0, [r4, #4]
   d883e:	f817 1b01 	ldrb.w	r1, [r7], #1
   d8842:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d8844:	3d01      	subs	r5, #1
				wire.write(*data);
   d8846:	689b      	ldr	r3, [r3, #8]
   d8848:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d884a:	4555      	cmp	r5, sl
   d884c:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d8850:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d8852:	d001      	beq.n	d8858 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d8854:	2d00      	cmp	r5, #0
   d8856:	d1f1      	bne.n	d883c <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d8858:	6860      	ldr	r0, [r4, #4]
   d885a:	2101      	movs	r1, #1
   d885c:	f002 fc59 	bl	db112 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d8860:	2800      	cmp	r0, #0
   d8862:	d0d7      	beq.n	d8814 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d8864:	f04f 0900 	mov.w	r9, #0
   d8868:	e7d1      	b.n	d880e <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d886a:	a801      	add	r0, sp, #4
   d886c:	f7ff ff39 	bl	d86e2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d8870:	4648      	mov	r0, r9
   d8872:	b003      	add	sp, #12
   d8874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d8878 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d8878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d887c:	b08b      	sub	sp, #44	; 0x2c
   d887e:	460e      	mov	r6, r1
   d8880:	4615      	mov	r5, r2
   d8882:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d8884:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8886:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d8888:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d888a:	f002 fc49 	bl	db120 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d888e:	42ae      	cmp	r6, r5
   d8890:	d229      	bcs.n	d88e6 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d8892:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d8894:	4425      	add	r5, r4
			while(numBytes > 0) {
   d8896:	b18c      	cbz	r4, d88bc <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d8898:	2c1e      	cmp	r4, #30
   d889a:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d889c:	f8d8 3000 	ldr.w	r3, [r8]
   d88a0:	bf28      	it	cs
   d88a2:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d88a4:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d88a6:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d88aa:	aa02      	add	r2, sp, #8
   d88ac:	463b      	mov	r3, r7
   d88ae:	4631      	mov	r1, r6
   d88b0:	4640      	mov	r0, r8
				framAddrTo -= count;
   d88b2:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d88b4:	47c8      	blx	r9
				if (!result) {
   d88b6:	b948      	cbnz	r0, d88cc <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d88b8:	2400      	movs	r4, #0
   d88ba:	e000      	b.n	d88be <_ZN6MB85RC8moveDataEjjj+0x46>
   d88bc:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d88be:	a801      	add	r0, sp, #4
   d88c0:	f7ff ff0f 	bl	d86e2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d88c4:	4620      	mov	r0, r4
   d88c6:	b00b      	add	sp, #44	; 0x2c
   d88c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d88cc:	f8d8 3000 	ldr.w	r3, [r8]
   d88d0:	aa02      	add	r2, sp, #8
   d88d2:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d88d6:	4629      	mov	r1, r5
   d88d8:	463b      	mov	r3, r7
   d88da:	4640      	mov	r0, r8
   d88dc:	47c8      	blx	r9
				if (!result) {
   d88de:	2800      	cmp	r0, #0
   d88e0:	d0ea      	beq.n	d88b8 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d88e2:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d88e4:	e7d7      	b.n	d8896 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d88e6:	d9e9      	bls.n	d88bc <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d88e8:	2c00      	cmp	r4, #0
   d88ea:	d0e7      	beq.n	d88bc <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d88ec:	f8d8 3000 	ldr.w	r3, [r8]
   d88f0:	2c1e      	cmp	r4, #30
   d88f2:	4627      	mov	r7, r4
   d88f4:	bf28      	it	cs
   d88f6:	271e      	movcs	r7, #30
   d88f8:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d88fc:	aa02      	add	r2, sp, #8
   d88fe:	463b      	mov	r3, r7
   d8900:	4631      	mov	r1, r6
   d8902:	4640      	mov	r0, r8
   d8904:	47c8      	blx	r9
				if (!result) {
   d8906:	2800      	cmp	r0, #0
   d8908:	d0d6      	beq.n	d88b8 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d890a:	f8d8 3000 	ldr.w	r3, [r8]
   d890e:	aa02      	add	r2, sp, #8
   d8910:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d8914:	4629      	mov	r1, r5
   d8916:	463b      	mov	r3, r7
   d8918:	4640      	mov	r0, r8
   d891a:	47c8      	blx	r9
				if (!result) {
   d891c:	2800      	cmp	r0, #0
   d891e:	d0cb      	beq.n	d88b8 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d8920:	443e      	add	r6, r7
				framAddrTo += count;
   d8922:	443d      	add	r5, r7
				numBytes -= count;
   d8924:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d8926:	e7df      	b.n	d88e8 <_ZN6MB85RC8moveDataEjjj+0x70>

000d8928 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:
	(*_Base::_M_get_pointer(__functor))(
   d8928:	6803      	ldr	r3, [r0, #0]
   d892a:	780a      	ldrb	r2, [r1, #0]
    return result;
}

void PublishQueuePosix::publishCompleteCallback(bool succeeded, const char *eventName, const char *eventData) {
    publishComplete = true;
    publishSuccess = succeeded;
   d892c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   d8930:	2101      	movs	r1, #1
   d8932:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   d8936:	4770      	bx	lr

000d8938 <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d8938:	2a02      	cmp	r2, #2
   d893a:	d006      	beq.n	d894a <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
   d893c:	2a03      	cmp	r2, #3
   d893e:	d002      	beq.n	d8946 <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
   d8940:	2a01      	cmp	r2, #1
   d8942:	d100      	bne.n	d8946 <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8944:	6001      	str	r1, [r0, #0]
	}
   d8946:	2000      	movs	r0, #0
   d8948:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d894a:	680b      	ldr	r3, [r1, #0]
   d894c:	6003      	str	r3, [r0, #0]
	}
   d894e:	e7fa      	b.n	d8946 <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>

000d8950 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d8950:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d8952:	4603      	mov	r3, r0
	switch (__op)
   d8954:	d102      	bne.n	d895c <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d8956:	6001      	str	r1, [r0, #0]
      }
   d8958:	2000      	movs	r0, #0
   d895a:	4770      	bx	lr
	  switch (__op)
   d895c:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d895e:	bf04      	itt	eq
   d8960:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d8964:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d8968:	e7f6      	b.n	d8958 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d896a <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d896a:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d896c:	6842      	ldr	r2, [r0, #4]
   d896e:	4603      	mov	r3, r0
   d8970:	1054      	asrs	r4, r2, #1
   d8972:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d8976:	07d2      	lsls	r2, r2, #31
   d8978:	bf48      	it	mi
   d897a:	590a      	ldrmi	r2, [r1, r4]
   d897c:	681b      	ldr	r3, [r3, #0]
      }
   d897e:	f85d 4b04 	ldr.w	r4, [sp], #4
   d8982:	bf48      	it	mi
   d8984:	58d3      	ldrmi	r3, [r2, r3]
   d8986:	4718      	bx	r3

000d8988 <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   d8988:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   d898c:	4601      	mov	r1, r0
    if (stateHandler) {
   d898e:	b11b      	cbz	r3, d8998 <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8990:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   d8994:	30c0      	adds	r0, #192	; 0xc0
   d8996:	4718      	bx	r3
}
   d8998:	4770      	bx	lr
	...

000d899c <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   d899c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   d899e:	4d12      	ldr	r5, [pc, #72]	; (d89e8 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   d89a0:	4608      	mov	r0, r1
        eventData = "";
   d89a2:	2a00      	cmp	r2, #0
   d89a4:	bf18      	it	ne
   d89a6:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   d89a8:	460f      	mov	r7, r1
   d89aa:	461e      	mov	r6, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   d89ac:	f007 fa07 	bl	dfdbe <strlen>
   d89b0:	2840      	cmp	r0, #64	; 0x40
   d89b2:	d817      	bhi.n	d89e4 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x48>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   d89b4:	4628      	mov	r0, r5
   d89b6:	f007 fa02 	bl	dfdbe <strlen>
   d89ba:	f240 236e 	movw	r3, #622	; 0x26e
   d89be:	4298      	cmp	r0, r3
   d89c0:	d810      	bhi.n	d89e4 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x48>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   d89c2:	3043      	adds	r0, #67	; 0x43
   d89c4:	f7fb fb69 	bl	d409a <_Znaj>
    if (event) {
   d89c8:	4604      	mov	r4, r0
   d89ca:	b148      	cbz	r0, d89e0 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x44>
        strcpy(event->eventName, eventName);
   d89cc:	4639      	mov	r1, r7
        event->flags = flags;
   d89ce:	f800 6b01 	strb.w	r6, [r0], #1
        strcpy(event->eventName, eventName);
   d89d2:	f007 f9ce 	bl	dfd72 <strcpy>
        strcpy(event->eventData, eventData);
   d89d6:	4629      	mov	r1, r5
   d89d8:	f104 0042 	add.w	r0, r4, #66	; 0x42
   d89dc:	f007 f9c9 	bl	dfd72 <strcpy>
}
   d89e0:	4620      	mov	r0, r4
   d89e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   d89e4:	2400      	movs	r4, #0
   d89e6:	e7fb      	b.n	d89e0 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x44>
   d89e8:	000e11dd 	.word	0x000e11dd

000d89ec <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   d89ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   d89ee:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   d89f0:	460a      	mov	r2, r1
   d89f2:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   d89f4:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   d89f6:	1d01      	adds	r1, r0, #4
   d89f8:	a808      	add	r0, sp, #32
   d89fa:	f000 fdf1 	bl	d95e0 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   d89fe:	9808      	ldr	r0, [sp, #32]
   d8a00:	2100      	movs	r1, #0
   d8a02:	f007 fabb 	bl	dff7c <open>
   d8a06:	4605      	mov	r5, r0
   d8a08:	a808      	add	r0, sp, #32
   d8a0a:	f004 f8c9 	bl	dcba0 <_ZN6StringD1Ev>
    if (fd) {
   d8a0e:	2d00      	cmp	r5, #0
   d8a10:	d060      	beq.n	d8ad4 <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   d8a12:	a908      	add	r1, sp, #32
   d8a14:	4628      	mov	r0, r5
   d8a16:	f007 fa9f 	bl	dff58 <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   d8a1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d8a1c:	492e      	ldr	r1, [pc, #184]	; (d8ad8 <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   d8a1e:	482f      	ldr	r0, [pc, #188]	; (d8adc <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d8a20:	4632      	mov	r2, r6
   d8a22:	f7fe fc39 	bl	d7298 <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   d8a26:	2200      	movs	r2, #0
   d8a28:	4611      	mov	r1, r2
   d8a2a:	4628      	mov	r0, r5
   d8a2c:	f007 fa9c 	bl	dff68 <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   d8a30:	2208      	movs	r2, #8
   d8a32:	a906      	add	r1, sp, #24
   d8a34:	4628      	mov	r0, r5
   d8a36:	f007 fab5 	bl	dffa4 <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   d8a3a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   d8a3c:	2f4a      	cmp	r7, #74	; 0x4a
   d8a3e:	dd39      	ble.n	d8ab4 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   d8a40:	4b27      	ldr	r3, [pc, #156]	; (d8ae0 <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   d8a42:	9a06      	ldr	r2, [sp, #24]
   d8a44:	429a      	cmp	r2, r3
   d8a46:	d135      	bne.n	d8ab4 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   d8a48:	4b26      	ldr	r3, [pc, #152]	; (d8ae4 <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   d8a4a:	9a07      	ldr	r2, [sp, #28]
   d8a4c:	429a      	cmp	r2, r3
   d8a4e:	d131      	bne.n	d8ab4 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   d8a50:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   d8a54:	4610      	mov	r0, r2
   d8a56:	9205      	str	r2, [sp, #20]
   d8a58:	f7fb fb1f 	bl	d409a <_Znaj>
            if (result) {
   d8a5c:	4604      	mov	r4, r0
   d8a5e:	b1c0      	cbz	r0, d8a92 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   d8a60:	4427      	add	r7, r4
                read(fd, result, eventSize);
   d8a62:	4601      	mov	r1, r0
   d8a64:	9a05      	ldr	r2, [sp, #20]
   d8a66:	4628      	mov	r0, r5
   d8a68:	f007 fa9c 	bl	dffa4 <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   d8a6c:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   d8a70:	b9ab      	cbnz	r3, d8a9e <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   d8a72:	1c63      	adds	r3, r4, #1
   d8a74:	4618      	mov	r0, r3
   d8a76:	9305      	str	r3, [sp, #20]
   d8a78:	f007 f9a1 	bl	dfdbe <strlen>
   d8a7c:	283f      	cmp	r0, #63	; 0x3f
   d8a7e:	9b05      	ldr	r3, [sp, #20]
   d8a80:	d80d      	bhi.n	d8a9e <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   d8a82:	f104 0242 	add.w	r2, r4, #66	; 0x42
   d8a86:	9200      	str	r2, [sp, #0]
   d8a88:	4917      	ldr	r1, [pc, #92]	; (d8ae8 <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   d8a8a:	4814      	ldr	r0, [pc, #80]	; (d8adc <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d8a8c:	4632      	mov	r2, r6
   d8a8e:	f7fe fc03 	bl	d7298 <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   d8a92:	4628      	mov	r0, r5
   d8a94:	f007 fa58 	bl	dff48 <close>
}
   d8a98:	4620      	mov	r0, r4
   d8a9a:	b01f      	add	sp, #124	; 0x7c
   d8a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   d8a9e:	4913      	ldr	r1, [pc, #76]	; (d8aec <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   d8aa0:	480e      	ldr	r0, [pc, #56]	; (d8adc <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d8aa2:	4632      	mov	r2, r6
   d8aa4:	f7fe fbf8 	bl	d7298 <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   d8aa8:	2143      	movs	r1, #67	; 0x43
   d8aaa:	4620      	mov	r0, r4
   d8aac:	f004 ffb2 	bl	dda14 <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   d8ab0:	2400      	movs	r4, #0
   d8ab2:	e7ee      	b.n	d8a92 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   d8ab4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   d8ab8:	9302      	str	r3, [sp, #8]
   d8aba:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d8abe:	9301      	str	r3, [sp, #4]
   d8ac0:	f89d 301c 	ldrb.w	r3, [sp, #28]
   d8ac4:	9300      	str	r3, [sp, #0]
   d8ac6:	490a      	ldr	r1, [pc, #40]	; (d8af0 <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   d8ac8:	9b06      	ldr	r3, [sp, #24]
   d8aca:	4804      	ldr	r0, [pc, #16]	; (d8adc <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d8acc:	4632      	mov	r2, r6
   d8ace:	f7fe fbe3 	bl	d7298 <_ZNK5spark6Logger5traceEPKcz>
   d8ad2:	e7ed      	b.n	d8ab0 <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   d8ad4:	462c      	mov	r4, r5
    return result;
   d8ad6:	e7df      	b.n	d8a98 <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   d8ad8:	000e0cb4 	.word	0x000e0cb4
   d8adc:	2003e460 	.word	0x2003e460
   d8ae0:	31b67663 	.word	0x31b67663
   d8ae4:	00410801 	.word	0x00410801
   d8ae8:	000e0cc8 	.word	0x000e0cc8
   d8aec:	000e0cea 	.word	0x000e0cea
   d8af0:	000e0d18 	.word	0x000e0d18

000d8af4 <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   d8af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8af8:	4680      	mov	r8, r0
   d8afa:	4b29      	ldr	r3, [pc, #164]	; (d8ba0 <_ZN17PublishQueuePosixC1Ev+0xac>)
   d8afc:	f848 3b04 	str.w	r3, [r8], #4
   d8b00:	4604      	mov	r4, r0
   d8b02:	4640      	mov	r0, r8
   d8b04:	f000 fc84 	bl	d9410 <_ZN14SequentialFileC1Ev>
   d8b08:	2202      	movs	r2, #2
   d8b0a:	2364      	movs	r3, #100	; 0x64
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl()
	: _Tp_alloc_type(), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
   d8b0c:	2500      	movs	r5, #0
   d8b0e:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   d8b12:	2308      	movs	r3, #8
   d8b14:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   d8b16:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   d8b1a:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   d8b1e:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   d8b22:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	  _M_start(), _M_finish()
   d8b26:	67a5      	str	r5, [r4, #120]	; 0x78
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8b28:	2020      	movs	r0, #32
   d8b2a:	f7fb fab4 	bl	d4096 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d8b2e:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   d8b30:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d8b32:	3e01      	subs	r6, #1
   d8b34:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   d8b36:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   d8b3a:	4607      	mov	r7, r0
   d8b3c:	f44f 7000 	mov.w	r0, #512	; 0x200
   d8b40:	f7fb faa9 	bl	d4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   d8b44:	f500 7300 	add.w	r3, r0, #512	; 0x200
   d8b48:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   d8b4c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d8b50:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d8b54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8b58:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   d8b5c:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   d8b60:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   d8b64:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   d8b68:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   d8b6c:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   d8b70:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   d8b74:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   d8b78:	490a      	ldr	r1, [pc, #40]	; (d8ba4 <_ZN17PublishQueuePosixC1Ev+0xb0>)
	_M_node = __new_node;
   d8b7a:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   d8b7e:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   d8b82:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
   d8b86:	f884 50b2 	strb.w	r5, [r4, #178]	; 0xb2
   d8b8a:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   d8b8e:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   d8b92:	4640      	mov	r0, r8
   d8b94:	f000 fc82 	bl	d949c <_ZN14SequentialFile11withDirPathEPKc>
}
   d8b98:	4620      	mov	r0, r4
   d8b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d8b9e:	bf00      	nop
   d8ba0:	000e0f5c 	.word	0x000e0f5c
   d8ba4:	000e0d5d 	.word	0x000e0d5d

000d8ba8 <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   d8ba8:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   d8baa:	4c06      	ldr	r4, [pc, #24]	; (d8bc4 <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   d8bac:	6823      	ldr	r3, [r4, #0]
   d8bae:	b93b      	cbnz	r3, d8bc0 <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   d8bb0:	20d0      	movs	r0, #208	; 0xd0
   d8bb2:	f7fb fa70 	bl	d4096 <_Znwj>
   d8bb6:	4605      	mov	r5, r0
   d8bb8:	b108      	cbz	r0, d8bbe <_ZN17PublishQueuePosix8instanceEv+0x16>
   d8bba:	f7ff ff9b 	bl	d8af4 <_ZN17PublishQueuePosixC1Ev>
   d8bbe:	6025      	str	r5, [r4, #0]
}
   d8bc0:	6820      	ldr	r0, [r4, #0]
   d8bc2:	bd38      	pop	{r3, r4, r5, pc}
   d8bc4:	2003e464 	.word	0x2003e464

000d8bc8 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d8bc8:	b510      	push	{r4, lr}
   d8bca:	e9d1 2300 	ldrd	r2, r3, [r1]
   d8bce:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d8bd0:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d8bd2:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d8bd4:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d8bd6:	b90a      	cbnz	r2, d8bdc <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d8bd8:	07d9      	lsls	r1, r3, #31
   d8bda:	d505      	bpl.n	d8be8 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d8bdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d8be0:	4b0f      	ldr	r3, [pc, #60]	; (d8c20 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d8be2:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d8be4:	4b0f      	ldr	r3, [pc, #60]	; (d8c24 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d8be6:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8be8:	ab02      	add	r3, sp, #8
   d8bea:	e893 0003 	ldmia.w	r3, {r0, r1}
   d8bee:	466a      	mov	r2, sp
   d8bf0:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d8bf4:	e894 0003 	ldmia.w	r4, {r0, r1}
   d8bf8:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d8bfc:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8c00:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d8c02:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d8c06:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8c08:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8c0a:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8c0c:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d8c0e:	4618      	mov	r0, r3
   d8c10:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8c12:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d8c14:	9105      	str	r1, [sp, #20]
   d8c16:	f7fc f895 	bl	d4d44 <_ZNSt14_Function_baseD1Ev>
	}
   d8c1a:	4620      	mov	r0, r4
   d8c1c:	b006      	add	sp, #24
   d8c1e:	bd10      	pop	{r4, pc}
   d8c20:	000d896b 	.word	0x000d896b
   d8c24:	000d8951 	.word	0x000d8951

000d8c28 <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   d8c28:	b513      	push	{r0, r1, r4, lr}
   d8c2a:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8c2c:	f001 fb3a 	bl	da2a4 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d8c30:	b180      	cbz	r0, d8c54 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
   d8c32:	f001 f80b 	bl	d9c4c <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   d8c36:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   d8c3a:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   d8c3e:	4b06      	ldr	r3, [pc, #24]	; (d8c58 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x30>)
        stateTime = millis();
   d8c40:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   d8c44:	9300      	str	r3, [sp, #0]
   d8c46:	4669      	mov	r1, sp
   d8c48:	2300      	movs	r3, #0
   d8c4a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d8c4e:	9301      	str	r3, [sp, #4]
   d8c50:	f7ff ffba 	bl	d8bc8 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d8c54:	b002      	add	sp, #8
   d8c56:	bd10      	pop	{r4, pc}
   d8c58:	000d8d95 	.word	0x000d8d95

000d8c5c <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>:
      ~lock_guard()
   d8c5c:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d8c5e:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d8c60:	4604      	mov	r4, r0
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   d8c62:	6f58      	ldr	r0, [r3, #116]	; 0x74
   d8c64:	f000 ffaa 	bl	d9bbc <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d8c68:	4620      	mov	r0, r4
   d8c6a:	bd10      	pop	{r4, pc}

000d8c6c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   d8c6c:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   d8c6e:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   d8c70:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   d8c72:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   d8c74:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   d8c76:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   d8c78:	d002      	beq.n	d8c80 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(this->_M_impl,
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   d8c7a:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   d8c7c:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   d8c7e:	bd10      	pop	{r4, pc}
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d8c80:	68c0      	ldr	r0, [r0, #12]
   d8c82:	f7fb fa0c 	bl	d409e <_ZdlPv>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   d8c86:	6963      	ldr	r3, [r4, #20]
   d8c88:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d8c8a:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   d8c8c:	685b      	ldr	r3, [r3, #4]
   d8c8e:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d8c90:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d8c94:	6122      	str	r2, [r4, #16]
   d8c96:	e7f1      	b.n	d8c7c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>

000d8c98 <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   d8c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8c9c:	b087      	sub	sp, #28
   d8c9e:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8ca0:	9001      	str	r0, [sp, #4]
    void lock() { os_mutex_recursive_lock(mutex); };
   d8ca2:	6f40      	ldr	r0, [r0, #116]	; 0x74
                hdr.magic = FILE_MAGIC;
   d8ca4:	f8df 90a8 	ldr.w	r9, [pc, #168]	; d8d50 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                hdr.version = FILE_VERSION;
   d8ca8:	f8df a0a8 	ldr.w	sl, [pc, #168]	; d8d54 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
   d8cac:	f000 ff7e 	bl	d9bac <os_mutex_recursive_lock>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   d8cb0:	f8df b0a4 	ldr.w	fp, [pc, #164]	; d8d58 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xc0>
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
   d8cb4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   d8cb8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   d8cbc:	4293      	cmp	r3, r2
   d8cbe:	d105      	bne.n	d8ccc <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x34>
    WITH_LOCK(*this) {
   d8cc0:	a801      	add	r0, sp, #4
   d8cc2:	f7ff ffcb 	bl	d8c5c <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
}
   d8cc6:	b007      	add	sp, #28
   d8cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ramQueue.pop_front();
   d8ccc:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   d8cd0:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   d8cd4:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   d8cd6:	f7ff ffc9 	bl	d8c6c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   d8cda:	4640      	mov	r0, r8
   d8cdc:	f000 fe74 	bl	d99c8 <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   d8ce0:	2300      	movs	r3, #0
   d8ce2:	4602      	mov	r2, r0
   d8ce4:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   d8ce6:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   d8ce8:	a802      	add	r0, sp, #8
   d8cea:	f000 fc79 	bl	d95e0 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   d8cee:	9802      	ldr	r0, [sp, #8]
   d8cf0:	f240 2102 	movw	r1, #514	; 0x202
   d8cf4:	f007 f942 	bl	dff7c <open>
   d8cf8:	4605      	mov	r5, r0
   d8cfa:	a802      	add	r0, sp, #8
   d8cfc:	f003 ff50 	bl	dcba0 <_ZN6StringD1Ev>
            if (fd) {
   d8d00:	b1cd      	cbz	r5, d8d36 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x9e>
                write(fd, &hdr, sizeof(hdr));
   d8d02:	2208      	movs	r2, #8
   d8d04:	eb0d 0102 	add.w	r1, sp, r2
   d8d08:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   d8d0a:	e9cd 9a02 	strd	r9, sl, [sp, #8]
                write(fd, &hdr, sizeof(hdr));
   d8d0e:	f007 f95b 	bl	dffc8 <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   d8d12:	f107 0042 	add.w	r0, r7, #66	; 0x42
   d8d16:	f007 f852 	bl	dfdbe <strlen>
   d8d1a:	4639      	mov	r1, r7
   d8d1c:	f100 0243 	add.w	r2, r0, #67	; 0x43
   d8d20:	4628      	mov	r0, r5
   d8d22:	f007 f951 	bl	dffc8 <write>
                close(fd);
   d8d26:	4628      	mov	r0, r5
   d8d28:	f007 f90e 	bl	dff48 <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   d8d2c:	4807      	ldr	r0, [pc, #28]	; (d8d4c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>)
   d8d2e:	4632      	mov	r2, r6
   d8d30:	4659      	mov	r1, fp
   d8d32:	f7fe fab1 	bl	d7298 <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   d8d36:	4631      	mov	r1, r6
   d8d38:	4640      	mov	r0, r8
   d8d3a:	f000 fe85 	bl	d9a48 <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   d8d3e:	2f00      	cmp	r7, #0
   d8d40:	d0b8      	beq.n	d8cb4 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x1c>
   d8d42:	2143      	movs	r1, #67	; 0x43
   d8d44:	4638      	mov	r0, r7
   d8d46:	f004 fe65 	bl	dda14 <_ZdlPvj>
   d8d4a:	e7b1      	b.n	d8cb0 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   d8d4c:	2003e460 	.word	0x2003e460
   d8d50:	31b67663 	.word	0x31b67663
   d8d54:	00410801 	.word	0x00410801
   d8d58:	000e0d6b 	.word	0x000e0d6b

000d8d5c <_ZN17PublishQueuePosix18systemEventHandlerEyi>:
PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   d8d5c:	2900      	cmp	r1, #0
   d8d5e:	bf08      	it	eq
   d8d60:	f5b0 6f00 	cmpeq.w	r0, #2048	; 0x800
void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   d8d64:	b538      	push	{r3, r4, r5, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   d8d66:	d005      	beq.n	d8d74 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x18>
   d8d68:	2900      	cmp	r1, #0
   d8d6a:	bf08      	it	eq
   d8d6c:	2840      	cmpeq	r0, #64	; 0x40
   d8d6e:	d10b      	bne.n	d8d88 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>
   d8d70:	2a09      	cmp	r2, #9
   d8d72:	d109      	bne.n	d8d88 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>
        _log.trace("reset or disconnect event, save files to queue");
   d8d74:	4905      	ldr	r1, [pc, #20]	; (d8d8c <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   d8d76:	4806      	ldr	r0, [pc, #24]	; (d8d90 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x34>)
   d8d78:	f7fe fa8e 	bl	d7298 <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   d8d7c:	f7ff ff14 	bl	d8ba8 <_ZN17PublishQueuePosix8instanceEv>
    }
}
   d8d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   d8d84:	f7ff bf88 	b.w	d8c98 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   d8d88:	bd38      	pop	{r3, r4, r5, pc}
   d8d8a:	bf00      	nop
   d8d8c:	000e0d88 	.word	0x000e0d88
   d8d90:	2003e460 	.word	0x2003e460

000d8d94 <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   d8d94:	b570      	push	{r4, r5, r6, lr}
   d8d96:	b086      	sub	sp, #24
   d8d98:	4604      	mov	r4, r0
   d8d9a:	f001 fa83 	bl	da2a4 <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   d8d9e:	b948      	cbnz	r0, d8db4 <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   d8da0:	4b40      	ldr	r3, [pc, #256]	; (d8ea4 <_ZN17PublishQueuePosix9stateWaitEv+0x110>)
   d8da2:	a902      	add	r1, sp, #8
   d8da4:	e9cd 3002 	strd	r3, r0, [sp, #8]
   d8da8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d8dac:	f7ff ff0c 	bl	d8bc8 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d8db0:	b006      	add	sp, #24
   d8db2:	bd70      	pop	{r4, r5, r6, pc}
   d8db4:	f000 ff4a 	bl	d9c4c <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   d8db8:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   d8dbc:	1ac0      	subs	r0, r0, r3
   d8dbe:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   d8dc2:	4298      	cmp	r0, r3
   d8dc4:	d3f4      	bcc.n	d8db0 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    if (pausePublishing) {
   d8dc6:	f894 10b2 	ldrb.w	r1, [r4, #178]	; 0xb2
   d8dca:	2900      	cmp	r1, #0
   d8dcc:	d1f0      	bne.n	d8db0 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   d8dce:	1d26      	adds	r6, r4, #4
   d8dd0:	4630      	mov	r0, r6
   d8dd2:	f000 fe05 	bl	d99e0 <_ZN14SequentialFile16getFileFromQueueEb>
   d8dd6:	4601      	mov	r1, r0
   d8dd8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   d8ddc:	2800      	cmp	r0, #0
   d8dde:	d050      	beq.n	d8e82 <_ZN17PublishQueuePosix9stateWaitEv+0xee>
        curEvent = readQueueFile(curFileNum);
   d8de0:	4620      	mov	r0, r4
   d8de2:	f7ff fe03 	bl	d89ec <_ZN17PublishQueuePosix13readQueueFileEi>
   d8de6:	4605      	mov	r5, r0
   d8de8:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   d8dec:	2800      	cmp	r0, #0
   d8dee:	d033      	beq.n	d8e58 <_ZN17PublishQueuePosix9stateWaitEv+0xc4>
   d8df0:	f000 ff2c 	bl	d9c4c <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   d8df4:	ad02      	add	r5, sp, #8
   d8df6:	2600      	movs	r6, #0
   d8df8:	4b2b      	ldr	r3, [pc, #172]	; (d8ea8 <_ZN17PublishQueuePosix9stateWaitEv+0x114>)
        stateTime = millis();
   d8dfa:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   d8dfe:	4629      	mov	r1, r5
   d8e00:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d8e04:	9302      	str	r3, [sp, #8]
   d8e06:	9603      	str	r6, [sp, #12]
   d8e08:	f7ff fede 	bl	d8bc8 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   d8e0c:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   d8e10:	f103 0242 	add.w	r2, r3, #66	; 0x42
   d8e14:	9200      	str	r2, [sp, #0]
   d8e16:	4925      	ldr	r1, [pc, #148]	; (d8eac <_ZN17PublishQueuePosix9stateWaitEv+0x118>)
   d8e18:	4a25      	ldr	r2, [pc, #148]	; (d8eb0 <_ZN17PublishQueuePosix9stateWaitEv+0x11c>)
        publishComplete = false;
   d8e1a:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   d8e1e:	42b0      	cmp	r0, r6
   d8e20:	bf08      	it	eq
   d8e22:	460a      	moveq	r2, r1
   d8e24:	3301      	adds	r3, #1
   d8e26:	4923      	ldr	r1, [pc, #140]	; (d8eb4 <_ZN17PublishQueuePosix9stateWaitEv+0x120>)
   d8e28:	4823      	ldr	r0, [pc, #140]	; (d8eb8 <_ZN17PublishQueuePosix9stateWaitEv+0x124>)
   d8e2a:	f7fe fa35 	bl	d7298 <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublish::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   d8e2e:	f7ff fa97 	bl	d8360 <_ZN17BackgroundPublish8instanceEv>
   d8e32:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   d8e36:	4b21      	ldr	r3, [pc, #132]	; (d8ebc <_ZN17PublishQueuePosix9stateWaitEv+0x128>)
   d8e38:	9305      	str	r3, [sp, #20]
   d8e3a:	e9cd 5600 	strd	r5, r6, [sp]
   d8e3e:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   d8e40:	4b1f      	ldr	r3, [pc, #124]	; (d8ec0 <_ZN17PublishQueuePosix9stateWaitEv+0x12c>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d8e42:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   d8e44:	9304      	str	r3, [sp, #16]
   d8e46:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8e4a:	3242      	adds	r2, #66	; 0x42
   d8e4c:	f7ff fbd2 	bl	d85f4 <_ZN17BackgroundPublish7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   d8e50:	4628      	mov	r0, r5
   d8e52:	f7fb ff77 	bl	d4d44 <_ZNSt14_Function_baseD1Ev>
   d8e56:	e7ab      	b.n	d8db0 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   d8e58:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   d8e5c:	4919      	ldr	r1, [pc, #100]	; (d8ec4 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   d8e5e:	4816      	ldr	r0, [pc, #88]	; (d8eb8 <_ZN17PublishQueuePosix9stateWaitEv+0x124>)
   d8e60:	f7fc f850 	bl	d4f04 <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   d8e64:	2101      	movs	r1, #1
   d8e66:	4630      	mov	r0, r6
   d8e68:	f000 fdba 	bl	d99e0 <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   d8e6c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   d8e70:	462a      	mov	r2, r5
   d8e72:	4630      	mov	r0, r6
   d8e74:	f000 fbf0 	bl	d9658 <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   d8e78:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   d8e7c:	2b00      	cmp	r3, #0
   d8e7e:	d1b7      	bne.n	d8df0 <_ZN17PublishQueuePosix9stateWaitEv+0x5c>
   d8e80:	e796      	b.n	d8db0 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   d8e82:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   d8e86:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   d8e8a:	429a      	cmp	r2, r3
   d8e8c:	d007      	beq.n	d8e9e <_ZN17PublishQueuePosix9stateWaitEv+0x10a>
            curEvent = ramQueue.front();
   d8e8e:	681b      	ldr	r3, [r3, #0]
   d8e90:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   d8e94:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d8e98:	f7ff fee8 	bl	d8c6c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   d8e9c:	e7ec      	b.n	d8e78 <_ZN17PublishQueuePosix9stateWaitEv+0xe4>
            curEvent = NULL;
   d8e9e:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   d8ea2:	e785      	b.n	d8db0 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   d8ea4:	000d8c29 	.word	0x000d8c29
   d8ea8:	000d9245 	.word	0x000d9245
   d8eac:	000e0db7 	.word	0x000e0db7
   d8eb0:	000e1058 	.word	0x000e1058
   d8eb4:	000e0dd8 	.word	0x000e0dd8
   d8eb8:	2003e460 	.word	0x2003e460
   d8ebc:	000d8929 	.word	0x000d8929
   d8ec0:	000d8939 	.word	0x000d8939
   d8ec4:	000e0dbb 	.word	0x000e0dbb

000d8ec8 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>:
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   d8ec8:	68c3      	ldr	r3, [r0, #12]
   d8eca:	68ca      	ldr	r2, [r1, #12]
   d8ecc:	1a9b      	subs	r3, r3, r2
   d8ece:	109b      	asrs	r3, r3, #2
   d8ed0:	1e5a      	subs	r2, r3, #1
   d8ed2:	e9d0 3000 	ldrd	r3, r0, [r0]
   d8ed6:	1a1b      	subs	r3, r3, r0
   d8ed8:	109b      	asrs	r3, r3, #2
   d8eda:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	+ (__y._M_last - __y._M_cur);
   d8ede:	6888      	ldr	r0, [r1, #8]
   d8ee0:	680a      	ldr	r2, [r1, #0]
   d8ee2:	1a80      	subs	r0, r0, r2
    }
   d8ee4:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   d8ee8:	4770      	bx	lr
	...

000d8eec <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   d8eec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d8ef0:	4604      	mov	r4, r0
   d8ef2:	9001      	str	r0, [sp, #4]
   d8ef4:	6f40      	ldr	r0, [r0, #116]	; 0x74
   d8ef6:	f000 fe59 	bl	d9bac <os_mutex_recursive_lock>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d8efa:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d8efe:	f104 0090 	add.w	r0, r4, #144	; 0x90
   d8f02:	f7ff ffe1 	bl	d8ec8 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
        if (ramQueue.size() > ramQueueSize) {
   d8f06:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   d8f08:	4283      	cmp	r3, r0
   d8f0a:	d202      	bcs.n	d8f12 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
            writeQueueToFiles();
   d8f0c:	4620      	mov	r0, r4
   d8f0e:	f7ff fec3 	bl	d8c98 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   d8f12:	f8df 8048 	ldr.w	r8, [pc, #72]	; d8f5c <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x70>
   d8f16:	4f10      	ldr	r7, [pc, #64]	; (d8f58 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x6c>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   d8f18:	1d26      	adds	r6, r4, #4
   d8f1a:	4630      	mov	r0, r6
   d8f1c:	f000 fdae 	bl	d9a7c <_ZNK14SequentialFile11getQueueLenEv>
   d8f20:	6f23      	ldr	r3, [r4, #112]	; 0x70
   d8f22:	4298      	cmp	r0, r3
   d8f24:	dc05      	bgt.n	d8f32 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x46>
    WITH_LOCK(*this) {
   d8f26:	a801      	add	r0, sp, #4
   d8f28:	f7ff fe98 	bl	d8c5c <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
}
   d8f2c:	b002      	add	sp, #8
   d8f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            int fileNum = fileQueue.getFileFromQueue(true);
   d8f32:	2101      	movs	r1, #1
   d8f34:	4630      	mov	r0, r6
   d8f36:	f000 fd53 	bl	d99e0 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   d8f3a:	4605      	mov	r5, r0
   d8f3c:	2800      	cmp	r0, #0
   d8f3e:	d0ec      	beq.n	d8f1a <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x2e>
                fileQueue.removeFileNum(fileNum, false);
   d8f40:	4601      	mov	r1, r0
   d8f42:	2200      	movs	r2, #0
   d8f44:	4630      	mov	r0, r6
   d8f46:	f000 fb87 	bl	d9658 <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   d8f4a:	462a      	mov	r2, r5
   d8f4c:	4641      	mov	r1, r8
   d8f4e:	4638      	mov	r0, r7
   d8f50:	f7fb ffd8 	bl	d4f04 <_ZNK5spark6Logger4infoEPKcz>
   d8f54:	e7e1      	b.n	d8f1a <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x2e>
   d8f56:	bf00      	nop
   d8f58:	2003e460 	.word	0x2003e460
   d8f5c:	000e0df7 	.word	0x000e0df7

000d8f60 <_ZN17PublishQueuePosix16withRamQueueSizeEj>:
PublishQueuePosix &PublishQueuePosix::withRamQueueSize(size_t size) { 
   d8f60:	b510      	push	{r4, lr}
    if (stateHandler) {
   d8f62:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
    ramQueueSize = size;
   d8f66:	66c1      	str	r1, [r0, #108]	; 0x6c
PublishQueuePosix &PublishQueuePosix::withRamQueueSize(size_t size) { 
   d8f68:	4604      	mov	r4, r0
   d8f6a:	460a      	mov	r2, r1
    if (stateHandler) {
   d8f6c:	b133      	cbz	r3, d8f7c <_ZN17PublishQueuePosix16withRamQueueSizeEj+0x1c>
        _log.trace("withRamQueueSize(%u)", ramQueueSize);
   d8f6e:	4804      	ldr	r0, [pc, #16]	; (d8f80 <_ZN17PublishQueuePosix16withRamQueueSizeEj+0x20>)
   d8f70:	4904      	ldr	r1, [pc, #16]	; (d8f84 <_ZN17PublishQueuePosix16withRamQueueSizeEj+0x24>)
   d8f72:	f7fe f991 	bl	d7298 <_ZNK5spark6Logger5traceEPKcz>
        checkQueueLimits();
   d8f76:	4620      	mov	r0, r4
   d8f78:	f7ff ffb8 	bl	d8eec <_ZN17PublishQueuePosix16checkQueueLimitsEv>
}
   d8f7c:	4620      	mov	r0, r4
   d8f7e:	bd10      	pop	{r4, pc}
   d8f80:	2003e460 	.word	0x2003e460
   d8f84:	000e0e0a 	.word	0x000e0e0a

000d8f88 <_ZN17PublishQueuePosix17withFileQueueSizeEj>:
PublishQueuePosix &PublishQueuePosix::withFileQueueSize(size_t size) {
   d8f88:	b510      	push	{r4, lr}
    if (stateHandler) {
   d8f8a:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
    fileQueueSize = size; 
   d8f8e:	6701      	str	r1, [r0, #112]	; 0x70
PublishQueuePosix &PublishQueuePosix::withFileQueueSize(size_t size) {
   d8f90:	4604      	mov	r4, r0
   d8f92:	460a      	mov	r2, r1
    if (stateHandler) {
   d8f94:	b133      	cbz	r3, d8fa4 <_ZN17PublishQueuePosix17withFileQueueSizeEj+0x1c>
        _log.trace("withFileQueueSize(%u)", fileQueueSize);
   d8f96:	4804      	ldr	r0, [pc, #16]	; (d8fa8 <_ZN17PublishQueuePosix17withFileQueueSizeEj+0x20>)
   d8f98:	4904      	ldr	r1, [pc, #16]	; (d8fac <_ZN17PublishQueuePosix17withFileQueueSizeEj+0x24>)
   d8f9a:	f7fe f97d 	bl	d7298 <_ZNK5spark6Logger5traceEPKcz>
        checkQueueLimits();
   d8f9e:	4620      	mov	r0, r4
   d8fa0:	f7ff ffa4 	bl	d8eec <_ZN17PublishQueuePosix16checkQueueLimitsEv>
}
   d8fa4:	4620      	mov	r0, r4
   d8fa6:	bd10      	pop	{r4, pc}
   d8fa8:	2003e460 	.word	0x2003e460
   d8fac:	000e0e1f 	.word	0x000e0e1f

000d8fb0 <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   d8fb0:	b513      	push	{r0, r1, r4, lr}
   d8fb2:	4604      	mov	r4, r0
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   d8fb4:	2000      	movs	r0, #0
   d8fb6:	f001 f913 	bl	da1e0 <system_thread_get_state>
   d8fba:	2801      	cmp	r0, #1
   d8fbc:	d005      	beq.n	d8fca <_ZN17PublishQueuePosix5setupEv+0x1a>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   d8fbe:	4912      	ldr	r1, [pc, #72]	; (d9008 <_ZN17PublishQueuePosix5setupEv+0x58>)
   d8fc0:	4812      	ldr	r0, [pc, #72]	; (d900c <_ZN17PublishQueuePosix5setupEv+0x5c>)
   d8fc2:	f7fb ffb6 	bl	d4f32 <_ZNK5spark6Logger5errorEPKcz>
}
   d8fc6:	b002      	add	sp, #8
   d8fc8:	bd10      	pop	{r4, pc}
    os_mutex_recursive_create(&mutex);
   d8fca:	f104 0074 	add.w	r0, r4, #116	; 0x74
   d8fce:	f000 fddd 	bl	d9b8c <os_mutex_recursive_create>
   d8fd2:	4a0f      	ldr	r2, [pc, #60]	; (d9010 <_ZN17PublishQueuePosix5setupEv+0x60>)
   d8fd4:	2300      	movs	r3, #0
   d8fd6:	2100      	movs	r1, #0
   d8fd8:	f44f 6004 	mov.w	r0, #2112	; 0x840
   d8fdc:	f001 f8d8 	bl	da190 <system_subscribe_event>
    BackgroundPublish::instance().start();
   d8fe0:	f7ff f9be 	bl	d8360 <_ZN17BackgroundPublish8instanceEv>
   d8fe4:	f7ff fae0 	bl	d85a8 <_ZN17BackgroundPublish5startEv>
    fileQueue.scanDir();
   d8fe8:	1d20      	adds	r0, r4, #4
   d8fea:	f000 fc75 	bl	d98d8 <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   d8fee:	4620      	mov	r0, r4
   d8ff0:	f7ff ff7c 	bl	d8eec <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   d8ff4:	4b07      	ldr	r3, [pc, #28]	; (d9014 <_ZN17PublishQueuePosix5setupEv+0x64>)
   d8ff6:	9300      	str	r3, [sp, #0]
   d8ff8:	4669      	mov	r1, sp
   d8ffa:	2300      	movs	r3, #0
   d8ffc:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d9000:	9301      	str	r3, [sp, #4]
   d9002:	f7ff fde1 	bl	d8bc8 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d9006:	e7de      	b.n	d8fc6 <_ZN17PublishQueuePosix5setupEv+0x16>
   d9008:	000e0e35 	.word	0x000e0e35
   d900c:	2003e460 	.word	0x2003e460
   d9010:	000d8d5d 	.word	0x000d8d5d
   d9014:	000d8c29 	.word	0x000d8c29

000d9018 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   d9018:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   d901a:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   d901c:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   d901e:	b163      	cbz	r3, d903a <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x22>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   d9020:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d9022:	6945      	ldr	r5, [r0, #20]
   d9024:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   d9026:	42ae      	cmp	r6, r5
   d9028:	d904      	bls.n	d9034 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x1c>
   d902a:	f855 0b04 	ldr.w	r0, [r5], #4
   d902e:	f7fb f836 	bl	d409e <_ZdlPv>
   d9032:	e7f8      	b.n	d9026 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   d9034:	6820      	ldr	r0, [r4, #0]
   d9036:	f7fb f832 	bl	d409e <_ZdlPv>
    }
   d903a:	4620      	mov	r0, r4
   d903c:	bd70      	pop	{r4, r5, r6, pc}

000d903e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   d903e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9042:	4606      	mov	r6, r0
   d9044:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   d9046:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9048:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d904a:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   d904c:	1a47      	subs	r7, r0, r1
   d904e:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   d9052:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d9054:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   d9058:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d905a:	d927      	bls.n	d90ac <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   d905c:	1b5d      	subs	r5, r3, r5
   d905e:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d9060:	6832      	ldr	r2, [r6, #0]
   d9062:	00ad      	lsls	r5, r5, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
   d9064:	b10c      	cbz	r4, d906a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   d9066:	ea4f 0489 	mov.w	r4, r9, lsl #2
   d906a:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d906c:	4414      	add	r4, r2
   d906e:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   d9070:	42a1      	cmp	r1, r4
   d9072:	eba3 0201 	sub.w	r2, r3, r1
   d9076:	d913      	bls.n	d90a0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   d9078:	4299      	cmp	r1, r3
   d907a:	d002      	beq.n	d9082 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d907c:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d907e:	f006 fe11 	bl	dfca4 <memmove>
	_M_node = __new_node;
   d9082:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   d9084:	6823      	ldr	r3, [r4, #0]
   d9086:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d9088:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d908c:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   d908e:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   d9090:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   d9092:	59e3      	ldr	r3, [r4, r7]
   d9094:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d9096:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d909a:	6233      	str	r3, [r6, #32]
    }
   d909c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   d90a0:	4299      	cmp	r1, r3
   d90a2:	d0ee      	beq.n	d9082 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d90a4:	1d38      	adds	r0, r7, #4
   d90a6:	1a80      	subs	r0, r0, r2
   d90a8:	4420      	add	r0, r4
   d90aa:	e7e8      	b.n	d907e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   d90ac:	f103 0802 	add.w	r8, r3, #2
   d90b0:	454b      	cmp	r3, r9
   d90b2:	bf2c      	ite	cs
   d90b4:	4498      	addcs	r8, r3
   d90b6:	44c8      	addcc	r8, r9
	if (__n > this->max_size())
   d90b8:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   d90bc:	d301      	bcc.n	d90c2 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   d90be:	f004 fcaf 	bl	dda20 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d90c2:	ea4f 0088 	mov.w	r0, r8, lsl #2
   d90c6:	f7fa ffe6 	bl	d4096 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d90ca:	eba8 0505 	sub.w	r5, r8, r5
   d90ce:	086d      	lsrs	r5, r5, #1
   d90d0:	4682      	mov	sl, r0
   d90d2:	00ad      	lsls	r5, r5, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
   d90d4:	b10c      	cbz	r4, d90da <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   d90d6:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   d90da:	6a72      	ldr	r2, [r6, #36]	; 0x24
   d90dc:	6971      	ldr	r1, [r6, #20]
   d90de:	3204      	adds	r2, #4
	                 + (__add_at_front ? __nodes_to_add : 0);
   d90e0:	442c      	add	r4, r5
	  if (_Num)
   d90e2:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d90e4:	4454      	add	r4, sl
   d90e6:	d003      	beq.n	d90f0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d90e8:	1a52      	subs	r2, r2, r1
   d90ea:	4620      	mov	r0, r4
   d90ec:	f006 fdda 	bl	dfca4 <memmove>
	::operator delete(__p);
   d90f0:	6830      	ldr	r0, [r6, #0]
   d90f2:	f7fa ffd4 	bl	d409e <_ZdlPv>
	  this->_M_impl._M_map_size = __new_map_size;
   d90f6:	e9c6 a800 	strd	sl, r8, [r6]
   d90fa:	e7c2      	b.n	d9082 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>

000d90fc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d90fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9100:	b086      	sub	sp, #24
   d9102:	4604      	mov	r4, r0
   d9104:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
   d9108:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   d910c:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d910e:	460f      	mov	r7, r1
   d9110:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   d9112:	f7ff fc43 	bl	d899c <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   d9116:	4605      	mov	r5, r0
   d9118:	2800      	cmp	r0, #0
   d911a:	d042      	beq.n	d91a2 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xa6>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   d911c:	4b43      	ldr	r3, [pc, #268]	; (d922c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   d911e:	4944      	ldr	r1, [pc, #272]	; (d9230 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x134>)
   d9120:	4844      	ldr	r0, [pc, #272]	; (d9234 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d9122:	2e00      	cmp	r6, #0
   d9124:	bf18      	it	ne
   d9126:	4633      	movne	r3, r6
   d9128:	463a      	mov	r2, r7
   d912a:	f7fe f8b5 	bl	d7298 <_ZNK5spark6Logger5traceEPKcz>
   d912e:	6f60      	ldr	r0, [r4, #116]	; 0x74
   d9130:	9405      	str	r4, [sp, #20]
   d9132:	f000 fd3b 	bl	d9bac <os_mutex_recursive_lock>
	    != this->_M_impl._M_finish._M_last - 1)
   d9136:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   d913a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   d913e:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   d9140:	4293      	cmp	r3, r2
   d9142:	f104 0878 	add.w	r8, r4, #120	; 0x78
   d9146:	f104 0690 	add.w	r6, r4, #144	; 0x90
   d914a:	f104 0780 	add.w	r7, r4, #128	; 0x80
   d914e:	d02b      	beq.n	d91a8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xac>
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d9150:	b103      	cbz	r3, d9154 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x58>
   d9152:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   d9154:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   d9158:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   d915a:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   d915c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   d9160:	4628      	mov	r0, r5
   d9162:	f000 fc8b 	bl	d9a7c <_ZNK14SequentialFile11getQueueLenEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d9166:	4639      	mov	r1, r7
   d9168:	9003      	str	r0, [sp, #12]
   d916a:	4630      	mov	r0, r6
   d916c:	f7ff feac 	bl	d8ec8 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
   d9170:	9002      	str	r0, [sp, #8]
   d9172:	f001 f897 	bl	da2a4 <spark_cloud_flag_connected>
   d9176:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   d917a:	9000      	str	r0, [sp, #0]
   d917c:	492e      	ldr	r1, [pc, #184]	; (d9238 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x13c>)
   d917e:	482d      	ldr	r0, [pc, #180]	; (d9234 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d9180:	f7fe f88a 	bl	d7298 <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   d9184:	4628      	mov	r0, r5
   d9186:	f000 fc79 	bl	d9a7c <_ZNK14SequentialFile11getQueueLenEv>
   d918a:	2800      	cmp	r0, #0
   d918c:	d03e      	beq.n	d920c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x110>
            writeQueueToFiles();
   d918e:	4620      	mov	r0, r4
   d9190:	f7ff fd82 	bl	d8c98 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   d9194:	4620      	mov	r0, r4
   d9196:	f7ff fea9 	bl	d8eec <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    WITH_LOCK(*this) {
   d919a:	a805      	add	r0, sp, #20
   d919c:	f7ff fd5e 	bl	d8c5c <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
    return true;
   d91a0:	2001      	movs	r0, #1
}
   d91a2:	b006      	add	sp, #24
   d91a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d91a8:	4639      	mov	r1, r7
   d91aa:	4630      	mov	r0, r6
   d91ac:	f7ff fe8c 	bl	d8ec8 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
	if (size() == max_size())
   d91b0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   d91b4:	4298      	cmp	r0, r3
   d91b6:	d102      	bne.n	d91be <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xc2>
	  __throw_length_error(
   d91b8:	4820      	ldr	r0, [pc, #128]	; (d923c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x140>)
   d91ba:	f004 fc34 	bl	dda26 <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   d91be:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   d91c2:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   d91c4:	1a9a      	subs	r2, r3, r2
   d91c6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   d91c8:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   d91cc:	2b01      	cmp	r3, #1
   d91ce:	d804      	bhi.n	d91da <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xde>
	  _M_reallocate_map(__nodes_to_add, false);
   d91d0:	2200      	movs	r2, #0
   d91d2:	2101      	movs	r1, #1
   d91d4:	4640      	mov	r0, r8
   d91d6:	f7ff ff32 	bl	d903e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d91da:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   d91de:	f8d4 809c 	ldr.w	r8, [r4, #156]	; 0x9c
   d91e2:	f7fa ff58 	bl	d4096 <_Znwj>
   d91e6:	f8c8 0004 	str.w	r0, [r8, #4]
	    _Alloc_traits::construct(this->_M_impl,
   d91ea:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d91ee:	b103      	cbz	r3, d91f2 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf6>
   d91f0:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   d91f2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   d91f6:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d91f8:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   d91fc:	685b      	ldr	r3, [r3, #4]
   d91fe:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   d9202:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d9206:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   d920a:	e7a6      	b.n	d915a <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x5e>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d920c:	4639      	mov	r1, r7
   d920e:	4630      	mov	r0, r6
   d9210:	f7ff fe5a 	bl	d8ec8 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   d9214:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   d9216:	4283      	cmp	r3, r0
   d9218:	d3b9      	bcc.n	d918e <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x92>
   d921a:	f001 f843 	bl	da2a4 <spark_cloud_flag_connected>
   d921e:	2800      	cmp	r0, #0
   d9220:	d0b5      	beq.n	d918e <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x92>
            _log.trace("queued to ramQueue");
   d9222:	4907      	ldr	r1, [pc, #28]	; (d9240 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x144>)
   d9224:	4803      	ldr	r0, [pc, #12]	; (d9234 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d9226:	f7fe f837 	bl	d7298 <_ZNK5spark6Logger5traceEPKcz>
   d922a:	e7b3      	b.n	d9194 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
   d922c:	000e11dd 	.word	0x000e11dd
   d9230:	000e0e58 	.word	0x000e0e58
   d9234:	2003e460 	.word	0x2003e460
   d9238:	000e0eb0 	.word	0x000e0eb0
   d923c:	000e0e80 	.word	0x000e0e80
   d9240:	000e0edc 	.word	0x000e0edc

000d9244 <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   d9244:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   d9246:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   d924a:	4604      	mov	r4, r0
    if (!publishComplete) {
   d924c:	2b00      	cmp	r3, #0
   d924e:	d041      	beq.n	d92d4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   d9250:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
   d9254:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
   d9258:	2b00      	cmp	r3, #0
   d925a:	d03d      	beq.n	d92d8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   d925c:	4952      	ldr	r1, [pc, #328]	; (d93a8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   d925e:	4853      	ldr	r0, [pc, #332]	; (d93ac <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d9260:	f7fe f81a 	bl	d7298 <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   d9264:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d9268:	b1d3      	cbz	r3, d92a0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   d926a:	1d26      	adds	r6, r4, #4
   d926c:	2100      	movs	r1, #0
   d926e:	4630      	mov	r0, r6
   d9270:	f000 fbb6 	bl	d99e0 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   d9274:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d9278:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   d927a:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   d927c:	d10d      	bne.n	d929a <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   d927e:	2101      	movs	r1, #1
   d9280:	4630      	mov	r0, r6
   d9282:	f000 fbad 	bl	d99e0 <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   d9286:	2200      	movs	r2, #0
   d9288:	4629      	mov	r1, r5
   d928a:	4630      	mov	r0, r6
   d928c:	f000 f9e4 	bl	d9658 <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   d9290:	4947      	ldr	r1, [pc, #284]	; (d93b0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   d9292:	4846      	ldr	r0, [pc, #280]	; (d93ac <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d9294:	462a      	mov	r2, r5
   d9296:	f7fd ffff 	bl	d7298 <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   d929a:	2300      	movs	r3, #0
   d929c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   d92a0:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   d92a4:	b110      	cbz	r0, d92ac <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   d92a6:	2143      	movs	r1, #67	; 0x43
   d92a8:	f004 fbb4 	bl	dda14 <_ZdlPvj>
        curEvent = NULL;
   d92ac:	2300      	movs	r3, #0
   d92ae:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   d92b2:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   d92b6:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   d92ba:	4b3e      	ldr	r3, [pc, #248]	; (d93b4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   d92bc:	9300      	str	r3, [sp, #0]
   d92be:	4669      	mov	r1, sp
   d92c0:	2300      	movs	r3, #0
   d92c2:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d92c6:	9301      	str	r3, [sp, #4]
   d92c8:	f7ff fc7e 	bl	d8bc8 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d92cc:	f000 fcbe 	bl	d9c4c <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   d92d0:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   d92d4:	b002      	add	sp, #8
   d92d6:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   d92d8:	4937      	ldr	r1, [pc, #220]	; (d93b8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   d92da:	4834      	ldr	r0, [pc, #208]	; (d93ac <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d92dc:	f7fd ffdc 	bl	d7298 <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   d92e0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   d92e4:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   d92e8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d92ec:	b14b      	cbz	r3, d9302 <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   d92ee:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   d92f2:	b110      	cbz	r0, d92fa <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   d92f4:	2143      	movs	r1, #67	; 0x43
   d92f6:	f004 fb8d 	bl	dda14 <_ZdlPvj>
            curEvent = NULL;
   d92fa:	2300      	movs	r3, #0
   d92fc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   d9300:	e7db      	b.n	d92ba <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   d9302:	6f60      	ldr	r0, [r4, #116]	; 0x74
   d9304:	9400      	str	r4, [sp, #0]
   d9306:	f000 fc51 	bl	d9bac <os_mutex_recursive_lock>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   d930a:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   d930e:	4293      	cmp	r3, r2
   d9310:	d013      	beq.n	d933a <_ZN17PublishQueuePosix16statePublishWaitEv+0xf6>
	    _Alloc_traits::construct(this->_M_impl,
   d9312:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   d9316:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   d931a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   d931e:	3b04      	subs	r3, #4
   d9320:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
            WITH_LOCK(*this) {
   d9324:	4668      	mov	r0, sp
   d9326:	f7ff fc99 	bl	d8c5c <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
            _log.trace("writing to files after publish failure");
   d932a:	4924      	ldr	r1, [pc, #144]	; (d93bc <_ZN17PublishQueuePosix16statePublishWaitEv+0x178>)
   d932c:	481f      	ldr	r0, [pc, #124]	; (d93ac <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d932e:	f7fd ffb3 	bl	d7298 <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   d9332:	4620      	mov	r0, r4
   d9334:	f7ff fcb0 	bl	d8c98 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   d9338:	e7bf      	b.n	d92ba <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d933a:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d933e:	f104 0090 	add.w	r0, r4, #144	; 0x90
   d9342:	f7ff fdc1 	bl	d8ec8 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
	if (size() == max_size())
   d9346:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   d934a:	4298      	cmp	r0, r3
   d934c:	f104 0578 	add.w	r5, r4, #120	; 0x78
   d9350:	d102      	bne.n	d9358 <_ZN17PublishQueuePosix16statePublishWaitEv+0x114>
	  __throw_length_error(
   d9352:	481b      	ldr	r0, [pc, #108]	; (d93c0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x17c>)
   d9354:	f004 fb67 	bl	dda26 <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   d9358:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   d935c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   d935e:	429a      	cmp	r2, r3
   d9360:	d104      	bne.n	d936c <_ZN17PublishQueuePosix16statePublishWaitEv+0x128>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   d9362:	2201      	movs	r2, #1
   d9364:	4611      	mov	r1, r2
   d9366:	4628      	mov	r0, r5
   d9368:	f7ff fe69 	bl	d903e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d936c:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   d9370:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   d9374:	f7fa fe8f 	bl	d4096 <_Znwj>
   d9378:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   d937c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   d9380:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   d9382:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   d9386:	f853 3c04 	ldr.w	r3, [r3, #-4]
   d938a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   d938e:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d9392:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   d9396:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   d939a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	    _Alloc_traits::construct(this->_M_impl,
   d939e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d93a2:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   d93a6:	e7bd      	b.n	d9324 <_ZN17PublishQueuePosix16statePublishWaitEv+0xe0>
   d93a8:	000e0eef 	.word	0x000e0eef
   d93ac:	2003e460 	.word	0x2003e460
   d93b0:	000e0f02 	.word	0x000e0f02
   d93b4:	000d8d95 	.word	0x000d8d95
   d93b8:	000e0f12 	.word	0x000e0f12
   d93bc:	000e0f24 	.word	0x000e0f24
   d93c0:	000e0e80 	.word	0x000e0e80

000d93c4 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
   d93c4:	4b01      	ldr	r3, [pc, #4]	; (d93cc <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   d93c6:	4a02      	ldr	r2, [pc, #8]	; (d93d0 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   d93c8:	601a      	str	r2, [r3, #0]
}
   d93ca:	4770      	bx	lr
   d93cc:	2003e460 	.word	0x2003e460
   d93d0:	000e0f4b 	.word	0x000e0f4b

000d93d4 <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   d93d4:	b510      	push	{r4, lr}
   d93d6:	4b07      	ldr	r3, [pc, #28]	; (d93f4 <_ZN17PublishQueuePosixD1Ev+0x20>)
   d93d8:	4604      	mov	r4, r0
   d93da:	f840 3bc0 	str.w	r3, [r0], #192
   d93de:	f7fb fcb1 	bl	d4d44 <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   d93e2:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d93e6:	f7ff fe17 	bl	d9018 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   d93ea:	1d20      	adds	r0, r4, #4
   d93ec:	f000 f9b2 	bl	d9754 <_ZN14SequentialFileD1Ev>
}
   d93f0:	4620      	mov	r0, r4
   d93f2:	bd10      	pop	{r4, pc}
   d93f4:	000e0f5c 	.word	0x000e0f5c

000d93f8 <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   d93f8:	b510      	push	{r4, lr}
   d93fa:	4604      	mov	r4, r0
}
   d93fc:	f7ff ffea 	bl	d93d4 <_ZN17PublishQueuePosixD1Ev>
   d9400:	4620      	mov	r0, r4
   d9402:	21d0      	movs	r1, #208	; 0xd0
   d9404:	f004 fb06 	bl	dda14 <_ZdlPvj>
   d9408:	4620      	mov	r0, r4
   d940a:	bd10      	pop	{r4, pc}

000d940c <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   d940c:	2001      	movs	r0, #1
   d940e:	4770      	bx	lr

000d9410 <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   d9410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9412:	4d1f      	ldr	r5, [pc, #124]	; (d9490 <_ZN14SequentialFileC1Ev+0x80>)
   d9414:	4b1f      	ldr	r3, [pc, #124]	; (d9494 <_ZN14SequentialFileC1Ev+0x84>)
   d9416:	4604      	mov	r4, r0
   d9418:	4629      	mov	r1, r5
   d941a:	f840 3b04 	str.w	r3, [r0], #4
   d941e:	f003 fc0a 	bl	dcc36 <_ZN6StringC1EPKc>
   d9422:	491d      	ldr	r1, [pc, #116]	; (d9498 <_ZN14SequentialFileC1Ev+0x88>)
   d9424:	f104 0014 	add.w	r0, r4, #20
   d9428:	f003 fc05 	bl	dcc36 <_ZN6StringC1EPKc>
   d942c:	4629      	mov	r1, r5
   d942e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d9432:	f003 fc00 	bl	dcc36 <_ZN6StringC1EPKc>
   d9436:	2300      	movs	r3, #0
   d9438:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   d943c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   d9440:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   d9444:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   d9448:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   d944c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	  _M_start(), _M_finish()
   d9450:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   d9452:	2308      	movs	r3, #8
   d9454:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d9456:	2020      	movs	r0, #32
   d9458:	f7fa fe1d 	bl	d4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d945c:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   d945e:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d9460:	3d01      	subs	r5, #1
   d9462:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   d9464:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   d9468:	4606      	mov	r6, r0
   d946a:	f44f 7000 	mov.w	r0, #512	; 0x200
   d946e:	f7fa fe12 	bl	d4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   d9472:	f500 7300 	add.w	r3, r0, #512	; 0x200
   d9476:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   d947a:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   d947e:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   d9480:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   d9482:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   d9484:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   d9486:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   d9488:	6667      	str	r7, [r4, #100]	; 0x64

}
   d948a:	4620      	mov	r0, r4
   d948c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d948e:	bf00      	nop
   d9490:	000e11dd 	.word	0x000e11dd
   d9494:	000e1068 	.word	0x000e1068
   d9498:	000e0f68 	.word	0x000e0f68

000d949c <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   d949c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   d949e:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   d94a0:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   d94a2:	4628      	mov	r0, r5
   d94a4:	f003 fc25 	bl	dccf2 <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   d94a8:	490e      	ldr	r1, [pc, #56]	; (d94e4 <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   d94aa:	4668      	mov	r0, sp
   d94ac:	f003 fbc3 	bl	dcc36 <_ZN6StringC1EPKc>
   d94b0:	4669      	mov	r1, sp
   d94b2:	4628      	mov	r0, r5
   d94b4:	f003 fc8a 	bl	dcdcc <_ZNK6String8endsWithERKS_>
   d94b8:	4606      	mov	r6, r0
   d94ba:	4668      	mov	r0, sp
   d94bc:	f003 fb70 	bl	dcba0 <_ZN6StringD1Ev>
   d94c0:	b16e      	cbz	r6, d94de <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   d94c2:	68e3      	ldr	r3, [r4, #12]
   d94c4:	2200      	movs	r2, #0
   d94c6:	3b01      	subs	r3, #1
   d94c8:	4629      	mov	r1, r5
   d94ca:	4668      	mov	r0, sp
   d94cc:	f003 fcac 	bl	dce28 <_ZNK6String9substringEjj>
   d94d0:	4669      	mov	r1, sp
   d94d2:	4628      	mov	r0, r5
   d94d4:	f003 fc05 	bl	dcce2 <_ZN6StringaSEOS_>
   d94d8:	4668      	mov	r0, sp
   d94da:	f003 fb61 	bl	dcba0 <_ZN6StringD1Ev>
    }
    return *this; 
};
   d94de:	4620      	mov	r0, r4
   d94e0:	b004      	add	sp, #16
   d94e2:	bd70      	pop	{r4, r5, r6, pc}
   d94e4:	000e0f6d 	.word	0x000e0f6d

000d94e8 <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   d94e8:	b510      	push	{r4, lr}
    if (!queueMutex) {
   d94ea:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   d94ec:	4604      	mov	r4, r0
    if (!queueMutex) {
   d94ee:	b913      	cbnz	r3, d94f6 <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   d94f0:	303c      	adds	r0, #60	; 0x3c
   d94f2:	f000 fb33 	bl	d9b5c <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   d94f6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   d94f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   d94fc:	f000 bb36 	b.w	d9b6c <os_mutex_lock>

000d9500 <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   d9500:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d9502:	f000 bb3b 	b.w	d9b7c <os_mutex_unlock>
	...

000d9508 <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   d9508:	b510      	push	{r4, lr}
   d950a:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   d950c:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   d950e:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   d9510:	f000 fd04 	bl	d9f1c <stat>
    if (result == 0) {
   d9514:	b9d0      	cbnz	r0, d954c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   d9516:	9b01      	ldr	r3, [sp, #4]
   d9518:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   d951a:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   d951c:	d506      	bpl.n	d952c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   d951e:	4915      	ldr	r1, [pc, #84]	; (d9574 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   d9520:	4815      	ldr	r0, [pc, #84]	; (d9578 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   d9522:	f7fb fcef 	bl	d4f04 <_ZNK5spark6Logger4infoEPKcz>
        return true;
   d9526:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   d9528:	b016      	add	sp, #88	; 0x58
   d952a:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   d952c:	4812      	ldr	r0, [pc, #72]	; (d9578 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   d952e:	4913      	ldr	r1, [pc, #76]	; (d957c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   d9530:	f7fb fcff 	bl	d4f32 <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   d9534:	4620      	mov	r0, r4
   d9536:	f006 fd3f 	bl	dffb8 <unlink>
    result = mkdir(path, 0777);
   d953a:	f240 11ff 	movw	r1, #511	; 0x1ff
   d953e:	4620      	mov	r0, r4
   d9540:	f000 fcf4 	bl	d9f2c <mkdir>
    if (result == 0) {
   d9544:	b980      	cbnz	r0, d9568 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   d9546:	490e      	ldr	r1, [pc, #56]	; (d9580 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   d9548:	4622      	mov	r2, r4
   d954a:	e7e9      	b.n	d9520 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   d954c:	f000 ffa2 	bl	da494 <__errno>
   d9550:	6803      	ldr	r3, [r0, #0]
   d9552:	2b02      	cmp	r3, #2
   d9554:	d0f1      	beq.n	d953a <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   d9556:	f000 ff9d 	bl	da494 <__errno>
   d955a:	490a      	ldr	r1, [pc, #40]	; (d9584 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   d955c:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   d955e:	4806      	ldr	r0, [pc, #24]	; (d9578 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   d9560:	f7fb fce7 	bl	d4f32 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   d9564:	2000      	movs	r0, #0
   d9566:	e7df      	b.n	d9528 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   d9568:	f000 ff94 	bl	da494 <__errno>
   d956c:	4906      	ldr	r1, [pc, #24]	; (d9588 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   d956e:	6802      	ldr	r2, [r0, #0]
   d9570:	e7f5      	b.n	d955e <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   d9572:	bf00      	nop
   d9574:	000e0f7a 	.word	0x000e0f7a
   d9578:	2003e468 	.word	0x2003e468
   d957c:	000e0f97 	.word	0x000e0f97
   d9580:	000e0fc8 	.word	0x000e0fc8
   d9584:	000e0fb4 	.word	0x000e0fb4
   d9588:	000e0fd7 	.word	0x000e0fd7

000d958c <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   d958c:	b538      	push	{r3, r4, r5, lr}
   d958e:	4615      	mov	r5, r2
   d9590:	4604      	mov	r4, r0
    String result = name;
   d9592:	f003 fb50 	bl	dcc36 <_ZN6StringC1EPKc>

    if (ext && *ext) {
   d9596:	b14d      	cbz	r5, d95ac <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   d9598:	782b      	ldrb	r3, [r5, #0]
   d959a:	b13b      	cbz	r3, d95ac <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   d959c:	4904      	ldr	r1, [pc, #16]	; (d95b0 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   d959e:	4620      	mov	r0, r4
   d95a0:	f003 fbd0 	bl	dcd44 <_ZN6String6concatEPKc>
   d95a4:	4629      	mov	r1, r5
   d95a6:	4620      	mov	r0, r4
   d95a8:	f003 fbcc 	bl	dcd44 <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   d95ac:	4620      	mov	r0, r4
   d95ae:	bd38      	pop	{r3, r4, r5, pc}
   d95b0:	000e12dc 	.word	0x000e12dc

000d95b4 <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   d95b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d95b6:	4605      	mov	r5, r0
   d95b8:	460e      	mov	r6, r1
   d95ba:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   d95bc:	6949      	ldr	r1, [r1, #20]
   d95be:	4668      	mov	r0, sp
   d95c0:	f003 fc52 	bl	dce68 <_ZN6String6formatEPKcz>
        operator const char*() const { return c_str(); }
   d95c4:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   d95c6:	b904      	cbnz	r4, d95ca <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   d95c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d95ca:	4622      	mov	r2, r4
   d95cc:	4628      	mov	r0, r5
   d95ce:	f7ff ffdd 	bl	d958c <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   d95d2:	4668      	mov	r0, sp
   d95d4:	f003 fae4 	bl	dcba0 <_ZN6StringD1Ev>
}
   d95d8:	4628      	mov	r0, r5
   d95da:	b004      	add	sp, #16
   d95dc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d95e0 <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   d95e0:	b570      	push	{r4, r5, r6, lr}
   d95e2:	460c      	mov	r4, r1
   d95e4:	b08e      	sub	sp, #56	; 0x38
    String result;
   d95e6:	491a      	ldr	r1, [pc, #104]	; (d9650 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   d95e8:	e9cd 3200 	strd	r3, r2, [sp]
   d95ec:	4605      	mov	r5, r0
    String result;
   d95ee:	f003 fb22 	bl	dcc36 <_ZN6StringC1EPKc>
    result.reserve(dirPath.length() + pattern.length() + 4);
   d95f2:	69e0      	ldr	r0, [r4, #28]
   d95f4:	68e1      	ldr	r1, [r4, #12]
   d95f6:	4401      	add	r1, r0
   d95f8:	3104      	adds	r1, #4
   d95fa:	4628      	mov	r0, r5
   d95fc:	f003 faee 	bl	dcbdc <_ZN6String7reserveEj>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d9600:	1d21      	adds	r1, r4, #4
   d9602:	a806      	add	r0, sp, #24
   d9604:	f003 fb62 	bl	dcccc <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   d9608:	4912      	ldr	r1, [pc, #72]	; (d9654 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   d960a:	a802      	add	r0, sp, #8
   d960c:	f003 fb13 	bl	dcc36 <_ZN6StringC1EPKc>
   d9610:	a902      	add	r1, sp, #8
   d9612:	a806      	add	r0, sp, #24
   d9614:	f003 fba7 	bl	dcd66 <_ZplRK15StringSumHelperRK6String>
   d9618:	e9dd 3200 	ldrd	r3, r2, [sp]
   d961c:	4606      	mov	r6, r0
   d961e:	4621      	mov	r1, r4
   d9620:	a80a      	add	r0, sp, #40	; 0x28
   d9622:	f7ff ffc7 	bl	d95b4 <_ZN14SequentialFile17getNameForFileNumEiPKc>
   d9626:	a90a      	add	r1, sp, #40	; 0x28
   d9628:	4630      	mov	r0, r6
   d962a:	f003 fb9c 	bl	dcd66 <_ZplRK15StringSumHelperRK6String>
   d962e:	4601      	mov	r1, r0
   d9630:	4628      	mov	r0, r5
   d9632:	f003 fb3c 	bl	dccae <_ZN6StringaSERKS_>
   d9636:	a80a      	add	r0, sp, #40	; 0x28
   d9638:	f003 fab2 	bl	dcba0 <_ZN6StringD1Ev>
   d963c:	a802      	add	r0, sp, #8
   d963e:	f003 faaf 	bl	dcba0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d9642:	a806      	add	r0, sp, #24
   d9644:	f003 faac 	bl	dcba0 <_ZN6StringD1Ev>
}
   d9648:	4628      	mov	r0, r5
   d964a:	b00e      	add	sp, #56	; 0x38
   d964c:	bd70      	pop	{r4, r5, r6, pc}
   d964e:	bf00      	nop
   d9650:	000e11dd 	.word	0x000e11dd
   d9654:	000e0f6d 	.word	0x000e0f6d

000d9658 <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   d9658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   d965c:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   d965e:	b08e      	sub	sp, #56	; 0x38
   d9660:	4605      	mov	r5, r0
   d9662:	460f      	mov	r7, r1
    if (allExtensions) {
   d9664:	2a00      	cmp	r2, #0
   d9666:	d04a      	beq.n	d96fe <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   d9668:	6840      	ldr	r0, [r0, #4]
   d966a:	f000 fc6f 	bl	d9f4c <opendir>
        if (dir) {
   d966e:	4606      	mov	r6, r0
   d9670:	2800      	cmp	r0, #0
   d9672:	d041      	beq.n	d96f8 <_ZN14SequentialFile13removeFileNumEib+0xa0>
                        String path = dirPath + String("/") + ent->d_name;
   d9674:	f8df a0b0 	ldr.w	sl, [pc, #176]	; d9728 <_ZN14SequentialFile13removeFileNumEib+0xd0>
                        _log.trace("removed %s", path.c_str());
   d9678:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d9720 <_ZN14SequentialFile13removeFileNumEib+0xc8>
   d967c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; d9724 <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   d9680:	4630      	mov	r0, r6
   d9682:	f000 fc6b 	bl	d9f5c <readdir>
                if (!ent) {
   d9686:	2800      	cmp	r0, #0
   d9688:	d033      	beq.n	d96f2 <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   d968a:	7a82      	ldrb	r2, [r0, #10]
   d968c:	2a08      	cmp	r2, #8
   d968e:	d1f7      	bne.n	d9680 <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   d9690:	f100 040b 	add.w	r4, r0, #11
   d9694:	6969      	ldr	r1, [r5, #20]
   d9696:	aa01      	add	r2, sp, #4
   d9698:	4620      	mov	r0, r4
   d969a:	f000 fed3 	bl	da444 <sscanf>
   d969e:	2801      	cmp	r0, #1
   d96a0:	d1ee      	bne.n	d9680 <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   d96a2:	9b01      	ldr	r3, [sp, #4]
   d96a4:	429f      	cmp	r7, r3
   d96a6:	d1eb      	bne.n	d9680 <_ZN14SequentialFile13removeFileNumEib+0x28>
	StringSumHelper(const String &s) : String(s) {}
   d96a8:	1d29      	adds	r1, r5, #4
   d96aa:	a806      	add	r0, sp, #24
   d96ac:	f003 fb0e 	bl	dcccc <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   d96b0:	4651      	mov	r1, sl
   d96b2:	a80a      	add	r0, sp, #40	; 0x28
   d96b4:	f003 fabf 	bl	dcc36 <_ZN6StringC1EPKc>
   d96b8:	a90a      	add	r1, sp, #40	; 0x28
   d96ba:	a806      	add	r0, sp, #24
   d96bc:	f003 fb53 	bl	dcd66 <_ZplRK15StringSumHelperRK6String>
   d96c0:	4621      	mov	r1, r4
   d96c2:	f003 fb5c 	bl	dcd7e <_ZplRK15StringSumHelperPKc>
   d96c6:	4601      	mov	r1, r0
   d96c8:	a802      	add	r0, sp, #8
   d96ca:	f003 faff 	bl	dcccc <_ZN6StringC1ERKS_>
   d96ce:	a80a      	add	r0, sp, #40	; 0x28
   d96d0:	f003 fa66 	bl	dcba0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d96d4:	a806      	add	r0, sp, #24
   d96d6:	f003 fa63 	bl	dcba0 <_ZN6StringD1Ev>
                        unlink(path);
   d96da:	9802      	ldr	r0, [sp, #8]
   d96dc:	f006 fc6c 	bl	dffb8 <unlink>
                        _log.trace("removed %s", path.c_str());
   d96e0:	4640      	mov	r0, r8
   d96e2:	9a02      	ldr	r2, [sp, #8]
   d96e4:	4649      	mov	r1, r9
   d96e6:	f7fd fdd7 	bl	d7298 <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   d96ea:	a802      	add	r0, sp, #8
   d96ec:	f003 fa58 	bl	dcba0 <_ZN6StringD1Ev>
                    continue;
   d96f0:	e7c6      	b.n	d9680 <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   d96f2:	4630      	mov	r0, r6
   d96f4:	f000 fc3a 	bl	d9f6c <closedir>
}
   d96f8:	b00e      	add	sp, #56	; 0x38
   d96fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        String path = getPathForFileNum(fileNum); 
   d96fe:	460a      	mov	r2, r1
   d9700:	4601      	mov	r1, r0
   d9702:	a80a      	add	r0, sp, #40	; 0x28
   d9704:	f7ff ff6c 	bl	d95e0 <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   d9708:	980a      	ldr	r0, [sp, #40]	; 0x28
   d970a:	f006 fc55 	bl	dffb8 <unlink>
        _log.trace("removed %s", path.c_str());
   d970e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d9710:	4903      	ldr	r1, [pc, #12]	; (d9720 <_ZN14SequentialFile13removeFileNumEib+0xc8>)
   d9712:	4804      	ldr	r0, [pc, #16]	; (d9724 <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   d9714:	f7fd fdc0 	bl	d7298 <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   d9718:	a80a      	add	r0, sp, #40	; 0x28
   d971a:	f003 fa41 	bl	dcba0 <_ZN6StringD1Ev>
}
   d971e:	e7eb      	b.n	d96f8 <_ZN14SequentialFile13removeFileNumEib+0xa0>
   d9720:	000e0f6f 	.word	0x000e0f6f
   d9724:	2003e468 	.word	0x2003e468
   d9728:	000e0f6d 	.word	0x000e0f6d

000d972c <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   d972c:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   d972e:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   d9730:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   d9732:	b163      	cbz	r3, d974e <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x22>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   d9734:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d9736:	6945      	ldr	r5, [r0, #20]
   d9738:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   d973a:	42ae      	cmp	r6, r5
   d973c:	d904      	bls.n	d9748 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x1c>
	::operator delete(__p);
   d973e:	f855 0b04 	ldr.w	r0, [r5], #4
   d9742:	f7fa fcac 	bl	d409e <_ZdlPv>
   d9746:	e7f8      	b.n	d973a <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   d9748:	6820      	ldr	r0, [r4, #0]
   d974a:	f7fa fca8 	bl	d409e <_ZdlPv>
    }
   d974e:	4620      	mov	r0, r4
   d9750:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9754 <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   d9754:	b510      	push	{r4, lr}
   d9756:	4b09      	ldr	r3, [pc, #36]	; (d977c <_ZN14SequentialFileD1Ev+0x28>)
   d9758:	4604      	mov	r4, r0
   d975a:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   d975e:	f7ff ffe5 	bl	d972c <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   d9762:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d9766:	f003 fa1b 	bl	dcba0 <_ZN6StringD1Ev>
   d976a:	f104 0014 	add.w	r0, r4, #20
   d976e:	f003 fa17 	bl	dcba0 <_ZN6StringD1Ev>
   d9772:	1d20      	adds	r0, r4, #4
   d9774:	f003 fa14 	bl	dcba0 <_ZN6StringD1Ev>
}
   d9778:	4620      	mov	r0, r4
   d977a:	bd10      	pop	{r4, pc}
   d977c:	000e1068 	.word	0x000e1068

000d9780 <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   d9780:	b510      	push	{r4, lr}
   d9782:	4604      	mov	r4, r0
}
   d9784:	f7ff ffe6 	bl	d9754 <_ZN14SequentialFileD1Ev>
   d9788:	4620      	mov	r0, r4
   d978a:	2168      	movs	r1, #104	; 0x68
   d978c:	f004 f942 	bl	dda14 <_ZdlPvj>
   d9790:	4620      	mov	r0, r4
   d9792:	bd10      	pop	{r4, pc}

000d9794 <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>:
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   d9794:	68c3      	ldr	r3, [r0, #12]
   d9796:	68ca      	ldr	r2, [r1, #12]
   d9798:	1a9b      	subs	r3, r3, r2
   d979a:	109b      	asrs	r3, r3, #2
   d979c:	1e5a      	subs	r2, r3, #1
   d979e:	e9d0 3000 	ldrd	r3, r0, [r0]
   d97a2:	1a1b      	subs	r3, r3, r0
   d97a4:	109b      	asrs	r3, r3, #2
   d97a6:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	+ (__y._M_last - __y._M_cur);
   d97aa:	6888      	ldr	r0, [r1, #8]
   d97ac:	680a      	ldr	r2, [r1, #0]
   d97ae:	1a80      	subs	r0, r0, r2
    }
   d97b0:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   d97b4:	4770      	bx	lr
	...

000d97b8 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_>:
      deque<_Tp, _Alloc>::
   d97b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d97bc:	4604      	mov	r4, r0
   d97be:	4688      	mov	r8, r1
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d97c0:	f100 0108 	add.w	r1, r0, #8
   d97c4:	3018      	adds	r0, #24
   d97c6:	f7ff ffe5 	bl	d9794 <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>
	if (size() == max_size())
   d97ca:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   d97ce:	4298      	cmp	r0, r3
   d97d0:	d102      	bne.n	d97d8 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x20>
	  __throw_length_error(
   d97d2:	4837      	ldr	r0, [pc, #220]	; (d98b0 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xf8>)
   d97d4:	f004 f927 	bl	dda26 <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   d97d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d97da:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   d97dc:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   d97de:	1a11      	subs	r1, r2, r0
   d97e0:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   d97e4:	2901      	cmp	r1, #1
   d97e6:	d821      	bhi.n	d982c <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x74>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   d97e8:	6961      	ldr	r1, [r4, #20]
   d97ea:	1a57      	subs	r7, r2, r1
   d97ec:	10be      	asrs	r6, r7, #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   d97ee:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d97f0:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   d97f4:	d936      	bls.n	d9864 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xac>
					 - __new_num_nodes) / 2
   d97f6:	1b5d      	subs	r5, r3, r5
   d97f8:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d97fa:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   d97fe:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   d9800:	42a9      	cmp	r1, r5
   d9802:	eba3 0201 	sub.w	r2, r3, r1
   d9806:	d927      	bls.n	d9858 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xa0>
	  if (_Num)
   d9808:	4299      	cmp	r1, r3
   d980a:	d002      	beq.n	d9812 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d980c:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d980e:	f006 fa49 	bl	dfca4 <memmove>
	_M_node = __new_node;
   d9812:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   d9814:	682b      	ldr	r3, [r5, #0]
   d9816:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d9818:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d981c:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   d981e:	19eb      	adds	r3, r5, r7
	_M_node = __new_node;
   d9820:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   d9822:	59eb      	ldr	r3, [r5, r7]
   d9824:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d9826:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d982a:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d982c:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   d9830:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d9832:	f7fa fc30 	bl	d4096 <_Znwj>
   d9836:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   d9838:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d983a:	b113      	cbz	r3, d9842 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x8a>
   d983c:	f8d8 2000 	ldr.w	r2, [r8]
   d9840:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   d9842:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d9844:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d9846:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   d9848:	685b      	ldr	r3, [r3, #4]
   d984a:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d984c:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d9850:	6222      	str	r2, [r4, #32]
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   d9852:	61a3      	str	r3, [r4, #24]
      }
   d9854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   d9858:	4299      	cmp	r1, r3
   d985a:	d0da      	beq.n	d9812 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d985c:	1d38      	adds	r0, r7, #4
   d985e:	1a80      	subs	r0, r0, r2
   d9860:	4428      	add	r0, r5
   d9862:	e7d4      	b.n	d980e <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x56>
	  size_type __new_map_size = this->_M_impl._M_map_size
   d9864:	f103 0902 	add.w	r9, r3, #2
   d9868:	2b01      	cmp	r3, #1
   d986a:	bf2c      	ite	cs
   d986c:	4499      	addcs	r9, r3
   d986e:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->max_size())
   d9872:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   d9876:	d301      	bcc.n	d987c <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xc4>
	  std::__throw_bad_alloc();
   d9878:	f004 f8d2 	bl	dda20 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d987c:	ea4f 0089 	mov.w	r0, r9, lsl #2
   d9880:	f7fa fc09 	bl	d4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   d9884:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d9886:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d9888:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   d988c:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d988e:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   d9890:	4291      	cmp	r1, r2
   d9892:	4682      	mov	sl, r0
   d9894:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   d9898:	d003      	beq.n	d98a2 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xea>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d989a:	1a52      	subs	r2, r2, r1
   d989c:	4628      	mov	r0, r5
   d989e:	f006 fa01 	bl	dfca4 <memmove>
	::operator delete(__p);
   d98a2:	6820      	ldr	r0, [r4, #0]
   d98a4:	f7fa fbfb 	bl	d409e <_ZdlPv>
	  this->_M_impl._M_map_size = __new_map_size;
   d98a8:	e9c4 a900 	strd	sl, r9, [r4]
   d98ac:	e7b1      	b.n	d9812 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
   d98ae:	bf00      	nop
   d98b0:	000e0e80 	.word	0x000e0e80

000d98b4 <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   d98b4:	b538      	push	{r3, r4, r5, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   d98b6:	6a05      	ldr	r5, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   d98b8:	6982      	ldr	r2, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   d98ba:	3d04      	subs	r5, #4
	if (this->_M_impl._M_finish._M_cur
   d98bc:	42aa      	cmp	r2, r5
      push_back(const value_type& __x)
   d98be:	4603      	mov	r3, r0
	if (this->_M_impl._M_finish._M_cur
   d98c0:	d006      	beq.n	d98d0 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d98c2:	b10a      	cbz	r2, d98c8 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x14>
	    _Alloc_traits::construct(this->_M_impl,
   d98c4:	6809      	ldr	r1, [r1, #0]
   d98c6:	6011      	str	r1, [r2, #0]
	    ++this->_M_impl._M_finish._M_cur;
   d98c8:	699a      	ldr	r2, [r3, #24]
   d98ca:	3204      	adds	r2, #4
   d98cc:	619a      	str	r2, [r3, #24]
      }
   d98ce:	bd38      	pop	{r3, r4, r5, pc}
	  _M_push_back_aux(__x);
   d98d0:	f7ff ff72 	bl	d97b8 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_>
      }
   d98d4:	e7fb      	b.n	d98ce <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1a>
	...

000d98d8 <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   d98d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   d98dc:	68c3      	ldr	r3, [r0, #12]
   d98de:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   d98e0:	b086      	sub	sp, #24
   d98e2:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   d98e4:	d808      	bhi.n	d98f8 <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   d98e6:	4934      	ldr	r1, [pc, #208]	; (d99b8 <_ZN14SequentialFile7scanDirEv+0xe0>)
   d98e8:	4834      	ldr	r0, [pc, #208]	; (d99bc <_ZN14SequentialFile7scanDirEv+0xe4>)
   d98ea:	f7fb fb22 	bl	d4f32 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   d98ee:	2600      	movs	r6, #0
}
   d98f0:	4630      	mov	r0, r6
   d98f2:	b006      	add	sp, #24
   d98f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   d98f8:	6840      	ldr	r0, [r0, #4]
   d98fa:	f7ff fe05 	bl	d9508 <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   d98fe:	4606      	mov	r6, r0
   d9900:	2800      	cmp	r0, #0
   d9902:	d0f4      	beq.n	d98ee <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   d9904:	6963      	ldr	r3, [r4, #20]
   d9906:	6862      	ldr	r2, [r4, #4]
   d9908:	492d      	ldr	r1, [pc, #180]	; (d99c0 <_ZN14SequentialFile7scanDirEv+0xe8>)
   d990a:	482c      	ldr	r0, [pc, #176]	; (d99bc <_ZN14SequentialFile7scanDirEv+0xe4>)
   d990c:	f7fd fcc4 	bl	d7298 <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   d9910:	6860      	ldr	r0, [r4, #4]
   d9912:	f000 fb1b 	bl	d9f4c <opendir>
    if (!dir) {
   d9916:	4607      	mov	r7, r0
   d9918:	2800      	cmp	r0, #0
   d991a:	d0e8      	beq.n	d98ee <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   d991c:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   d991e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d99c4 <_ZN14SequentialFile7scanDirEv+0xec>
   d9922:	f8df 8098 	ldr.w	r8, [pc, #152]	; d99bc <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   d9926:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   d9928:	4638      	mov	r0, r7
   d992a:	f000 fb17 	bl	d9f5c <readdir>
        if (!ent) {
   d992e:	4605      	mov	r5, r0
   d9930:	2800      	cmp	r0, #0
   d9932:	d039      	beq.n	d99a8 <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   d9934:	7a83      	ldrb	r3, [r0, #10]
   d9936:	2b08      	cmp	r3, #8
   d9938:	d1f6      	bne.n	d9928 <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   d993a:	350b      	adds	r5, #11
   d993c:	6961      	ldr	r1, [r4, #20]
   d993e:	aa01      	add	r2, sp, #4
   d9940:	4628      	mov	r0, r5
   d9942:	f000 fd7f 	bl	da444 <sscanf>
   d9946:	2801      	cmp	r0, #1
   d9948:	d1ee      	bne.n	d9928 <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   d994a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d994c:	b17b      	cbz	r3, d996e <_ZN14SequentialFile7scanDirEv+0x96>
   d994e:	4629      	mov	r1, r5
   d9950:	a802      	add	r0, sp, #8
   d9952:	f003 f970 	bl	dcc36 <_ZN6StringC1EPKc>
   d9956:	f104 0124 	add.w	r1, r4, #36	; 0x24
   d995a:	a802      	add	r0, sp, #8
   d995c:	f003 fa36 	bl	dcdcc <_ZNK6String8endsWithERKS_>
   d9960:	4682      	mov	sl, r0
   d9962:	a802      	add	r0, sp, #8
   d9964:	f003 f91c 	bl	dcba0 <_ZN6StringD1Ev>
   d9968:	f1ba 0f00 	cmp.w	sl, #0
   d996c:	d0dc      	beq.n	d9928 <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   d996e:	6823      	ldr	r3, [r4, #0]
   d9970:	4629      	mov	r1, r5
   d9972:	689b      	ldr	r3, [r3, #8]
   d9974:	4620      	mov	r0, r4
   d9976:	4798      	blx	r3
   d9978:	2800      	cmp	r0, #0
   d997a:	d0d5      	beq.n	d9928 <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   d997c:	9a01      	ldr	r2, [sp, #4]
   d997e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9980:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   d9982:	bfb8      	it	lt
   d9984:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   d9986:	462b      	mov	r3, r5
   d9988:	4649      	mov	r1, r9
   d998a:	4640      	mov	r0, r8
   d998c:	f7fd fc84 	bl	d7298 <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   d9990:	4620      	mov	r0, r4
   d9992:	f7ff fda9 	bl	d94e8 <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   d9996:	f104 0040 	add.w	r0, r4, #64	; 0x40
   d999a:	a901      	add	r1, sp, #4
   d999c:	f7ff ff8a 	bl	d98b4 <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   d99a0:	4620      	mov	r0, r4
   d99a2:	f7ff fdad 	bl	d9500 <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   d99a6:	e7bf      	b.n	d9928 <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   d99a8:	4638      	mov	r0, r7
   d99aa:	f000 fadf 	bl	d9f6c <closedir>
    scanDirCompleted = true;
   d99ae:	2301      	movs	r3, #1
   d99b0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   d99b4:	e79c      	b.n	d98f0 <_ZN14SequentialFile7scanDirEv+0x18>
   d99b6:	bf00      	nop
   d99b8:	000e0fed 	.word	0x000e0fed
   d99bc:	2003e468 	.word	0x2003e468
   d99c0:	000e1002 	.word	0x000e1002
   d99c4:	000e101e 	.word	0x000e101e

000d99c8 <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   d99c8:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   d99ca:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   d99ce:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   d99d0:	b90b      	cbnz	r3, d99d6 <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   d99d2:	f7ff ff81 	bl	d98d8 <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   d99d6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   d99d8:	3001      	adds	r0, #1
   d99da:	63a0      	str	r0, [r4, #56]	; 0x38
}
   d99dc:	bd10      	pop	{r4, pc}
	...

000d99e0 <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   d99e0:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   d99e2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   d99e6:	4604      	mov	r4, r0
   d99e8:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   d99ea:	b90b      	cbnz	r3, d99f0 <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   d99ec:	f7ff ff74 	bl	d98d8 <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   d99f0:	4620      	mov	r0, r4
   d99f2:	f7ff fd79 	bl	d94e8 <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
   d99f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   d99f8:	6da2      	ldr	r2, [r4, #88]	; 0x58
   d99fa:	4293      	cmp	r3, r2
   d99fc:	d01e      	beq.n	d9a3c <_ZN14SequentialFile16getFileFromQueueEb+0x5c>
        fileNum = queue.front();
   d99fe:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   d9a00:	b12e      	cbz	r6, d9a0e <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
	    != this->_M_impl._M_start._M_last - 1)
   d9a02:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d9a04:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   d9a06:	4293      	cmp	r3, r2
   d9a08:	d00c      	beq.n	d9a24 <_ZN14SequentialFile16getFileFromQueueEb+0x44>
	    ++this->_M_impl._M_start._M_cur;
   d9a0a:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   d9a0c:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   d9a0e:	4620      	mov	r0, r4
   d9a10:	f7ff fd76 	bl	d9500 <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   d9a14:	b125      	cbz	r5, d9a20 <_ZN14SequentialFile16getFileFromQueueEb+0x40>
        _log.trace("getFileFromQueue returned %d", fileNum);
   d9a16:	490a      	ldr	r1, [pc, #40]	; (d9a40 <_ZN14SequentialFile16getFileFromQueueEb+0x60>)
   d9a18:	480a      	ldr	r0, [pc, #40]	; (d9a44 <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   d9a1a:	462a      	mov	r2, r5
   d9a1c:	f7fd fc3c 	bl	d7298 <_ZNK5spark6Logger5traceEPKcz>
}
   d9a20:	4628      	mov	r0, r5
   d9a22:	bd70      	pop	{r4, r5, r6, pc}
	::operator delete(__p);
   d9a24:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   d9a26:	f7fa fb3a 	bl	d409e <_ZdlPv>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   d9a2a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d9a2c:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d9a2e:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   d9a30:	685b      	ldr	r3, [r3, #4]
   d9a32:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   d9a34:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d9a38:	6522      	str	r2, [r4, #80]	; 0x50
   d9a3a:	e7e7      	b.n	d9a0c <_ZN14SequentialFile16getFileFromQueueEb+0x2c>
    int fileNum = 0;
   d9a3c:	2500      	movs	r5, #0
   d9a3e:	e7e6      	b.n	d9a0e <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
   d9a40:	000e1034 	.word	0x000e1034
   d9a44:	2003e468 	.word	0x2003e468

000d9a48 <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   d9a48:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   d9a4a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   d9a4e:	9101      	str	r1, [sp, #4]
   d9a50:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   d9a52:	b90b      	cbnz	r3, d9a58 <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   d9a54:	f7ff ff40 	bl	d98d8 <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   d9a58:	9b01      	ldr	r3, [sp, #4]
   d9a5a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   d9a5c:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   d9a5e:	bfb8      	it	lt
   d9a60:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   d9a62:	4620      	mov	r0, r4
   d9a64:	f7ff fd40 	bl	d94e8 <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   d9a68:	a901      	add	r1, sp, #4
   d9a6a:	f104 0040 	add.w	r0, r4, #64	; 0x40
   d9a6e:	f7ff ff21 	bl	d98b4 <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   d9a72:	4620      	mov	r0, r4
   d9a74:	f7ff fd44 	bl	d9500 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   d9a78:	b002      	add	sp, #8
   d9a7a:	bd10      	pop	{r4, pc}

000d9a7c <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   d9a7c:	b538      	push	{r3, r4, r5, lr}
   d9a7e:	4604      	mov	r4, r0
    queueMutexLock();
   d9a80:	f7ff fd32 	bl	d94e8 <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d9a84:	f104 0148 	add.w	r1, r4, #72	; 0x48
   d9a88:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d9a8c:	f7ff fe82 	bl	d9794 <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>
   d9a90:	4605      	mov	r5, r0
    queueMutexUnlock();
   d9a92:	4620      	mov	r0, r4
   d9a94:	f7ff fd34 	bl	d9500 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   d9a98:	4628      	mov	r0, r5
   d9a9a:	bd38      	pop	{r3, r4, r5, pc}

000d9a9c <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   d9a9c:	4b01      	ldr	r3, [pc, #4]	; (d9aa4 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   d9a9e:	4a02      	ldr	r2, [pc, #8]	; (d9aa8 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   d9aa0:	601a      	str	r2, [r3, #0]
}
   d9aa2:	4770      	bx	lr
   d9aa4:	2003e468 	.word	0x2003e468
   d9aa8:	000e1051 	.word	0x000e1051

000d9aac <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d9aac:	b508      	push	{r3, lr}
   d9aae:	4b02      	ldr	r3, [pc, #8]	; (d9ab8 <cellular_signal+0xc>)
   d9ab0:	681b      	ldr	r3, [r3, #0]
   d9ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d9ab4:	9301      	str	r3, [sp, #4]
   d9ab6:	bd08      	pop	{r3, pc}
   d9ab8:	00030274 	.word	0x00030274

000d9abc <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d9abc:	b508      	push	{r3, lr}
   d9abe:	4b02      	ldr	r3, [pc, #8]	; (d9ac8 <os_thread_create+0xc>)
   d9ac0:	681b      	ldr	r3, [r3, #0]
   d9ac2:	685b      	ldr	r3, [r3, #4]
   d9ac4:	9301      	str	r3, [sp, #4]
   d9ac6:	bd08      	pop	{r3, pc}
   d9ac8:	00030248 	.word	0x00030248

000d9acc <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d9acc:	b508      	push	{r3, lr}
   d9ace:	4b02      	ldr	r3, [pc, #8]	; (d9ad8 <os_thread_is_current+0xc>)
   d9ad0:	681b      	ldr	r3, [r3, #0]
   d9ad2:	689b      	ldr	r3, [r3, #8]
   d9ad4:	9301      	str	r3, [sp, #4]
   d9ad6:	bd08      	pop	{r3, pc}
   d9ad8:	00030248 	.word	0x00030248

000d9adc <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d9adc:	b508      	push	{r3, lr}
   d9ade:	4b02      	ldr	r3, [pc, #8]	; (d9ae8 <os_thread_yield+0xc>)
   d9ae0:	681b      	ldr	r3, [r3, #0]
   d9ae2:	68db      	ldr	r3, [r3, #12]
   d9ae4:	9301      	str	r3, [sp, #4]
   d9ae6:	bd08      	pop	{r3, pc}
   d9ae8:	00030248 	.word	0x00030248

000d9aec <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d9aec:	b508      	push	{r3, lr}
   d9aee:	4b02      	ldr	r3, [pc, #8]	; (d9af8 <os_thread_join+0xc>)
   d9af0:	681b      	ldr	r3, [r3, #0]
   d9af2:	691b      	ldr	r3, [r3, #16]
   d9af4:	9301      	str	r3, [sp, #4]
   d9af6:	bd08      	pop	{r3, pc}
   d9af8:	00030248 	.word	0x00030248

000d9afc <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d9afc:	b508      	push	{r3, lr}
   d9afe:	4b02      	ldr	r3, [pc, #8]	; (d9b08 <os_thread_cleanup+0xc>)
   d9b00:	681b      	ldr	r3, [r3, #0]
   d9b02:	695b      	ldr	r3, [r3, #20]
   d9b04:	9301      	str	r3, [sp, #4]
   d9b06:	bd08      	pop	{r3, pc}
   d9b08:	00030248 	.word	0x00030248

000d9b0c <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d9b0c:	b508      	push	{r3, lr}
   d9b0e:	4b02      	ldr	r3, [pc, #8]	; (d9b18 <os_thread_scheduling+0xc>)
   d9b10:	681b      	ldr	r3, [r3, #0]
   d9b12:	69db      	ldr	r3, [r3, #28]
   d9b14:	9301      	str	r3, [sp, #4]
   d9b16:	bd08      	pop	{r3, pc}
   d9b18:	00030248 	.word	0x00030248

000d9b1c <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d9b1c:	b508      	push	{r3, lr}
   d9b1e:	4b02      	ldr	r3, [pc, #8]	; (d9b28 <os_timer_create+0xc>)
   d9b20:	681b      	ldr	r3, [r3, #0]
   d9b22:	6a1b      	ldr	r3, [r3, #32]
   d9b24:	9301      	str	r3, [sp, #4]
   d9b26:	bd08      	pop	{r3, pc}
   d9b28:	00030248 	.word	0x00030248

000d9b2c <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d9b2c:	b508      	push	{r3, lr}
   d9b2e:	4b02      	ldr	r3, [pc, #8]	; (d9b38 <os_timer_destroy+0xc>)
   d9b30:	681b      	ldr	r3, [r3, #0]
   d9b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d9b34:	9301      	str	r3, [sp, #4]
   d9b36:	bd08      	pop	{r3, pc}
   d9b38:	00030248 	.word	0x00030248

000d9b3c <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d9b3c:	b508      	push	{r3, lr}
   d9b3e:	4b02      	ldr	r3, [pc, #8]	; (d9b48 <os_timer_get_id+0xc>)
   d9b40:	681b      	ldr	r3, [r3, #0]
   d9b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d9b44:	9301      	str	r3, [sp, #4]
   d9b46:	bd08      	pop	{r3, pc}
   d9b48:	00030248 	.word	0x00030248

000d9b4c <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d9b4c:	b508      	push	{r3, lr}
   d9b4e:	4b02      	ldr	r3, [pc, #8]	; (d9b58 <os_timer_change+0xc>)
   d9b50:	681b      	ldr	r3, [r3, #0]
   d9b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9b54:	9301      	str	r3, [sp, #4]
   d9b56:	bd08      	pop	{r3, pc}
   d9b58:	00030248 	.word	0x00030248

000d9b5c <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d9b5c:	b508      	push	{r3, lr}
   d9b5e:	4b02      	ldr	r3, [pc, #8]	; (d9b68 <os_mutex_create+0xc>)
   d9b60:	681b      	ldr	r3, [r3, #0]
   d9b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d9b64:	9301      	str	r3, [sp, #4]
   d9b66:	bd08      	pop	{r3, pc}
   d9b68:	00030248 	.word	0x00030248

000d9b6c <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d9b6c:	b508      	push	{r3, lr}
   d9b6e:	4b02      	ldr	r3, [pc, #8]	; (d9b78 <os_mutex_lock+0xc>)
   d9b70:	681b      	ldr	r3, [r3, #0]
   d9b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d9b74:	9301      	str	r3, [sp, #4]
   d9b76:	bd08      	pop	{r3, pc}
   d9b78:	00030248 	.word	0x00030248

000d9b7c <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d9b7c:	b508      	push	{r3, lr}
   d9b7e:	4b02      	ldr	r3, [pc, #8]	; (d9b88 <os_mutex_unlock+0xc>)
   d9b80:	681b      	ldr	r3, [r3, #0]
   d9b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d9b84:	9301      	str	r3, [sp, #4]
   d9b86:	bd08      	pop	{r3, pc}
   d9b88:	00030248 	.word	0x00030248

000d9b8c <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d9b8c:	b508      	push	{r3, lr}
   d9b8e:	4b02      	ldr	r3, [pc, #8]	; (d9b98 <os_mutex_recursive_create+0xc>)
   d9b90:	681b      	ldr	r3, [r3, #0]
   d9b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d9b94:	9301      	str	r3, [sp, #4]
   d9b96:	bd08      	pop	{r3, pc}
   d9b98:	00030248 	.word	0x00030248

000d9b9c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d9b9c:	b508      	push	{r3, lr}
   d9b9e:	4b02      	ldr	r3, [pc, #8]	; (d9ba8 <os_mutex_recursive_destroy+0xc>)
   d9ba0:	681b      	ldr	r3, [r3, #0]
   d9ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d9ba4:	9301      	str	r3, [sp, #4]
   d9ba6:	bd08      	pop	{r3, pc}
   d9ba8:	00030248 	.word	0x00030248

000d9bac <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d9bac:	b508      	push	{r3, lr}
   d9bae:	4b02      	ldr	r3, [pc, #8]	; (d9bb8 <os_mutex_recursive_lock+0xc>)
   d9bb0:	681b      	ldr	r3, [r3, #0]
   d9bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d9bb4:	9301      	str	r3, [sp, #4]
   d9bb6:	bd08      	pop	{r3, pc}
   d9bb8:	00030248 	.word	0x00030248

000d9bbc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d9bbc:	b508      	push	{r3, lr}
   d9bbe:	4b02      	ldr	r3, [pc, #8]	; (d9bc8 <os_mutex_recursive_unlock+0xc>)
   d9bc0:	681b      	ldr	r3, [r3, #0]
   d9bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d9bc4:	9301      	str	r3, [sp, #4]
   d9bc6:	bd08      	pop	{r3, pc}
   d9bc8:	00030248 	.word	0x00030248

000d9bcc <os_timer_is_active>:

DYNALIB_FN(22, hal_concurrent, os_timer_is_active, int(os_timer_t, void*))
   d9bcc:	b508      	push	{r3, lr}
   d9bce:	4b02      	ldr	r3, [pc, #8]	; (d9bd8 <os_timer_is_active+0xc>)
   d9bd0:	681b      	ldr	r3, [r3, #0]
   d9bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d9bd4:	9301      	str	r3, [sp, #4]
   d9bd6:	bd08      	pop	{r3, pc}
   d9bd8:	00030248 	.word	0x00030248

000d9bdc <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d9bdc:	b508      	push	{r3, lr}
   d9bde:	4b02      	ldr	r3, [pc, #8]	; (d9be8 <os_thread_exit+0xc>)
   d9be0:	681b      	ldr	r3, [r3, #0]
   d9be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d9be4:	9301      	str	r3, [sp, #4]
   d9be6:	bd08      	pop	{r3, pc}
   d9be8:	00030248 	.word	0x00030248

000d9bec <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d9bec:	b508      	push	{r3, lr}
   d9bee:	4b02      	ldr	r3, [pc, #8]	; (d9bf8 <os_timer_set_id+0xc>)
   d9bf0:	681b      	ldr	r3, [r3, #0]
   d9bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d9bf4:	9301      	str	r3, [sp, #4]
   d9bf6:	bd08      	pop	{r3, pc}
   d9bf8:	00030248 	.word	0x00030248

000d9bfc <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d9bfc:	b508      	push	{r3, lr}
   d9bfe:	4b02      	ldr	r3, [pc, #8]	; (d9c08 <HAL_Feature_Set+0xc>)
   d9c00:	681b      	ldr	r3, [r3, #0]
   d9c02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d9c04:	9301      	str	r3, [sp, #4]
   d9c06:	bd08      	pop	{r3, pc}
   d9c08:	00030234 	.word	0x00030234

000d9c0c <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d9c0c:	b508      	push	{r3, lr}
   d9c0e:	4b02      	ldr	r3, [pc, #8]	; (d9c18 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d9c10:	681b      	ldr	r3, [r3, #0]
   d9c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d9c14:	9301      	str	r3, [sp, #4]
   d9c16:	bd08      	pop	{r3, pc}
   d9c18:	00030234 	.word	0x00030234

000d9c1c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d9c1c:	b508      	push	{r3, lr}
   d9c1e:	4b02      	ldr	r3, [pc, #8]	; (d9c28 <HAL_RNG_GetRandomNumber+0xc>)
   d9c20:	681b      	ldr	r3, [r3, #0]
   d9c22:	685b      	ldr	r3, [r3, #4]
   d9c24:	9301      	str	r3, [sp, #4]
   d9c26:	bd08      	pop	{r3, pc}
   d9c28:	00030218 	.word	0x00030218

000d9c2c <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d9c2c:	b508      	push	{r3, lr}
   d9c2e:	4b02      	ldr	r3, [pc, #8]	; (d9c38 <HAL_Delay_Milliseconds+0xc>)
   d9c30:	681b      	ldr	r3, [r3, #0]
   d9c32:	689b      	ldr	r3, [r3, #8]
   d9c34:	9301      	str	r3, [sp, #4]
   d9c36:	bd08      	pop	{r3, pc}
   d9c38:	00030218 	.word	0x00030218

000d9c3c <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d9c3c:	b508      	push	{r3, lr}
   d9c3e:	4b02      	ldr	r3, [pc, #8]	; (d9c48 <HAL_Delay_Microseconds+0xc>)
   d9c40:	681b      	ldr	r3, [r3, #0]
   d9c42:	68db      	ldr	r3, [r3, #12]
   d9c44:	9301      	str	r3, [sp, #4]
   d9c46:	bd08      	pop	{r3, pc}
   d9c48:	00030218 	.word	0x00030218

000d9c4c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d9c4c:	b508      	push	{r3, lr}
   d9c4e:	4b02      	ldr	r3, [pc, #8]	; (d9c58 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d9c50:	681b      	ldr	r3, [r3, #0]
   d9c52:	695b      	ldr	r3, [r3, #20]
   d9c54:	9301      	str	r3, [sp, #4]
   d9c56:	bd08      	pop	{r3, pc}
   d9c58:	00030218 	.word	0x00030218

000d9c5c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d9c5c:	b508      	push	{r3, lr}
   d9c5e:	4b02      	ldr	r3, [pc, #8]	; (d9c68 <hal_rtc_time_is_valid+0xc>)
   d9c60:	681b      	ldr	r3, [r3, #0]
   d9c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d9c64:	9301      	str	r3, [sp, #4]
   d9c66:	bd08      	pop	{r3, pc}
   d9c68:	00030218 	.word	0x00030218

000d9c6c <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d9c6c:	b508      	push	{r3, lr}
   d9c6e:	4b02      	ldr	r3, [pc, #8]	; (d9c78 <hal_timer_millis+0xc>)
   d9c70:	681b      	ldr	r3, [r3, #0]
   d9c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d9c74:	9301      	str	r3, [sp, #4]
   d9c76:	bd08      	pop	{r3, pc}
   d9c78:	00030218 	.word	0x00030218

000d9c7c <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d9c7c:	b508      	push	{r3, lr}
   d9c7e:	4b02      	ldr	r3, [pc, #8]	; (d9c88 <hal_rtc_get_time+0xc>)
   d9c80:	681b      	ldr	r3, [r3, #0]
   d9c82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d9c84:	9301      	str	r3, [sp, #4]
   d9c86:	bd08      	pop	{r3, pc}
   d9c88:	00030218 	.word	0x00030218

000d9c8c <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d9c8c:	b508      	push	{r3, lr}
   d9c8e:	4b02      	ldr	r3, [pc, #8]	; (d9c98 <hal_rtc_set_time+0xc>)
   d9c90:	681b      	ldr	r3, [r3, #0]
   d9c92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d9c94:	9301      	str	r3, [sp, #4]
   d9c96:	bd08      	pop	{r3, pc}
   d9c98:	00030218 	.word	0x00030218

000d9c9c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d9c9c:	b508      	push	{r3, lr}
   d9c9e:	4b02      	ldr	r3, [pc, #8]	; (d9ca8 <HAL_Validate_Pin_Function+0xc>)
   d9ca0:	681b      	ldr	r3, [r3, #0]
   d9ca2:	685b      	ldr	r3, [r3, #4]
   d9ca4:	9301      	str	r3, [sp, #4]
   d9ca6:	bd08      	pop	{r3, pc}
   d9ca8:	0003022c 	.word	0x0003022c

000d9cac <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d9cac:	b508      	push	{r3, lr}
   d9cae:	4b02      	ldr	r3, [pc, #8]	; (d9cb8 <HAL_Pin_Mode+0xc>)
   d9cb0:	681b      	ldr	r3, [r3, #0]
   d9cb2:	689b      	ldr	r3, [r3, #8]
   d9cb4:	9301      	str	r3, [sp, #4]
   d9cb6:	bd08      	pop	{r3, pc}
   d9cb8:	0003022c 	.word	0x0003022c

000d9cbc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d9cbc:	b508      	push	{r3, lr}
   d9cbe:	4b02      	ldr	r3, [pc, #8]	; (d9cc8 <HAL_Get_Pin_Mode+0xc>)
   d9cc0:	681b      	ldr	r3, [r3, #0]
   d9cc2:	68db      	ldr	r3, [r3, #12]
   d9cc4:	9301      	str	r3, [sp, #4]
   d9cc6:	bd08      	pop	{r3, pc}
   d9cc8:	0003022c 	.word	0x0003022c

000d9ccc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d9ccc:	b508      	push	{r3, lr}
   d9cce:	4b02      	ldr	r3, [pc, #8]	; (d9cd8 <HAL_GPIO_Write+0xc>)
   d9cd0:	681b      	ldr	r3, [r3, #0]
   d9cd2:	691b      	ldr	r3, [r3, #16]
   d9cd4:	9301      	str	r3, [sp, #4]
   d9cd6:	bd08      	pop	{r3, pc}
   d9cd8:	0003022c 	.word	0x0003022c

000d9cdc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d9cdc:	b508      	push	{r3, lr}
   d9cde:	4b02      	ldr	r3, [pc, #8]	; (d9ce8 <HAL_GPIO_Read+0xc>)
   d9ce0:	681b      	ldr	r3, [r3, #0]
   d9ce2:	695b      	ldr	r3, [r3, #20]
   d9ce4:	9301      	str	r3, [sp, #4]
   d9ce6:	bd08      	pop	{r3, pc}
   d9ce8:	0003022c 	.word	0x0003022c

000d9cec <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d9cec:	b508      	push	{r3, lr}
   d9cee:	4b02      	ldr	r3, [pc, #8]	; (d9cf8 <HAL_Interrupts_Attach+0xc>)
   d9cf0:	681b      	ldr	r3, [r3, #0]
   d9cf2:	699b      	ldr	r3, [r3, #24]
   d9cf4:	9301      	str	r3, [sp, #4]
   d9cf6:	bd08      	pop	{r3, pc}
   d9cf8:	0003022c 	.word	0x0003022c

000d9cfc <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d9cfc:	b508      	push	{r3, lr}
   d9cfe:	4b02      	ldr	r3, [pc, #8]	; (d9d08 <HAL_Interrupts_Detach+0xc>)
   d9d00:	681b      	ldr	r3, [r3, #0]
   d9d02:	69db      	ldr	r3, [r3, #28]
   d9d04:	9301      	str	r3, [sp, #4]
   d9d06:	bd08      	pop	{r3, pc}
   d9d08:	0003022c 	.word	0x0003022c

000d9d0c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d9d0c:	b508      	push	{r3, lr}
   d9d0e:	4b02      	ldr	r3, [pc, #8]	; (d9d18 <hal_adc_read+0xc>)
   d9d10:	681b      	ldr	r3, [r3, #0]
   d9d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d9d14:	9301      	str	r3, [sp, #4]
   d9d16:	bd08      	pop	{r3, pc}
   d9d18:	0003022c 	.word	0x0003022c

000d9d1c <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d9d1c:	b508      	push	{r3, lr}
   d9d1e:	4b02      	ldr	r3, [pc, #8]	; (d9d28 <hal_i2c_begin+0xc>)
   d9d20:	681b      	ldr	r3, [r3, #0]
   d9d22:	68db      	ldr	r3, [r3, #12]
   d9d24:	9301      	str	r3, [sp, #4]
   d9d26:	bd08      	pop	{r3, pc}
   d9d28:	00030228 	.word	0x00030228

000d9d2c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d9d2c:	b508      	push	{r3, lr}
   d9d2e:	4b02      	ldr	r3, [pc, #8]	; (d9d38 <hal_i2c_begin_transmission+0xc>)
   d9d30:	681b      	ldr	r3, [r3, #0]
   d9d32:	699b      	ldr	r3, [r3, #24]
   d9d34:	9301      	str	r3, [sp, #4]
   d9d36:	bd08      	pop	{r3, pc}
   d9d38:	00030228 	.word	0x00030228

000d9d3c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d9d3c:	b508      	push	{r3, lr}
   d9d3e:	4b02      	ldr	r3, [pc, #8]	; (d9d48 <hal_i2c_end_transmission+0xc>)
   d9d40:	681b      	ldr	r3, [r3, #0]
   d9d42:	69db      	ldr	r3, [r3, #28]
   d9d44:	9301      	str	r3, [sp, #4]
   d9d46:	bd08      	pop	{r3, pc}
   d9d48:	00030228 	.word	0x00030228

000d9d4c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d9d4c:	b508      	push	{r3, lr}
   d9d4e:	4b02      	ldr	r3, [pc, #8]	; (d9d58 <hal_i2c_write+0xc>)
   d9d50:	681b      	ldr	r3, [r3, #0]
   d9d52:	6a1b      	ldr	r3, [r3, #32]
   d9d54:	9301      	str	r3, [sp, #4]
   d9d56:	bd08      	pop	{r3, pc}
   d9d58:	00030228 	.word	0x00030228

000d9d5c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d9d5c:	b508      	push	{r3, lr}
   d9d5e:	4b02      	ldr	r3, [pc, #8]	; (d9d68 <hal_i2c_available+0xc>)
   d9d60:	681b      	ldr	r3, [r3, #0]
   d9d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d9d64:	9301      	str	r3, [sp, #4]
   d9d66:	bd08      	pop	{r3, pc}
   d9d68:	00030228 	.word	0x00030228

000d9d6c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d9d6c:	b508      	push	{r3, lr}
   d9d6e:	4b02      	ldr	r3, [pc, #8]	; (d9d78 <hal_i2c_read+0xc>)
   d9d70:	681b      	ldr	r3, [r3, #0]
   d9d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d9d74:	9301      	str	r3, [sp, #4]
   d9d76:	bd08      	pop	{r3, pc}
   d9d78:	00030228 	.word	0x00030228

000d9d7c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d9d7c:	b508      	push	{r3, lr}
   d9d7e:	4b02      	ldr	r3, [pc, #8]	; (d9d88 <hal_i2c_peek+0xc>)
   d9d80:	681b      	ldr	r3, [r3, #0]
   d9d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9d84:	9301      	str	r3, [sp, #4]
   d9d86:	bd08      	pop	{r3, pc}
   d9d88:	00030228 	.word	0x00030228

000d9d8c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d9d8c:	b508      	push	{r3, lr}
   d9d8e:	4b02      	ldr	r3, [pc, #8]	; (d9d98 <hal_i2c_flush+0xc>)
   d9d90:	681b      	ldr	r3, [r3, #0]
   d9d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d9d94:	9301      	str	r3, [sp, #4]
   d9d96:	bd08      	pop	{r3, pc}
   d9d98:	00030228 	.word	0x00030228

000d9d9c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d9d9c:	b508      	push	{r3, lr}
   d9d9e:	4b02      	ldr	r3, [pc, #8]	; (d9da8 <hal_i2c_is_enabled+0xc>)
   d9da0:	681b      	ldr	r3, [r3, #0]
   d9da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d9da4:	9301      	str	r3, [sp, #4]
   d9da6:	bd08      	pop	{r3, pc}
   d9da8:	00030228 	.word	0x00030228

000d9dac <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d9dac:	b508      	push	{r3, lr}
   d9dae:	4b02      	ldr	r3, [pc, #8]	; (d9db8 <hal_i2c_init+0xc>)
   d9db0:	681b      	ldr	r3, [r3, #0]
   d9db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d9db4:	9301      	str	r3, [sp, #4]
   d9db6:	bd08      	pop	{r3, pc}
   d9db8:	00030228 	.word	0x00030228

000d9dbc <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d9dbc:	b508      	push	{r3, lr}
   d9dbe:	4b02      	ldr	r3, [pc, #8]	; (d9dc8 <hal_i2c_lock+0xc>)
   d9dc0:	681b      	ldr	r3, [r3, #0]
   d9dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d9dc4:	9301      	str	r3, [sp, #4]
   d9dc6:	bd08      	pop	{r3, pc}
   d9dc8:	00030228 	.word	0x00030228

000d9dcc <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d9dcc:	b508      	push	{r3, lr}
   d9dce:	4b02      	ldr	r3, [pc, #8]	; (d9dd8 <hal_i2c_unlock+0xc>)
   d9dd0:	681b      	ldr	r3, [r3, #0]
   d9dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d9dd4:	9301      	str	r3, [sp, #4]
   d9dd6:	bd08      	pop	{r3, pc}
   d9dd8:	00030228 	.word	0x00030228

000d9ddc <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d9ddc:	b508      	push	{r3, lr}
   d9dde:	4b02      	ldr	r3, [pc, #8]	; (d9de8 <hal_i2c_request_ex+0xc>)
   d9de0:	681b      	ldr	r3, [r3, #0]
   d9de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d9de4:	9301      	str	r3, [sp, #4]
   d9de6:	bd08      	pop	{r3, pc}
   d9de8:	00030228 	.word	0x00030228

000d9dec <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d9dec:	b508      	push	{r3, lr}
   d9dee:	4b02      	ldr	r3, [pc, #8]	; (d9df8 <inet_inet_ntop+0xc>)
   d9df0:	681b      	ldr	r3, [r3, #0]
   d9df2:	695b      	ldr	r3, [r3, #20]
   d9df4:	9301      	str	r3, [sp, #4]
   d9df6:	bd08      	pop	{r3, pc}
   d9df8:	00030264 	.word	0x00030264

000d9dfc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d9dfc:	b508      	push	{r3, lr}
   d9dfe:	4b02      	ldr	r3, [pc, #8]	; (d9e08 <netdb_freeaddrinfo+0xc>)
   d9e00:	681b      	ldr	r3, [r3, #0]
   d9e02:	689b      	ldr	r3, [r3, #8]
   d9e04:	9301      	str	r3, [sp, #4]
   d9e06:	bd08      	pop	{r3, pc}
   d9e08:	00030268 	.word	0x00030268

000d9e0c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d9e0c:	b508      	push	{r3, lr}
   d9e0e:	4b02      	ldr	r3, [pc, #8]	; (d9e18 <netdb_getaddrinfo+0xc>)
   d9e10:	681b      	ldr	r3, [r3, #0]
   d9e12:	68db      	ldr	r3, [r3, #12]
   d9e14:	9301      	str	r3, [sp, #4]
   d9e16:	bd08      	pop	{r3, pc}
   d9e18:	00030268 	.word	0x00030268

000d9e1c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d9e1c:	b508      	push	{r3, lr}
   d9e1e:	4b02      	ldr	r3, [pc, #8]	; (d9e28 <hal_spi_begin+0xc>)
   d9e20:	681b      	ldr	r3, [r3, #0]
   d9e22:	681b      	ldr	r3, [r3, #0]
   d9e24:	9301      	str	r3, [sp, #4]
   d9e26:	bd08      	pop	{r3, pc}
   d9e28:	00030230 	.word	0x00030230

000d9e2c <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   d9e2c:	b508      	push	{r3, lr}
   d9e2e:	4b02      	ldr	r3, [pc, #8]	; (d9e38 <hal_spi_set_bit_order+0xc>)
   d9e30:	681b      	ldr	r3, [r3, #0]
   d9e32:	689b      	ldr	r3, [r3, #8]
   d9e34:	9301      	str	r3, [sp, #4]
   d9e36:	bd08      	pop	{r3, pc}
   d9e38:	00030230 	.word	0x00030230

000d9e3c <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   d9e3c:	b508      	push	{r3, lr}
   d9e3e:	4b02      	ldr	r3, [pc, #8]	; (d9e48 <hal_spi_set_data_mode+0xc>)
   d9e40:	681b      	ldr	r3, [r3, #0]
   d9e42:	68db      	ldr	r3, [r3, #12]
   d9e44:	9301      	str	r3, [sp, #4]
   d9e46:	bd08      	pop	{r3, pc}
   d9e48:	00030230 	.word	0x00030230

000d9e4c <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   d9e4c:	b508      	push	{r3, lr}
   d9e4e:	4b02      	ldr	r3, [pc, #8]	; (d9e58 <hal_spi_set_clock_divider+0xc>)
   d9e50:	681b      	ldr	r3, [r3, #0]
   d9e52:	691b      	ldr	r3, [r3, #16]
   d9e54:	9301      	str	r3, [sp, #4]
   d9e56:	bd08      	pop	{r3, pc}
   d9e58:	00030230 	.word	0x00030230

000d9e5c <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d9e5c:	b508      	push	{r3, lr}
   d9e5e:	4b02      	ldr	r3, [pc, #8]	; (d9e68 <hal_spi_transfer+0xc>)
   d9e60:	681b      	ldr	r3, [r3, #0]
   d9e62:	695b      	ldr	r3, [r3, #20]
   d9e64:	9301      	str	r3, [sp, #4]
   d9e66:	bd08      	pop	{r3, pc}
   d9e68:	00030230 	.word	0x00030230

000d9e6c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d9e6c:	b508      	push	{r3, lr}
   d9e6e:	4b02      	ldr	r3, [pc, #8]	; (d9e78 <hal_spi_init+0xc>)
   d9e70:	681b      	ldr	r3, [r3, #0]
   d9e72:	69db      	ldr	r3, [r3, #28]
   d9e74:	9301      	str	r3, [sp, #4]
   d9e76:	bd08      	pop	{r3, pc}
   d9e78:	00030230 	.word	0x00030230

000d9e7c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d9e7c:	b508      	push	{r3, lr}
   d9e7e:	4b02      	ldr	r3, [pc, #8]	; (d9e88 <hal_spi_is_enabled+0xc>)
   d9e80:	681b      	ldr	r3, [r3, #0]
   d9e82:	6a1b      	ldr	r3, [r3, #32]
   d9e84:	9301      	str	r3, [sp, #4]
   d9e86:	bd08      	pop	{r3, pc}
   d9e88:	00030230 	.word	0x00030230

000d9e8c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d9e8c:	b508      	push	{r3, lr}
   d9e8e:	4b02      	ldr	r3, [pc, #8]	; (d9e98 <hal_spi_info+0xc>)
   d9e90:	681b      	ldr	r3, [r3, #0]
   d9e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d9e94:	9301      	str	r3, [sp, #4]
   d9e96:	bd08      	pop	{r3, pc}
   d9e98:	00030230 	.word	0x00030230

000d9e9c <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d9e9c:	b508      	push	{r3, lr}
   d9e9e:	4b02      	ldr	r3, [pc, #8]	; (d9ea8 <hal_spi_acquire+0xc>)
   d9ea0:	681b      	ldr	r3, [r3, #0]
   d9ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d9ea4:	9301      	str	r3, [sp, #4]
   d9ea6:	bd08      	pop	{r3, pc}
   d9ea8:	00030230 	.word	0x00030230

000d9eac <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d9eac:	b508      	push	{r3, lr}
   d9eae:	4b02      	ldr	r3, [pc, #8]	; (d9eb8 <hal_spi_release+0xc>)
   d9eb0:	681b      	ldr	r3, [r3, #0]
   d9eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d9eb4:	9301      	str	r3, [sp, #4]
   d9eb6:	bd08      	pop	{r3, pc}
   d9eb8:	00030230 	.word	0x00030230

000d9ebc <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   d9ebc:	b508      	push	{r3, lr}
   d9ebe:	4b02      	ldr	r3, [pc, #8]	; (d9ec8 <_open+0xc>)
   d9ec0:	681b      	ldr	r3, [r3, #0]
   d9ec2:	681b      	ldr	r3, [r3, #0]
   d9ec4:	9301      	str	r3, [sp, #4]
   d9ec6:	bd08      	pop	{r3, pc}
   d9ec8:	00030284 	.word	0x00030284

000d9ecc <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   d9ecc:	b508      	push	{r3, lr}
   d9ece:	4b02      	ldr	r3, [pc, #8]	; (d9ed8 <_write+0xc>)
   d9ed0:	681b      	ldr	r3, [r3, #0]
   d9ed2:	685b      	ldr	r3, [r3, #4]
   d9ed4:	9301      	str	r3, [sp, #4]
   d9ed6:	bd08      	pop	{r3, pc}
   d9ed8:	00030284 	.word	0x00030284

000d9edc <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   d9edc:	b508      	push	{r3, lr}
   d9ede:	4b02      	ldr	r3, [pc, #8]	; (d9ee8 <_read+0xc>)
   d9ee0:	681b      	ldr	r3, [r3, #0]
   d9ee2:	689b      	ldr	r3, [r3, #8]
   d9ee4:	9301      	str	r3, [sp, #4]
   d9ee6:	bd08      	pop	{r3, pc}
   d9ee8:	00030284 	.word	0x00030284

000d9eec <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   d9eec:	b508      	push	{r3, lr}
   d9eee:	4b02      	ldr	r3, [pc, #8]	; (d9ef8 <_close+0xc>)
   d9ef0:	681b      	ldr	r3, [r3, #0]
   d9ef2:	68db      	ldr	r3, [r3, #12]
   d9ef4:	9301      	str	r3, [sp, #4]
   d9ef6:	bd08      	pop	{r3, pc}
   d9ef8:	00030284 	.word	0x00030284

000d9efc <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   d9efc:	b508      	push	{r3, lr}
   d9efe:	4b02      	ldr	r3, [pc, #8]	; (d9f08 <_fstat+0xc>)
   d9f00:	681b      	ldr	r3, [r3, #0]
   d9f02:	695b      	ldr	r3, [r3, #20]
   d9f04:	9301      	str	r3, [sp, #4]
   d9f06:	bd08      	pop	{r3, pc}
   d9f08:	00030284 	.word	0x00030284

000d9f0c <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   d9f0c:	b508      	push	{r3, lr}
   d9f0e:	4b02      	ldr	r3, [pc, #8]	; (d9f18 <_lseek+0xc>)
   d9f10:	681b      	ldr	r3, [r3, #0]
   d9f12:	6a1b      	ldr	r3, [r3, #32]
   d9f14:	9301      	str	r3, [sp, #4]
   d9f16:	bd08      	pop	{r3, pc}
   d9f18:	00030284 	.word	0x00030284

000d9f1c <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   d9f1c:	b508      	push	{r3, lr}
   d9f1e:	4b02      	ldr	r3, [pc, #8]	; (d9f28 <stat+0xc>)
   d9f20:	681b      	ldr	r3, [r3, #0]
   d9f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d9f24:	9301      	str	r3, [sp, #4]
   d9f26:	bd08      	pop	{r3, pc}
   d9f28:	00030284 	.word	0x00030284

000d9f2c <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   d9f2c:	b508      	push	{r3, lr}
   d9f2e:	4b02      	ldr	r3, [pc, #8]	; (d9f38 <mkdir+0xc>)
   d9f30:	681b      	ldr	r3, [r3, #0]
   d9f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d9f34:	9301      	str	r3, [sp, #4]
   d9f36:	bd08      	pop	{r3, pc}
   d9f38:	00030284 	.word	0x00030284

000d9f3c <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   d9f3c:	b508      	push	{r3, lr}
   d9f3e:	4b02      	ldr	r3, [pc, #8]	; (d9f48 <_unlink+0xc>)
   d9f40:	681b      	ldr	r3, [r3, #0]
   d9f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d9f44:	9301      	str	r3, [sp, #4]
   d9f46:	bd08      	pop	{r3, pc}
   d9f48:	00030284 	.word	0x00030284

000d9f4c <opendir>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   d9f4c:	b508      	push	{r3, lr}
   d9f4e:	4b02      	ldr	r3, [pc, #8]	; (d9f58 <opendir+0xc>)
   d9f50:	681b      	ldr	r3, [r3, #0]
   d9f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d9f54:	9301      	str	r3, [sp, #4]
   d9f56:	bd08      	pop	{r3, pc}
   d9f58:	00030284 	.word	0x00030284

000d9f5c <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   d9f5c:	b508      	push	{r3, lr}
   d9f5e:	4b02      	ldr	r3, [pc, #8]	; (d9f68 <readdir+0xc>)
   d9f60:	681b      	ldr	r3, [r3, #0]
   d9f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d9f64:	9301      	str	r3, [sp, #4]
   d9f66:	bd08      	pop	{r3, pc}
   d9f68:	00030284 	.word	0x00030284

000d9f6c <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   d9f6c:	b508      	push	{r3, lr}
   d9f6e:	4b02      	ldr	r3, [pc, #8]	; (d9f78 <closedir+0xc>)
   d9f70:	681b      	ldr	r3, [r3, #0]
   d9f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d9f74:	9301      	str	r3, [sp, #4]
   d9f76:	bd08      	pop	{r3, pc}
   d9f78:	00030284 	.word	0x00030284

000d9f7c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d9f7c:	b508      	push	{r3, lr}
   d9f7e:	4b02      	ldr	r3, [pc, #8]	; (d9f88 <hal_usart_init+0xc>)
   d9f80:	681b      	ldr	r3, [r3, #0]
   d9f82:	681b      	ldr	r3, [r3, #0]
   d9f84:	9301      	str	r3, [sp, #4]
   d9f86:	bd08      	pop	{r3, pc}
   d9f88:	0003023c 	.word	0x0003023c

000d9f8c <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d9f8c:	b508      	push	{r3, lr}
   d9f8e:	4b02      	ldr	r3, [pc, #8]	; (d9f98 <hal_usart_end+0xc>)
   d9f90:	681b      	ldr	r3, [r3, #0]
   d9f92:	689b      	ldr	r3, [r3, #8]
   d9f94:	9301      	str	r3, [sp, #4]
   d9f96:	bd08      	pop	{r3, pc}
   d9f98:	0003023c 	.word	0x0003023c

000d9f9c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d9f9c:	b508      	push	{r3, lr}
   d9f9e:	4b02      	ldr	r3, [pc, #8]	; (d9fa8 <hal_usart_write+0xc>)
   d9fa0:	681b      	ldr	r3, [r3, #0]
   d9fa2:	68db      	ldr	r3, [r3, #12]
   d9fa4:	9301      	str	r3, [sp, #4]
   d9fa6:	bd08      	pop	{r3, pc}
   d9fa8:	0003023c 	.word	0x0003023c

000d9fac <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d9fac:	b508      	push	{r3, lr}
   d9fae:	4b02      	ldr	r3, [pc, #8]	; (d9fb8 <hal_usart_available+0xc>)
   d9fb0:	681b      	ldr	r3, [r3, #0]
   d9fb2:	691b      	ldr	r3, [r3, #16]
   d9fb4:	9301      	str	r3, [sp, #4]
   d9fb6:	bd08      	pop	{r3, pc}
   d9fb8:	0003023c 	.word	0x0003023c

000d9fbc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d9fbc:	b508      	push	{r3, lr}
   d9fbe:	4b02      	ldr	r3, [pc, #8]	; (d9fc8 <hal_usart_read+0xc>)
   d9fc0:	681b      	ldr	r3, [r3, #0]
   d9fc2:	695b      	ldr	r3, [r3, #20]
   d9fc4:	9301      	str	r3, [sp, #4]
   d9fc6:	bd08      	pop	{r3, pc}
   d9fc8:	0003023c 	.word	0x0003023c

000d9fcc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d9fcc:	b508      	push	{r3, lr}
   d9fce:	4b02      	ldr	r3, [pc, #8]	; (d9fd8 <hal_usart_peek+0xc>)
   d9fd0:	681b      	ldr	r3, [r3, #0]
   d9fd2:	699b      	ldr	r3, [r3, #24]
   d9fd4:	9301      	str	r3, [sp, #4]
   d9fd6:	bd08      	pop	{r3, pc}
   d9fd8:	0003023c 	.word	0x0003023c

000d9fdc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d9fdc:	b508      	push	{r3, lr}
   d9fde:	4b02      	ldr	r3, [pc, #8]	; (d9fe8 <hal_usart_flush+0xc>)
   d9fe0:	681b      	ldr	r3, [r3, #0]
   d9fe2:	69db      	ldr	r3, [r3, #28]
   d9fe4:	9301      	str	r3, [sp, #4]
   d9fe6:	bd08      	pop	{r3, pc}
   d9fe8:	0003023c 	.word	0x0003023c

000d9fec <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d9fec:	b508      	push	{r3, lr}
   d9fee:	4b02      	ldr	r3, [pc, #8]	; (d9ff8 <hal_usart_is_enabled+0xc>)
   d9ff0:	681b      	ldr	r3, [r3, #0]
   d9ff2:	6a1b      	ldr	r3, [r3, #32]
   d9ff4:	9301      	str	r3, [sp, #4]
   d9ff6:	bd08      	pop	{r3, pc}
   d9ff8:	0003023c 	.word	0x0003023c

000d9ffc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d9ffc:	b508      	push	{r3, lr}
   d9ffe:	4b02      	ldr	r3, [pc, #8]	; (da008 <hal_usart_available_data_for_write+0xc>)
   da000:	681b      	ldr	r3, [r3, #0]
   da002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   da004:	9301      	str	r3, [sp, #4]
   da006:	bd08      	pop	{r3, pc}
   da008:	0003023c 	.word	0x0003023c

000da00c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   da00c:	b508      	push	{r3, lr}
   da00e:	4b02      	ldr	r3, [pc, #8]	; (da018 <hal_usart_begin_config+0xc>)
   da010:	681b      	ldr	r3, [r3, #0]
   da012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   da014:	9301      	str	r3, [sp, #4]
   da016:	bd08      	pop	{r3, pc}
   da018:	0003023c 	.word	0x0003023c

000da01c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   da01c:	b508      	push	{r3, lr}
   da01e:	4b02      	ldr	r3, [pc, #8]	; (da028 <HAL_USB_USART_Init+0xc>)
   da020:	681b      	ldr	r3, [r3, #0]
   da022:	681b      	ldr	r3, [r3, #0]
   da024:	9301      	str	r3, [sp, #4]
   da026:	bd08      	pop	{r3, pc}
   da028:	0003024c 	.word	0x0003024c

000da02c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   da02c:	b508      	push	{r3, lr}
   da02e:	4b02      	ldr	r3, [pc, #8]	; (da038 <HAL_USB_USART_Begin+0xc>)
   da030:	681b      	ldr	r3, [r3, #0]
   da032:	685b      	ldr	r3, [r3, #4]
   da034:	9301      	str	r3, [sp, #4]
   da036:	bd08      	pop	{r3, pc}
   da038:	0003024c 	.word	0x0003024c

000da03c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   da03c:	b508      	push	{r3, lr}
   da03e:	4b02      	ldr	r3, [pc, #8]	; (da048 <HAL_USB_USART_End+0xc>)
   da040:	681b      	ldr	r3, [r3, #0]
   da042:	689b      	ldr	r3, [r3, #8]
   da044:	9301      	str	r3, [sp, #4]
   da046:	bd08      	pop	{r3, pc}
   da048:	0003024c 	.word	0x0003024c

000da04c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   da04c:	b508      	push	{r3, lr}
   da04e:	4b02      	ldr	r3, [pc, #8]	; (da058 <HAL_USB_USART_Available_Data+0xc>)
   da050:	681b      	ldr	r3, [r3, #0]
   da052:	691b      	ldr	r3, [r3, #16]
   da054:	9301      	str	r3, [sp, #4]
   da056:	bd08      	pop	{r3, pc}
   da058:	0003024c 	.word	0x0003024c

000da05c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   da05c:	b508      	push	{r3, lr}
   da05e:	4b02      	ldr	r3, [pc, #8]	; (da068 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   da060:	681b      	ldr	r3, [r3, #0]
   da062:	695b      	ldr	r3, [r3, #20]
   da064:	9301      	str	r3, [sp, #4]
   da066:	bd08      	pop	{r3, pc}
   da068:	0003024c 	.word	0x0003024c

000da06c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   da06c:	b508      	push	{r3, lr}
   da06e:	4b02      	ldr	r3, [pc, #8]	; (da078 <HAL_USB_USART_Receive_Data+0xc>)
   da070:	681b      	ldr	r3, [r3, #0]
   da072:	699b      	ldr	r3, [r3, #24]
   da074:	9301      	str	r3, [sp, #4]
   da076:	bd08      	pop	{r3, pc}
   da078:	0003024c 	.word	0x0003024c

000da07c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   da07c:	b508      	push	{r3, lr}
   da07e:	4b02      	ldr	r3, [pc, #8]	; (da088 <HAL_USB_USART_Send_Data+0xc>)
   da080:	681b      	ldr	r3, [r3, #0]
   da082:	69db      	ldr	r3, [r3, #28]
   da084:	9301      	str	r3, [sp, #4]
   da086:	bd08      	pop	{r3, pc}
   da088:	0003024c 	.word	0x0003024c

000da08c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   da08c:	b508      	push	{r3, lr}
   da08e:	4b02      	ldr	r3, [pc, #8]	; (da098 <HAL_USB_USART_Flush_Data+0xc>)
   da090:	681b      	ldr	r3, [r3, #0]
   da092:	6a1b      	ldr	r3, [r3, #32]
   da094:	9301      	str	r3, [sp, #4]
   da096:	bd08      	pop	{r3, pc}
   da098:	0003024c 	.word	0x0003024c

000da09c <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   da09c:	b508      	push	{r3, lr}
   da09e:	4b02      	ldr	r3, [pc, #8]	; (da0a8 <LED_SetSignalingColor+0xc>)
   da0a0:	681b      	ldr	r3, [r3, #0]
   da0a2:	685b      	ldr	r3, [r3, #4]
   da0a4:	9301      	str	r3, [sp, #4]
   da0a6:	bd08      	pop	{r3, pc}
   da0a8:	00030260 	.word	0x00030260

000da0ac <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   da0ac:	b508      	push	{r3, lr}
   da0ae:	4b02      	ldr	r3, [pc, #8]	; (da0b8 <LED_Signaling_Start+0xc>)
   da0b0:	681b      	ldr	r3, [r3, #0]
   da0b2:	689b      	ldr	r3, [r3, #8]
   da0b4:	9301      	str	r3, [sp, #4]
   da0b6:	bd08      	pop	{r3, pc}
   da0b8:	00030260 	.word	0x00030260

000da0bc <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   da0bc:	b508      	push	{r3, lr}
   da0be:	4b02      	ldr	r3, [pc, #8]	; (da0c8 <LED_Signaling_Stop+0xc>)
   da0c0:	681b      	ldr	r3, [r3, #0]
   da0c2:	68db      	ldr	r3, [r3, #12]
   da0c4:	9301      	str	r3, [sp, #4]
   da0c6:	bd08      	pop	{r3, pc}
   da0c8:	00030260 	.word	0x00030260

000da0cc <LED_SetBrightness>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
   da0cc:	b508      	push	{r3, lr}
   da0ce:	4b02      	ldr	r3, [pc, #8]	; (da0d8 <LED_SetBrightness+0xc>)
   da0d0:	681b      	ldr	r3, [r3, #0]
   da0d2:	691b      	ldr	r3, [r3, #16]
   da0d4:	9301      	str	r3, [sp, #4]
   da0d6:	bd08      	pop	{r3, pc}
   da0d8:	00030260 	.word	0x00030260

000da0dc <LED_RGB_IsOverRidden>:
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   da0dc:	b508      	push	{r3, lr}
   da0de:	4b02      	ldr	r3, [pc, #8]	; (da0e8 <LED_RGB_IsOverRidden+0xc>)
   da0e0:	681b      	ldr	r3, [r3, #0]
   da0e2:	699b      	ldr	r3, [r3, #24]
   da0e4:	9301      	str	r3, [sp, #4]
   da0e6:	bd08      	pop	{r3, pc}
   da0e8:	00030260 	.word	0x00030260

000da0ec <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   da0ec:	b508      	push	{r3, lr}
   da0ee:	4b02      	ldr	r3, [pc, #8]	; (da0f8 <LED_On+0xc>)
   da0f0:	681b      	ldr	r3, [r3, #0]
   da0f2:	69db      	ldr	r3, [r3, #28]
   da0f4:	9301      	str	r3, [sp, #4]
   da0f6:	bd08      	pop	{r3, pc}
   da0f8:	00030260 	.word	0x00030260

000da0fc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   da0fc:	b508      	push	{r3, lr}
   da0fe:	4b02      	ldr	r3, [pc, #8]	; (da108 <panic_+0xc>)
   da100:	681b      	ldr	r3, [r3, #0]
   da102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   da104:	9301      	str	r3, [sp, #4]
   da106:	bd08      	pop	{r3, pc}
   da108:	00030260 	.word	0x00030260

000da10c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   da10c:	b508      	push	{r3, lr}
   da10e:	4b02      	ldr	r3, [pc, #8]	; (da118 <log_message+0xc>)
   da110:	681b      	ldr	r3, [r3, #0]
   da112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   da114:	9301      	str	r3, [sp, #4]
   da116:	bd08      	pop	{r3, pc}
   da118:	00030260 	.word	0x00030260

000da11c <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   da11c:	b508      	push	{r3, lr}
   da11e:	4b02      	ldr	r3, [pc, #8]	; (da128 <log_message_v+0xc>)
   da120:	681b      	ldr	r3, [r3, #0]
   da122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   da124:	9301      	str	r3, [sp, #4]
   da126:	bd08      	pop	{r3, pc}
   da128:	00030260 	.word	0x00030260

000da12c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   da12c:	b508      	push	{r3, lr}
   da12e:	4b02      	ldr	r3, [pc, #8]	; (da138 <log_level_name+0xc>)
   da130:	681b      	ldr	r3, [r3, #0]
   da132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   da134:	9301      	str	r3, [sp, #4]
   da136:	bd08      	pop	{r3, pc}
   da138:	00030260 	.word	0x00030260

000da13c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   da13c:	b508      	push	{r3, lr}
   da13e:	4b02      	ldr	r3, [pc, #8]	; (da148 <log_set_callbacks+0xc>)
   da140:	681b      	ldr	r3, [r3, #0]
   da142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   da144:	9301      	str	r3, [sp, #4]
   da146:	bd08      	pop	{r3, pc}
   da148:	00030260 	.word	0x00030260

000da14c <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   da14c:	b508      	push	{r3, lr}
   da14e:	4b03      	ldr	r3, [pc, #12]	; (da15c <diag_get_source+0x10>)
   da150:	681b      	ldr	r3, [r3, #0]
   da152:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   da156:	9301      	str	r3, [sp, #4]
   da158:	bd08      	pop	{r3, pc}
   da15a:	0000      	.short	0x0000
   da15c:	00030260 	.word	0x00030260

000da160 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   da160:	b508      	push	{r3, lr}
   da162:	4b02      	ldr	r3, [pc, #8]	; (da16c <system_mode+0xc>)
   da164:	681b      	ldr	r3, [r3, #0]
   da166:	681b      	ldr	r3, [r3, #0]
   da168:	9301      	str	r3, [sp, #4]
   da16a:	bd08      	pop	{r3, pc}
   da16c:	00030220 	.word	0x00030220

000da170 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   da170:	b508      	push	{r3, lr}
   da172:	4b02      	ldr	r3, [pc, #8]	; (da17c <set_system_mode+0xc>)
   da174:	681b      	ldr	r3, [r3, #0]
   da176:	685b      	ldr	r3, [r3, #4]
   da178:	9301      	str	r3, [sp, #4]
   da17a:	bd08      	pop	{r3, pc}
   da17c:	00030220 	.word	0x00030220

000da180 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   da180:	b508      	push	{r3, lr}
   da182:	4b02      	ldr	r3, [pc, #8]	; (da18c <system_delay_ms+0xc>)
   da184:	681b      	ldr	r3, [r3, #0]
   da186:	695b      	ldr	r3, [r3, #20]
   da188:	9301      	str	r3, [sp, #4]
   da18a:	bd08      	pop	{r3, pc}
   da18c:	00030220 	.word	0x00030220

000da190 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
   da190:	b508      	push	{r3, lr}
   da192:	4b02      	ldr	r3, [pc, #8]	; (da19c <system_subscribe_event+0xc>)
   da194:	681b      	ldr	r3, [r3, #0]
   da196:	6a1b      	ldr	r3, [r3, #32]
   da198:	9301      	str	r3, [sp, #4]
   da19a:	bd08      	pop	{r3, pc}
   da19c:	00030220 	.word	0x00030220

000da1a0 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   da1a0:	b508      	push	{r3, lr}
   da1a2:	4b02      	ldr	r3, [pc, #8]	; (da1ac <system_thread_set_state+0xc>)
   da1a4:	681b      	ldr	r3, [r3, #0]
   da1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   da1a8:	9301      	str	r3, [sp, #4]
   da1aa:	bd08      	pop	{r3, pc}
   da1ac:	00030220 	.word	0x00030220

000da1b0 <system_set_flag>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
DYNALIB_FN(13, system, system_internal, void*(int item, void*))
DYNALIB_FN(14, system, system_set_flag, int(system_flag_t, uint8_t, void*))
   da1b0:	b508      	push	{r3, lr}
   da1b2:	4b02      	ldr	r3, [pc, #8]	; (da1bc <system_set_flag+0xc>)
   da1b4:	681b      	ldr	r3, [r3, #0]
   da1b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   da1b8:	9301      	str	r3, [sp, #4]
   da1ba:	bd08      	pop	{r3, pc}
   da1bc:	00030220 	.word	0x00030220

000da1c0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   da1c0:	b508      	push	{r3, lr}
   da1c2:	4b02      	ldr	r3, [pc, #8]	; (da1cc <application_thread_current+0xc>)
   da1c4:	681b      	ldr	r3, [r3, #0]
   da1c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   da1c8:	9301      	str	r3, [sp, #4]
   da1ca:	bd08      	pop	{r3, pc}
   da1cc:	00030220 	.word	0x00030220

000da1d0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   da1d0:	b508      	push	{r3, lr}
   da1d2:	4b02      	ldr	r3, [pc, #8]	; (da1dc <application_thread_invoke+0xc>)
   da1d4:	681b      	ldr	r3, [r3, #0]
   da1d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   da1d8:	9301      	str	r3, [sp, #4]
   da1da:	bd08      	pop	{r3, pc}
   da1dc:	00030220 	.word	0x00030220

000da1e0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   da1e0:	b508      	push	{r3, lr}
   da1e2:	4b02      	ldr	r3, [pc, #8]	; (da1ec <system_thread_get_state+0xc>)
   da1e4:	681b      	ldr	r3, [r3, #0]
   da1e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   da1e8:	9301      	str	r3, [sp, #4]
   da1ea:	bd08      	pop	{r3, pc}
   da1ec:	00030220 	.word	0x00030220

000da1f0 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   da1f0:	b508      	push	{r3, lr}
   da1f2:	4b02      	ldr	r3, [pc, #8]	; (da1fc <system_notify_time_changed+0xc>)
   da1f4:	681b      	ldr	r3, [r3, #0]
   da1f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   da1f8:	9301      	str	r3, [sp, #4]
   da1fa:	bd08      	pop	{r3, pc}
   da1fc:	00030220 	.word	0x00030220

000da200 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   da200:	b508      	push	{r3, lr}
   da202:	4b03      	ldr	r3, [pc, #12]	; (da210 <system_ctrl_set_app_request_handler+0x10>)
   da204:	681b      	ldr	r3, [r3, #0]
   da206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   da20a:	9301      	str	r3, [sp, #4]
   da20c:	bd08      	pop	{r3, pc}
   da20e:	0000      	.short	0x0000
   da210:	00030220 	.word	0x00030220

000da214 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   da214:	b508      	push	{r3, lr}
   da216:	4b03      	ldr	r3, [pc, #12]	; (da224 <system_ctrl_set_result+0x10>)
   da218:	681b      	ldr	r3, [r3, #0]
   da21a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   da21e:	9301      	str	r3, [sp, #4]
   da220:	bd08      	pop	{r3, pc}
   da222:	0000      	.short	0x0000
   da224:	00030220 	.word	0x00030220

000da228 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   da228:	b508      	push	{r3, lr}
   da22a:	4b03      	ldr	r3, [pc, #12]	; (da238 <system_power_management_set_config+0x10>)
   da22c:	681b      	ldr	r3, [r3, #0]
   da22e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   da232:	9301      	str	r3, [sp, #4]
   da234:	bd08      	pop	{r3, pc}
   da236:	0000      	.short	0x0000
   da238:	00030220 	.word	0x00030220

000da23c <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   da23c:	b508      	push	{r3, lr}
   da23e:	4b03      	ldr	r3, [pc, #12]	; (da24c <system_sleep_ext+0x10>)
   da240:	681b      	ldr	r3, [r3, #0]
   da242:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   da246:	9301      	str	r3, [sp, #4]
   da248:	bd08      	pop	{r3, pc}
   da24a:	0000      	.short	0x0000
   da24c:	00030220 	.word	0x00030220

000da250 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   da250:	b508      	push	{r3, lr}
   da252:	4b03      	ldr	r3, [pc, #12]	; (da260 <system_reset+0x10>)
   da254:	681b      	ldr	r3, [r3, #0]
   da256:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   da25a:	9301      	str	r3, [sp, #4]
   da25c:	bd08      	pop	{r3, pc}
   da25e:	0000      	.short	0x0000
   da260:	00030220 	.word	0x00030220

000da264 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   da264:	b508      	push	{r3, lr}
   da266:	4b02      	ldr	r3, [pc, #8]	; (da270 <spark_variable+0xc>)
   da268:	681b      	ldr	r3, [r3, #0]
   da26a:	681b      	ldr	r3, [r3, #0]
   da26c:	9301      	str	r3, [sp, #4]
   da26e:	bd08      	pop	{r3, pc}
   da270:	00030244 	.word	0x00030244

000da274 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   da274:	b508      	push	{r3, lr}
   da276:	4b02      	ldr	r3, [pc, #8]	; (da280 <spark_function+0xc>)
   da278:	681b      	ldr	r3, [r3, #0]
   da27a:	685b      	ldr	r3, [r3, #4]
   da27c:	9301      	str	r3, [sp, #4]
   da27e:	bd08      	pop	{r3, pc}
   da280:	00030244 	.word	0x00030244

000da284 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   da284:	b508      	push	{r3, lr}
   da286:	4b02      	ldr	r3, [pc, #8]	; (da290 <spark_process+0xc>)
   da288:	681b      	ldr	r3, [r3, #0]
   da28a:	689b      	ldr	r3, [r3, #8]
   da28c:	9301      	str	r3, [sp, #4]
   da28e:	bd08      	pop	{r3, pc}
   da290:	00030244 	.word	0x00030244

000da294 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   da294:	b508      	push	{r3, lr}
   da296:	4b02      	ldr	r3, [pc, #8]	; (da2a0 <spark_cloud_flag_connect+0xc>)
   da298:	681b      	ldr	r3, [r3, #0]
   da29a:	68db      	ldr	r3, [r3, #12]
   da29c:	9301      	str	r3, [sp, #4]
   da29e:	bd08      	pop	{r3, pc}
   da2a0:	00030244 	.word	0x00030244

000da2a4 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   da2a4:	b508      	push	{r3, lr}
   da2a6:	4b02      	ldr	r3, [pc, #8]	; (da2b0 <spark_cloud_flag_connected+0xc>)
   da2a8:	681b      	ldr	r3, [r3, #0]
   da2aa:	695b      	ldr	r3, [r3, #20]
   da2ac:	9301      	str	r3, [sp, #4]
   da2ae:	bd08      	pop	{r3, pc}
   da2b0:	00030244 	.word	0x00030244

000da2b4 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   da2b4:	b508      	push	{r3, lr}
   da2b6:	4b02      	ldr	r3, [pc, #8]	; (da2c0 <spark_deviceID+0xc>)
   da2b8:	681b      	ldr	r3, [r3, #0]
   da2ba:	69db      	ldr	r3, [r3, #28]
   da2bc:	9301      	str	r3, [sp, #4]
   da2be:	bd08      	pop	{r3, pc}
   da2c0:	00030244 	.word	0x00030244

000da2c4 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   da2c4:	b508      	push	{r3, lr}
   da2c6:	4b02      	ldr	r3, [pc, #8]	; (da2d0 <spark_send_event+0xc>)
   da2c8:	681b      	ldr	r3, [r3, #0]
   da2ca:	6a1b      	ldr	r3, [r3, #32]
   da2cc:	9301      	str	r3, [sp, #4]
   da2ce:	bd08      	pop	{r3, pc}
   da2d0:	00030244 	.word	0x00030244

000da2d4 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   da2d4:	b508      	push	{r3, lr}
   da2d6:	4b02      	ldr	r3, [pc, #8]	; (da2e0 <spark_subscribe+0xc>)
   da2d8:	681b      	ldr	r3, [r3, #0]
   da2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   da2dc:	9301      	str	r3, [sp, #4]
   da2de:	bd08      	pop	{r3, pc}
   da2e0:	00030244 	.word	0x00030244

000da2e4 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   da2e4:	b508      	push	{r3, lr}
   da2e6:	4b02      	ldr	r3, [pc, #8]	; (da2f0 <spark_sync_time+0xc>)
   da2e8:	681b      	ldr	r3, [r3, #0]
   da2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   da2ec:	9301      	str	r3, [sp, #4]
   da2ee:	bd08      	pop	{r3, pc}
   da2f0:	00030244 	.word	0x00030244

000da2f4 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   da2f4:	b508      	push	{r3, lr}
   da2f6:	4b02      	ldr	r3, [pc, #8]	; (da300 <spark_sync_time_pending+0xc>)
   da2f8:	681b      	ldr	r3, [r3, #0]
   da2fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   da2fc:	9301      	str	r3, [sp, #4]
   da2fe:	bd08      	pop	{r3, pc}
   da300:	00030244 	.word	0x00030244

000da304 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   da304:	b508      	push	{r3, lr}
   da306:	4b02      	ldr	r3, [pc, #8]	; (da310 <spark_sync_time_last+0xc>)
   da308:	681b      	ldr	r3, [r3, #0]
   da30a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   da30c:	9301      	str	r3, [sp, #4]
   da30e:	bd08      	pop	{r3, pc}
   da310:	00030244 	.word	0x00030244

000da314 <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   da314:	b508      	push	{r3, lr}
   da316:	4b02      	ldr	r3, [pc, #8]	; (da320 <spark_set_connection_property+0xc>)
   da318:	681b      	ldr	r3, [r3, #0]
   da31a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   da31c:	9301      	str	r3, [sp, #4]
   da31e:	bd08      	pop	{r3, pc}
   da320:	00030244 	.word	0x00030244

000da324 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   da324:	b508      	push	{r3, lr}
   da326:	4b02      	ldr	r3, [pc, #8]	; (da330 <spark_set_random_seed_from_cloud_handler+0xc>)
   da328:	681b      	ldr	r3, [r3, #0]
   da32a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   da32c:	9301      	str	r3, [sp, #4]
   da32e:	bd08      	pop	{r3, pc}
   da330:	00030244 	.word	0x00030244

000da334 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   da334:	b508      	push	{r3, lr}
   da336:	4b02      	ldr	r3, [pc, #8]	; (da340 <spark_cloud_disconnect+0xc>)
   da338:	681b      	ldr	r3, [r3, #0]
   da33a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   da33c:	9301      	str	r3, [sp, #4]
   da33e:	bd08      	pop	{r3, pc}
   da340:	00030244 	.word	0x00030244

000da344 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   da344:	b508      	push	{r3, lr}
   da346:	4b02      	ldr	r3, [pc, #8]	; (da350 <network_connect+0xc>)
   da348:	681b      	ldr	r3, [r3, #0]
   da34a:	685b      	ldr	r3, [r3, #4]
   da34c:	9301      	str	r3, [sp, #4]
   da34e:	bd08      	pop	{r3, pc}
   da350:	00030240 	.word	0x00030240

000da354 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   da354:	b508      	push	{r3, lr}
   da356:	4b02      	ldr	r3, [pc, #8]	; (da360 <network_connecting+0xc>)
   da358:	681b      	ldr	r3, [r3, #0]
   da35a:	689b      	ldr	r3, [r3, #8]
   da35c:	9301      	str	r3, [sp, #4]
   da35e:	bd08      	pop	{r3, pc}
   da360:	00030240 	.word	0x00030240

000da364 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   da364:	b508      	push	{r3, lr}
   da366:	4b02      	ldr	r3, [pc, #8]	; (da370 <network_disconnect+0xc>)
   da368:	681b      	ldr	r3, [r3, #0]
   da36a:	68db      	ldr	r3, [r3, #12]
   da36c:	9301      	str	r3, [sp, #4]
   da36e:	bd08      	pop	{r3, pc}
   da370:	00030240 	.word	0x00030240

000da374 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   da374:	b508      	push	{r3, lr}
   da376:	4b02      	ldr	r3, [pc, #8]	; (da380 <network_ready+0xc>)
   da378:	681b      	ldr	r3, [r3, #0]
   da37a:	691b      	ldr	r3, [r3, #16]
   da37c:	9301      	str	r3, [sp, #4]
   da37e:	bd08      	pop	{r3, pc}
   da380:	00030240 	.word	0x00030240

000da384 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   da384:	b508      	push	{r3, lr}
   da386:	4b02      	ldr	r3, [pc, #8]	; (da390 <network_on+0xc>)
   da388:	681b      	ldr	r3, [r3, #0]
   da38a:	695b      	ldr	r3, [r3, #20]
   da38c:	9301      	str	r3, [sp, #4]
   da38e:	bd08      	pop	{r3, pc}
   da390:	00030240 	.word	0x00030240

000da394 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   da394:	b508      	push	{r3, lr}
   da396:	4b02      	ldr	r3, [pc, #8]	; (da3a0 <network_off+0xc>)
   da398:	681b      	ldr	r3, [r3, #0]
   da39a:	699b      	ldr	r3, [r3, #24]
   da39c:	9301      	str	r3, [sp, #4]
   da39e:	bd08      	pop	{r3, pc}
   da3a0:	00030240 	.word	0x00030240

000da3a4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   da3a4:	b508      	push	{r3, lr}
   da3a6:	4b02      	ldr	r3, [pc, #8]	; (da3b0 <network_listen+0xc>)
   da3a8:	681b      	ldr	r3, [r3, #0]
   da3aa:	69db      	ldr	r3, [r3, #28]
   da3ac:	9301      	str	r3, [sp, #4]
   da3ae:	bd08      	pop	{r3, pc}
   da3b0:	00030240 	.word	0x00030240

000da3b4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   da3b4:	b508      	push	{r3, lr}
   da3b6:	4b02      	ldr	r3, [pc, #8]	; (da3c0 <network_listening+0xc>)
   da3b8:	681b      	ldr	r3, [r3, #0]
   da3ba:	6a1b      	ldr	r3, [r3, #32]
   da3bc:	9301      	str	r3, [sp, #4]
   da3be:	bd08      	pop	{r3, pc}
   da3c0:	00030240 	.word	0x00030240

000da3c4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   da3c4:	b508      	push	{r3, lr}
   da3c6:	4b02      	ldr	r3, [pc, #8]	; (da3d0 <network_set_listen_timeout+0xc>)
   da3c8:	681b      	ldr	r3, [r3, #0]
   da3ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   da3cc:	9301      	str	r3, [sp, #4]
   da3ce:	bd08      	pop	{r3, pc}
   da3d0:	00030240 	.word	0x00030240

000da3d4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   da3d4:	b508      	push	{r3, lr}
   da3d6:	4b02      	ldr	r3, [pc, #8]	; (da3e0 <network_get_listen_timeout+0xc>)
   da3d8:	681b      	ldr	r3, [r3, #0]
   da3da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   da3dc:	9301      	str	r3, [sp, #4]
   da3de:	bd08      	pop	{r3, pc}
   da3e0:	00030240 	.word	0x00030240

000da3e4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   da3e4:	b508      	push	{r3, lr}
   da3e6:	4b02      	ldr	r3, [pc, #8]	; (da3f0 <network_is_on+0xc>)
   da3e8:	681b      	ldr	r3, [r3, #0]
   da3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   da3ec:	9301      	str	r3, [sp, #4]
   da3ee:	bd08      	pop	{r3, pc}
   da3f0:	00030240 	.word	0x00030240

000da3f4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   da3f4:	b508      	push	{r3, lr}
   da3f6:	4b02      	ldr	r3, [pc, #8]	; (da400 <network_is_off+0xc>)
   da3f8:	681b      	ldr	r3, [r3, #0]
   da3fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   da3fc:	9301      	str	r3, [sp, #4]
   da3fe:	bd08      	pop	{r3, pc}
   da400:	00030240 	.word	0x00030240

000da404 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   da404:	b508      	push	{r3, lr}
   da406:	4b02      	ldr	r3, [pc, #8]	; (da410 <malloc+0xc>)
   da408:	681b      	ldr	r3, [r3, #0]
   da40a:	681b      	ldr	r3, [r3, #0]
   da40c:	9301      	str	r3, [sp, #4]
   da40e:	bd08      	pop	{r3, pc}
   da410:	0003021c 	.word	0x0003021c

000da414 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   da414:	b508      	push	{r3, lr}
   da416:	4b02      	ldr	r3, [pc, #8]	; (da420 <free+0xc>)
   da418:	681b      	ldr	r3, [r3, #0]
   da41a:	685b      	ldr	r3, [r3, #4]
   da41c:	9301      	str	r3, [sp, #4]
   da41e:	bd08      	pop	{r3, pc}
   da420:	0003021c 	.word	0x0003021c

000da424 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   da424:	b508      	push	{r3, lr}
   da426:	4b02      	ldr	r3, [pc, #8]	; (da430 <realloc+0xc>)
   da428:	681b      	ldr	r3, [r3, #0]
   da42a:	689b      	ldr	r3, [r3, #8]
   da42c:	9301      	str	r3, [sp, #4]
   da42e:	bd08      	pop	{r3, pc}
   da430:	0003021c 	.word	0x0003021c

000da434 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   da434:	b508      	push	{r3, lr}
   da436:	4b02      	ldr	r3, [pc, #8]	; (da440 <siprintf+0xc>)
   da438:	681b      	ldr	r3, [r3, #0]
   da43a:	691b      	ldr	r3, [r3, #16]
   da43c:	9301      	str	r3, [sp, #4]
   da43e:	bd08      	pop	{r3, pc}
   da440:	0003021c 	.word	0x0003021c

000da444 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   da444:	b508      	push	{r3, lr}
   da446:	4b02      	ldr	r3, [pc, #8]	; (da450 <sscanf+0xc>)
   da448:	681b      	ldr	r3, [r3, #0]
   da44a:	695b      	ldr	r3, [r3, #20]
   da44c:	9301      	str	r3, [sp, #4]
   da44e:	bd08      	pop	{r3, pc}
   da450:	0003021c 	.word	0x0003021c

000da454 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   da454:	b508      	push	{r3, lr}
   da456:	4b02      	ldr	r3, [pc, #8]	; (da460 <snprintf+0xc>)
   da458:	681b      	ldr	r3, [r3, #0]
   da45a:	69db      	ldr	r3, [r3, #28]
   da45c:	9301      	str	r3, [sp, #4]
   da45e:	bd08      	pop	{r3, pc}
   da460:	0003021c 	.word	0x0003021c

000da464 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   da464:	b508      	push	{r3, lr}
   da466:	4b02      	ldr	r3, [pc, #8]	; (da470 <vsnprintf+0xc>)
   da468:	681b      	ldr	r3, [r3, #0]
   da46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   da46c:	9301      	str	r3, [sp, #4]
   da46e:	bd08      	pop	{r3, pc}
   da470:	0003021c 	.word	0x0003021c

000da474 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   da474:	b508      	push	{r3, lr}
   da476:	4b02      	ldr	r3, [pc, #8]	; (da480 <abort+0xc>)
   da478:	681b      	ldr	r3, [r3, #0]
   da47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   da47c:	9301      	str	r3, [sp, #4]
   da47e:	bd08      	pop	{r3, pc}
   da480:	0003021c 	.word	0x0003021c

000da484 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   da484:	b508      	push	{r3, lr}
   da486:	4b02      	ldr	r3, [pc, #8]	; (da490 <_malloc_r+0xc>)
   da488:	681b      	ldr	r3, [r3, #0]
   da48a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   da48c:	9301      	str	r3, [sp, #4]
   da48e:	bd08      	pop	{r3, pc}
   da490:	0003021c 	.word	0x0003021c

000da494 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   da494:	b508      	push	{r3, lr}
   da496:	4b02      	ldr	r3, [pc, #8]	; (da4a0 <__errno+0xc>)
   da498:	681b      	ldr	r3, [r3, #0]
   da49a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   da49c:	9301      	str	r3, [sp, #4]
   da49e:	bd08      	pop	{r3, pc}
   da4a0:	0003021c 	.word	0x0003021c

000da4a4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   da4a4:	b508      	push	{r3, lr}
   da4a6:	4b02      	ldr	r3, [pc, #8]	; (da4b0 <newlib_impure_ptr_callback+0xc>)
   da4a8:	681b      	ldr	r3, [r3, #0]
   da4aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   da4ac:	9301      	str	r3, [sp, #4]
   da4ae:	bd08      	pop	{r3, pc}
   da4b0:	0003021c 	.word	0x0003021c

000da4b4 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   da4b4:	b508      	push	{r3, lr}
   da4b6:	4b02      	ldr	r3, [pc, #8]	; (da4c0 <strftime+0xc>)
   da4b8:	681b      	ldr	r3, [r3, #0]
   da4ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   da4bc:	9301      	str	r3, [sp, #4]
   da4be:	bd08      	pop	{r3, pc}
   da4c0:	0003021c 	.word	0x0003021c

000da4c4 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   da4c4:	b508      	push	{r3, lr}
   da4c6:	4b02      	ldr	r3, [pc, #8]	; (da4d0 <localtime_r+0xc>)
   da4c8:	681b      	ldr	r3, [r3, #0]
   da4ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   da4cc:	9301      	str	r3, [sp, #4]
   da4ce:	bd08      	pop	{r3, pc}
   da4d0:	0003021c 	.word	0x0003021c

000da4d4 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   da4d4:	b508      	push	{r3, lr}
   da4d6:	4b02      	ldr	r3, [pc, #8]	; (da4e0 <gmtime_r+0xc>)
   da4d8:	681b      	ldr	r3, [r3, #0]
   da4da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   da4dc:	9301      	str	r3, [sp, #4]
   da4de:	bd08      	pop	{r3, pc}
   da4e0:	0003021c 	.word	0x0003021c

000da4e4 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   da4e4:	b508      	push	{r3, lr}
   da4e6:	4b02      	ldr	r3, [pc, #8]	; (da4f0 <mktime+0xc>)
   da4e8:	681b      	ldr	r3, [r3, #0]
   da4ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   da4ec:	9301      	str	r3, [sp, #4]
   da4ee:	bd08      	pop	{r3, pc}
   da4f0:	0003021c 	.word	0x0003021c

000da4f4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   da4f4:	2100      	movs	r1, #0
   da4f6:	f7ff be43 	b.w	da180 <system_delay_ms>

000da4fa <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   da4fa:	b510      	push	{r4, lr}
      if (_M_empty())
   da4fc:	6883      	ldr	r3, [r0, #8]
   da4fe:	4604      	mov	r4, r0
   da500:	b90b      	cbnz	r3, da506 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   da502:	f003 fa93 	bl	dda2c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   da506:	68c3      	ldr	r3, [r0, #12]
   da508:	4798      	blx	r3
      if (_M_manager)
   da50a:	68a3      	ldr	r3, [r4, #8]
   da50c:	b11b      	cbz	r3, da516 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   da50e:	2203      	movs	r2, #3
   da510:	4621      	mov	r1, r4
   da512:	4620      	mov	r0, r4
   da514:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   da516:	4620      	mov	r0, r4
   da518:	2110      	movs	r1, #16
}
   da51a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   da51e:	f003 ba79 	b.w	dda14 <_ZdlPvj>

000da522 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   da522:	680b      	ldr	r3, [r1, #0]
   da524:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   da526:	b113      	cbz	r3, da52e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   da528:	685a      	ldr	r2, [r3, #4]
   da52a:	3201      	adds	r2, #1
   da52c:	605a      	str	r2, [r3, #4]
      }
   da52e:	4770      	bx	lr

000da530 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   da530:	4802      	ldr	r0, [pc, #8]	; (da53c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   da532:	2300      	movs	r3, #0
   da534:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   da536:	f7ff bb29 	b.w	d9b8c <os_mutex_recursive_create>
   da53a:	bf00      	nop
   da53c:	2003e46c 	.word	0x2003e46c

000da540 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   da540:	2200      	movs	r2, #0
   da542:	6840      	ldr	r0, [r0, #4]
   da544:	4611      	mov	r1, r2
   da546:	f7ff bf15 	b.w	da374 <network_ready>

000da54a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   da54a:	2200      	movs	r2, #0
   da54c:	6840      	ldr	r0, [r0, #4]
   da54e:	4611      	mov	r1, r2
   da550:	f7ff bf30 	b.w	da3b4 <network_listening>

000da554 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   da554:	2200      	movs	r2, #0
   da556:	6840      	ldr	r0, [r0, #4]
   da558:	4611      	mov	r1, r2
   da55a:	f7ff bf3b 	b.w	da3d4 <network_get_listen_timeout>

000da55e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   da55e:	6840      	ldr	r0, [r0, #4]
   da560:	2200      	movs	r2, #0
   da562:	f7ff bf2f 	b.w	da3c4 <network_set_listen_timeout>

000da566 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   da566:	6840      	ldr	r0, [r0, #4]
   da568:	2200      	movs	r2, #0
   da56a:	f081 0101 	eor.w	r1, r1, #1
   da56e:	f7ff bf19 	b.w	da3a4 <network_listen>

000da572 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   da572:	2300      	movs	r3, #0
   da574:	6840      	ldr	r0, [r0, #4]
   da576:	461a      	mov	r2, r3
   da578:	4619      	mov	r1, r3
   da57a:	f7ff bf0b 	b.w	da394 <network_off>

000da57e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   da57e:	2300      	movs	r3, #0
   da580:	6840      	ldr	r0, [r0, #4]
   da582:	461a      	mov	r2, r3
   da584:	4619      	mov	r1, r3
   da586:	f7ff befd 	b.w	da384 <network_on>

000da58a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   da58a:	2200      	movs	r2, #0
   da58c:	6840      	ldr	r0, [r0, #4]
   da58e:	4611      	mov	r1, r2
   da590:	f7ff bee0 	b.w	da354 <network_connecting>

000da594 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   da594:	6840      	ldr	r0, [r0, #4]
   da596:	2200      	movs	r2, #0
   da598:	2102      	movs	r1, #2
   da59a:	f7ff bee3 	b.w	da364 <network_disconnect>

000da59e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   da59e:	2300      	movs	r3, #0
   da5a0:	6840      	ldr	r0, [r0, #4]
   da5a2:	461a      	mov	r2, r3
   da5a4:	f7ff bece 	b.w	da344 <network_connect>

000da5a8 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   da5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
   da5aa:	4b1b      	ldr	r3, [pc, #108]	; (da618 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   da5ac:	6003      	str	r3, [r0, #0]
   da5ae:	2500      	movs	r5, #0
   da5b0:	460f      	mov	r7, r1
   da5b2:	3330      	adds	r3, #48	; 0x30
   da5b4:	2618      	movs	r6, #24
   da5b6:	e9c0 5502 	strd	r5, r5, [r0, #8]
   da5ba:	b089      	sub	sp, #36	; 0x24
   da5bc:	6043      	str	r3, [r0, #4]
   da5be:	4632      	mov	r2, r6
   da5c0:	4629      	mov	r1, r5
   da5c2:	4604      	mov	r4, r0
   da5c4:	3010      	adds	r0, #16
   da5c6:	f005 fb87 	bl	dfcd8 <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   da5ca:	6878      	ldr	r0, [r7, #4]
   da5cc:	462a      	mov	r2, r5
   da5ce:	4629      	mov	r1, r5
   da5d0:	f7ff fed0 	bl	da374 <network_ready>
   da5d4:	b918      	cbnz	r0, da5de <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   da5d6:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   da5d8:	4620      	mov	r0, r4
   da5da:	b009      	add	sp, #36	; 0x24
   da5dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   da5de:	4629      	mov	r1, r5
   da5e0:	4632      	mov	r2, r6
   da5e2:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   da5e4:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   da5e8:	f005 fb76 	bl	dfcd8 <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   da5ec:	a902      	add	r1, sp, #8
   da5ee:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   da5f0:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   da5f4:	f7ff fa5a 	bl	d9aac <cellular_signal>
   da5f8:	b110      	cbz	r0, da600 <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   da5fa:	2301      	movs	r3, #1
   da5fc:	60a3      	str	r3, [r4, #8]
            return sig;
   da5fe:	e7eb      	b.n	da5d8 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   da600:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   da602:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   da604:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   da606:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   da608:	b90b      	cbnz	r3, da60e <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   da60a:	2302      	movs	r3, #2
   da60c:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   da60e:	a902      	add	r1, sp, #8
   da610:	4620      	mov	r0, r4
   da612:	f000 f8c0 	bl	da796 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   da616:	e7df      	b.n	da5d8 <_ZN5spark13CellularClass4RSSIEv+0x30>
   da618:	000e10b8 	.word	0x000e10b8

000da61c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   da61c:	4b08      	ldr	r3, [pc, #32]	; (da640 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   da61e:	b510      	push	{r4, lr}
   da620:	2428      	movs	r4, #40	; 0x28
   da622:	4622      	mov	r2, r4
   da624:	4618      	mov	r0, r3
   da626:	2100      	movs	r1, #0
   da628:	f005 fb56 	bl	dfcd8 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   da62c:	4b05      	ldr	r3, [pc, #20]	; (da644 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   da62e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   da630:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   da634:	6042      	str	r2, [r0, #4]
   da636:	2204      	movs	r2, #4
   da638:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   da63a:	4a03      	ldr	r2, [pc, #12]	; (da648 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   da63c:	601a      	str	r2, [r3, #0]
   da63e:	bd10      	pop	{r4, pc}
   da640:	2003e478 	.word	0x2003e478
   da644:	2003e470 	.word	0x2003e470
   da648:	000e107c 	.word	0x000e107c

000da64c <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   da64c:	4770      	bx	lr

000da64e <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   da64e:	7d00      	ldrb	r0, [r0, #20]
   da650:	4770      	bx	lr

000da652 <_ZNK14CellularSignal7isValidEv>:
#pragma GCC diagnostic pop

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   da652:	7d03      	ldrb	r3, [r0, #20]
   da654:	b14b      	cbz	r3, da66a <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   da656:	6983      	ldr	r3, [r0, #24]
   da658:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   da65c:	d005      	beq.n	da66a <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   da65e:	6a00      	ldr	r0, [r0, #32]
   da660:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   da664:	bf18      	it	ne
   da666:	2001      	movne	r0, #1
   da668:	4770      	bx	lr
   da66a:	2000      	movs	r0, #0
            // Hence, `isValid()` can return "true" for invalid signal value. To add a note in docs.
            (sig_.rat == NET_ACCESS_TECHNOLOGY_GSM || sig_.qual != std::numeric_limits<int32_t>::min()));
#else
            sig_.qual != std::numeric_limits<int32_t>::min());
#endif
}
   da66c:	4770      	bx	lr

000da66e <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   da66e:	6803      	ldr	r3, [r0, #0]
   da670:	6a1b      	ldr	r3, [r3, #32]
   da672:	4718      	bx	r3

000da674 <_ZN14CellularSignalD0Ev>:
   da674:	b510      	push	{r4, lr}
   da676:	2128      	movs	r1, #40	; 0x28
   da678:	4604      	mov	r4, r0
   da67a:	f003 f9cb 	bl	dda14 <_ZdlPvj>
   da67e:	4620      	mov	r0, r4
   da680:	bd10      	pop	{r4, pc}
	...

000da684 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   da684:	7d03      	ldrb	r3, [r0, #20]
   da686:	b17b      	cbz	r3, da6a8 <_ZNK14CellularSignal11getStrengthEv+0x24>
   da688:	69c3      	ldr	r3, [r0, #28]
   da68a:	2b00      	cmp	r3, #0
   da68c:	db0c      	blt.n	da6a8 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   da68e:	ee07 3a90 	vmov	s15, r3
   da692:	ed9f 7a07 	vldr	s14, [pc, #28]	; da6b0 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   da696:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   da69a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   da69e:	eddf 7a05 	vldr	s15, [pc, #20]	; da6b4 <_ZNK14CellularSignal11getStrengthEv+0x30>
   da6a2:	ee20 0a27 	vmul.f32	s0, s0, s15
   da6a6:	4770      	bx	lr
    return -1.0f;
   da6a8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   da6ac:	4770      	bx	lr
   da6ae:	bf00      	nop
   da6b0:	477fff00 	.word	0x477fff00
   da6b4:	42c80000 	.word	0x42c80000

000da6b8 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   da6b8:	7d03      	ldrb	r3, [r0, #20]
   da6ba:	b163      	cbz	r3, da6d6 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   da6bc:	6983      	ldr	r3, [r0, #24]
   da6be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   da6c2:	d008      	beq.n	da6d6 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   da6c4:	ee07 3a90 	vmov	s15, r3
   da6c8:	ed9f 7a04 	vldr	s14, [pc, #16]	; da6dc <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   da6cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   da6d0:	ee87 0a87 	vdiv.f32	s0, s15, s14
   da6d4:	4770      	bx	lr
    return 0.0f;
   da6d6:	ed9f 0a02 	vldr	s0, [pc, #8]	; da6e0 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   da6da:	4770      	bx	lr
   da6dc:	42c80000 	.word	0x42c80000
   da6e0:	00000000 	.word	0x00000000

000da6e4 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   da6e4:	7d03      	ldrb	r3, [r0, #20]
   da6e6:	b17b      	cbz	r3, da708 <_ZNK14CellularSignal10getQualityEv+0x24>
   da6e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
   da6ea:	2b00      	cmp	r3, #0
   da6ec:	db0c      	blt.n	da708 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   da6ee:	ee07 3a90 	vmov	s15, r3
   da6f2:	ed9f 7a07 	vldr	s14, [pc, #28]	; da710 <_ZNK14CellularSignal10getQualityEv+0x2c>
   da6f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   da6fa:	ee87 0a87 	vdiv.f32	s0, s15, s14
   da6fe:	eddf 7a05 	vldr	s15, [pc, #20]	; da714 <_ZNK14CellularSignal10getQualityEv+0x30>
   da702:	ee20 0a27 	vmul.f32	s0, s0, s15
   da706:	4770      	bx	lr
    return -1.0f;
   da708:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   da70c:	4770      	bx	lr
   da70e:	bf00      	nop
   da710:	477fff00 	.word	0x477fff00
   da714:	42c80000 	.word	0x42c80000

000da718 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   da718:	7d03      	ldrb	r3, [r0, #20]
   da71a:	b163      	cbz	r3, da736 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   da71c:	6a03      	ldr	r3, [r0, #32]
   da71e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   da722:	d008      	beq.n	da736 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   da724:	ee07 3a90 	vmov	s15, r3
   da728:	ed9f 7a04 	vldr	s14, [pc, #16]	; da73c <_ZNK14CellularSignal15getQualityValueEv+0x24>
   da72c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   da730:	ee87 0a87 	vdiv.f32	s0, s15, s14
   da734:	4770      	bx	lr
    return 0.0f;
   da736:	ed9f 0a02 	vldr	s0, [pc, #8]	; da740 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   da73a:	4770      	bx	lr
   da73c:	42c80000 	.word	0x42c80000
   da740:	00000000 	.word	0x00000000

000da744 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   da744:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   da746:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   da748:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   da74a:	da0a      	bge.n	da762 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   da74c:	212d      	movs	r1, #45	; 0x2d
   da74e:	f002 f8d4 	bl	dc8fa <_ZN5Print5printEc>
            val = -n;
   da752:	4261      	negs	r1, r4
            t = print('-');
   da754:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   da756:	220a      	movs	r2, #10
   da758:	4630      	mov	r0, r6
   da75a:	f002 f8dd 	bl	dc918 <_ZN5Print11printNumberEmh>
    }
}
   da75e:	4428      	add	r0, r5
   da760:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   da762:	4621      	mov	r1, r4
        size_t t = 0;
   da764:	2500      	movs	r5, #0
   da766:	e7f6      	b.n	da756 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000da768 <_ZNK14CellularSignal7printToER5Print>:
{
   da768:	b570      	push	{r4, r5, r6, lr}
   da76a:	460c      	mov	r4, r1
   da76c:	4605      	mov	r5, r0
   da76e:	6881      	ldr	r1, [r0, #8]
   da770:	4620      	mov	r0, r4
   da772:	f7ff ffe7 	bl	da744 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print(',');
   da776:	212c      	movs	r1, #44	; 0x2c
   da778:	4606      	mov	r6, r0
   da77a:	4620      	mov	r0, r4
   da77c:	f002 f8bd 	bl	dc8fa <_ZN5Print5printEc>
   da780:	68e9      	ldr	r1, [r5, #12]
   da782:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   da784:	4620      	mov	r0, r4
   da786:	f7ff ffdd 	bl	da744 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
}
   da78a:	4430      	add	r0, r6
   da78c:	bd70      	pop	{r4, r5, r6, pc}

000da78e <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   da78e:	f1a0 0004 	sub.w	r0, r0, #4
   da792:	f7ff bfe9 	b.w	da768 <_ZNK14CellularSignal7printToER5Print>

000da796 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   da796:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   da798:	460d      	mov	r5, r1
   da79a:	f100 0410 	add.w	r4, r0, #16
   da79e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da7a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da7a2:	e895 0003 	ldmia.w	r5, {r0, r1}
   da7a6:	e884 0003 	stmia.w	r4, {r0, r1}
}
   da7aa:	2001      	movs	r0, #1
   da7ac:	bd30      	pop	{r4, r5, pc}

000da7ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   da7ae:	4770      	bx	lr

000da7b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   da7b0:	2000      	movs	r0, #0
   da7b2:	4770      	bx	lr

000da7b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   da7b4:	b510      	push	{r4, lr}
   da7b6:	2110      	movs	r1, #16
   da7b8:	4604      	mov	r4, r0
   da7ba:	f003 f92b 	bl	dda14 <_ZdlPvj>
   da7be:	4620      	mov	r0, r4
   da7c0:	bd10      	pop	{r4, pc}

000da7c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   da7c2:	b508      	push	{r3, lr}
      { delete this; }
   da7c4:	f7ff fff6 	bl	da7b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   da7c8:	bd08      	pop	{r3, pc}

000da7ca <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   da7ca:	b530      	push	{r4, r5, lr}
        type_(type) {
   da7cc:	2200      	movs	r2, #0
   da7ce:	f64f 749c 	movw	r4, #65436	; 0xff9c
   da7d2:	6002      	str	r2, [r0, #0]
   da7d4:	8084      	strh	r4, [r0, #4]
   da7d6:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   da7d8:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   da7da:	680c      	ldr	r4, [r1, #0]
   da7dc:	8085      	strh	r5, [r0, #4]
   da7de:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   da7e0:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   da7e2:	bd30      	pop	{r4, r5, pc}

000da7e4 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   da7e4:	b510      	push	{r4, lr}
   da7e6:	4604      	mov	r4, r0
    free((void*)msg_);
   da7e8:	6800      	ldr	r0, [r0, #0]
   da7ea:	f7ff fe13 	bl	da414 <free>
}
   da7ee:	4620      	mov	r0, r4
   da7f0:	bd10      	pop	{r4, pc}

000da7f2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   da7f2:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   da7f4:	68c4      	ldr	r4, [r0, #12]
   da7f6:	b1f4      	cbz	r4, da836 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   da7f8:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   da7fa:	2b02      	cmp	r3, #2
   da7fc:	d103      	bne.n	da806 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   da7fe:	f104 000c 	add.w	r0, r4, #12
   da802:	f7ff ffef 	bl	da7e4 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   da806:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   da808:	b135      	cbz	r5, da818 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   da80a:	4628      	mov	r0, r5
   da80c:	f7fa fa9a 	bl	d4d44 <_ZNSt14_Function_baseD1Ev>
   da810:	2110      	movs	r1, #16
   da812:	4628      	mov	r0, r5
   da814:	f003 f8fe 	bl	dda14 <_ZdlPvj>
   da818:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   da81a:	b135      	cbz	r5, da82a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   da81c:	4628      	mov	r0, r5
   da81e:	f7fa fa91 	bl	d4d44 <_ZNSt14_Function_baseD1Ev>
   da822:	2110      	movs	r1, #16
   da824:	4628      	mov	r0, r5
   da826:	f003 f8f5 	bl	dda14 <_ZdlPvj>
   da82a:	4620      	mov	r0, r4
   da82c:	2114      	movs	r1, #20
   da82e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   da832:	f003 b8ef 	b.w	dda14 <_ZdlPvj>
   da836:	bd38      	pop	{r3, r4, r5, pc}

000da838 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   da838:	b510      	push	{r4, lr}
   da83a:	b088      	sub	sp, #32
   da83c:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   da83e:	4668      	mov	r0, sp
   da840:	f002 f9f9 	bl	dcc36 <_ZN6StringC1EPKc>
    return (*fn)(p);
   da844:	4669      	mov	r1, sp
   da846:	a804      	add	r0, sp, #16
   da848:	f002 fa40 	bl	dcccc <_ZN6StringC1ERKS_>
   da84c:	a804      	add	r0, sp, #16
   da84e:	47a0      	blx	r4
   da850:	4604      	mov	r4, r0
   da852:	a804      	add	r0, sp, #16
   da854:	f002 f9a4 	bl	dcba0 <_ZN6StringD1Ev>
    String p(param);
   da858:	4668      	mov	r0, sp
   da85a:	f002 f9a1 	bl	dcba0 <_ZN6StringD1Ev>
}
   da85e:	4620      	mov	r0, r4
   da860:	b008      	add	sp, #32
   da862:	bd10      	pop	{r4, pc}

000da864 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   da864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   da866:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   da868:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   da86c:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   da86e:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   da870:	461a      	mov	r2, r3
   da872:	4669      	mov	r1, sp
   da874:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   da876:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   da87a:	f8ad 4000 	strh.w	r4, [sp]
   da87e:	f7ff fcf9 	bl	da274 <spark_function>
}
   da882:	b004      	add	sp, #16
   da884:	bd10      	pop	{r4, pc}

000da886 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   da886:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   da888:	230c      	movs	r3, #12
   da88a:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   da88e:	6803      	ldr	r3, [r0, #0]
   da890:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   da894:	7a03      	ldrb	r3, [r0, #8]
   da896:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   da89a:	6843      	ldr	r3, [r0, #4]
   da89c:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   da89e:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   da8a0:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   da8a2:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   da8a6:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   da8a8:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   da8ac:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   da8b0:	f7ff fd40 	bl	da334 <spark_cloud_disconnect>
}
   da8b4:	b005      	add	sp, #20
   da8b6:	f85d fb04 	ldr.w	pc, [sp], #4

000da8ba <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>:

void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
   da8ba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   da8bc:	220c      	movs	r2, #12
   da8be:	f8ad 2004 	strh.w	r2, [sp, #4]
    opts.flags = flags_;
   da8c2:	6802      	ldr	r2, [r0, #0]
   da8c4:	f88d 2006 	strb.w	r2, [sp, #6]
    opts.graceful = graceful_;
   da8c8:	7a02      	ldrb	r2, [r0, #8]
   da8ca:	f88d 2007 	strb.w	r2, [sp, #7]
    opts.timeout = timeout_;
   da8ce:	6842      	ldr	r2, [r0, #4]
   da8d0:	9202      	str	r2, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   da8d2:	2300      	movs	r3, #0
    opts.clear_session = clearSession_;
   da8d4:	7a42      	ldrb	r2, [r0, #9]
   da8d6:	f88d 200c 	strb.w	r2, [sp, #12]
    const auto opts = options.toSystemOptions();
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   da8da:	4619      	mov	r1, r3
   da8dc:	aa01      	add	r2, sp, #4
   da8de:	2002      	movs	r0, #2
    spark_cloud_disconnect_options opts = {};
   da8e0:	f8ad 300d 	strh.w	r3, [sp, #13]
   da8e4:	f88d 300f 	strb.w	r3, [sp, #15]
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   da8e8:	f7ff fd14 	bl	da314 <spark_set_connection_property>
}
   da8ec:	b005      	add	sp, #20
   da8ee:	f85d fb04 	ldr.w	pc, [sp], #4

000da8f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   da8f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   da8f4:	460e      	mov	r6, r1
   da8f6:	4604      	mov	r4, r0
   da8f8:	f856 3b04 	ldr.w	r3, [r6], #4
   da8fc:	9300      	str	r3, [sp, #0]
   da8fe:	460d      	mov	r5, r1
   da900:	a801      	add	r0, sp, #4
   da902:	4631      	mov	r1, r6
   da904:	f7ff fe0d 	bl	da522 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   da908:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   da90a:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   da90c:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   da90e:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   da910:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   da912:	2300      	movs	r3, #0
   da914:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   da916:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   da918:	f7fa ff04 	bl	d5724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da91c:	4630      	mov	r0, r6
   da91e:	f7fa ff01 	bl	d5724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   da922:	4628      	mov	r0, r5
   da924:	2108      	movs	r1, #8
   da926:	f003 f875 	bl	dda14 <_ZdlPvj>
        return p;
    }
   da92a:	4620      	mov	r0, r4
   da92c:	b002      	add	sp, #8
   da92e:	bd70      	pop	{r4, r5, r6, pc}

000da930 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   da930:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   da932:	b510      	push	{r4, lr}
      if (_M_empty())
   da934:	b90a      	cbnz	r2, da93a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   da936:	f003 f879 	bl	dda2c <_ZSt25__throw_bad_function_callv>
    }
   da93a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   da93e:	68c3      	ldr	r3, [r0, #12]
   da940:	4718      	bx	r3

000da942 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   da942:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   da944:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   da946:	f100 0110 	add.w	r1, r0, #16
   da94a:	f7ff fff1 	bl	da930 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   da94e:	bd08      	pop	{r3, pc}

000da950 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   da950:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   da952:	b510      	push	{r4, lr}
      if (_M_empty())
   da954:	b90a      	cbnz	r2, da95a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   da956:	f003 f869 	bl	dda2c <_ZSt25__throw_bad_function_callv>
    }
   da95a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   da95e:	68c3      	ldr	r3, [r0, #12]
   da960:	4718      	bx	r3

000da962 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   da962:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   da964:	6800      	ldr	r0, [r0, #0]
   da966:	f100 0110 	add.w	r1, r0, #16
   da96a:	f7ff fff1 	bl	da950 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   da96e:	bd08      	pop	{r3, pc}

000da970 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   da970:	b538      	push	{r3, r4, r5, lr}
   da972:	2300      	movs	r3, #0
   da974:	4604      	mov	r4, r0
   da976:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   da978:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   da97a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   da97c:	f7f9 fb8b 	bl	d4096 <_Znwj>
   da980:	b128      	cbz	r0, da98e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   da982:	2301      	movs	r3, #1
   da984:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   da988:	4b02      	ldr	r3, [pc, #8]	; (da994 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   da98a:	6003      	str	r3, [r0, #0]
   da98c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   da98e:	6020      	str	r0, [r4, #0]
	}
   da990:	4620      	mov	r0, r4
   da992:	bd38      	pop	{r3, r4, r5, pc}
   da994:	000e10f4 	.word	0x000e10f4

000da998 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   da998:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   da99a:	2300      	movs	r3, #0
   da99c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   da99e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   da9a0:	4604      	mov	r4, r0
   da9a2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   da9a4:	b12b      	cbz	r3, da9b2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   da9a6:	2202      	movs	r2, #2
   da9a8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   da9aa:	68eb      	ldr	r3, [r5, #12]
   da9ac:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   da9ae:	68ab      	ldr	r3, [r5, #8]
   da9b0:	60a3      	str	r3, [r4, #8]
    }
   da9b2:	4620      	mov	r0, r4
   da9b4:	bd38      	pop	{r3, r4, r5, pc}
	...

000da9b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   da9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   da9ba:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   da9bc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   da9be:	4668      	mov	r0, sp
   da9c0:	f7ff ff03 	bl	da7ca <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   da9c4:	f04f 0302 	mov.w	r3, #2
   da9c8:	e8d4 2f4f 	ldrexb	r2, [r4]
   da9cc:	2a00      	cmp	r2, #0
   da9ce:	d103      	bne.n	da9d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   da9d0:	e8c4 3f41 	strexb	r1, r3, [r4]
   da9d4:	2900      	cmp	r1, #0
   da9d6:	d1f7      	bne.n	da9c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   da9d8:	d125      	bne.n	daa26 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   da9da:	f104 050c 	add.w	r5, r4, #12
   da9de:	4669      	mov	r1, sp
   da9e0:	4628      	mov	r0, r5
   da9e2:	f7ff fef2 	bl	da7ca <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   da9e6:	f3bf 8f5b 	dmb	ish
   da9ea:	2301      	movs	r3, #1
   da9ec:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   da9ee:	2000      	movs	r0, #0
   da9f0:	f104 0308 	add.w	r3, r4, #8
   da9f4:	f3bf 8f5b 	dmb	ish
   da9f8:	e853 6f00 	ldrex	r6, [r3]
   da9fc:	e843 0200 	strex	r2, r0, [r3]
   daa00:	2a00      	cmp	r2, #0
   daa02:	d1f9      	bne.n	da9f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   daa04:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   daa08:	b16e      	cbz	r6, daa26 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   daa0a:	f7ff fbd9 	bl	da1c0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   daa0e:	b178      	cbz	r0, daa30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   daa10:	4629      	mov	r1, r5
   daa12:	4630      	mov	r0, r6
   daa14:	f7ff ff8c 	bl	da930 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   daa18:	4630      	mov	r0, r6
   daa1a:	f7fa f993 	bl	d4d44 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   daa1e:	2110      	movs	r1, #16
   daa20:	4630      	mov	r0, r6
   daa22:	f002 fff7 	bl	dda14 <_ZdlPvj>
        p_->setError(std::move(error));
   daa26:	4668      	mov	r0, sp
   daa28:	f7ff fedc 	bl	da7e4 <_ZN8particle5ErrorD1Ev>
    }
   daa2c:	b009      	add	sp, #36	; 0x24
   daa2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   daa30:	4631      	mov	r1, r6
   daa32:	a802      	add	r0, sp, #8
   daa34:	f7ff ffb0 	bl	da998 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   daa38:	68e0      	ldr	r0, [r4, #12]
   daa3a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   daa3e:	b108      	cbz	r0, daa44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   daa40:	f005 f9a0 	bl	dfd84 <strdup>
        type_(type) {
   daa44:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   daa46:	2010      	movs	r0, #16
   daa48:	f8ad 501c 	strh.w	r5, [sp, #28]
   daa4c:	f7f9 fb23 	bl	d4096 <_Znwj>
   daa50:	4605      	mov	r5, r0
   daa52:	b1e8      	cbz	r0, daa90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   daa54:	2700      	movs	r7, #0
   daa56:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   daa58:	2018      	movs	r0, #24
   daa5a:	f7f9 fb1c 	bl	d4096 <_Znwj>
   daa5e:	4604      	mov	r4, r0
   daa60:	b188      	cbz	r0, daa86 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   daa62:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   daa64:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   daa66:	a802      	add	r0, sp, #8
   daa68:	f7fd fd35 	bl	d84d6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   daa6c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   daa6e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   daa70:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   daa72:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   daa74:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   daa76:	a906      	add	r1, sp, #24
   daa78:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   daa7a:	60e3      	str	r3, [r4, #12]
   daa7c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   daa80:	9205      	str	r2, [sp, #20]
   daa82:	f7ff fea2 	bl	da7ca <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   daa86:	4b08      	ldr	r3, [pc, #32]	; (daaa8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   daa88:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   daa8a:	4b08      	ldr	r3, [pc, #32]	; (daaac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   daa8c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   daa8e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   daa90:	a806      	add	r0, sp, #24
   daa92:	f7ff fea7 	bl	da7e4 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   daa96:	a802      	add	r0, sp, #8
   daa98:	f7fa f954 	bl	d4d44 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   daa9c:	2200      	movs	r2, #0
   daa9e:	4629      	mov	r1, r5
   daaa0:	4803      	ldr	r0, [pc, #12]	; (daab0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   daaa2:	f7ff fb95 	bl	da1d0 <application_thread_invoke>
   daaa6:	e7b7      	b.n	daa18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   daaa8:	000da943 	.word	0x000da943
   daaac:	000dabd9 	.word	0x000dabd9
   daab0:	000da4fb 	.word	0x000da4fb

000daab4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   daab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   daab8:	b08a      	sub	sp, #40	; 0x28
   daaba:	4605      	mov	r5, r0
   daabc:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   daac0:	460c      	mov	r4, r1
   daac2:	4617      	mov	r7, r2
   daac4:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   daac6:	f7ff fbed 	bl	da2a4 <spark_cloud_flag_connected>
   daaca:	ae07      	add	r6, sp, #28
    if (!connected()) {
   daacc:	4682      	mov	sl, r0
   daace:	bb38      	cbnz	r0, dab20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   daad0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   daad4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   daad6:	a905      	add	r1, sp, #20
   daad8:	4630      	mov	r0, r6
   daada:	f8ad 3018 	strh.w	r3, [sp, #24]
   daade:	f7ff fe74 	bl	da7ca <_ZN8particle5ErrorC1EOS0_>
   daae2:	2014      	movs	r0, #20
   daae4:	f7f9 fad7 	bl	d4096 <_Znwj>
   daae8:	4604      	mov	r4, r0
   daaea:	b148      	cbz	r0, dab00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   daaec:	2302      	movs	r3, #2
   daaee:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   daaf0:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   daaf2:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   daaf6:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   daaf8:	4631      	mov	r1, r6
   daafa:	300c      	adds	r0, #12
   daafc:	f7ff fe65 	bl	da7ca <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   dab00:	4628      	mov	r0, r5
	: __shared_count(__p)
   dab02:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   dab04:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   dab08:	f7ff ff32 	bl	da970 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   dab0c:	4630      	mov	r0, r6
   dab0e:	f7ff fe69 	bl	da7e4 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   dab12:	a805      	add	r0, sp, #20
   dab14:	f7ff fe66 	bl	da7e4 <_ZN8particle5ErrorD1Ev>
}
   dab18:	4628      	mov	r0, r5
   dab1a:	b00a      	add	sp, #40	; 0x28
   dab1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   dab20:	230c      	movs	r3, #12
   dab22:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   dab26:	2014      	movs	r0, #20
   dab28:	e9cd aa08 	strd	sl, sl, [sp, #32]
   dab2c:	9307      	str	r3, [sp, #28]
   dab2e:	f7f9 fab2 	bl	d4096 <_Znwj>
   dab32:	4601      	mov	r1, r0
   dab34:	b128      	cbz	r0, dab42 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   dab36:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   dab3a:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dab3e:	f880 a001 	strb.w	sl, [r0, #1]
   dab42:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   dab44:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   dab46:	f7ff ff13 	bl	da970 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   dab4a:	4b22      	ldr	r3, [pc, #136]	; (dabd4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   dab4c:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   dab4e:	2008      	movs	r0, #8
   dab50:	f7f9 faa1 	bl	d4096 <_Znwj>
   dab54:	4682      	mov	sl, r0
   dab56:	b128      	cbz	r0, dab64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   dab58:	9b03      	ldr	r3, [sp, #12]
   dab5a:	f840 3b04 	str.w	r3, [r0], #4
   dab5e:	a904      	add	r1, sp, #16
   dab60:	f7ff fcdf 	bl	da522 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   dab64:	9600      	str	r6, [sp, #0]
   dab66:	fa5f f389 	uxtb.w	r3, r9
   dab6a:	4642      	mov	r2, r8
   dab6c:	4639      	mov	r1, r7
   dab6e:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   dab70:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   dab74:	f7ff fba6 	bl	da2c4 <spark_send_event>
   dab78:	b9b8      	cbnz	r0, dabaa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   dab7a:	9b03      	ldr	r3, [sp, #12]
   dab7c:	785b      	ldrb	r3, [r3, #1]
   dab7e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   dab82:	b993      	cbnz	r3, dabaa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   dab84:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   dab88:	a905      	add	r1, sp, #20
   dab8a:	a803      	add	r0, sp, #12
   dab8c:	9205      	str	r2, [sp, #20]
   dab8e:	f8ad 3018 	strh.w	r3, [sp, #24]
   dab92:	f7ff ff11 	bl	da9b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   dab96:	a805      	add	r0, sp, #20
   dab98:	f7ff fe24 	bl	da7e4 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   dab9c:	a805      	add	r0, sp, #20
   dab9e:	9909      	ldr	r1, [sp, #36]	; 0x24
   daba0:	f7ff fea7 	bl	da8f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   daba4:	a806      	add	r0, sp, #24
   daba6:	f7fa fdbd 	bl	d5724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   dabaa:	9b03      	ldr	r3, [sp, #12]
   dabac:	9305      	str	r3, [sp, #20]
   dabae:	a904      	add	r1, sp, #16
   dabb0:	a806      	add	r0, sp, #24
   dabb2:	f7ff fcb6 	bl	da522 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   dabb6:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   dabb8:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   dabba:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   dabbc:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   dabbe:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   dabc0:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   dabc2:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   dabc4:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   dabc6:	f7fa fdad 	bl	d5724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dabca:	a804      	add	r0, sp, #16
   dabcc:	f7fa fdaa 	bl	d5724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   dabd0:	e7a2      	b.n	dab18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   dabd2:	bf00      	nop
   dabd4:	000dac9d 	.word	0x000dac9d

000dabd8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   dabd8:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   dabda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dabdc:	4605      	mov	r5, r0
	  switch (__op)
   dabde:	d007      	beq.n	dabf0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   dabe0:	2a03      	cmp	r2, #3
   dabe2:	d018      	beq.n	dac16 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   dabe4:	2a01      	cmp	r2, #1
   dabe6:	d101      	bne.n	dabec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   dabe8:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   dabea:	6003      	str	r3, [r0, #0]
	}
   dabec:	2000      	movs	r0, #0
   dabee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   dabf0:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   dabf2:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   dabf4:	f7f9 fa4f 	bl	d4096 <_Znwj>
   dabf8:	4604      	mov	r4, r0
   dabfa:	b150      	cbz	r0, dac12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   dabfc:	4631      	mov	r1, r6
   dabfe:	f7ff fecb 	bl	da998 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   dac02:	6930      	ldr	r0, [r6, #16]
   dac04:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   dac08:	b108      	cbz	r0, dac0e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   dac0a:	f005 f8bb 	bl	dfd84 <strdup>
        type_(type) {
   dac0e:	6120      	str	r0, [r4, #16]
   dac10:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   dac12:	602c      	str	r4, [r5, #0]
	}
   dac14:	e7ea      	b.n	dabec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   dac16:	6804      	ldr	r4, [r0, #0]
   dac18:	2c00      	cmp	r4, #0
   dac1a:	d0e7      	beq.n	dabec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   dac1c:	f104 0010 	add.w	r0, r4, #16
   dac20:	f7ff fde0 	bl	da7e4 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   dac24:	4620      	mov	r0, r4
   dac26:	f7fa f88d 	bl	d4d44 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   dac2a:	2118      	movs	r1, #24
   dac2c:	4620      	mov	r0, r4
   dac2e:	f002 fef1 	bl	dda14 <_ZdlPvj>
   dac32:	e7db      	b.n	dabec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000dac34 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   dac34:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   dac36:	2300      	movs	r3, #0
   dac38:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   dac3a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   dac3c:	4604      	mov	r4, r0
   dac3e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   dac40:	b12b      	cbz	r3, dac4e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   dac42:	2202      	movs	r2, #2
   dac44:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   dac46:	68eb      	ldr	r3, [r5, #12]
   dac48:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   dac4a:	68ab      	ldr	r3, [r5, #8]
   dac4c:	60a3      	str	r3, [r4, #8]
    }
   dac4e:	4620      	mov	r0, r4
   dac50:	bd38      	pop	{r3, r4, r5, pc}

000dac52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   dac52:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   dac54:	b570      	push	{r4, r5, r6, lr}
   dac56:	4604      	mov	r4, r0
	  switch (__op)
   dac58:	d007      	beq.n	dac6a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   dac5a:	2a03      	cmp	r2, #3
   dac5c:	d012      	beq.n	dac84 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   dac5e:	2a01      	cmp	r2, #1
   dac60:	d101      	bne.n	dac66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   dac62:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   dac64:	6003      	str	r3, [r0, #0]
	}
   dac66:	2000      	movs	r0, #0
   dac68:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   dac6a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   dac6c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   dac6e:	f7f9 fa12 	bl	d4096 <_Znwj>
   dac72:	4605      	mov	r5, r0
   dac74:	b120      	cbz	r0, dac80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   dac76:	4631      	mov	r1, r6
   dac78:	f7ff ffdc 	bl	dac34 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   dac7c:	7c33      	ldrb	r3, [r6, #16]
   dac7e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   dac80:	6025      	str	r5, [r4, #0]
	}
   dac82:	e7f0      	b.n	dac66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   dac84:	6804      	ldr	r4, [r0, #0]
   dac86:	2c00      	cmp	r4, #0
   dac88:	d0ed      	beq.n	dac66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   dac8a:	4620      	mov	r0, r4
   dac8c:	f7fa f85a 	bl	d4d44 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   dac90:	2114      	movs	r1, #20
   dac92:	4620      	mov	r0, r4
   dac94:	f002 febe 	bl	dda14 <_ZdlPvj>
   dac98:	e7e5      	b.n	dac66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000dac9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   dac9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   dac9e:	b089      	sub	sp, #36	; 0x24
   daca0:	4604      	mov	r4, r0
   daca2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   daca4:	a801      	add	r0, sp, #4
   daca6:	4611      	mov	r1, r2
   daca8:	f7ff fe23 	bl	da8f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   dacac:	b1a4      	cbz	r4, dacd8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   dacae:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   dacb0:	b11d      	cbz	r5, dacba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   dacb2:	4628      	mov	r0, r5
   dacb4:	f005 f866 	bl	dfd84 <strdup>
   dacb8:	4605      	mov	r5, r0
   dacba:	a801      	add	r0, sp, #4
   dacbc:	a903      	add	r1, sp, #12
        type_(type) {
   dacbe:	9503      	str	r5, [sp, #12]
   dacc0:	f8ad 4010 	strh.w	r4, [sp, #16]
   dacc4:	f7ff fe78 	bl	da9b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   dacc8:	a803      	add	r0, sp, #12
   dacca:	f7ff fd8b 	bl	da7e4 <_ZN8particle5ErrorD1Ev>
   dacce:	a802      	add	r0, sp, #8
   dacd0:	f7fa fd28 	bl	d5724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   dacd4:	b009      	add	sp, #36	; 0x24
   dacd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   dacd8:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   dacda:	2301      	movs	r3, #1
   dacdc:	e8d5 2f4f 	ldrexb	r2, [r5]
   dace0:	2a00      	cmp	r2, #0
   dace2:	d103      	bne.n	dacec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   dace4:	e8c5 3f41 	strexb	r1, r3, [r5]
   dace8:	2900      	cmp	r1, #0
   dacea:	d1f7      	bne.n	dacdc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   dacec:	d1ef      	bne.n	dacce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   dacee:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   dacf0:	f3bf 8f5b 	dmb	ish
   dacf4:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   dacf6:	1d2b      	adds	r3, r5, #4
   dacf8:	f3bf 8f5b 	dmb	ish
   dacfc:	e853 6f00 	ldrex	r6, [r3]
   dad00:	e843 4200 	strex	r2, r4, [r3]
   dad04:	2a00      	cmp	r2, #0
   dad06:	d1f9      	bne.n	dacfc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   dad08:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   dad0c:	2e00      	cmp	r6, #0
   dad0e:	d0de      	beq.n	dacce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   dad10:	4620      	mov	r0, r4
   dad12:	f7ff fa55 	bl	da1c0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   dad16:	4607      	mov	r7, r0
   dad18:	b160      	cbz	r0, dad34 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   dad1a:	f105 010c 	add.w	r1, r5, #12
   dad1e:	4630      	mov	r0, r6
   dad20:	f7ff fe16 	bl	da950 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   dad24:	4630      	mov	r0, r6
   dad26:	f7fa f80d 	bl	d4d44 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   dad2a:	2110      	movs	r1, #16
   dad2c:	4630      	mov	r0, r6
   dad2e:	f002 fe71 	bl	dda14 <_ZdlPvj>
   dad32:	e7cc      	b.n	dacce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   dad34:	4631      	mov	r1, r6
   dad36:	a803      	add	r0, sp, #12
   dad38:	f7ff ff7c 	bl	dac34 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   dad3c:	7b2b      	ldrb	r3, [r5, #12]
   dad3e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   dad42:	2010      	movs	r0, #16
   dad44:	f7f9 f9a7 	bl	d4096 <_Znwj>
   dad48:	4605      	mov	r5, r0
   dad4a:	b1d0      	cbz	r0, dad82 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   dad4c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dad4e:	2014      	movs	r0, #20
   dad50:	f7f9 f9a1 	bl	d4096 <_Znwj>
   dad54:	4604      	mov	r4, r0
   dad56:	b178      	cbz	r0, dad78 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   dad58:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   dad5a:	4601      	mov	r1, r0
   dad5c:	a803      	add	r0, sp, #12
   dad5e:	f7fd fbba 	bl	d84d6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dad62:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   dad64:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dad66:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dad68:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   dad6a:	9205      	str	r2, [sp, #20]
   dad6c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dad6e:	60e3      	str	r3, [r4, #12]
   dad70:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   dad74:	9206      	str	r2, [sp, #24]
   dad76:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   dad78:	4b06      	ldr	r3, [pc, #24]	; (dad94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   dad7a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   dad7c:	4b06      	ldr	r3, [pc, #24]	; (dad98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dad7e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   dad80:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   dad82:	a803      	add	r0, sp, #12
   dad84:	f7f9 ffde 	bl	d4d44 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   dad88:	2200      	movs	r2, #0
   dad8a:	4629      	mov	r1, r5
   dad8c:	4803      	ldr	r0, [pc, #12]	; (dad9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   dad8e:	f7ff fa1f 	bl	da1d0 <application_thread_invoke>
   dad92:	e7c7      	b.n	dad24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   dad94:	000da963 	.word	0x000da963
   dad98:	000dac53 	.word	0x000dac53
   dad9c:	000da4fb 	.word	0x000da4fb

000dada0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   dada0:	2200      	movs	r2, #0
   dada2:	6840      	ldr	r0, [r0, #4]
   dada4:	4611      	mov	r1, r2
   dada6:	f7ff bb05 	b.w	da3b4 <network_listening>

000dadaa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   dadaa:	2200      	movs	r2, #0
   dadac:	6840      	ldr	r0, [r0, #4]
   dadae:	4611      	mov	r1, r2
   dadb0:	f7ff bb10 	b.w	da3d4 <network_get_listen_timeout>

000dadb4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   dadb4:	6840      	ldr	r0, [r0, #4]
   dadb6:	2200      	movs	r2, #0
   dadb8:	f7ff bb04 	b.w	da3c4 <network_set_listen_timeout>

000dadbc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   dadbc:	6840      	ldr	r0, [r0, #4]
   dadbe:	2200      	movs	r2, #0
   dadc0:	f081 0101 	eor.w	r1, r1, #1
   dadc4:	f7ff baee 	b.w	da3a4 <network_listen>

000dadc8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   dadc8:	2300      	movs	r3, #0
   dadca:	6840      	ldr	r0, [r0, #4]
   dadcc:	461a      	mov	r2, r3
   dadce:	4619      	mov	r1, r3
   dadd0:	f7ff bae0 	b.w	da394 <network_off>

000dadd4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   dadd4:	2300      	movs	r3, #0
   dadd6:	6840      	ldr	r0, [r0, #4]
   dadd8:	461a      	mov	r2, r3
   dadda:	4619      	mov	r1, r3
   daddc:	f7ff bad2 	b.w	da384 <network_on>

000dade0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   dade0:	2200      	movs	r2, #0
   dade2:	6840      	ldr	r0, [r0, #4]
   dade4:	4611      	mov	r1, r2
   dade6:	f7ff bac5 	b.w	da374 <network_ready>

000dadea <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   dadea:	2200      	movs	r2, #0
   dadec:	6840      	ldr	r0, [r0, #4]
   dadee:	4611      	mov	r1, r2
   dadf0:	f7ff bab0 	b.w	da354 <network_connecting>

000dadf4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   dadf4:	6840      	ldr	r0, [r0, #4]
   dadf6:	2200      	movs	r2, #0
   dadf8:	2102      	movs	r1, #2
   dadfa:	f7ff bab3 	b.w	da364 <network_disconnect>

000dadfe <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   dadfe:	2300      	movs	r3, #0
   dae00:	6840      	ldr	r0, [r0, #4]
   dae02:	461a      	mov	r2, r3
   dae04:	f7ff ba9e 	b.w	da344 <network_connect>

000dae08 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   dae08:	4b02      	ldr	r3, [pc, #8]	; (dae14 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   dae0a:	2203      	movs	r2, #3
   dae0c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   dae0e:	4a02      	ldr	r2, [pc, #8]	; (dae18 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   dae10:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   dae12:	4770      	bx	lr
   dae14:	2003e4a0 	.word	0x2003e4a0
   dae18:	000e1110 	.word	0x000e1110

000dae1c <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   dae1c:	6800      	ldr	r0, [r0, #0]
   dae1e:	f000 b97f 	b.w	db120 <_ZN7TwoWire4lockEv>

000dae22 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   dae22:	b510      	push	{r4, lr}
   dae24:	4604      	mov	r4, r0
      lock_(_lock) {
   dae26:	6001      	str	r1, [r0, #0]
   dae28:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   dae2a:	b10a      	cbz	r2, dae30 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   dae2c:	f7ff fff6 	bl	dae1c <_ZN9FuelGauge4lockEv>
}
   dae30:	4620      	mov	r0, r4
   dae32:	bd10      	pop	{r4, pc}

000dae34 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   dae34:	b513      	push	{r0, r1, r4, lr}
   dae36:	4604      	mov	r4, r0
   dae38:	9101      	str	r1, [sp, #4]
            return &Wire1;
   dae3a:	f002 fdc7 	bl	dd9cc <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   dae3e:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   dae40:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   dae42:	4620      	mov	r0, r4
   dae44:	f7ff ffed 	bl	dae22 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   dae48:	4620      	mov	r0, r4
   dae4a:	b002      	add	sp, #8
   dae4c:	bd10      	pop	{r4, pc}

000dae4e <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   dae4e:	6800      	ldr	r0, [r0, #0]
   dae50:	f000 b96f 	b.w	db132 <_ZN7TwoWire6unlockEv>

000dae54 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   dae54:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   dae58:	4604      	mov	r4, r0
   dae5a:	460d      	mov	r5, r1
   dae5c:	4617      	mov	r7, r2
   dae5e:	461e      	mov	r6, r3
      { _M_device.lock(); }
   dae60:	f7ff ffdc 	bl	dae1c <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   dae64:	2336      	movs	r3, #54	; 0x36
   dae66:	f88d 3000 	strb.w	r3, [sp]
   dae6a:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   dae6c:	6820      	ldr	r0, [r4, #0]
   dae6e:	9301      	str	r3, [sp, #4]
   dae70:	f04f 0801 	mov.w	r8, #1
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   dae74:	230a      	movs	r3, #10
   dae76:	4669      	mov	r1, sp
   dae78:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   dae7a:	f88d 8008 	strb.w	r8, [sp, #8]
   dae7e:	f000 f930 	bl	db0e2 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   dae82:	6820      	ldr	r0, [r4, #0]
   dae84:	6803      	ldr	r3, [r0, #0]
   dae86:	4629      	mov	r1, r5
   dae88:	689b      	ldr	r3, [r3, #8]
   dae8a:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   dae8c:	6820      	ldr	r0, [r4, #0]
   dae8e:	4641      	mov	r1, r8
   dae90:	f000 f93f 	bl	db112 <_ZN7TwoWire15endTransmissionEh>
   dae94:	4605      	mov	r5, r0
   dae96:	b140      	cbz	r0, daeaa <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
   dae98:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
   dae9c:	4620      	mov	r0, r4
   dae9e:	f7ff ffd6 	bl	dae4e <_ZN9FuelGauge6unlockEv>
}
   daea2:	4628      	mov	r0, r5
   daea4:	b004      	add	sp, #16
   daea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   daeaa:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   daeac:	6820      	ldr	r0, [r4, #0]
   daeae:	9301      	str	r3, [sp, #4]
   daeb0:	4669      	mov	r1, sp
   daeb2:	f000 f8e3 	bl	db07c <_ZN7TwoWire11requestFromERK16WireTransmission>
   daeb6:	2802      	cmp	r0, #2
   daeb8:	d1ee      	bne.n	dae98 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
   daeba:	6820      	ldr	r0, [r4, #0]
   daebc:	6803      	ldr	r3, [r0, #0]
   daebe:	695b      	ldr	r3, [r3, #20]
   daec0:	4798      	blx	r3
   daec2:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   daec4:	6820      	ldr	r0, [r4, #0]
   daec6:	6803      	ldr	r3, [r0, #0]
   daec8:	695b      	ldr	r3, [r3, #20]
   daeca:	4798      	blx	r3
   daecc:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   daece:	e7e5      	b.n	dae9c <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>

000daed0 <_ZN9FuelGauge6getSoCEv>:
float FuelGauge::getSoC() {
   daed0:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   daed2:	2300      	movs	r3, #0
   daed4:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   daed8:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   daedc:	f10d 0206 	add.w	r2, sp, #6
   daee0:	f10d 0307 	add.w	r3, sp, #7
   daee4:	2104      	movs	r1, #4
   daee6:	f7ff ffb5 	bl	dae54 <_ZN9FuelGauge12readRegisterEhRhS0_>
   daeea:	b9b0      	cbnz	r0, daf1a <_ZN9FuelGauge6getSoCEv+0x4a>
        float decimal = LSB / 256.0;
   daeec:	f89d 0007 	ldrb.w	r0, [sp, #7]
   daef0:	f004 f8ee 	bl	df0d0 <__aeabi_i2d>
   daef4:	4b0a      	ldr	r3, [pc, #40]	; (daf20 <_ZN9FuelGauge6getSoCEv+0x50>)
   daef6:	2200      	movs	r2, #0
   daef8:	f004 f954 	bl	df1a4 <__aeabi_dmul>
   daefc:	f004 fc4a 	bl	df794 <__aeabi_d2f>
        return MSB + decimal;
   daf00:	f89d 3006 	ldrb.w	r3, [sp, #6]
   daf04:	ee00 3a10 	vmov	s0, r3
   daf08:	ee07 0a90 	vmov	s15, r0
   daf0c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   daf10:	ee37 0a80 	vadd.f32	s0, s15, s0
}
   daf14:	b003      	add	sp, #12
   daf16:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1.0f;
   daf1a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   daf1e:	e7f9      	b.n	daf14 <_ZN9FuelGauge6getSoCEv+0x44>
   daf20:	3f700000 	.word	0x3f700000

000daf24 <_ZN9FuelGauge18readConfigRegisterERhS0_>:
int FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
   daf24:	4613      	mov	r3, r2
    return readRegister(CONFIG_REGISTER, MSB, LSB);
   daf26:	460a      	mov	r2, r1
   daf28:	210c      	movs	r1, #12
   daf2a:	f7ff bf93 	b.w	dae54 <_ZN9FuelGauge12readRegisterEhRhS0_>

000daf2e <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   daf2e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   daf32:	4616      	mov	r6, r2
   daf34:	4604      	mov	r4, r0
   daf36:	461d      	mov	r5, r3
   daf38:	460f      	mov	r7, r1
      { _M_device.lock(); }
   daf3a:	f7ff ff6f 	bl	dae1c <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   daf3e:	2336      	movs	r3, #54	; 0x36
   daf40:	f88d 3000 	strb.w	r3, [sp]
   daf44:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   daf46:	6820      	ldr	r0, [r4, #0]
   daf48:	9301      	str	r3, [sp, #4]
   daf4a:	f04f 0801 	mov.w	r8, #1
    timeout_ = ms;
   daf4e:	230a      	movs	r3, #10
   daf50:	4669      	mov	r1, sp
   daf52:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   daf54:	f88d 8008 	strb.w	r8, [sp, #8]
   daf58:	f000 f8c3 	bl	db0e2 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   daf5c:	6820      	ldr	r0, [r4, #0]
   daf5e:	6803      	ldr	r3, [r0, #0]
   daf60:	4639      	mov	r1, r7
   daf62:	689b      	ldr	r3, [r3, #8]
   daf64:	4798      	blx	r3
    i2c_.write(MSB);
   daf66:	6820      	ldr	r0, [r4, #0]
   daf68:	6803      	ldr	r3, [r0, #0]
   daf6a:	4631      	mov	r1, r6
   daf6c:	689b      	ldr	r3, [r3, #8]
   daf6e:	4798      	blx	r3
    i2c_.write(LSB);
   daf70:	6820      	ldr	r0, [r4, #0]
   daf72:	6803      	ldr	r3, [r0, #0]
   daf74:	4629      	mov	r1, r5
   daf76:	689b      	ldr	r3, [r3, #8]
   daf78:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   daf7a:	4641      	mov	r1, r8
   daf7c:	6820      	ldr	r0, [r4, #0]
   daf7e:	f000 f8c8 	bl	db112 <_ZN7TwoWire15endTransmissionEh>
   daf82:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   daf84:	4620      	mov	r0, r4
   daf86:	bf0c      	ite	eq
   daf88:	2500      	moveq	r5, #0
   daf8a:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   daf8e:	f7ff ff5e 	bl	dae4e <_ZN9FuelGauge6unlockEv>
}
   daf92:	4628      	mov	r0, r5
   daf94:	b004      	add	sp, #16
   daf96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000daf9a <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   daf9a:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   daf9c:	2240      	movs	r2, #64	; 0x40
   daf9e:	2300      	movs	r3, #0
   dafa0:	2106      	movs	r1, #6
   dafa2:	f7ff ffc4 	bl	daf2e <_ZN9FuelGauge13writeRegisterEhhh>
}
   dafa6:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   dafaa:	bd08      	pop	{r3, pc}

000dafac <_ZN9FuelGauge6wakeupEv>:
int FuelGauge::wakeup() {
   dafac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dafae:	4605      	mov	r5, r0
      { _M_device.lock(); }
   dafb0:	f7ff ff34 	bl	dae1c <_ZN9FuelGauge4lockEv>
    byte MSB = 0;
   dafb4:	2300      	movs	r3, #0
    CHECK(readConfigRegister(MSB, LSB));
   dafb6:	f10d 0207 	add.w	r2, sp, #7
   dafba:	f10d 0106 	add.w	r1, sp, #6
   dafbe:	4628      	mov	r0, r5
    byte MSB = 0;
   dafc0:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   dafc4:	f88d 3007 	strb.w	r3, [sp, #7]
    CHECK(readConfigRegister(MSB, LSB));
   dafc8:	f7ff ffac 	bl	daf24 <_ZN9FuelGauge18readConfigRegisterERhS0_>
   dafcc:	1e04      	subs	r4, r0, #0
   dafce:	db0b      	blt.n	dafe8 <_ZN9FuelGauge6wakeupEv+0x3c>
    CHECK(writeRegister(CONFIG_REGISTER, MSB, (LSB & 0b01111111)));
   dafd0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   dafd4:	f89d 2006 	ldrb.w	r2, [sp, #6]
   dafd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   dafdc:	210c      	movs	r1, #12
   dafde:	4628      	mov	r0, r5
   dafe0:	f7ff ffa5 	bl	daf2e <_ZN9FuelGauge13writeRegisterEhhh>
   dafe4:	ea00 74e0 	and.w	r4, r0, r0, asr #31
      { _M_device.unlock(); }
   dafe8:	4628      	mov	r0, r5
   dafea:	f7ff ff30 	bl	dae4e <_ZN9FuelGauge6unlockEv>
}
   dafee:	4620      	mov	r0, r4
   daff0:	b003      	add	sp, #12
   daff2:	bd30      	pop	{r4, r5, pc}

000daff4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   daff4:	4770      	bx	lr

000daff6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   daff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   daff8:	4606      	mov	r6, r0
   daffa:	4615      	mov	r5, r2
   daffc:	460c      	mov	r4, r1
   daffe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   db000:	42bc      	cmp	r4, r7
   db002:	d006      	beq.n	db012 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   db004:	6833      	ldr	r3, [r6, #0]
   db006:	f814 1b01 	ldrb.w	r1, [r4], #1
   db00a:	689b      	ldr	r3, [r3, #8]
   db00c:	4630      	mov	r0, r6
   db00e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   db010:	e7f6      	b.n	db000 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   db012:	4628      	mov	r0, r5
   db014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000db016 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   db016:	7c00      	ldrb	r0, [r0, #16]
   db018:	2200      	movs	r2, #0
   db01a:	f7fe be97 	b.w	d9d4c <hal_i2c_write>

000db01e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   db01e:	7c00      	ldrb	r0, [r0, #16]
   db020:	2100      	movs	r1, #0
   db022:	f7fe be9b 	b.w	d9d5c <hal_i2c_available>

000db026 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   db026:	7c00      	ldrb	r0, [r0, #16]
   db028:	2100      	movs	r1, #0
   db02a:	f7fe be9f 	b.w	d9d6c <hal_i2c_read>

000db02e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   db02e:	7c00      	ldrb	r0, [r0, #16]
   db030:	2100      	movs	r1, #0
   db032:	f7fe bea3 	b.w	d9d7c <hal_i2c_peek>

000db036 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   db036:	7c00      	ldrb	r0, [r0, #16]
   db038:	2100      	movs	r1, #0
   db03a:	f7fe bea7 	b.w	d9d8c <hal_i2c_flush>

000db03e <_ZN7TwoWireD0Ev>:
   db03e:	b510      	push	{r4, lr}
   db040:	2114      	movs	r1, #20
   db042:	4604      	mov	r4, r0
   db044:	f002 fce6 	bl	dda14 <_ZdlPvj>
   db048:	4620      	mov	r0, r4
   db04a:	bd10      	pop	{r4, pc}

000db04c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   db04c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   db04e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   db052:	4604      	mov	r4, r0
   db054:	4608      	mov	r0, r1
   db056:	2100      	movs	r1, #0
   db058:	e9c4 1301 	strd	r1, r3, [r4, #4]
   db05c:	4b03      	ldr	r3, [pc, #12]	; (db06c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   db05e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   db060:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   db062:	4611      	mov	r1, r2
   db064:	f7fe fea2 	bl	d9dac <hal_i2c_init>
}
   db068:	4620      	mov	r0, r4
   db06a:	bd10      	pop	{r4, pc}
   db06c:	000e114c 	.word	0x000e114c

000db070 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   db070:	2300      	movs	r3, #0
   db072:	7c00      	ldrb	r0, [r0, #16]
   db074:	461a      	mov	r2, r3
   db076:	4619      	mov	r1, r3
   db078:	f7fe be50 	b.w	d9d1c <hal_i2c_begin>

000db07c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   db07c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   db07e:	2200      	movs	r2, #0
   db080:	2314      	movs	r3, #20
   db082:	e9cd 2201 	strd	r2, r2, [sp, #4]
   db086:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   db08a:	780b      	ldrb	r3, [r1, #0]
   db08c:	f88d 3008 	strb.w	r3, [sp, #8]
   db090:	684b      	ldr	r3, [r1, #4]
   db092:	9303      	str	r3, [sp, #12]
   db094:	68cb      	ldr	r3, [r1, #12]
   db096:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   db098:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   db09a:	7a0b      	ldrb	r3, [r1, #8]
   db09c:	9305      	str	r3, [sp, #20]
   db09e:	a901      	add	r1, sp, #4
   db0a0:	f7fe fe9c 	bl	d9ddc <hal_i2c_request_ex>
}
   db0a4:	b007      	add	sp, #28
   db0a6:	f85d fb04 	ldr.w	pc, [sp], #4

000db0aa <_ZN7TwoWire11requestFromEhjh>:
{
   db0aa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   db0ac:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   db0ae:	f88d 1000 	strb.w	r1, [sp]
   db0b2:	f04f 0164 	mov.w	r1, #100	; 0x64
   db0b6:	9103      	str	r1, [sp, #12]
   db0b8:	bf18      	it	ne
   db0ba:	2301      	movne	r3, #1
   db0bc:	4669      	mov	r1, sp
    size_ = size;
   db0be:	9201      	str	r2, [sp, #4]
   db0c0:	f88d 3008 	strb.w	r3, [sp, #8]
   db0c4:	f7ff ffda 	bl	db07c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   db0c8:	b005      	add	sp, #20
   db0ca:	f85d fb04 	ldr.w	pc, [sp], #4

000db0ce <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   db0ce:	2301      	movs	r3, #1
   db0d0:	f7ff bfeb 	b.w	db0aa <_ZN7TwoWire11requestFromEhjh>

000db0d4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   db0d4:	7c00      	ldrb	r0, [r0, #16]
   db0d6:	2200      	movs	r2, #0
   db0d8:	f7fe be28 	b.w	d9d2c <hal_i2c_begin_transmission>

000db0dc <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   db0dc:	b2c9      	uxtb	r1, r1
   db0de:	f7ff bff9 	b.w	db0d4 <_ZN7TwoWire17beginTransmissionEh>

000db0e2 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   db0e2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   db0e4:	2300      	movs	r3, #0
   db0e6:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   db0ea:	684a      	ldr	r2, [r1, #4]
   db0ec:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   db0ee:	2314      	movs	r3, #20
    };
   db0f0:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   db0f2:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   db0f6:	780b      	ldrb	r3, [r1, #0]
    };
   db0f8:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   db0fa:	7a0a      	ldrb	r2, [r1, #8]
   db0fc:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   db0fe:	7c00      	ldrb	r0, [r0, #16]
    };
   db100:	f88d 3008 	strb.w	r3, [sp, #8]
   db104:	aa01      	add	r2, sp, #4
   db106:	4619      	mov	r1, r3
   db108:	f7fe fe10 	bl	d9d2c <hal_i2c_begin_transmission>
}
   db10c:	b007      	add	sp, #28
   db10e:	f85d fb04 	ldr.w	pc, [sp], #4

000db112 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   db112:	7c00      	ldrb	r0, [r0, #16]
   db114:	2200      	movs	r2, #0
   db116:	f7fe be11 	b.w	d9d3c <hal_i2c_end_transmission>

000db11a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   db11a:	2101      	movs	r1, #1
   db11c:	f7ff bff9 	b.w	db112 <_ZN7TwoWire15endTransmissionEh>

000db120 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   db120:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   db122:	2100      	movs	r1, #0
   db124:	7c00      	ldrb	r0, [r0, #16]
   db126:	f7fe fe49 	bl	d9dbc <hal_i2c_lock>
}
   db12a:	fab0 f080 	clz	r0, r0
   db12e:	0940      	lsrs	r0, r0, #5
   db130:	bd08      	pop	{r3, pc}

000db132 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   db132:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   db134:	2100      	movs	r1, #0
   db136:	7c00      	ldrb	r0, [r0, #16]
   db138:	f7fe fe48 	bl	d9dcc <hal_i2c_unlock>
}
   db13c:	fab0 f080 	clz	r0, r0
   db140:	0940      	lsrs	r0, r0, #5
   db142:	bd08      	pop	{r3, pc}

000db144 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   db144:	4700      	bx	r0
	...

000db148 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   db148:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   db14c:	2400      	movs	r4, #0
{
   db14e:	461d      	mov	r5, r3
   db150:	460f      	mov	r7, r1
   db152:	4690      	mov	r8, r2
   db154:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   db156:	f7fe fdd1 	bl	d9cfc <HAL_Interrupts_Detach>
  if (priority >= 0) {
   db15a:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   db15c:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   db160:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   db164:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   db168:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   db16c:	bfa2      	ittt	ge
   db16e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   db172:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   db176:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   db178:	4907      	ldr	r1, [pc, #28]	; (db198 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   db17a:	9400      	str	r4, [sp, #0]
   db17c:	4643      	mov	r3, r8
   db17e:	463a      	mov	r2, r7
   db180:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   db182:	bfa8      	it	ge
   db184:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   db188:	f7fe fdb0 	bl	d9cec <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   db18c:	fab0 f080 	clz	r0, r0
   db190:	0940      	lsrs	r0, r0, #5
   db192:	b004      	add	sp, #16
   db194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   db198:	000db145 	.word	0x000db145

000db19c <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   db19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db19e:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   db1a0:	f7fe fdac 	bl	d9cfc <HAL_Interrupts_Detach>
   db1a4:	4605      	mov	r5, r0
   db1a6:	b970      	cbnz	r0, db1c6 <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
   db1a8:	4f08      	ldr	r7, [pc, #32]	; (db1cc <_Z15detachInterruptt+0x30>)
   db1aa:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
   db1ae:	b146      	cbz	r6, db1c2 <_Z15detachInterruptt+0x26>
   db1b0:	4630      	mov	r0, r6
   db1b2:	f7f9 fdc7 	bl	d4d44 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   db1b6:	2110      	movs	r1, #16
   db1b8:	4630      	mov	r0, r6
   db1ba:	f002 fc2b 	bl	dda14 <_ZdlPvj>
        handlers[pin] = nullptr;
   db1be:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
   db1c2:	2001      	movs	r0, #1
   db1c4:	e000      	b.n	db1c8 <_Z15detachInterruptt+0x2c>
        return false;
   db1c6:	2000      	movs	r0, #0
    }
    return true;
}
   db1c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   db1ca:	bf00      	nop
   db1cc:	2003e4a8 	.word	0x2003e4a8

000db1d0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   db1d0:	4770      	bx	lr

000db1d2 <_ZN9IPAddressD0Ev>:
   db1d2:	b510      	push	{r4, lr}
   db1d4:	2118      	movs	r1, #24
   db1d6:	4604      	mov	r4, r0
   db1d8:	f002 fc1c 	bl	dda14 <_ZdlPvj>
   db1dc:	4620      	mov	r0, r4
   db1de:	bd10      	pop	{r4, pc}

000db1e0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   db1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   db1e2:	7d03      	ldrb	r3, [r0, #20]
   db1e4:	2b06      	cmp	r3, #6
{
   db1e6:	b08d      	sub	sp, #52	; 0x34
   db1e8:	460e      	mov	r6, r1
   db1ea:	f100 0704 	add.w	r7, r0, #4
   db1ee:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   db1f2:	d012      	beq.n	db21a <_ZNK9IPAddress7printToER5Print+0x3a>
   db1f4:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   db1f8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   db1fc:	220a      	movs	r2, #10
   db1fe:	4630      	mov	r0, r6
   db200:	f001 fb8a 	bl	dc918 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   db204:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   db206:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   db208:	d019      	beq.n	db23e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   db20a:	2c00      	cmp	r4, #0
   db20c:	d0f4      	beq.n	db1f8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   db20e:	212e      	movs	r1, #46	; 0x2e
   db210:	4630      	mov	r0, r6
   db212:	f001 fb72 	bl	dc8fa <_ZN5Print5printEc>
   db216:	4404      	add	r4, r0
   db218:	e7ee      	b.n	db1f8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   db21a:	232f      	movs	r3, #47	; 0x2f
   db21c:	466a      	mov	r2, sp
   db21e:	4639      	mov	r1, r7
   db220:	200a      	movs	r0, #10
		buf[0] = 0;
   db222:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   db226:	f7fe fde1 	bl	d9dec <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   db22a:	4668      	mov	r0, sp
   db22c:	f004 fdc7 	bl	dfdbe <strlen>
   db230:	6833      	ldr	r3, [r6, #0]
   db232:	4602      	mov	r2, r0
   db234:	68db      	ldr	r3, [r3, #12]
   db236:	4669      	mov	r1, sp
   db238:	4630      	mov	r0, r6
   db23a:	4798      	blx	r3
   db23c:	4604      	mov	r4, r0
    }
    return n;
}
   db23e:	4620      	mov	r0, r4
   db240:	b00d      	add	sp, #52	; 0x34
   db242:	bdf0      	pop	{r4, r5, r6, r7, pc}

000db244 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   db244:	b510      	push	{r4, lr}
   db246:	4b05      	ldr	r3, [pc, #20]	; (db25c <_ZN9IPAddressC1Ev+0x18>)
   db248:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   db24a:	2211      	movs	r2, #17
   db24c:	f840 3b04 	str.w	r3, [r0], #4
   db250:	2100      	movs	r1, #0
   db252:	f004 fd41 	bl	dfcd8 <memset>
}
   db256:	4620      	mov	r0, r4
   db258:	bd10      	pop	{r4, pc}
   db25a:	bf00      	nop
   db25c:	000e1174 	.word	0x000e1174

000db260 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   db260:	4603      	mov	r3, r0
   db262:	4a07      	ldr	r2, [pc, #28]	; (db280 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   db264:	b510      	push	{r4, lr}
   db266:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   db26a:	f101 0210 	add.w	r2, r1, #16
   db26e:	f851 4b04 	ldr.w	r4, [r1], #4
   db272:	f843 4b04 	str.w	r4, [r3], #4
   db276:	4291      	cmp	r1, r2
   db278:	d1f9      	bne.n	db26e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   db27a:	780a      	ldrb	r2, [r1, #0]
   db27c:	701a      	strb	r2, [r3, #0]
}
   db27e:	bd10      	pop	{r4, pc}
   db280:	000e1174 	.word	0x000e1174

000db284 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   db284:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   db286:	f89d 4008 	ldrb.w	r4, [sp, #8]
   db28a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   db28e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   db292:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   db296:	2304      	movs	r3, #4
   db298:	6041      	str	r1, [r0, #4]
   db29a:	7503      	strb	r3, [r0, #20]
}
   db29c:	bd10      	pop	{r4, pc}

000db29e <_ZN9IPAddressaSEPKh>:
{
   db29e:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   db2a0:	78cb      	ldrb	r3, [r1, #3]
   db2a2:	9300      	str	r3, [sp, #0]
   db2a4:	788b      	ldrb	r3, [r1, #2]
   db2a6:	784a      	ldrb	r2, [r1, #1]
   db2a8:	7809      	ldrb	r1, [r1, #0]
   db2aa:	f7ff ffeb 	bl	db284 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   db2ae:	b002      	add	sp, #8
   db2b0:	bd10      	pop	{r4, pc}

000db2b2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   db2b2:	f100 0310 	add.w	r3, r0, #16
   db2b6:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   db2b8:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   db2bc:	2901      	cmp	r1, #1
   db2be:	4618      	mov	r0, r3
   db2c0:	d108      	bne.n	db2d4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   db2c2:	f853 1c04 	ldr.w	r1, [r3, #-4]
   db2c6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   db2ca:	3a01      	subs	r2, #1
   db2cc:	f103 0310 	add.w	r3, r3, #16
   db2d0:	d1f2      	bne.n	db2b8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   db2d2:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   db2d4:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   db2d6:	bf04      	itt	eq
   db2d8:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   db2dc:	1852      	addeq	r2, r2, r1
   db2de:	e7f4      	b.n	db2ca <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000db2e0 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   db2e0:	b40e      	push	{r1, r2, r3}
   db2e2:	b5f0      	push	{r4, r5, r6, r7, lr}
   db2e4:	b088      	sub	sp, #32
   db2e6:	af00      	add	r7, sp, #0
   db2e8:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   db2ec:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   db2ee:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   db2f2:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   db2f4:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   db2f6:	462b      	mov	r3, r5
   db2f8:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   db2fa:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   db2fc:	f7ff f8b2 	bl	da464 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   db300:	280f      	cmp	r0, #15
   db302:	687a      	ldr	r2, [r7, #4]
   db304:	d91a      	bls.n	db33c <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   db306:	f100 0308 	add.w	r3, r0, #8
   db30a:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   db30e:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   db310:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   db314:	1c41      	adds	r1, r0, #1
   db316:	462b      	mov	r3, r5
   db318:	4668      	mov	r0, sp
        va_start(args, fmt);
   db31a:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   db31c:	f7ff f8a2 	bl	da464 <vsnprintf>
        if (n > 0) {
   db320:	1e02      	subs	r2, r0, #0
   db322:	dd04      	ble.n	db32e <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   db324:	6823      	ldr	r3, [r4, #0]
   db326:	4669      	mov	r1, sp
   db328:	689b      	ldr	r3, [r3, #8]
   db32a:	4620      	mov	r0, r4
   db32c:	4798      	blx	r3
   db32e:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   db330:	3720      	adds	r7, #32
   db332:	46bd      	mov	sp, r7
   db334:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   db338:	b003      	add	sp, #12
   db33a:	4770      	bx	lr
    } else if (n > 0) {
   db33c:	2800      	cmp	r0, #0
   db33e:	d0f7      	beq.n	db330 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   db340:	6823      	ldr	r3, [r4, #0]
   db342:	4602      	mov	r2, r0
   db344:	689b      	ldr	r3, [r3, #8]
   db346:	f107 0110 	add.w	r1, r7, #16
   db34a:	4620      	mov	r0, r4
   db34c:	4798      	blx	r3
}
   db34e:	e7ef      	b.n	db330 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000db350 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   db350:	b510      	push	{r4, lr}
          _M_dispose();
   db352:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   db354:	4604      	mov	r4, r0
          _M_dispose();
   db356:	689b      	ldr	r3, [r3, #8]
   db358:	4798      	blx	r3
          if (--_M_weak_count == 0)
   db35a:	68a3      	ldr	r3, [r4, #8]
   db35c:	3b01      	subs	r3, #1
   db35e:	60a3      	str	r3, [r4, #8]
   db360:	b92b      	cbnz	r3, db36e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   db362:	6823      	ldr	r3, [r4, #0]
   db364:	4620      	mov	r0, r4
   db366:	68db      	ldr	r3, [r3, #12]
    }
   db368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   db36c:	4718      	bx	r3
    }
   db36e:	bd10      	pop	{r4, pc}

000db370 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   db370:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   db372:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   db374:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   db378:	689b      	ldr	r3, [r3, #8]
   db37a:	2201      	movs	r2, #1
   db37c:	f10d 0107 	add.w	r1, sp, #7
   db380:	4798      	blx	r3
}
   db382:	b003      	add	sp, #12
   db384:	f85d fb04 	ldr.w	pc, [sp], #4

000db388 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   db388:	b538      	push	{r3, r4, r5, lr}
   db38a:	680b      	ldr	r3, [r1, #0]
   db38c:	6003      	str	r3, [r0, #0]
   db38e:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   db390:	6843      	ldr	r3, [r0, #4]
   db392:	429d      	cmp	r5, r3
    class __shared_ptr
   db394:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   db396:	d00c      	beq.n	db3b2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   db398:	b115      	cbz	r5, db3a0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   db39a:	686b      	ldr	r3, [r5, #4]
   db39c:	3301      	adds	r3, #1
   db39e:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   db3a0:	6860      	ldr	r0, [r4, #4]
   db3a2:	b128      	cbz	r0, db3b0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   db3a4:	6843      	ldr	r3, [r0, #4]
   db3a6:	3b01      	subs	r3, #1
   db3a8:	6043      	str	r3, [r0, #4]
   db3aa:	b90b      	cbnz	r3, db3b0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   db3ac:	f7ff ffd0 	bl	db350 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   db3b0:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   db3b2:	4620      	mov	r0, r4
   db3b4:	bd38      	pop	{r3, r4, r5, pc}

000db3b6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   db3b6:	460b      	mov	r3, r1
   db3b8:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   db3ba:	2200      	movs	r2, #0
   db3bc:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   db3be:	e9c0 2200 	strd	r2, r2, [r0]
   db3c2:	4604      	mov	r4, r0
        t_ = t;
   db3c4:	6083      	str	r3, [r0, #8]
    if (t) {
   db3c6:	b90b      	cbnz	r3, db3cc <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   db3c8:	4620      	mov	r0, r4
   db3ca:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   db3cc:	f7ff ffdc 	bl	db388 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   db3d0:	e7fa      	b.n	db3c8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000db3d2 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   db3d2:	6883      	ldr	r3, [r0, #8]
   db3d4:	b1eb      	cbz	r3, db412 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   db3d6:	781a      	ldrb	r2, [r3, #0]
   db3d8:	2a03      	cmp	r2, #3
   db3da:	d81a      	bhi.n	db412 <_ZNK5spark9JSONValue4typeEv+0x40>
   db3dc:	e8df f002 	tbb	[pc, r2]
   db3e0:	1b021704 	.word	0x1b021704
   db3e4:	2005      	movs	r0, #5
   db3e6:	4770      	bx	lr
        const char c = d_->json[t_->start];
   db3e8:	6802      	ldr	r2, [r0, #0]
   db3ea:	685b      	ldr	r3, [r3, #4]
   db3ec:	6852      	ldr	r2, [r2, #4]
   db3ee:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   db3f0:	282d      	cmp	r0, #45	; 0x2d
   db3f2:	d012      	beq.n	db41a <_ZNK5spark9JSONValue4typeEv+0x48>
   db3f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   db3f8:	2b09      	cmp	r3, #9
   db3fa:	d90e      	bls.n	db41a <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   db3fc:	2874      	cmp	r0, #116	; 0x74
   db3fe:	d00e      	beq.n	db41e <_ZNK5spark9JSONValue4typeEv+0x4c>
   db400:	2866      	cmp	r0, #102	; 0x66
   db402:	d00c      	beq.n	db41e <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   db404:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   db408:	4258      	negs	r0, r3
   db40a:	4158      	adcs	r0, r3
   db40c:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   db40e:	2006      	movs	r0, #6
   db410:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   db412:	2000      	movs	r0, #0
   db414:	4770      	bx	lr
        return JSON_TYPE_STRING;
   db416:	2004      	movs	r0, #4
   db418:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   db41a:	2003      	movs	r0, #3
   db41c:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   db41e:	2002      	movs	r0, #2
}
   db420:	4770      	bx	lr

000db422 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   db422:	b510      	push	{r4, lr}
   db424:	4604      	mov	r4, r0
    switch (type()) {
   db426:	f7ff ffd4 	bl	db3d2 <_ZNK5spark9JSONValue4typeEv>
   db42a:	2802      	cmp	r0, #2
   db42c:	d00e      	beq.n	db44c <_ZNK5spark9JSONValue5toIntEv+0x2a>
   db42e:	1ec3      	subs	r3, r0, #3
   db430:	b2db      	uxtb	r3, r3
   db432:	2b01      	cmp	r3, #1
   db434:	d814      	bhi.n	db460 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   db436:	6822      	ldr	r2, [r4, #0]
   db438:	68a3      	ldr	r3, [r4, #8]
   db43a:	6850      	ldr	r0, [r2, #4]
   db43c:	685b      	ldr	r3, [r3, #4]
}
   db43e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   db442:	220a      	movs	r2, #10
   db444:	2100      	movs	r1, #0
   db446:	4418      	add	r0, r3
   db448:	f004 bd74 	b.w	dff34 <strtol>
        const char* const s = d_->json + t_->start;
   db44c:	6822      	ldr	r2, [r4, #0]
   db44e:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   db450:	6852      	ldr	r2, [r2, #4]
   db452:	685b      	ldr	r3, [r3, #4]
   db454:	5cd0      	ldrb	r0, [r2, r3]
   db456:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   db45a:	4258      	negs	r0, r3
   db45c:	4158      	adcs	r0, r3
}
   db45e:	bd10      	pop	{r4, pc}
    switch (type()) {
   db460:	2000      	movs	r0, #0
   db462:	e7fc      	b.n	db45e <_ZNK5spark9JSONValue5toIntEv+0x3c>

000db464 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   db464:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   db466:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   db468:	e9c0 3300 	strd	r3, r3, [r0]
   db46c:	4604      	mov	r4, r0
        n_(0) {
   db46e:	480e      	ldr	r0, [pc, #56]	; (db4a8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   db470:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   db474:	b1a9      	cbz	r1, db4a2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   db476:	780b      	ldrb	r3, [r1, #0]
   db478:	2b03      	cmp	r3, #3
   db47a:	d006      	beq.n	db48a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   db47c:	b98b      	cbnz	r3, db4a2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   db47e:	6813      	ldr	r3, [r2, #0]
   db480:	6858      	ldr	r0, [r3, #4]
   db482:	684b      	ldr	r3, [r1, #4]
   db484:	5cc3      	ldrb	r3, [r0, r3]
   db486:	2b6e      	cmp	r3, #110	; 0x6e
   db488:	d007      	beq.n	db49a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   db48a:	6813      	ldr	r3, [r2, #0]
   db48c:	684d      	ldr	r5, [r1, #4]
   db48e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   db490:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   db492:	4428      	add	r0, r5
            n_ = t->end - t->start;
   db494:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   db496:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   db498:	60e3      	str	r3, [r4, #12]
   db49a:	4611      	mov	r1, r2
   db49c:	4620      	mov	r0, r4
   db49e:	f7ff ff73 	bl	db388 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   db4a2:	4620      	mov	r0, r4
   db4a4:	bd38      	pop	{r3, r4, r5, pc}
   db4a6:	bf00      	nop
   db4a8:	000e11dd 	.word	0x000e11dd

000db4ac <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   db4ac:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   db4ae:	2500      	movs	r5, #0
   db4b0:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   db4b2:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   db4b6:	e9c0 5502 	strd	r5, r5, [r0, #8]
   db4ba:	e9c0 5504 	strd	r5, r5, [r0, #16]
   db4be:	4604      	mov	r4, r0
   db4c0:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   db4c2:	b14b      	cbz	r3, db4d8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   db4c4:	781a      	ldrb	r2, [r3, #0]
   db4c6:	2a01      	cmp	r2, #1
   db4c8:	d106      	bne.n	db4d8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   db4ca:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   db4ce:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   db4d0:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   db4d2:	6143      	str	r3, [r0, #20]
   db4d4:	f7ff ff58 	bl	db388 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   db4d8:	4620      	mov	r0, r4
   db4da:	bd38      	pop	{r3, r4, r5, pc}

000db4dc <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   db4dc:	b510      	push	{r4, lr}
    if (!n_) {
   db4de:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   db4e0:	4604      	mov	r4, r0
    if (!n_) {
   db4e2:	b163      	cbz	r3, db4fe <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   db4e4:	6880      	ldr	r0, [r0, #8]
   db4e6:	60e0      	str	r0, [r4, #12]
    --n_;
   db4e8:	3b01      	subs	r3, #1
    ++t_;
   db4ea:	3010      	adds	r0, #16
   db4ec:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   db4ee:	6120      	str	r0, [r4, #16]
    --n_;
   db4f0:	6163      	str	r3, [r4, #20]
    if (n_) {
   db4f2:	b113      	cbz	r3, db4fa <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   db4f4:	f7ff fedd 	bl	db2b2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   db4f8:	60a0      	str	r0, [r4, #8]
    return true;
   db4fa:	2001      	movs	r0, #1
   db4fc:	e000      	b.n	db500 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   db4fe:	4618      	mov	r0, r3
}
   db500:	bd10      	pop	{r4, pc}

000db502 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   db502:	b510      	push	{r4, lr}
    write('}');
   db504:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   db506:	4604      	mov	r4, r0
    write('}');
   db508:	f7ff ff32 	bl	db370 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   db50c:	2301      	movs	r3, #1
   db50e:	7123      	strb	r3, [r4, #4]
}
   db510:	4620      	mov	r0, r4
   db512:	bd10      	pop	{r4, pc}

000db514 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   db514:	b508      	push	{r3, lr}
    switch (state_) {
   db516:	7903      	ldrb	r3, [r0, #4]
   db518:	2b01      	cmp	r3, #1
   db51a:	d002      	beq.n	db522 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   db51c:	2b02      	cmp	r3, #2
   db51e:	d004      	beq.n	db52a <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   db520:	bd08      	pop	{r3, pc}
        write(',');
   db522:	212c      	movs	r1, #44	; 0x2c
        write(':');
   db524:	f7ff ff24 	bl	db370 <_ZN5spark10JSONWriter5writeEc>
}
   db528:	e7fa      	b.n	db520 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   db52a:	213a      	movs	r1, #58	; 0x3a
   db52c:	e7fa      	b.n	db524 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000db52e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   db52e:	b510      	push	{r4, lr}
   db530:	4604      	mov	r4, r0
    writeSeparator();
   db532:	f7ff ffef 	bl	db514 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   db536:	4620      	mov	r0, r4
   db538:	217b      	movs	r1, #123	; 0x7b
   db53a:	f7ff ff19 	bl	db370 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   db53e:	2300      	movs	r3, #0
   db540:	7123      	strb	r3, [r4, #4]
}
   db542:	4620      	mov	r0, r4
   db544:	bd10      	pop	{r4, pc}
	...

000db548 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   db548:	b513      	push	{r0, r1, r4, lr}
   db54a:	4604      	mov	r4, r0
   db54c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   db54e:	f7ff ffe1 	bl	db514 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   db552:	6823      	ldr	r3, [r4, #0]
   db554:	9a01      	ldr	r2, [sp, #4]
   db556:	68db      	ldr	r3, [r3, #12]
   db558:	4903      	ldr	r1, [pc, #12]	; (db568 <_ZN5spark10JSONWriter5valueEi+0x20>)
   db55a:	4620      	mov	r0, r4
   db55c:	4798      	blx	r3
    state_ = NEXT;
   db55e:	2301      	movs	r3, #1
}
   db560:	4620      	mov	r0, r4
    state_ = NEXT;
   db562:	7123      	strb	r3, [r4, #4]
}
   db564:	b002      	add	sp, #8
   db566:	bd10      	pop	{r4, pc}
   db568:	000e0a7d 	.word	0x000e0a7d

000db56c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   db56c:	b513      	push	{r0, r1, r4, lr}
   db56e:	4604      	mov	r4, r0
   db570:	9101      	str	r1, [sp, #4]
    writeSeparator();
   db572:	f7ff ffcf 	bl	db514 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   db576:	6823      	ldr	r3, [r4, #0]
   db578:	9a01      	ldr	r2, [sp, #4]
   db57a:	68db      	ldr	r3, [r3, #12]
   db57c:	4903      	ldr	r1, [pc, #12]	; (db58c <_ZN5spark10JSONWriter5valueEj+0x20>)
   db57e:	4620      	mov	r0, r4
   db580:	4798      	blx	r3
    state_ = NEXT;
   db582:	2301      	movs	r3, #1
}
   db584:	4620      	mov	r0, r4
    state_ = NEXT;
   db586:	7123      	strb	r3, [r4, #4]
}
   db588:	b002      	add	sp, #8
   db58a:	bd10      	pop	{r4, pc}
   db58c:	000e0d5a 	.word	0x000e0d5a

000db590 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   db590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db594:	460d      	mov	r5, r1
   db596:	4617      	mov	r7, r2
    write('"');
   db598:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   db59a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; db63c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   db59e:	4604      	mov	r4, r0
    const char* const end = str + size;
   db5a0:	442f      	add	r7, r5
    write('"');
   db5a2:	f7ff fee5 	bl	db370 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   db5a6:	4629      	mov	r1, r5
    while (s != end) {
   db5a8:	42bd      	cmp	r5, r7
   db5aa:	462a      	mov	r2, r5
   db5ac:	d038      	beq.n	db620 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   db5ae:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   db5b2:	2e22      	cmp	r6, #34	; 0x22
   db5b4:	d003      	beq.n	db5be <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   db5b6:	2e5c      	cmp	r6, #92	; 0x5c
   db5b8:	d001      	beq.n	db5be <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   db5ba:	2e1f      	cmp	r6, #31
   db5bc:	d8f4      	bhi.n	db5a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   db5be:	6823      	ldr	r3, [r4, #0]
   db5c0:	1a52      	subs	r2, r2, r1
   db5c2:	689b      	ldr	r3, [r3, #8]
   db5c4:	4620      	mov	r0, r4
   db5c6:	4798      	blx	r3
            write('\\');
   db5c8:	215c      	movs	r1, #92	; 0x5c
   db5ca:	4620      	mov	r0, r4
   db5cc:	f7ff fed0 	bl	db370 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   db5d0:	2e0d      	cmp	r6, #13
   db5d2:	d80a      	bhi.n	db5ea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   db5d4:	2e07      	cmp	r6, #7
   db5d6:	d91c      	bls.n	db612 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   db5d8:	f1a6 0308 	sub.w	r3, r6, #8
   db5dc:	2b05      	cmp	r3, #5
   db5de:	d818      	bhi.n	db612 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   db5e0:	e8df f003 	tbb	[pc, r3]
   db5e4:	17110f0d 	.word	0x17110f0d
   db5e8:	1513      	.short	0x1513
   db5ea:	2e22      	cmp	r6, #34	; 0x22
   db5ec:	d001      	beq.n	db5f2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   db5ee:	2e5c      	cmp	r6, #92	; 0x5c
   db5f0:	d10f      	bne.n	db612 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   db5f2:	4631      	mov	r1, r6
                write('b');
   db5f4:	4620      	mov	r0, r4
   db5f6:	f7ff febb 	bl	db370 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   db5fa:	4629      	mov	r1, r5
    while (s != end) {
   db5fc:	e7d4      	b.n	db5a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   db5fe:	2162      	movs	r1, #98	; 0x62
   db600:	e7f8      	b.n	db5f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   db602:	2174      	movs	r1, #116	; 0x74
   db604:	e7f6      	b.n	db5f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   db606:	216e      	movs	r1, #110	; 0x6e
   db608:	e7f4      	b.n	db5f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   db60a:	2166      	movs	r1, #102	; 0x66
   db60c:	e7f2      	b.n	db5f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   db60e:	2172      	movs	r1, #114	; 0x72
   db610:	e7f0      	b.n	db5f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   db612:	6823      	ldr	r3, [r4, #0]
   db614:	4632      	mov	r2, r6
   db616:	68db      	ldr	r3, [r3, #12]
   db618:	4641      	mov	r1, r8
   db61a:	4620      	mov	r0, r4
   db61c:	4798      	blx	r3
                break;
   db61e:	e7ec      	b.n	db5fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   db620:	428d      	cmp	r5, r1
   db622:	d004      	beq.n	db62e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   db624:	6823      	ldr	r3, [r4, #0]
   db626:	1a6a      	subs	r2, r5, r1
   db628:	689b      	ldr	r3, [r3, #8]
   db62a:	4620      	mov	r0, r4
   db62c:	4798      	blx	r3
    }
    write('"');
   db62e:	2122      	movs	r1, #34	; 0x22
   db630:	4620      	mov	r0, r4
   db632:	f7ff fe9d 	bl	db370 <_ZN5spark10JSONWriter5writeEc>
}
   db636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   db63a:	bf00      	nop
   db63c:	000e1180 	.word	0x000e1180

000db640 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   db640:	b513      	push	{r0, r1, r4, lr}
   db642:	4604      	mov	r4, r0
   db644:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   db648:	f7ff ff64 	bl	db514 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   db64c:	4620      	mov	r0, r4
   db64e:	e9dd 2100 	ldrd	r2, r1, [sp]
   db652:	f7ff ff9d 	bl	db590 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   db656:	2302      	movs	r3, #2
}
   db658:	4620      	mov	r0, r4
    state_ = VALUE;
   db65a:	7123      	strb	r3, [r4, #4]
}
   db65c:	b002      	add	sp, #8
   db65e:	bd10      	pop	{r4, pc}

000db660 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   db660:	b513      	push	{r0, r1, r4, lr}
   db662:	4604      	mov	r4, r0
   db664:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   db668:	f7ff ff54 	bl	db514 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   db66c:	4620      	mov	r0, r4
   db66e:	e9dd 2100 	ldrd	r2, r1, [sp]
   db672:	f7ff ff8d 	bl	db590 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   db676:	2301      	movs	r3, #1
}
   db678:	4620      	mov	r0, r4
    state_ = NEXT;
   db67a:	7123      	strb	r3, [r4, #4]
}
   db67c:	b002      	add	sp, #8
   db67e:	bd10      	pop	{r4, pc}

000db680 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   db680:	6880      	ldr	r0, [r0, #8]
   db682:	6803      	ldr	r3, [r0, #0]
   db684:	68db      	ldr	r3, [r3, #12]
   db686:	4718      	bx	r3

000db688 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   db688:	4770      	bx	lr

000db68a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   db68a:	4608      	mov	r0, r1
   db68c:	b111      	cbz	r1, db694 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   db68e:	680b      	ldr	r3, [r1, #0]
   db690:	685b      	ldr	r3, [r3, #4]
   db692:	4718      	bx	r3
}
   db694:	4770      	bx	lr

000db696 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   db696:	4770      	bx	lr

000db698 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   db698:	4770      	bx	lr

000db69a <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   db69a:	4770      	bx	lr

000db69c <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   db69c:	4770      	bx	lr

000db69e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   db69e:	b538      	push	{r3, r4, r5, lr}
   db6a0:	4604      	mov	r4, r0
   db6a2:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   db6a4:	6800      	ldr	r0, [r0, #0]
   db6a6:	212e      	movs	r1, #46	; 0x2e
   db6a8:	f004 fb4f 	bl	dfd4a <strchrnul>
    size = s - category;
   db6ac:	6823      	ldr	r3, [r4, #0]
   db6ae:	1ac3      	subs	r3, r0, r3
   db6b0:	602b      	str	r3, [r5, #0]
    if (size) {
   db6b2:	b123      	cbz	r3, db6be <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   db6b4:	7803      	ldrb	r3, [r0, #0]
   db6b6:	b103      	cbz	r3, db6ba <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   db6b8:	3001      	adds	r0, #1
   db6ba:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   db6bc:	6020      	str	r0, [r4, #0]
}
   db6be:	4618      	mov	r0, r3
   db6c0:	bd38      	pop	{r3, r4, r5, pc}

000db6c2 <_ZN5spark16JSONStreamWriterD0Ev>:
   db6c2:	b510      	push	{r4, lr}
   db6c4:	210c      	movs	r1, #12
   db6c6:	4604      	mov	r4, r0
   db6c8:	f002 f9a4 	bl	dda14 <_ZdlPvj>
   db6cc:	4620      	mov	r0, r4
   db6ce:	bd10      	pop	{r4, pc}

000db6d0 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   db6d0:	b510      	push	{r4, lr}
   db6d2:	2104      	movs	r1, #4
   db6d4:	4604      	mov	r4, r0
   db6d6:	f002 f99d 	bl	dda14 <_ZdlPvj>
   db6da:	4620      	mov	r0, r4
   db6dc:	bd10      	pop	{r4, pc}

000db6de <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   db6de:	b510      	push	{r4, lr}
   db6e0:	2104      	movs	r1, #4
   db6e2:	4604      	mov	r4, r0
   db6e4:	f002 f996 	bl	dda14 <_ZdlPvj>
   db6e8:	4620      	mov	r0, r4
   db6ea:	bd10      	pop	{r4, pc}

000db6ec <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   db6ec:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   db6ee:	f004 fb36 	bl	dfd5e <strcmp>
}
   db6f2:	fab0 f080 	clz	r0, r0
   db6f6:	0940      	lsrs	r0, r0, #5
   db6f8:	bd08      	pop	{r3, pc}

000db6fa <__tcf_1>:
   db6fa:	4770      	bx	lr

000db6fc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   db6fc:	b510      	push	{r4, lr}
   db6fe:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   db700:	f001 ffa2 	bl	dd648 <_Z16_fetch_usbserialv>
   db704:	4284      	cmp	r4, r0
   db706:	d010      	beq.n	db72a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   db708:	f001 ff16 	bl	dd538 <_Z22__fetch_global_Serial1v>
   db70c:	4284      	cmp	r4, r0
   db70e:	d105      	bne.n	db71c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   db710:	f001 ff12 	bl	dd538 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   db714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   db718:	f001 bf0b 	b.w	dd532 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   db71c:	b12c      	cbz	r4, db72a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   db71e:	6823      	ldr	r3, [r4, #0]
   db720:	4620      	mov	r0, r4
   db722:	685b      	ldr	r3, [r3, #4]
}
   db724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   db728:	4718      	bx	r3
   db72a:	bd10      	pop	{r4, pc}

000db72c <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   db72c:	b513      	push	{r0, r1, r4, lr}
   db72e:	4604      	mov	r4, r0
    return value(val, strlen(val));
   db730:	4608      	mov	r0, r1
   db732:	9101      	str	r1, [sp, #4]
   db734:	f004 fb43 	bl	dfdbe <strlen>
   db738:	9901      	ldr	r1, [sp, #4]
   db73a:	4602      	mov	r2, r0
   db73c:	4620      	mov	r0, r4
}
   db73e:	b002      	add	sp, #8
   db740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   db744:	f7ff bf8c 	b.w	db660 <_ZN5spark10JSONWriter5valueEPKcj>

000db748 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   db748:	b513      	push	{r0, r1, r4, lr}
   db74a:	4604      	mov	r4, r0
    write(str, strlen(str));
   db74c:	4608      	mov	r0, r1
   db74e:	9101      	str	r1, [sp, #4]
   db750:	f004 fb35 	bl	dfdbe <strlen>
   db754:	6823      	ldr	r3, [r4, #0]
   db756:	9901      	ldr	r1, [sp, #4]
   db758:	68db      	ldr	r3, [r3, #12]
   db75a:	4602      	mov	r2, r0
   db75c:	4620      	mov	r0, r4
}
   db75e:	b002      	add	sp, #8
   db760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   db764:	4718      	bx	r3

000db766 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   db766:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   db768:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   db76a:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   db76e:	68db      	ldr	r3, [r3, #12]
   db770:	2201      	movs	r2, #1
   db772:	f10d 0107 	add.w	r1, sp, #7
   db776:	4798      	blx	r3
}
   db778:	b003      	add	sp, #12
   db77a:	f85d fb04 	ldr.w	pc, [sp], #4

000db77e <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   db77e:	b40e      	push	{r1, r2, r3}
   db780:	b503      	push	{r0, r1, lr}
   db782:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   db784:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   db786:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   db78a:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   db78c:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   db78e:	f001 f8e1 	bl	dc954 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   db792:	b002      	add	sp, #8
   db794:	f85d eb04 	ldr.w	lr, [sp], #4
   db798:	b003      	add	sp, #12
   db79a:	4770      	bx	lr

000db79c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   db79c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   db7a0:	e9d0 9500 	ldrd	r9, r5, [r0]
   db7a4:	f04f 0814 	mov.w	r8, #20
   db7a8:	fb08 f505 	mul.w	r5, r8, r5
   db7ac:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   db7ae:	10ab      	asrs	r3, r5, #2
   db7b0:	4d18      	ldr	r5, [pc, #96]	; (db814 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   db7b2:	4617      	mov	r7, r2
   db7b4:	435d      	muls	r5, r3
   db7b6:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   db7b8:	2d00      	cmp	r5, #0
   db7ba:	dd23      	ble.n	db804 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   db7bc:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   db7be:	fb08 f006 	mul.w	r0, r8, r6
   db7c2:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   db7c6:	463a      	mov	r2, r7
   db7c8:	f8ba b004 	ldrh.w	fp, [sl, #4]
   db7cc:	5820      	ldr	r0, [r4, r0]
   db7ce:	9101      	str	r1, [sp, #4]
   db7d0:	455f      	cmp	r7, fp
   db7d2:	bf28      	it	cs
   db7d4:	465a      	movcs	r2, fp
   db7d6:	f004 fafa 	bl	dfdce <strncmp>
                if (cmp == 0) {
   db7da:	9901      	ldr	r1, [sp, #4]
   db7dc:	2301      	movs	r3, #1
   db7de:	b978      	cbnz	r0, db800 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   db7e0:	455f      	cmp	r7, fp
   db7e2:	d103      	bne.n	db7ec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   db7e4:	9a00      	ldr	r2, [sp, #0]
   db7e6:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   db7e8:	4635      	mov	r5, r6
   db7ea:	e7e5      	b.n	db7b8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   db7ec:	bf8c      	ite	hi
   db7ee:	2001      	movhi	r0, #1
   db7f0:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   db7f2:	2800      	cmp	r0, #0
   db7f4:	d0f8      	beq.n	db7e8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   db7f6:	1bae      	subs	r6, r5, r6
	      ++__first;
   db7f8:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   db7fc:	3e01      	subs	r6, #1
   db7fe:	e7f3      	b.n	db7e8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   db800:	0fc0      	lsrs	r0, r0, #31
   db802:	e7f6      	b.n	db7f2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   db804:	eba4 0409 	sub.w	r4, r4, r9
}
   db808:	4802      	ldr	r0, [pc, #8]	; (db814 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   db80a:	10a4      	asrs	r4, r4, #2
   db80c:	4360      	muls	r0, r4
   db80e:	b003      	add	sp, #12
   db810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db814:	cccccccd 	.word	0xcccccccd

000db818 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   db818:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   db81a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   db81c:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   db81e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   db820:	b30b      	cbz	r3, db866 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   db822:	b301      	cbz	r1, db866 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   db824:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   db826:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   db82a:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   db82c:	a903      	add	r1, sp, #12
   db82e:	a801      	add	r0, sp, #4
   db830:	f7ff ff35 	bl	db69e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   db834:	4601      	mov	r1, r0
   db836:	b1b0      	cbz	r0, db866 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   db838:	f10d 030b 	add.w	r3, sp, #11
   db83c:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   db83e:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   db842:	4620      	mov	r0, r4
   db844:	f7ff ffaa 	bl	db79c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   db848:	f89d 300b 	ldrb.w	r3, [sp, #11]
   db84c:	b15b      	cbz	r3, db866 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   db84e:	6824      	ldr	r4, [r4, #0]
   db850:	2314      	movs	r3, #20
   db852:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   db856:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   db85a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   db85e:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   db860:	bfa8      	it	ge
   db862:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   db864:	e7e2      	b.n	db82c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   db866:	4630      	mov	r0, r6
   db868:	b004      	add	sp, #16
   db86a:	bd70      	pop	{r4, r5, r6, pc}

000db86c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   db86c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   db86e:	4c09      	ldr	r4, [pc, #36]	; (db894 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   db870:	7823      	ldrb	r3, [r4, #0]
   db872:	f3bf 8f5b 	dmb	ish
   db876:	07db      	lsls	r3, r3, #31
   db878:	d409      	bmi.n	db88e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   db87a:	4620      	mov	r0, r4
   db87c:	f7f8 fc1c 	bl	d40b8 <__cxa_guard_acquire>
   db880:	b128      	cbz	r0, db88e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   db882:	4620      	mov	r0, r4
   db884:	f7f8 fc1d 	bl	d40c2 <__cxa_guard_release>
   db888:	4803      	ldr	r0, [pc, #12]	; (db898 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   db88a:	f004 f9e1 	bl	dfc50 <atexit>
}
   db88e:	4803      	ldr	r0, [pc, #12]	; (db89c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   db890:	bd10      	pop	{r4, pc}
   db892:	bf00      	nop
   db894:	2003e53c 	.word	0x2003e53c
   db898:	000db697 	.word	0x000db697
   db89c:	2003e114 	.word	0x2003e114

000db8a0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   db8a0:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   db8a2:	4c09      	ldr	r4, [pc, #36]	; (db8c8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   db8a4:	7823      	ldrb	r3, [r4, #0]
   db8a6:	f3bf 8f5b 	dmb	ish
   db8aa:	07db      	lsls	r3, r3, #31
   db8ac:	d409      	bmi.n	db8c2 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   db8ae:	4620      	mov	r0, r4
   db8b0:	f7f8 fc02 	bl	d40b8 <__cxa_guard_acquire>
   db8b4:	b128      	cbz	r0, db8c2 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   db8b6:	4620      	mov	r0, r4
   db8b8:	f7f8 fc03 	bl	d40c2 <__cxa_guard_release>
   db8bc:	4803      	ldr	r0, [pc, #12]	; (db8cc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   db8be:	f004 f9c7 	bl	dfc50 <atexit>
    return &factory;
}
   db8c2:	4803      	ldr	r0, [pc, #12]	; (db8d0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   db8c4:	bd10      	pop	{r4, pc}
   db8c6:	bf00      	nop
   db8c8:	2003e540 	.word	0x2003e540
   db8cc:	000db6fb 	.word	0x000db6fb
   db8d0:	2003e118 	.word	0x2003e118

000db8d4 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   db8d4:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   db8d6:	2500      	movs	r5, #0
   db8d8:	4604      	mov	r4, r0
   db8da:	e9c0 5500 	strd	r5, r5, [r0]
   db8de:	e9c0 5504 	strd	r5, r5, [r0, #16]
   db8e2:	6085      	str	r5, [r0, #8]
   db8e4:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   db8e6:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   db8ea:	f7fe f94f 	bl	d9b8c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   db8ee:	f7ff ffbd 	bl	db86c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   db8f2:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   db8f4:	f7ff ffd4 	bl	db8a0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   db8f8:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   db8fa:	6220      	str	r0, [r4, #32]
}
   db8fc:	4620      	mov	r0, r4
   db8fe:	bd38      	pop	{r3, r4, r5, pc}

000db900 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   db900:	b510      	push	{r4, lr}
    static LogManager mgr;
   db902:	4c0a      	ldr	r4, [pc, #40]	; (db92c <_ZN5spark10LogManager8instanceEv+0x2c>)
   db904:	7823      	ldrb	r3, [r4, #0]
   db906:	f3bf 8f5b 	dmb	ish
   db90a:	07db      	lsls	r3, r3, #31
   db90c:	d40c      	bmi.n	db928 <_ZN5spark10LogManager8instanceEv+0x28>
   db90e:	4620      	mov	r0, r4
   db910:	f7f8 fbd2 	bl	d40b8 <__cxa_guard_acquire>
   db914:	b140      	cbz	r0, db928 <_ZN5spark10LogManager8instanceEv+0x28>
   db916:	4806      	ldr	r0, [pc, #24]	; (db930 <_ZN5spark10LogManager8instanceEv+0x30>)
   db918:	f7ff ffdc 	bl	db8d4 <_ZN5spark10LogManagerC1Ev>
   db91c:	4620      	mov	r0, r4
   db91e:	f7f8 fbd0 	bl	d40c2 <__cxa_guard_release>
   db922:	4804      	ldr	r0, [pc, #16]	; (db934 <_ZN5spark10LogManager8instanceEv+0x34>)
   db924:	f004 f994 	bl	dfc50 <atexit>
    return &mgr;
}
   db928:	4801      	ldr	r0, [pc, #4]	; (db930 <_ZN5spark10LogManager8instanceEv+0x30>)
   db92a:	bd10      	pop	{r4, pc}
   db92c:	2003e538 	.word	0x2003e538
   db930:	2003e548 	.word	0x2003e548
   db934:	000dbde1 	.word	0x000dbde1

000db938 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   db938:	4a02      	ldr	r2, [pc, #8]	; (db944 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   db93a:	4903      	ldr	r1, [pc, #12]	; (db948 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   db93c:	4803      	ldr	r0, [pc, #12]	; (db94c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   db93e:	2300      	movs	r3, #0
   db940:	f7fe bbfc 	b.w	da13c <log_set_callbacks>
   db944:	000dbc69 	.word	0x000dbc69
   db948:	000dbbf5 	.word	0x000dbbf5
   db94c:	000dbb75 	.word	0x000dbb75

000db950 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   db950:	2300      	movs	r3, #0
   db952:	461a      	mov	r2, r3
   db954:	4619      	mov	r1, r3
   db956:	4618      	mov	r0, r3
   db958:	f7fe bbf0 	b.w	da13c <log_set_callbacks>

000db95c <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   db95c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   db95e:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   db960:	f851 3b04 	ldr.w	r3, [r1], #4
   db964:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   db966:	4604      	mov	r4, r0
   db968:	a801      	add	r0, sp, #4
   db96a:	f7fe fdda 	bl	da522 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   db96e:	466a      	mov	r2, sp
   db970:	4629      	mov	r1, r5
   db972:	4620      	mov	r0, r4
   db974:	f7ff fd1f 	bl	db3b6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   db978:	a801      	add	r0, sp, #4
   db97a:	f7f9 fed3 	bl	d5724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   db97e:	4620      	mov	r0, r4
   db980:	b003      	add	sp, #12
   db982:	bd30      	pop	{r4, r5, pc}

000db984 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   db984:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   db986:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   db988:	f851 3b04 	ldr.w	r3, [r1], #4
   db98c:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   db98e:	4604      	mov	r4, r0
   db990:	a801      	add	r0, sp, #4
   db992:	f7fe fdc6 	bl	da522 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   db996:	466a      	mov	r2, sp
   db998:	4629      	mov	r1, r5
   db99a:	4620      	mov	r0, r4
   db99c:	f7ff fd86 	bl	db4ac <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   db9a0:	a801      	add	r0, sp, #4
   db9a2:	f7f9 febf 	bl	d5724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   db9a6:	4620      	mov	r0, r4
   db9a8:	b003      	add	sp, #12
   db9aa:	bd30      	pop	{r4, r5, pc}

000db9ac <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   db9ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   db9ae:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   db9b0:	f851 3b04 	ldr.w	r3, [r1], #4
   db9b4:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   db9b6:	4604      	mov	r4, r0
   db9b8:	a801      	add	r0, sp, #4
   db9ba:	f7fe fdb2 	bl	da522 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   db9be:	466a      	mov	r2, sp
   db9c0:	4629      	mov	r1, r5
   db9c2:	4620      	mov	r0, r4
   db9c4:	f7ff fd4e 	bl	db464 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   db9c8:	a801      	add	r0, sp, #4
   db9ca:	f7f9 feab 	bl	d5724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   db9ce:	4620      	mov	r0, r4
   db9d0:	b003      	add	sp, #12
   db9d2:	bd30      	pop	{r4, r5, pc}

000db9d4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   db9d4:	b570      	push	{r4, r5, r6, lr}
   db9d6:	b08a      	sub	sp, #40	; 0x28
   db9d8:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   db9da:	4601      	mov	r1, r0
   db9dc:	a804      	add	r0, sp, #16
   db9de:	f7ff ffd1 	bl	db984 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   db9e2:	4e14      	ldr	r6, [pc, #80]	; (dba34 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   db9e4:	a804      	add	r0, sp, #16
   db9e6:	f7ff fd79 	bl	db4dc <_ZN5spark18JSONObjectIterator4nextEv>
   db9ea:	b1e8      	cbz	r0, dba28 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   db9ec:	a904      	add	r1, sp, #16
   db9ee:	4668      	mov	r0, sp
   db9f0:	f7ff ffdc 	bl	db9ac <_ZNK5spark18JSONObjectIterator4nameEv>
   db9f4:	9802      	ldr	r0, [sp, #8]
   db9f6:	4631      	mov	r1, r6
   db9f8:	f7ff fe78 	bl	db6ec <_ZNK5spark10JSONStringeqEPKc.isra.0>
   db9fc:	4604      	mov	r4, r0
   db9fe:	b110      	cbz	r0, dba06 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   dba00:	1e2c      	subs	r4, r5, #0
   dba02:	bf18      	it	ne
   dba04:	2401      	movne	r4, #1
   dba06:	a801      	add	r0, sp, #4
   dba08:	f7f9 fe8c 	bl	d5724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dba0c:	2c00      	cmp	r4, #0
   dba0e:	d0e9      	beq.n	db9e4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   dba10:	a904      	add	r1, sp, #16
   dba12:	4668      	mov	r0, sp
   dba14:	f7ff ffa2 	bl	db95c <_ZNK5spark18JSONObjectIterator5valueEv>
   dba18:	4668      	mov	r0, sp
   dba1a:	f7ff fd02 	bl	db422 <_ZNK5spark9JSONValue5toIntEv>
   dba1e:	6028      	str	r0, [r5, #0]
   dba20:	a801      	add	r0, sp, #4
   dba22:	f7f9 fe7f 	bl	d5724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dba26:	e7dd      	b.n	db9e4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   dba28:	a805      	add	r0, sp, #20
   dba2a:	f7f9 fe7b 	bl	d5724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   dba2e:	b00a      	add	sp, #40	; 0x28
   dba30:	bd70      	pop	{r4, r5, r6, pc}
   dba32:	bf00      	nop
   dba34:	000e1186 	.word	0x000e1186

000dba38 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   dba38:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dba3a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   dba3c:	4620      	mov	r0, r4
   dba3e:	4912      	ldr	r1, [pc, #72]	; (dba88 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   dba40:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   dba42:	f004 f98c 	bl	dfd5e <strcmp>
   dba46:	b948      	cbnz	r0, dba5c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   dba48:	f001 fdfe 	bl	dd648 <_Z16_fetch_usbserialv>
   dba4c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   dba50:	f001 fdea 	bl	dd628 <_ZN9USBSerial5beginEl>
        return &Serial;
   dba54:	f001 fdf8 	bl	dd648 <_Z16_fetch_usbserialv>
}
   dba58:	b003      	add	sp, #12
   dba5a:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   dba5c:	490b      	ldr	r1, [pc, #44]	; (dba8c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   dba5e:	4620      	mov	r0, r4
   dba60:	f004 f97d 	bl	dfd5e <strcmp>
   dba64:	b970      	cbnz	r0, dba84 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   dba66:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   dba6a:	a901      	add	r1, sp, #4
   dba6c:	4628      	mov	r0, r5
        int baud = 9600;
   dba6e:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   dba70:	f7ff ffb0 	bl	db9d4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   dba74:	f001 fd60 	bl	dd538 <_Z22__fetch_global_Serial1v>
   dba78:	9901      	ldr	r1, [sp, #4]
   dba7a:	f001 fd57 	bl	dd52c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   dba7e:	f001 fd5b 	bl	dd538 <_Z22__fetch_global_Serial1v>
   dba82:	e7e9      	b.n	dba58 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   dba84:	2000      	movs	r0, #0
   dba86:	e7e7      	b.n	dba58 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   dba88:	000e118b 	.word	0x000e118b
   dba8c:	000e1192 	.word	0x000e1192

000dba90 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   dba90:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   dba92:	e9d0 5300 	ldrd	r5, r3, [r0]
   dba96:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   dba98:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   dba9a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   dba9e:	42ae      	cmp	r6, r5
   dbaa0:	d005      	beq.n	dbaae <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   dbaa2:	f105 0008 	add.w	r0, r5, #8
   dbaa6:	f7ff fff3 	bl	dba90 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   dbaaa:	3514      	adds	r5, #20
   dbaac:	e7f7      	b.n	dba9e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   dbaae:	6820      	ldr	r0, [r4, #0]
   dbab0:	f7fe fcb0 	bl	da414 <free>
}
   dbab4:	4620      	mov	r0, r4
   dbab6:	bd70      	pop	{r4, r5, r6, pc}

000dbab8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   dbab8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   dbaba:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   dbabe:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   dbac0:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   dbac4:	42ae      	cmp	r6, r5
   dbac6:	d004      	beq.n	dbad2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   dbac8:	4628      	mov	r0, r5
   dbaca:	f001 f869 	bl	dcba0 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   dbace:	3510      	adds	r5, #16
   dbad0:	e7f8      	b.n	dbac4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   dbad2:	6820      	ldr	r0, [r4, #0]
   dbad4:	f7fe fc9e 	bl	da414 <free>
}
   dbad8:	4620      	mov	r0, r4
   dbada:	bd70      	pop	{r4, r5, r6, pc}

000dbadc <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   dbadc:	b510      	push	{r4, lr}
   dbade:	4604      	mov	r4, r0
   dbae0:	300c      	adds	r0, #12
   dbae2:	f7ff ffd5 	bl	dba90 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   dbae6:	4620      	mov	r0, r4
   dbae8:	f7ff ffe6 	bl	dbab8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   dbaec:	4620      	mov	r0, r4
   dbaee:	bd10      	pop	{r4, pc}

000dbaf0 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   dbaf0:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   dbaf2:	4b04      	ldr	r3, [pc, #16]	; (dbb04 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   dbaf4:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   dbaf6:	f840 3b04 	str.w	r3, [r0], #4
   dbafa:	f7ff ffef 	bl	dbadc <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   dbafe:	4620      	mov	r0, r4
   dbb00:	bd10      	pop	{r4, pc}
   dbb02:	bf00      	nop
   dbb04:	000e090c 	.word	0x000e090c

000dbb08 <_ZN5spark16StreamLogHandlerD0Ev>:
   dbb08:	b510      	push	{r4, lr}
   dbb0a:	4604      	mov	r4, r0
   dbb0c:	f7ff fff0 	bl	dbaf0 <_ZN5spark16StreamLogHandlerD1Ev>
   dbb10:	4620      	mov	r0, r4
   dbb12:	2124      	movs	r1, #36	; 0x24
   dbb14:	f001 ff7e 	bl	dda14 <_ZdlPvj>
   dbb18:	4620      	mov	r0, r4
   dbb1a:	bd10      	pop	{r4, pc}

000dbb1c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   dbb1c:	b510      	push	{r4, lr}
   dbb1e:	4b03      	ldr	r3, [pc, #12]	; (dbb2c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   dbb20:	6003      	str	r3, [r0, #0]
   dbb22:	4604      	mov	r4, r0
   dbb24:	f7ff ffe4 	bl	dbaf0 <_ZN5spark16StreamLogHandlerD1Ev>
   dbb28:	4620      	mov	r0, r4
   dbb2a:	bd10      	pop	{r4, pc}
   dbb2c:	000e122c 	.word	0x000e122c

000dbb30 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   dbb30:	b510      	push	{r4, lr}
   dbb32:	4604      	mov	r4, r0
   dbb34:	f7ff fff2 	bl	dbb1c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   dbb38:	4620      	mov	r0, r4
   dbb3a:	2124      	movs	r1, #36	; 0x24
   dbb3c:	f001 ff6a 	bl	dda14 <_ZdlPvj>
   dbb40:	4620      	mov	r0, r4
   dbb42:	bd10      	pop	{r4, pc}

000dbb44 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   dbb44:	2200      	movs	r2, #0
   dbb46:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   dbb4a:	b510      	push	{r4, lr}
        capacity_(0) {
   dbb4c:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   dbb4e:	680c      	ldr	r4, [r1, #0]
   dbb50:	6004      	str	r4, [r0, #0]
   dbb52:	684c      	ldr	r4, [r1, #4]
   dbb54:	6044      	str	r4, [r0, #4]
   dbb56:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dbb58:	600a      	str	r2, [r1, #0]
   dbb5a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   dbb5c:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dbb5e:	608a      	str	r2, [r1, #8]
}
   dbb60:	bd10      	pop	{r4, pc}

000dbb62 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   dbb62:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   dbb64:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   dbb66:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   dbb68:	6818      	ldr	r0, [r3, #0]
   dbb6a:	f7fe f827 	bl	d9bbc <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   dbb6e:	4620      	mov	r0, r4
   dbb70:	bd10      	pop	{r4, pc}
	...

000dbb74 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   dbb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbb78:	b087      	sub	sp, #28
   dbb7a:	4680      	mov	r8, r0
   dbb7c:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   dbb7e:	4b1c      	ldr	r3, [pc, #112]	; (dbbf0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   dbb80:	685b      	ldr	r3, [r3, #4]
   dbb82:	f3c3 0308 	ubfx	r3, r3, #0, #9
   dbb86:	4689      	mov	r9, r1
   dbb88:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   dbb8a:	b96b      	cbnz	r3, dbba8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   dbb8c:	f7ff feb8 	bl	db900 <_ZN5spark10LogManager8instanceEv>
   dbb90:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   dbb92:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   dbb96:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   dbb98:	9305      	str	r3, [sp, #20]
   dbb9a:	f7fe f807 	bl	d9bac <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   dbb9e:	7b23      	ldrb	r3, [r4, #12]
   dbba0:	b12b      	cbz	r3, dbbae <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   dbba2:	a805      	add	r0, sp, #20
   dbba4:	f7ff ffdd 	bl	dbb62 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   dbba8:	b007      	add	sp, #28
   dbbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   dbbae:	2301      	movs	r3, #1
   dbbb0:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   dbbb2:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   dbbb6:	fa5f f989 	uxtb.w	r9, r9
   dbbba:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   dbbbe:	45aa      	cmp	sl, r5
   dbbc0:	d012      	beq.n	dbbe8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   dbbc2:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   dbbc6:	4631      	mov	r1, r6
   dbbc8:	1d38      	adds	r0, r7, #4
   dbbca:	f7ff fe25 	bl	db818 <_ZNK5spark6detail9LogFilter5levelEPKc>
   dbbce:	4581      	cmp	r9, r0
   dbbd0:	d3f5      	bcc.n	dbbbe <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   dbbd2:	683b      	ldr	r3, [r7, #0]
   dbbd4:	9a03      	ldr	r2, [sp, #12]
   dbbd6:	9200      	str	r2, [sp, #0]
   dbbd8:	f8d3 b008 	ldr.w	fp, [r3, #8]
   dbbdc:	464a      	mov	r2, r9
   dbbde:	4633      	mov	r3, r6
   dbbe0:	4641      	mov	r1, r8
   dbbe2:	4638      	mov	r0, r7
   dbbe4:	47d8      	blx	fp
   dbbe6:	e7ea      	b.n	dbbbe <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   dbbe8:	2300      	movs	r3, #0
   dbbea:	7323      	strb	r3, [r4, #12]
   dbbec:	e7d9      	b.n	dbba2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   dbbee:	bf00      	nop
   dbbf0:	e000ed00 	.word	0xe000ed00

000dbbf4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   dbbf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbbf8:	469b      	mov	fp, r3
   dbbfa:	4b1a      	ldr	r3, [pc, #104]	; (dbc64 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   dbbfc:	685b      	ldr	r3, [r3, #4]
   dbbfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
   dbc02:	4680      	mov	r8, r0
   dbc04:	4689      	mov	r9, r1
   dbc06:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   dbc08:	b96b      	cbnz	r3, dbc26 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   dbc0a:	f7ff fe79 	bl	db900 <_ZN5spark10LogManager8instanceEv>
   dbc0e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   dbc10:	f100 0324 	add.w	r3, r0, #36	; 0x24
   dbc14:	6a40      	ldr	r0, [r0, #36]	; 0x24
   dbc16:	9301      	str	r3, [sp, #4]
   dbc18:	f7fd ffc8 	bl	d9bac <os_mutex_recursive_lock>
        if (that->isActive()) {
   dbc1c:	7b23      	ldrb	r3, [r4, #12]
   dbc1e:	b12b      	cbz	r3, dbc2c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   dbc20:	a801      	add	r0, sp, #4
   dbc22:	f7ff ff9e 	bl	dbb62 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   dbc26:	b003      	add	sp, #12
   dbc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   dbc2c:	2301      	movs	r3, #1
   dbc2e:	7323      	strb	r3, [r4, #12]
   dbc30:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   dbc34:	b2f6      	uxtb	r6, r6
   dbc36:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   dbc3a:	4555      	cmp	r5, sl
   dbc3c:	d00e      	beq.n	dbc5c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   dbc3e:	f855 7b04 	ldr.w	r7, [r5], #4
   dbc42:	4659      	mov	r1, fp
   dbc44:	1d38      	adds	r0, r7, #4
   dbc46:	f7ff fde7 	bl	db818 <_ZNK5spark6detail9LogFilter5levelEPKc>
   dbc4a:	4286      	cmp	r6, r0
   dbc4c:	d3f5      	bcc.n	dbc3a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   dbc4e:	683b      	ldr	r3, [r7, #0]
   dbc50:	464a      	mov	r2, r9
   dbc52:	68db      	ldr	r3, [r3, #12]
   dbc54:	4641      	mov	r1, r8
   dbc56:	4638      	mov	r0, r7
   dbc58:	4798      	blx	r3
   dbc5a:	e7ee      	b.n	dbc3a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   dbc5c:	2300      	movs	r3, #0
   dbc5e:	7323      	strb	r3, [r4, #12]
   dbc60:	e7de      	b.n	dbc20 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   dbc62:	bf00      	nop
   dbc64:	e000ed00 	.word	0xe000ed00

000dbc68 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   dbc68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   dbc6c:	4b16      	ldr	r3, [pc, #88]	; (dbcc8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   dbc6e:	685b      	ldr	r3, [r3, #4]
   dbc70:	f3c3 0308 	ubfx	r3, r3, #0, #9
   dbc74:	4605      	mov	r5, r0
   dbc76:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   dbc78:	bb1b      	cbnz	r3, dbcc2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   dbc7a:	f7ff fe41 	bl	db900 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   dbc7e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   dbc82:	4604      	mov	r4, r0
   dbc84:	6a40      	ldr	r0, [r0, #36]	; 0x24
   dbc86:	9301      	str	r3, [sp, #4]
   dbc88:	f7fd ff90 	bl	d9bac <os_mutex_recursive_lock>
   dbc8c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   dbc90:	2446      	movs	r4, #70	; 0x46
   dbc92:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   dbc96:	45b0      	cmp	r8, r6
   dbc98:	d109      	bne.n	dbcae <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   dbc9a:	a801      	add	r0, sp, #4
   dbc9c:	f7ff ff61 	bl	dbb62 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   dbca0:	42a5      	cmp	r5, r4
   dbca2:	bfb4      	ite	lt
   dbca4:	2000      	movlt	r0, #0
   dbca6:	2001      	movge	r0, #1
}
   dbca8:	b002      	add	sp, #8
   dbcaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   dbcae:	f856 0b04 	ldr.w	r0, [r6], #4
   dbcb2:	4639      	mov	r1, r7
   dbcb4:	3004      	adds	r0, #4
   dbcb6:	f7ff fdaf 	bl	db818 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   dbcba:	4284      	cmp	r4, r0
   dbcbc:	bfa8      	it	ge
   dbcbe:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   dbcc0:	e7e9      	b.n	dbc96 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   dbcc2:	2000      	movs	r0, #0
   dbcc4:	e7f0      	b.n	dbca8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   dbcc6:	bf00      	nop
   dbcc8:	e000ed00 	.word	0xe000ed00

000dbccc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   dbccc:	b570      	push	{r4, r5, r6, lr}
   dbcce:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   dbcd0:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   dbcd4:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   dbcd6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   dbcda:	4282      	cmp	r2, r0
   dbcdc:	d007      	beq.n	dbcee <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   dbcde:	4601      	mov	r1, r0
            if (*p == value) {
   dbce0:	681d      	ldr	r5, [r3, #0]
   dbce2:	f851 6b04 	ldr.w	r6, [r1], #4
   dbce6:	42ae      	cmp	r6, r5
   dbce8:	d003      	beq.n	dbcf2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   dbcea:	4608      	mov	r0, r1
   dbcec:	e7f5      	b.n	dbcda <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   dbcee:	2000      	movs	r0, #0
}
   dbcf0:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   dbcf2:	1a52      	subs	r2, r2, r1
   dbcf4:	f003 ffd6 	bl	dfca4 <memmove>
    --size_;
   dbcf8:	6863      	ldr	r3, [r4, #4]
   dbcfa:	3b01      	subs	r3, #1
   dbcfc:	6063      	str	r3, [r4, #4]
    return true;
   dbcfe:	2001      	movs	r0, #1
   dbd00:	e7f6      	b.n	dbcf0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000dbd02 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   dbd02:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   dbd04:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   dbd08:	4604      	mov	r4, r0
   dbd0a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   dbd0c:	9101      	str	r1, [sp, #4]
   dbd0e:	9303      	str	r3, [sp, #12]
   dbd10:	f7fd ff4c 	bl	d9bac <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   dbd14:	a901      	add	r1, sp, #4
   dbd16:	4620      	mov	r0, r4
   dbd18:	f7ff ffd8 	bl	dbccc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   dbd1c:	b118      	cbz	r0, dbd26 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   dbd1e:	6863      	ldr	r3, [r4, #4]
   dbd20:	b90b      	cbnz	r3, dbd26 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   dbd22:	f7ff fe15 	bl	db950 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   dbd26:	a803      	add	r0, sp, #12
   dbd28:	f7ff ff1b 	bl	dbb62 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   dbd2c:	b004      	add	sp, #16
   dbd2e:	bd10      	pop	{r4, pc}

000dbd30 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   dbd30:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   dbd32:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   dbd36:	2318      	movs	r3, #24
   dbd38:	4604      	mov	r4, r0
   dbd3a:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   dbd3e:	42ae      	cmp	r6, r5
   dbd40:	d015      	beq.n	dbd6e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   dbd42:	f105 0110 	add.w	r1, r5, #16
   dbd46:	4620      	mov	r0, r4
   dbd48:	f7ff ffc0 	bl	dbccc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   dbd4c:	6863      	ldr	r3, [r4, #4]
   dbd4e:	b90b      	cbnz	r3, dbd54 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   dbd50:	f7ff fdfe 	bl	db950 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   dbd54:	69e0      	ldr	r0, [r4, #28]
   dbd56:	6929      	ldr	r1, [r5, #16]
   dbd58:	6803      	ldr	r3, [r0, #0]
   dbd5a:	68db      	ldr	r3, [r3, #12]
   dbd5c:	4798      	blx	r3
        if (h.stream) {
   dbd5e:	6969      	ldr	r1, [r5, #20]
   dbd60:	b119      	cbz	r1, dbd6a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   dbd62:	6a20      	ldr	r0, [r4, #32]
   dbd64:	6803      	ldr	r3, [r0, #0]
   dbd66:	68db      	ldr	r3, [r3, #12]
   dbd68:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   dbd6a:	3518      	adds	r5, #24
   dbd6c:	e7e7      	b.n	dbd3e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   dbd6e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   dbd72:	2618      	movs	r6, #24
   dbd74:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   dbd78:	42ae      	cmp	r6, r5
   dbd7a:	d004      	beq.n	dbd86 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   dbd7c:	4628      	mov	r0, r5
   dbd7e:	f000 ff0f 	bl	dcba0 <_ZN6StringD1Ev>
   dbd82:	3518      	adds	r5, #24
   dbd84:	e7f8      	b.n	dbd78 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   dbd86:	2300      	movs	r3, #0
   dbd88:	6163      	str	r3, [r4, #20]
}
   dbd8a:	bd70      	pop	{r4, r5, r6, pc}

000dbd8c <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   dbd8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   dbd8e:	4604      	mov	r4, r0
    resetSystemCallbacks();
   dbd90:	f7ff fdde 	bl	db950 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   dbd94:	f104 0324 	add.w	r3, r4, #36	; 0x24
   dbd98:	6a60      	ldr	r0, [r4, #36]	; 0x24
   dbd9a:	9301      	str	r3, [sp, #4]
   dbd9c:	f7fd ff06 	bl	d9bac <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   dbda0:	4620      	mov	r0, r4
   dbda2:	f7ff ffc5 	bl	dbd30 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   dbda6:	a801      	add	r0, sp, #4
   dbda8:	f7ff fedb 	bl	dbb62 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   dbdac:	6a60      	ldr	r0, [r4, #36]	; 0x24
   dbdae:	b108      	cbz	r0, dbdb4 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   dbdb0:	f7fd fef4 	bl	d9b9c <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   dbdb4:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   dbdb8:	2618      	movs	r6, #24
   dbdba:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   dbdbe:	42ae      	cmp	r6, r5
   dbdc0:	d004      	beq.n	dbdcc <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   dbdc2:	4628      	mov	r0, r5
   dbdc4:	f000 feec 	bl	dcba0 <_ZN6StringD1Ev>
   dbdc8:	3518      	adds	r5, #24
   dbdca:	e7f8      	b.n	dbdbe <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   dbdcc:	6920      	ldr	r0, [r4, #16]
   dbdce:	f7fe fb21 	bl	da414 <free>
   dbdd2:	6820      	ldr	r0, [r4, #0]
   dbdd4:	f7fe fb1e 	bl	da414 <free>
}
   dbdd8:	4620      	mov	r0, r4
   dbdda:	b002      	add	sp, #8
   dbddc:	bd70      	pop	{r4, r5, r6, pc}
	...

000dbde0 <__tcf_2>:
    static LogManager mgr;
   dbde0:	4801      	ldr	r0, [pc, #4]	; (dbde8 <__tcf_2+0x8>)
   dbde2:	f7ff bfd3 	b.w	dbd8c <_ZN5spark10LogManagerD1Ev>
   dbde6:	bf00      	nop
   dbde8:	2003e548 	.word	0x2003e548

000dbdec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   dbdec:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   dbdee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dbdf0:	4606      	mov	r6, r0
   dbdf2:	460c      	mov	r4, r1
   dbdf4:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   dbdf6:	d927      	bls.n	dbe48 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   dbdf8:	4290      	cmp	r0, r2
   dbdfa:	d226      	bcs.n	dbe4a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   dbdfc:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   dbe00:	1a6c      	subs	r4, r5, r1
   dbe02:	f1a1 0714 	sub.w	r7, r1, #20
   dbe06:	4404      	add	r4, r0
        capacity_(0) {
   dbe08:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   dbe0a:	42af      	cmp	r7, r5
   dbe0c:	d03d      	beq.n	dbe8a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   dbe0e:	b1a4      	cbz	r4, dbe3a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   dbe10:	682b      	ldr	r3, [r5, #0]
   dbe12:	6023      	str	r3, [r4, #0]
   dbe14:	88ab      	ldrh	r3, [r5, #4]
   dbe16:	80a3      	strh	r3, [r4, #4]
   dbe18:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   dbe1c:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   dbe1e:	e9c4 6602 	strd	r6, r6, [r4, #8]
   dbe22:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   dbe24:	68ab      	ldr	r3, [r5, #8]
   dbe26:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dbe28:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dbe2a:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   dbe2c:	68ea      	ldr	r2, [r5, #12]
   dbe2e:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dbe30:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dbe32:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   dbe34:	692a      	ldr	r2, [r5, #16]
   dbe36:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   dbe38:	612b      	str	r3, [r5, #16]
   dbe3a:	f105 0008 	add.w	r0, r5, #8
   dbe3e:	f7ff fe27 	bl	dba90 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   dbe42:	3d14      	subs	r5, #20
   dbe44:	3c14      	subs	r4, #20
   dbe46:	e7e0      	b.n	dbe0a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   dbe48:	d01f      	beq.n	dbe8a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   dbe4a:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   dbe4c:	42ac      	cmp	r4, r5
   dbe4e:	d01c      	beq.n	dbe8a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   dbe50:	b1a6      	cbz	r6, dbe7c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   dbe52:	6823      	ldr	r3, [r4, #0]
   dbe54:	6033      	str	r3, [r6, #0]
   dbe56:	88a3      	ldrh	r3, [r4, #4]
   dbe58:	80b3      	strh	r3, [r6, #4]
   dbe5a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   dbe5e:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   dbe60:	e9c6 7702 	strd	r7, r7, [r6, #8]
   dbe64:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   dbe66:	68a3      	ldr	r3, [r4, #8]
   dbe68:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dbe6a:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dbe6c:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   dbe6e:	68e2      	ldr	r2, [r4, #12]
   dbe70:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dbe72:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dbe74:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   dbe76:	6922      	ldr	r2, [r4, #16]
   dbe78:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   dbe7a:	6123      	str	r3, [r4, #16]
   dbe7c:	f104 0008 	add.w	r0, r4, #8
   dbe80:	f7ff fe06 	bl	dba90 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   dbe84:	3414      	adds	r4, #20
   dbe86:	3614      	adds	r6, #20
   dbe88:	e7e0      	b.n	dbe4c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   dbe8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dbe8c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   dbe8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dbe8e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   dbe92:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   dbe94:	4604      	mov	r4, r0
   dbe96:	460e      	mov	r6, r1
   dbe98:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dbe9a:	db0d      	blt.n	dbeb8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   dbe9c:	3501      	adds	r5, #1
        if (n > 0) {
   dbe9e:	2d00      	cmp	r5, #0
   dbea0:	6800      	ldr	r0, [r0, #0]
   dbea2:	dd04      	ble.n	dbeae <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   dbea4:	00a9      	lsls	r1, r5, #2
   dbea6:	f7fe fabd 	bl	da424 <realloc>
            if (!d) {
   dbeaa:	b918      	cbnz	r0, dbeb4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   dbeac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   dbeae:	f7fe fab1 	bl	da414 <free>
        T* d = nullptr;
   dbeb2:	2000      	movs	r0, #0
        data_ = d;
   dbeb4:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   dbeb6:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   dbeb8:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   dbeba:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   dbebc:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   dbec0:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   dbec2:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   dbec6:	1d08      	adds	r0, r1, #4
   dbec8:	f003 feec 	bl	dfca4 <memmove>
    new(p) T(std::move(value));
   dbecc:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   dbed0:	6863      	ldr	r3, [r4, #4]
   dbed2:	3301      	adds	r3, #1
   dbed4:	6063      	str	r3, [r4, #4]
    return true;
   dbed6:	2001      	movs	r0, #1
   dbed8:	e7e8      	b.n	dbeac <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000dbeda <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   dbeda:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   dbedc:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   dbee0:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   dbee2:	6a40      	ldr	r0, [r0, #36]	; 0x24
   dbee4:	9301      	str	r3, [sp, #4]
   dbee6:	460d      	mov	r5, r1
   dbee8:	f7fd fe60 	bl	d9bac <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   dbeec:	e9d4 3100 	ldrd	r3, r1, [r4]
   dbef0:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   dbef4:	4283      	cmp	r3, r0
   dbef6:	461a      	mov	r2, r3
   dbef8:	d00b      	beq.n	dbf12 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   dbefa:	6812      	ldr	r2, [r2, #0]
   dbefc:	42aa      	cmp	r2, r5
   dbefe:	f103 0304 	add.w	r3, r3, #4
   dbf02:	d1f7      	bne.n	dbef4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   dbf04:	a801      	add	r0, sp, #4
   dbf06:	f7ff fe2c 	bl	dbb62 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   dbf0a:	2500      	movs	r5, #0
}
   dbf0c:	4628      	mov	r0, r5
   dbf0e:	b003      	add	sp, #12
   dbf10:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   dbf12:	462a      	mov	r2, r5
   dbf14:	4620      	mov	r0, r4
   dbf16:	f7ff ffb9 	bl	dbe8c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   dbf1a:	4605      	mov	r5, r0
   dbf1c:	2800      	cmp	r0, #0
   dbf1e:	d0f1      	beq.n	dbf04 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   dbf20:	6863      	ldr	r3, [r4, #4]
   dbf22:	2b01      	cmp	r3, #1
   dbf24:	d101      	bne.n	dbf2a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   dbf26:	f7ff fd07 	bl	db938 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   dbf2a:	a801      	add	r0, sp, #4
   dbf2c:	f7ff fe19 	bl	dbb62 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   dbf30:	e7ec      	b.n	dbf0c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000dbf32 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   dbf32:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   dbf34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dbf36:	4604      	mov	r4, r0
   dbf38:	460d      	mov	r5, r1
   dbf3a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   dbf3c:	d914      	bls.n	dbf68 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   dbf3e:	4290      	cmp	r0, r2
   dbf40:	d213      	bcs.n	dbf6a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   dbf42:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   dbf46:	1a75      	subs	r5, r6, r1
   dbf48:	f1a1 0710 	sub.w	r7, r1, #16
   dbf4c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   dbf4e:	42b7      	cmp	r7, r6
   dbf50:	d018      	beq.n	dbf84 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   dbf52:	b11c      	cbz	r4, dbf5c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   dbf54:	4631      	mov	r1, r6
   dbf56:	4620      	mov	r0, r4
   dbf58:	f000 fe9e 	bl	dcc98 <_ZN6StringC1EOS_>
                end->~T();
   dbf5c:	4630      	mov	r0, r6
   dbf5e:	f000 fe1f 	bl	dcba0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   dbf62:	3e10      	subs	r6, #16
   dbf64:	3c10      	subs	r4, #16
   dbf66:	e7f2      	b.n	dbf4e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   dbf68:	d00c      	beq.n	dbf84 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   dbf6a:	42b5      	cmp	r5, r6
   dbf6c:	d00a      	beq.n	dbf84 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   dbf6e:	b11c      	cbz	r4, dbf78 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   dbf70:	4629      	mov	r1, r5
   dbf72:	4620      	mov	r0, r4
   dbf74:	f000 fe90 	bl	dcc98 <_ZN6StringC1EOS_>
                p->~T();
   dbf78:	4628      	mov	r0, r5
   dbf7a:	f000 fe11 	bl	dcba0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   dbf7e:	3510      	adds	r5, #16
   dbf80:	3410      	adds	r4, #16
   dbf82:	e7f2      	b.n	dbf6a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   dbf84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dbf86 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   dbf86:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   dbf88:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   dbf8a:	4605      	mov	r5, r0
        if (n > 0) {
   dbf8c:	dd11      	ble.n	dbfb2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   dbf8e:	0130      	lsls	r0, r6, #4
   dbf90:	f7fe fa38 	bl	da404 <malloc>
            if (!d) {
   dbf94:	4604      	mov	r4, r0
   dbf96:	b158      	cbz	r0, dbfb0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   dbf98:	e9d5 1200 	ldrd	r1, r2, [r5]
   dbf9c:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   dbfa0:	f7ff ffc7 	bl	dbf32 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   dbfa4:	6828      	ldr	r0, [r5, #0]
   dbfa6:	f7fe fa35 	bl	da414 <free>
        data_ = d;
   dbfaa:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   dbfac:	60ae      	str	r6, [r5, #8]
        return true;
   dbfae:	2001      	movs	r0, #1
    }
   dbfb0:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   dbfb2:	2400      	movs	r4, #0
   dbfb4:	e7f6      	b.n	dbfa4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000dbfb6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   dbfb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbfba:	4691      	mov	r9, r2
   dbfbc:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   dbfbe:	2300      	movs	r3, #0
   dbfc0:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   dbfc2:	f8d9 1004 	ldr.w	r1, [r9, #4]
   dbfc6:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   dbfc8:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   dbfca:	4299      	cmp	r1, r3
        capacity_(0) {
   dbfcc:	e9c0 3300 	strd	r3, r3, [r0]
   dbfd0:	e9c0 3302 	strd	r3, r3, [r0, #8]
   dbfd4:	e9c0 3304 	strd	r3, r3, [r0, #16]
   dbfd8:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   dbfdc:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   dbfde:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   dbfe0:	dc23      	bgt.n	dc02a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   dbfe2:	e9d9 5700 	ldrd	r5, r7, [r9]
   dbfe6:	2314      	movs	r3, #20
   dbfe8:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   dbfec:	42af      	cmp	r7, r5
   dbfee:	d03b      	beq.n	dc068 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   dbff0:	4629      	mov	r1, r5
   dbff2:	a80d      	add	r0, sp, #52	; 0x34
   dbff4:	f000 fe50 	bl	dcc98 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   dbff8:	a90d      	add	r1, sp, #52	; 0x34
   dbffa:	a811      	add	r0, sp, #68	; 0x44
   dbffc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   dbffe:	f000 fe4b 	bl	dcc98 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dc002:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   dc006:	4299      	cmp	r1, r3
   dc008:	da1b      	bge.n	dc042 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   dc00a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   dc00c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   dc00e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   dc012:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   dc016:	4631      	mov	r1, r6
   dc018:	f106 0010 	add.w	r0, r6, #16
   dc01c:	f7ff ff89 	bl	dbf32 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   dc020:	b9ee      	cbnz	r6, dc05e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   dc022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dc024:	3301      	adds	r3, #1
   dc026:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   dc028:	e011      	b.n	dc04e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   dc02a:	a80a      	add	r0, sp, #40	; 0x28
   dc02c:	f7ff ffab 	bl	dbf86 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   dc030:	2800      	cmp	r0, #0
   dc032:	d1d6      	bne.n	dbfe2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   dc034:	a80a      	add	r0, sp, #40	; 0x28
   dc036:	f7ff fd3f 	bl	dbab8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   dc03a:	4620      	mov	r0, r4
   dc03c:	b017      	add	sp, #92	; 0x5c
   dc03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dc042:	3101      	adds	r1, #1
   dc044:	a80a      	add	r0, sp, #40	; 0x28
   dc046:	f7ff ff9e 	bl	dbf86 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   dc04a:	2800      	cmp	r0, #0
   dc04c:	d1dd      	bne.n	dc00a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   dc04e:	a811      	add	r0, sp, #68	; 0x44
   dc050:	f000 fda6 	bl	dcba0 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   dc054:	a80d      	add	r0, sp, #52	; 0x34
   dc056:	f000 fda3 	bl	dcba0 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   dc05a:	3514      	adds	r5, #20
   dc05c:	e7c6      	b.n	dbfec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   dc05e:	a911      	add	r1, sp, #68	; 0x44
   dc060:	4630      	mov	r0, r6
   dc062:	f000 fe19 	bl	dcc98 <_ZN6StringC1EOS_>
   dc066:	e7dc      	b.n	dc022 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   dc068:	2600      	movs	r6, #0
   dc06a:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   dc06e:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   dc070:	4637      	mov	r7, r6
   dc072:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   dc076:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dc07a:	429e      	cmp	r6, r3
   dc07c:	f280 8097 	bge.w	dc1ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   dc080:	0133      	lsls	r3, r6, #4
   dc082:	58d3      	ldr	r3, [r2, r3]
   dc084:	9308      	str	r3, [sp, #32]
        if (!category) {
   dc086:	b90b      	cbnz	r3, dc08c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   dc088:	3601      	adds	r6, #1
   dc08a:	e7f4      	b.n	dc076 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   dc08c:	fb0a f306 	mul.w	r3, sl, r6
   dc090:	9709      	str	r7, [sp, #36]	; 0x24
   dc092:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   dc094:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   dc096:	a909      	add	r1, sp, #36	; 0x24
   dc098:	a808      	add	r0, sp, #32
   dc09a:	f7ff fb00 	bl	db69e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   dc09e:	4683      	mov	fp, r0
   dc0a0:	2800      	cmp	r0, #0
   dc0a2:	d0f1      	beq.n	dc088 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   dc0a4:	4601      	mov	r1, r0
   dc0a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   dc0a8:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   dc0ac:	f10d 031f 	add.w	r3, sp, #31
   dc0b0:	4628      	mov	r0, r5
   dc0b2:	f7ff fb73 	bl	db79c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   dc0b6:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   dc0ba:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   dc0bc:	f1b8 0f00 	cmp.w	r8, #0
   dc0c0:	d166      	bne.n	dc190 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   dc0c2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   dc0c6:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   dc0ca:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   dc0ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
   dc0d2:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   dc0d6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   dc0da:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dc0de:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   dc0e2:	4293      	cmp	r3, r2
   dc0e4:	db1a      	blt.n	dc11c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   dc0e6:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   dc0ea:	f1bb 0f00 	cmp.w	fp, #0
   dc0ee:	dd4a      	ble.n	dc186 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   dc0f0:	fb0a f00b 	mul.w	r0, sl, fp
   dc0f4:	f7fe f986 	bl	da404 <malloc>
            if (!d) {
   dc0f8:	9004      	str	r0, [sp, #16]
   dc0fa:	2800      	cmp	r0, #0
   dc0fc:	d045      	beq.n	dc18a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   dc0fe:	e9d5 1200 	ldrd	r1, r2, [r5]
   dc102:	fb0a 1202 	mla	r2, sl, r2, r1
   dc106:	f7ff fe71 	bl	dbdec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   dc10a:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   dc10c:	6828      	ldr	r0, [r5, #0]
   dc10e:	9304      	str	r3, [sp, #16]
   dc110:	f7fe f980 	bl	da414 <free>
        data_ = d;
   dc114:	9b04      	ldr	r3, [sp, #16]
   dc116:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   dc118:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   dc11c:	9b01      	ldr	r3, [sp, #4]
   dc11e:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   dc122:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   dc124:	fb0a f303 	mul.w	r3, sl, r3
   dc128:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   dc12c:	f101 0014 	add.w	r0, r1, #20
   dc130:	fb0a b202 	mla	r2, sl, r2, fp
   dc134:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   dc136:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   dc138:	f7ff fe58 	bl	dbdec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   dc13c:	9904      	ldr	r1, [sp, #16]
   dc13e:	b1a9      	cbz	r1, dc16c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   dc140:	9b05      	ldr	r3, [sp, #20]
   dc142:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dc144:	f84b 2003 	str.w	r2, [fp, r3]
   dc148:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   dc14c:	808b      	strh	r3, [r1, #4]
   dc14e:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   dc152:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   dc154:	e9c1 7702 	strd	r7, r7, [r1, #8]
   dc158:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   dc15a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   dc15c:	608b      	str	r3, [r1, #8]
   dc15e:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   dc160:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   dc162:	60cb      	str	r3, [r1, #12]
   dc164:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   dc166:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   dc168:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   dc16a:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   dc16c:	686b      	ldr	r3, [r5, #4]
   dc16e:	3301      	adds	r3, #1
   dc170:	606b      	str	r3, [r5, #4]
   dc172:	a813      	add	r0, sp, #76	; 0x4c
   dc174:	f7ff fc8c 	bl	dba90 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   dc178:	f1b8 0f00 	cmp.w	r8, #0
   dc17c:	d008      	beq.n	dc190 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   dc17e:	a80d      	add	r0, sp, #52	; 0x34
   dc180:	f7ff fc86 	bl	dba90 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   dc184:	e756      	b.n	dc034 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   dc186:	4643      	mov	r3, r8
   dc188:	e7c0      	b.n	dc10c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   dc18a:	f04f 0801 	mov.w	r8, #1
   dc18e:	e7f0      	b.n	dc172 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   dc190:	9b01      	ldr	r3, [sp, #4]
   dc192:	682d      	ldr	r5, [r5, #0]
   dc194:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   dc198:	9b08      	ldr	r3, [sp, #32]
   dc19a:	781b      	ldrb	r3, [r3, #0]
   dc19c:	b92b      	cbnz	r3, dc1aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   dc19e:	f8d9 3000 	ldr.w	r3, [r9]
   dc1a2:	9a02      	ldr	r2, [sp, #8]
   dc1a4:	4413      	add	r3, r2
   dc1a6:	7c1b      	ldrb	r3, [r3, #16]
   dc1a8:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   dc1aa:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   dc1ac:	e773      	b.n	dc096 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc1ae:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   dc1b0:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc1b2:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   dc1b4:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc1b6:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dc1b8:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   dc1ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   dc1bc:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc1be:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   dc1c0:	60a2      	str	r2, [r4, #8]
   dc1c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   dc1c4:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc1c6:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   dc1c8:	60e2      	str	r2, [r4, #12]
   dc1ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   dc1cc:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc1ce:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   dc1d0:	6122      	str	r2, [r4, #16]
   dc1d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   dc1d4:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   dc1d6:	9b03      	ldr	r3, [sp, #12]
   dc1d8:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   dc1da:	6162      	str	r2, [r4, #20]
   dc1dc:	7623      	strb	r3, [r4, #24]
   dc1de:	e7ce      	b.n	dc17e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>

000dc1e0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   dc1e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   dc1e2:	4605      	mov	r5, r0
   dc1e4:	4b09      	ldr	r3, [pc, #36]	; (dc20c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   dc1e6:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   dc1ea:	4604      	mov	r4, r0
   dc1ec:	460e      	mov	r6, r1
        filter_(level, filters) {
   dc1ee:	a801      	add	r0, sp, #4
   dc1f0:	4611      	mov	r1, r2
   dc1f2:	f7fa f9ab 	bl	d654c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   dc1f6:	aa01      	add	r2, sp, #4
   dc1f8:	4631      	mov	r1, r6
   dc1fa:	4628      	mov	r0, r5
   dc1fc:	f7ff fedb 	bl	dbfb6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   dc200:	a801      	add	r0, sp, #4
   dc202:	f7f9 fe5f 	bl	d5ec4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   dc206:	4620      	mov	r0, r4
   dc208:	b004      	add	sp, #16
   dc20a:	bd70      	pop	{r4, r5, r6, pc}
   dc20c:	000e090c 	.word	0x000e090c

000dc210 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   dc210:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc212:	460f      	mov	r7, r1
   dc214:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   dc216:	4926      	ldr	r1, [pc, #152]	; (dc2b0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   dc218:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   dc21a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   dc21c:	4616      	mov	r6, r2
   dc21e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   dc220:	f003 fd9d 	bl	dfd5e <strcmp>
   dc224:	bb00      	cbnz	r0, dc268 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   dc226:	b1e4      	cbz	r4, dc262 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   dc228:	4629      	mov	r1, r5
   dc22a:	4668      	mov	r0, sp
   dc22c:	f7ff fc8a 	bl	dbb44 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   dc230:	4920      	ldr	r1, [pc, #128]	; (dc2b4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   dc232:	2024      	movs	r0, #36	; 0x24
   dc234:	f001 fbf0 	bl	dda18 <_ZnwjRKSt9nothrow_t>
   dc238:	4605      	mov	r5, r0
   dc23a:	b170      	cbz	r0, dc25a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   dc23c:	4669      	mov	r1, sp
   dc23e:	a803      	add	r0, sp, #12
   dc240:	f7fa f984 	bl	d654c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   dc244:	aa03      	add	r2, sp, #12
   dc246:	4631      	mov	r1, r6
   dc248:	4628      	mov	r0, r5
   dc24a:	f7ff ffc9 	bl	dc1e0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   dc24e:	a803      	add	r0, sp, #12
   dc250:	f7f9 fe38 	bl	d5ec4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   dc254:	4b18      	ldr	r3, [pc, #96]	; (dc2b8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   dc256:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   dc258:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   dc25a:	4668      	mov	r0, sp
   dc25c:	f7f9 fe32 	bl	d5ec4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   dc260:	462c      	mov	r4, r5
}
   dc262:	4620      	mov	r0, r4
   dc264:	b007      	add	sp, #28
   dc266:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   dc268:	4914      	ldr	r1, [pc, #80]	; (dc2bc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   dc26a:	4638      	mov	r0, r7
   dc26c:	f003 fd77 	bl	dfd5e <strcmp>
   dc270:	b9e0      	cbnz	r0, dc2ac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   dc272:	2c00      	cmp	r4, #0
   dc274:	d0f5      	beq.n	dc262 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   dc276:	4629      	mov	r1, r5
   dc278:	4668      	mov	r0, sp
   dc27a:	f7ff fc63 	bl	dbb44 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   dc27e:	490d      	ldr	r1, [pc, #52]	; (dc2b4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   dc280:	2024      	movs	r0, #36	; 0x24
   dc282:	f001 fbc9 	bl	dda18 <_ZnwjRKSt9nothrow_t>
   dc286:	4605      	mov	r5, r0
   dc288:	2800      	cmp	r0, #0
   dc28a:	d0e6      	beq.n	dc25a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   dc28c:	4669      	mov	r1, sp
   dc28e:	a803      	add	r0, sp, #12
   dc290:	f7fa f95c 	bl	d654c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   dc294:	aa03      	add	r2, sp, #12
   dc296:	4631      	mov	r1, r6
   dc298:	4628      	mov	r0, r5
   dc29a:	f7ff ffa1 	bl	dc1e0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   dc29e:	a803      	add	r0, sp, #12
   dc2a0:	f7f9 fe10 	bl	d5ec4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   dc2a4:	4b06      	ldr	r3, [pc, #24]	; (dc2c0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   dc2a6:	602b      	str	r3, [r5, #0]
   dc2a8:	622c      	str	r4, [r5, #32]
}
   dc2aa:	e7d6      	b.n	dc25a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   dc2ac:	2400      	movs	r4, #0
   dc2ae:	e7d8      	b.n	dc262 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   dc2b0:	000e119a 	.word	0x000e119a
   dc2b4:	000e1368 	.word	0x000e1368
   dc2b8:	000e122c 	.word	0x000e122c
   dc2bc:	000e119e 	.word	0x000e119e
   dc2c0:	000e1214 	.word	0x000e1214

000dc2c4 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   dc2c4:	4b01      	ldr	r3, [pc, #4]	; (dc2cc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   dc2c6:	4a02      	ldr	r2, [pc, #8]	; (dc2d0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   dc2c8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   dc2ca:	4770      	bx	lr
   dc2cc:	2003e544 	.word	0x2003e544
   dc2d0:	000e11af 	.word	0x000e11af

000dc2d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   dc2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc2d8:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   dc2da:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   dc2de:	4604      	mov	r4, r0
   dc2e0:	460e      	mov	r6, r1
   dc2e2:	4617      	mov	r7, r2
   dc2e4:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   dc2e6:	f001 f9af 	bl	dd648 <_Z16_fetch_usbserialv>
   dc2ea:	4581      	cmp	r9, r0
   dc2ec:	d04c      	beq.n	dc388 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   dc2ee:	792b      	ldrb	r3, [r5, #4]
   dc2f0:	0719      	lsls	r1, r3, #28
   dc2f2:	d504      	bpl.n	dc2fe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   dc2f4:	696a      	ldr	r2, [r5, #20]
   dc2f6:	4954      	ldr	r1, [pc, #336]	; (dc448 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   dc2f8:	4620      	mov	r0, r4
   dc2fa:	f7ff fa40 	bl	db77e <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   dc2fe:	f1b8 0f00 	cmp.w	r8, #0
   dc302:	d00d      	beq.n	dc320 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   dc304:	215b      	movs	r1, #91	; 0x5b
   dc306:	4620      	mov	r0, r4
   dc308:	f7ff fa2d 	bl	db766 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   dc30c:	4641      	mov	r1, r8
   dc30e:	4620      	mov	r0, r4
   dc310:	f7ff fa1a 	bl	db748 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   dc314:	6823      	ldr	r3, [r4, #0]
   dc316:	494d      	ldr	r1, [pc, #308]	; (dc44c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   dc318:	68db      	ldr	r3, [r3, #12]
   dc31a:	2202      	movs	r2, #2
   dc31c:	4620      	mov	r0, r4
   dc31e:	4798      	blx	r3
    if (attr.has_file) {
   dc320:	792b      	ldrb	r3, [r5, #4]
   dc322:	07da      	lsls	r2, r3, #31
   dc324:	d523      	bpl.n	dc36e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   dc326:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   dc32a:	212f      	movs	r1, #47	; 0x2f
   dc32c:	4640      	mov	r0, r8
   dc32e:	f003 fd73 	bl	dfe18 <strrchr>
    if (s1) {
   dc332:	b108      	cbz	r0, dc338 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   dc334:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   dc338:	4641      	mov	r1, r8
   dc33a:	4620      	mov	r0, r4
   dc33c:	f7ff fa04 	bl	db748 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   dc340:	792b      	ldrb	r3, [r5, #4]
   dc342:	079b      	lsls	r3, r3, #30
   dc344:	d508      	bpl.n	dc358 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   dc346:	213a      	movs	r1, #58	; 0x3a
   dc348:	4620      	mov	r0, r4
   dc34a:	f7ff fa0c 	bl	db766 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   dc34e:	68ea      	ldr	r2, [r5, #12]
   dc350:	493f      	ldr	r1, [pc, #252]	; (dc450 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   dc352:	4620      	mov	r0, r4
   dc354:	f7ff fa13 	bl	db77e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   dc358:	792a      	ldrb	r2, [r5, #4]
   dc35a:	6823      	ldr	r3, [r4, #0]
   dc35c:	f012 0f04 	tst.w	r2, #4
   dc360:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   dc362:	bf14      	ite	ne
   dc364:	493b      	ldrne	r1, [pc, #236]	; (dc454 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   dc366:	493c      	ldreq	r1, [pc, #240]	; (dc458 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   dc368:	2202      	movs	r2, #2
            write(": ", 2);
   dc36a:	4620      	mov	r0, r4
   dc36c:	4798      	blx	r3
    if (attr.has_function) {
   dc36e:	792b      	ldrb	r3, [r5, #4]
   dc370:	0758      	lsls	r0, r3, #29
   dc372:	d51d      	bpl.n	dc3b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   dc374:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   dc376:	460b      	mov	r3, r1
   dc378:	461a      	mov	r2, r3
    for (; *s; ++s) {
   dc37a:	f813 0b01 	ldrb.w	r0, [r3], #1
   dc37e:	b160      	cbz	r0, dc39a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   dc380:	2820      	cmp	r0, #32
   dc382:	d108      	bne.n	dc396 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   dc384:	4619      	mov	r1, r3
   dc386:	e7f7      	b.n	dc378 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   dc388:	4834      	ldr	r0, [pc, #208]	; (dc45c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   dc38a:	f000 f966 	bl	dc65a <_ZN5spark12NetworkClass9listeningEv>
   dc38e:	2800      	cmp	r0, #0
   dc390:	d0ad      	beq.n	dc2ee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   dc392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   dc396:	2828      	cmp	r0, #40	; 0x28
   dc398:	d1ee      	bne.n	dc378 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   dc39a:	6823      	ldr	r3, [r4, #0]
   dc39c:	1a52      	subs	r2, r2, r1
   dc39e:	68db      	ldr	r3, [r3, #12]
   dc3a0:	4620      	mov	r0, r4
   dc3a2:	4798      	blx	r3
        write("(): ", 4);
   dc3a4:	6823      	ldr	r3, [r4, #0]
   dc3a6:	492e      	ldr	r1, [pc, #184]	; (dc460 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   dc3a8:	68db      	ldr	r3, [r3, #12]
   dc3aa:	2204      	movs	r2, #4
   dc3ac:	4620      	mov	r0, r4
   dc3ae:	4798      	blx	r3
    return log_level_name(level, nullptr);
   dc3b0:	2100      	movs	r1, #0
   dc3b2:	4638      	mov	r0, r7
   dc3b4:	f7fd feba 	bl	da12c <log_level_name>
   dc3b8:	4601      	mov	r1, r0
    write(s);
   dc3ba:	4620      	mov	r0, r4
   dc3bc:	f7ff f9c4 	bl	db748 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   dc3c0:	6823      	ldr	r3, [r4, #0]
   dc3c2:	4925      	ldr	r1, [pc, #148]	; (dc458 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   dc3c4:	68db      	ldr	r3, [r3, #12]
   dc3c6:	2202      	movs	r2, #2
   dc3c8:	4620      	mov	r0, r4
   dc3ca:	4798      	blx	r3
    if (msg) {
   dc3cc:	b11e      	cbz	r6, dc3d6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   dc3ce:	4631      	mov	r1, r6
   dc3d0:	4620      	mov	r0, r4
   dc3d2:	f7ff f9b9 	bl	db748 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   dc3d6:	792b      	ldrb	r3, [r5, #4]
   dc3d8:	f013 0f30 	tst.w	r3, #48	; 0x30
   dc3dc:	d02c      	beq.n	dc438 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   dc3de:	6823      	ldr	r3, [r4, #0]
   dc3e0:	4920      	ldr	r1, [pc, #128]	; (dc464 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   dc3e2:	68db      	ldr	r3, [r3, #12]
   dc3e4:	2202      	movs	r2, #2
   dc3e6:	4620      	mov	r0, r4
   dc3e8:	4798      	blx	r3
        if (attr.has_code) {
   dc3ea:	792b      	ldrb	r3, [r5, #4]
   dc3ec:	06d9      	lsls	r1, r3, #27
   dc3ee:	d50a      	bpl.n	dc406 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   dc3f0:	6823      	ldr	r3, [r4, #0]
   dc3f2:	491d      	ldr	r1, [pc, #116]	; (dc468 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   dc3f4:	68db      	ldr	r3, [r3, #12]
   dc3f6:	2207      	movs	r2, #7
   dc3f8:	4620      	mov	r0, r4
   dc3fa:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   dc3fc:	69aa      	ldr	r2, [r5, #24]
   dc3fe:	491b      	ldr	r1, [pc, #108]	; (dc46c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   dc400:	4620      	mov	r0, r4
   dc402:	f7ff f9bc 	bl	db77e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   dc406:	792b      	ldrb	r3, [r5, #4]
   dc408:	069a      	lsls	r2, r3, #26
   dc40a:	d511      	bpl.n	dc430 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   dc40c:	06db      	lsls	r3, r3, #27
   dc40e:	d505      	bpl.n	dc41c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   dc410:	6823      	ldr	r3, [r4, #0]
   dc412:	4910      	ldr	r1, [pc, #64]	; (dc454 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   dc414:	68db      	ldr	r3, [r3, #12]
   dc416:	2202      	movs	r2, #2
   dc418:	4620      	mov	r0, r4
   dc41a:	4798      	blx	r3
            write("details = ", 10);
   dc41c:	6823      	ldr	r3, [r4, #0]
   dc41e:	4914      	ldr	r1, [pc, #80]	; (dc470 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   dc420:	68db      	ldr	r3, [r3, #12]
   dc422:	4620      	mov	r0, r4
   dc424:	220a      	movs	r2, #10
   dc426:	4798      	blx	r3
            write(attr.details);
   dc428:	69e9      	ldr	r1, [r5, #28]
   dc42a:	4620      	mov	r0, r4
   dc42c:	f7ff f98c 	bl	db748 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   dc430:	215d      	movs	r1, #93	; 0x5d
   dc432:	4620      	mov	r0, r4
   dc434:	f7ff f997 	bl	db766 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   dc438:	6823      	ldr	r3, [r4, #0]
   dc43a:	490e      	ldr	r1, [pc, #56]	; (dc474 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   dc43c:	68db      	ldr	r3, [r3, #12]
   dc43e:	4620      	mov	r0, r4
   dc440:	2202      	movs	r2, #2
}
   dc442:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   dc446:	4718      	bx	r3
   dc448:	000e11b3 	.word	0x000e11b3
   dc44c:	000e11ba 	.word	0x000e11ba
   dc450:	000e0a7d 	.word	0x000e0a7d
   dc454:	000e11bd 	.word	0x000e11bd
   dc458:	000e11c2 	.word	0x000e11c2
   dc45c:	2003e570 	.word	0x2003e570
   dc460:	000e11c0 	.word	0x000e11c0
   dc464:	000e11c5 	.word	0x000e11c5
   dc468:	000e11c8 	.word	0x000e11c8
   dc46c:	000e043d 	.word	0x000e043d
   dc470:	000e11d0 	.word	0x000e11d0
   dc474:	000e11db 	.word	0x000e11db

000dc478 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   dc478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dc47c:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   dc47e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   dc482:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   dc484:	4605      	mov	r5, r0
   dc486:	460f      	mov	r7, r1
   dc488:	4690      	mov	r8, r2
   dc48a:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   dc48c:	f001 f8dc 	bl	dd648 <_Z16_fetch_usbserialv>
   dc490:	4581      	cmp	r9, r0
   dc492:	d105      	bne.n	dc4a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   dc494:	4849      	ldr	r0, [pc, #292]	; (dc5bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   dc496:	f000 f8e0 	bl	dc65a <_ZN5spark12NetworkClass9listeningEv>
   dc49a:	2800      	cmp	r0, #0
   dc49c:	f040 808a 	bne.w	dc5b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   dc4a0:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   dc4a2:	4a47      	ldr	r2, [pc, #284]	; (dc5c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   dc4a4:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   dc4a6:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   dc4aa:	a801      	add	r0, sp, #4
        strm_(stream) {
   dc4ac:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   dc4ae:	f88d 9008 	strb.w	r9, [sp, #8]
   dc4b2:	f7ff f83c 	bl	db52e <_ZN5spark10JSONWriter11beginObjectEv>
   dc4b6:	4649      	mov	r1, r9
   dc4b8:	4640      	mov	r0, r8
   dc4ba:	f7fd fe37 	bl	da12c <log_level_name>
    json.name("l", 1).value(s);
   dc4be:	4941      	ldr	r1, [pc, #260]	; (dc5c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   dc4c0:	4680      	mov	r8, r0
   dc4c2:	2201      	movs	r2, #1
   dc4c4:	a801      	add	r0, sp, #4
   dc4c6:	f7ff f8bb 	bl	db640 <_ZN5spark10JSONWriter4nameEPKcj>
   dc4ca:	4641      	mov	r1, r8
   dc4cc:	f7ff f92e 	bl	db72c <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   dc4d0:	b13f      	cbz	r7, dc4e2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   dc4d2:	493d      	ldr	r1, [pc, #244]	; (dc5c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   dc4d4:	2201      	movs	r2, #1
   dc4d6:	a801      	add	r0, sp, #4
   dc4d8:	f7ff f8b2 	bl	db640 <_ZN5spark10JSONWriter4nameEPKcj>
   dc4dc:	4639      	mov	r1, r7
   dc4de:	f7ff f925 	bl	db72c <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   dc4e2:	b13e      	cbz	r6, dc4f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   dc4e4:	4939      	ldr	r1, [pc, #228]	; (dc5cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   dc4e6:	2201      	movs	r2, #1
   dc4e8:	a801      	add	r0, sp, #4
   dc4ea:	f7ff f8a9 	bl	db640 <_ZN5spark10JSONWriter4nameEPKcj>
   dc4ee:	4631      	mov	r1, r6
   dc4f0:	f7ff f91c 	bl	db72c <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   dc4f4:	7923      	ldrb	r3, [r4, #4]
   dc4f6:	07df      	lsls	r7, r3, #31
   dc4f8:	d50e      	bpl.n	dc518 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   dc4fa:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   dc4fc:	212f      	movs	r1, #47	; 0x2f
   dc4fe:	4630      	mov	r0, r6
   dc500:	f003 fc8a 	bl	dfe18 <strrchr>
    if (s1) {
   dc504:	b100      	cbz	r0, dc508 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   dc506:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   dc508:	4931      	ldr	r1, [pc, #196]	; (dc5d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   dc50a:	2201      	movs	r2, #1
   dc50c:	a801      	add	r0, sp, #4
   dc50e:	f7ff f897 	bl	db640 <_ZN5spark10JSONWriter4nameEPKcj>
   dc512:	4631      	mov	r1, r6
   dc514:	f7ff f90a 	bl	db72c <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   dc518:	7923      	ldrb	r3, [r4, #4]
   dc51a:	079e      	lsls	r6, r3, #30
   dc51c:	d507      	bpl.n	dc52e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   dc51e:	492d      	ldr	r1, [pc, #180]	; (dc5d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   dc520:	2202      	movs	r2, #2
   dc522:	a801      	add	r0, sp, #4
   dc524:	f7ff f88c 	bl	db640 <_ZN5spark10JSONWriter4nameEPKcj>
   dc528:	68e1      	ldr	r1, [r4, #12]
   dc52a:	f7ff f80d 	bl	db548 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   dc52e:	7923      	ldrb	r3, [r4, #4]
   dc530:	0758      	lsls	r0, r3, #29
   dc532:	d514      	bpl.n	dc55e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   dc534:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   dc536:	4633      	mov	r3, r6
   dc538:	461f      	mov	r7, r3
    for (; *s; ++s) {
   dc53a:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc53e:	b12a      	cbz	r2, dc54c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   dc540:	2a20      	cmp	r2, #32
   dc542:	d101      	bne.n	dc548 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   dc544:	461e      	mov	r6, r3
   dc546:	e7f7      	b.n	dc538 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   dc548:	2a28      	cmp	r2, #40	; 0x28
   dc54a:	d1f5      	bne.n	dc538 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   dc54c:	4922      	ldr	r1, [pc, #136]	; (dc5d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   dc54e:	2202      	movs	r2, #2
   dc550:	a801      	add	r0, sp, #4
   dc552:	f7ff f875 	bl	db640 <_ZN5spark10JSONWriter4nameEPKcj>
   dc556:	1bba      	subs	r2, r7, r6
   dc558:	4631      	mov	r1, r6
   dc55a:	f7ff f881 	bl	db660 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   dc55e:	7923      	ldrb	r3, [r4, #4]
   dc560:	0719      	lsls	r1, r3, #28
   dc562:	d507      	bpl.n	dc574 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   dc564:	491d      	ldr	r1, [pc, #116]	; (dc5dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   dc566:	2201      	movs	r2, #1
   dc568:	a801      	add	r0, sp, #4
   dc56a:	f7ff f869 	bl	db640 <_ZN5spark10JSONWriter4nameEPKcj>
   dc56e:	6961      	ldr	r1, [r4, #20]
   dc570:	f7fe fffc 	bl	db56c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   dc574:	7923      	ldrb	r3, [r4, #4]
   dc576:	06da      	lsls	r2, r3, #27
   dc578:	d508      	bpl.n	dc58c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   dc57a:	2204      	movs	r2, #4
   dc57c:	4918      	ldr	r1, [pc, #96]	; (dc5e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   dc57e:	eb0d 0002 	add.w	r0, sp, r2
   dc582:	f7ff f85d 	bl	db640 <_ZN5spark10JSONWriter4nameEPKcj>
   dc586:	69a1      	ldr	r1, [r4, #24]
   dc588:	f7fe ffde 	bl	db548 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   dc58c:	7923      	ldrb	r3, [r4, #4]
   dc58e:	069b      	lsls	r3, r3, #26
   dc590:	d507      	bpl.n	dc5a2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   dc592:	4914      	ldr	r1, [pc, #80]	; (dc5e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   dc594:	2206      	movs	r2, #6
   dc596:	a801      	add	r0, sp, #4
   dc598:	f7ff f852 	bl	db640 <_ZN5spark10JSONWriter4nameEPKcj>
   dc59c:	69e1      	ldr	r1, [r4, #28]
   dc59e:	f7ff f8c5 	bl	db72c <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   dc5a2:	a801      	add	r0, sp, #4
   dc5a4:	f7fe ffad 	bl	db502 <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   dc5a8:	6a28      	ldr	r0, [r5, #32]
   dc5aa:	490f      	ldr	r1, [pc, #60]	; (dc5e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   dc5ac:	6803      	ldr	r3, [r0, #0]
   dc5ae:	2202      	movs	r2, #2
   dc5b0:	68db      	ldr	r3, [r3, #12]
   dc5b2:	4798      	blx	r3
}
   dc5b4:	b005      	add	sp, #20
   dc5b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dc5ba:	bf00      	nop
   dc5bc:	2003e570 	.word	0x2003e570
   dc5c0:	000e11fc 	.word	0x000e11fc
   dc5c4:	000e1190 	.word	0x000e1190
   dc5c8:	000e0db9 	.word	0x000e0db9
   dc5cc:	000e11de 	.word	0x000e11de
   dc5d0:	000e09e4 	.word	0x000e09e4
   dc5d4:	000e11e0 	.word	0x000e11e0
   dc5d8:	000e11e3 	.word	0x000e11e3
   dc5dc:	000e0838 	.word	0x000e0838
   dc5e0:	000e11e6 	.word	0x000e11e6
   dc5e4:	000e11eb 	.word	0x000e11eb
   dc5e8:	000e11db 	.word	0x000e11db

000dc5ec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   dc5ec:	2300      	movs	r3, #0
   dc5ee:	6840      	ldr	r0, [r0, #4]
   dc5f0:	461a      	mov	r2, r3
   dc5f2:	f7fd bea7 	b.w	da344 <network_connect>

000dc5f6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   dc5f6:	6840      	ldr	r0, [r0, #4]
   dc5f8:	2200      	movs	r2, #0
   dc5fa:	2102      	movs	r1, #2
   dc5fc:	f7fd beb2 	b.w	da364 <network_disconnect>

000dc600 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   dc600:	2200      	movs	r2, #0
   dc602:	6840      	ldr	r0, [r0, #4]
   dc604:	4611      	mov	r1, r2
   dc606:	f7fd bea5 	b.w	da354 <network_connecting>

000dc60a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   dc60a:	2200      	movs	r2, #0
   dc60c:	6840      	ldr	r0, [r0, #4]
   dc60e:	4611      	mov	r1, r2
   dc610:	f7fd beb0 	b.w	da374 <network_ready>

000dc614 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   dc614:	2300      	movs	r3, #0
   dc616:	6840      	ldr	r0, [r0, #4]
   dc618:	461a      	mov	r2, r3
   dc61a:	4619      	mov	r1, r3
   dc61c:	f7fd beb2 	b.w	da384 <network_on>

000dc620 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   dc620:	2300      	movs	r3, #0
   dc622:	6840      	ldr	r0, [r0, #4]
   dc624:	461a      	mov	r2, r3
   dc626:	4619      	mov	r1, r3
   dc628:	f7fd beb4 	b.w	da394 <network_off>

000dc62c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   dc62c:	6840      	ldr	r0, [r0, #4]
   dc62e:	2100      	movs	r1, #0
   dc630:	f7fd bed8 	b.w	da3e4 <network_is_on>

000dc634 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   dc634:	6840      	ldr	r0, [r0, #4]
   dc636:	2100      	movs	r1, #0
   dc638:	f7fd bedc 	b.w	da3f4 <network_is_off>

000dc63c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   dc63c:	6840      	ldr	r0, [r0, #4]
   dc63e:	2200      	movs	r2, #0
   dc640:	f081 0101 	eor.w	r1, r1, #1
   dc644:	f7fd beae 	b.w	da3a4 <network_listen>

000dc648 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   dc648:	6840      	ldr	r0, [r0, #4]
   dc64a:	2200      	movs	r2, #0
   dc64c:	f7fd beba 	b.w	da3c4 <network_set_listen_timeout>

000dc650 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   dc650:	2200      	movs	r2, #0
   dc652:	6840      	ldr	r0, [r0, #4]
   dc654:	4611      	mov	r1, r2
   dc656:	f7fd bebd 	b.w	da3d4 <network_get_listen_timeout>

000dc65a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   dc65a:	2200      	movs	r2, #0
   dc65c:	6840      	ldr	r0, [r0, #4]
   dc65e:	4611      	mov	r1, r2
   dc660:	f7fd bea8 	b.w	da3b4 <network_listening>

000dc664 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   dc664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   dc668:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   dc66a:	b095      	sub	sp, #84	; 0x54
   dc66c:	4616      	mov	r6, r2
   dc66e:	460d      	mov	r5, r1
   dc670:	4607      	mov	r7, r0
    IPAddress addr;
   dc672:	f7fe fde7 	bl	db244 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   dc676:	4621      	mov	r1, r4
   dc678:	2218      	movs	r2, #24
   dc67a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   dc67c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   dc67e:	f003 fb2b 	bl	dfcd8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   dc682:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   dc684:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   dc688:	4621      	mov	r1, r4
   dc68a:	466b      	mov	r3, sp
   dc68c:	aa0c      	add	r2, sp, #48	; 0x30
   dc68e:	4630      	mov	r0, r6
   dc690:	f7fd fbbc 	bl	d9e0c <netdb_getaddrinfo>
    if (!r) {
   dc694:	4604      	mov	r4, r0
   dc696:	2800      	cmp	r0, #0
   dc698:	d146      	bne.n	dc728 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   dc69a:	4602      	mov	r2, r0
   dc69c:	2101      	movs	r1, #1
   dc69e:	6868      	ldr	r0, [r5, #4]
   dc6a0:	f7fd fe68 	bl	da374 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dc6a4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   dc6a6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dc6a8:	4622      	mov	r2, r4
   dc6aa:	6868      	ldr	r0, [r5, #4]
   dc6ac:	f7fd fe62 	bl	da374 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dc6b0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dc6b2:	4681      	mov	r9, r0
        bool ok = false;
   dc6b4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dc6b6:	2e00      	cmp	r6, #0
   dc6b8:	d036      	beq.n	dc728 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   dc6ba:	2900      	cmp	r1, #0
   dc6bc:	d134      	bne.n	dc728 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   dc6be:	6873      	ldr	r3, [r6, #4]
   dc6c0:	2b02      	cmp	r3, #2
   dc6c2:	d003      	beq.n	dc6cc <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   dc6c4:	2b0a      	cmp	r3, #10
   dc6c6:	d00b      	beq.n	dc6e0 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dc6c8:	69f6      	ldr	r6, [r6, #28]
   dc6ca:	e7f4      	b.n	dc6b6 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   dc6cc:	f1b8 0f00 	cmp.w	r8, #0
   dc6d0:	d004      	beq.n	dc6dc <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   dc6d2:	6971      	ldr	r1, [r6, #20]
   dc6d4:	4638      	mov	r0, r7
   dc6d6:	3104      	adds	r1, #4
   dc6d8:	f7fe fde1 	bl	db29e <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   dc6dc:	4641      	mov	r1, r8
   dc6de:	e7f3      	b.n	dc6c8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   dc6e0:	f1b9 0f00 	cmp.w	r9, #0
   dc6e4:	d101      	bne.n	dc6ea <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   dc6e6:	4649      	mov	r1, r9
   dc6e8:	e7ee      	b.n	dc6c8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   dc6ea:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   dc6ec:	2210      	movs	r2, #16
   dc6ee:	a801      	add	r0, sp, #4
   dc6f0:	f003 faf2 	bl	dfcd8 <memset>
                    a.v = 6;
   dc6f4:	2306      	movs	r3, #6
   dc6f6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   dc6fa:	ad01      	add	r5, sp, #4
   dc6fc:	f104 0308 	add.w	r3, r4, #8
   dc700:	3418      	adds	r4, #24
   dc702:	6818      	ldr	r0, [r3, #0]
   dc704:	6859      	ldr	r1, [r3, #4]
   dc706:	462a      	mov	r2, r5
   dc708:	c203      	stmia	r2!, {r0, r1}
   dc70a:	3308      	adds	r3, #8
   dc70c:	42a3      	cmp	r3, r4
   dc70e:	4615      	mov	r5, r2
   dc710:	d1f7      	bne.n	dc702 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   dc712:	a901      	add	r1, sp, #4
   dc714:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   dc716:	ad07      	add	r5, sp, #28
   dc718:	f7fe fda2 	bl	db260 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   dc71c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dc71e:	1d3c      	adds	r4, r7, #4
   dc720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dc722:	682b      	ldr	r3, [r5, #0]
   dc724:	7023      	strb	r3, [r4, #0]
   dc726:	e7de      	b.n	dc6e6 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   dc728:	9800      	ldr	r0, [sp, #0]
   dc72a:	f7fd fb67 	bl	d9dfc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   dc72e:	4638      	mov	r0, r7
   dc730:	b015      	add	sp, #84	; 0x54
   dc732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000dc738 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   dc738:	4b02      	ldr	r3, [pc, #8]	; (dc744 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   dc73a:	4a03      	ldr	r2, [pc, #12]	; (dc748 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   dc73c:	601a      	str	r2, [r3, #0]
   dc73e:	2200      	movs	r2, #0
   dc740:	605a      	str	r2, [r3, #4]

} // spark
   dc742:	4770      	bx	lr
   dc744:	2003e570 	.word	0x2003e570
   dc748:	000e1274 	.word	0x000e1274

000dc74c <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   dc74c:	b508      	push	{r3, lr}
            return &Wire1;
   dc74e:	f001 f93d 	bl	dd9cc <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   dc752:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   dc756:	f7fe bce3 	b.w	db120 <_ZN7TwoWire4lockEv>

000dc75a <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   dc75a:	b510      	push	{r4, lr}
   dc75c:	4604      	mov	r4, r0
    lock_(_lock)
   dc75e:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   dc760:	b109      	cbz	r1, dc766 <_ZN4PMICC1Eb+0xc>
        lock();
   dc762:	f7ff fff3 	bl	dc74c <_ZN4PMIC4lockEv.constprop.0>
}
   dc766:	4620      	mov	r0, r4
   dc768:	bd10      	pop	{r4, pc}

000dc76a <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   dc76a:	b508      	push	{r3, lr}
            return &Wire1;
   dc76c:	f001 f92e 	bl	dd9cc <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   dc770:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   dc774:	f7fe bcdd 	b.w	db132 <_ZN7TwoWire6unlockEv>

000dc778 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   dc778:	b510      	push	{r4, lr}
    if (lock_) {
   dc77a:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   dc77c:	4604      	mov	r4, r0
    if (lock_) {
   dc77e:	b10b      	cbz	r3, dc784 <_ZN4PMICD1Ev+0xc>
        unlock();
   dc780:	f7ff fff3 	bl	dc76a <_ZN4PMIC6unlockEv>
}
   dc784:	4620      	mov	r0, r4
   dc786:	bd10      	pop	{r4, pc}

000dc788 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   dc788:	b510      	push	{r4, lr}
   dc78a:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   dc78c:	6800      	ldr	r0, [r0, #0]
   dc78e:	f7ff ffec 	bl	dc76a <_ZN4PMIC6unlockEv>
   dc792:	4620      	mov	r0, r4
   dc794:	bd10      	pop	{r4, pc}

000dc796 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   dc796:	b530      	push	{r4, r5, lr}
   dc798:	b087      	sub	sp, #28
   dc79a:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   dc79c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   dc79e:	f7ff ffd5 	bl	dc74c <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   dc7a2:	236b      	movs	r3, #107	; 0x6b
   dc7a4:	f88d 3008 	strb.w	r3, [sp, #8]
   dc7a8:	2300      	movs	r3, #0
   dc7aa:	2401      	movs	r4, #1
   dc7ac:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
   dc7ae:	230a      	movs	r3, #10
   dc7b0:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   dc7b2:	f88d 4010 	strb.w	r4, [sp, #16]
            return &Wire1;
   dc7b6:	f001 f909 	bl	dd9cc <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   dc7ba:	a902      	add	r1, sp, #8
   dc7bc:	f7fe fc91 	bl	db0e2 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   dc7c0:	f001 f904 	bl	dd9cc <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   dc7c4:	6803      	ldr	r3, [r0, #0]
   dc7c6:	4629      	mov	r1, r5
   dc7c8:	689b      	ldr	r3, [r3, #8]
   dc7ca:	4798      	blx	r3
            return &Wire1;
   dc7cc:	f001 f8fe 	bl	dd9cc <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   dc7d0:	4621      	mov	r1, r4
   dc7d2:	f7fe fc9e 	bl	db112 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   dc7d6:	9403      	str	r4, [sp, #12]
            return &Wire1;
   dc7d8:	f001 f8f8 	bl	dd9cc <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   dc7dc:	a902      	add	r1, sp, #8
   dc7de:	f7fe fc4d 	bl	db07c <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   dc7e2:	f001 f8f3 	bl	dd9cc <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   dc7e6:	6803      	ldr	r3, [r0, #0]
   dc7e8:	695b      	ldr	r3, [r3, #20]
   dc7ea:	4798      	blx	r3
   dc7ec:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   dc7ee:	a801      	add	r0, sp, #4
   dc7f0:	f7ff ffca 	bl	dc788 <_ZNSt10lock_guardI4PMICED1Ev>
}
   dc7f4:	b2e0      	uxtb	r0, r4
   dc7f6:	b007      	add	sp, #28
   dc7f8:	bd30      	pop	{r4, r5, pc}

000dc7fa <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   dc7fa:	b570      	push	{r4, r5, r6, lr}
   dc7fc:	b086      	sub	sp, #24
   dc7fe:	4614      	mov	r4, r2
   dc800:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   dc802:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   dc804:	f7ff ffa2 	bl	dc74c <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   dc808:	236b      	movs	r3, #107	; 0x6b
   dc80a:	f88d 3008 	strb.w	r3, [sp, #8]
   dc80e:	2300      	movs	r3, #0
   dc810:	9303      	str	r3, [sp, #12]
   dc812:	2601      	movs	r6, #1
    timeout_ = ms;
   dc814:	230a      	movs	r3, #10
   dc816:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   dc818:	f88d 6010 	strb.w	r6, [sp, #16]
            return &Wire1;
   dc81c:	f001 f8d6 	bl	dd9cc <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   dc820:	a902      	add	r1, sp, #8
   dc822:	f7fe fc5e 	bl	db0e2 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   dc826:	f001 f8d1 	bl	dd9cc <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   dc82a:	6803      	ldr	r3, [r0, #0]
   dc82c:	4629      	mov	r1, r5
   dc82e:	689b      	ldr	r3, [r3, #8]
   dc830:	4798      	blx	r3
            return &Wire1;
   dc832:	f001 f8cb 	bl	dd9cc <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   dc836:	6803      	ldr	r3, [r0, #0]
   dc838:	4621      	mov	r1, r4
   dc83a:	689b      	ldr	r3, [r3, #8]
   dc83c:	4798      	blx	r3
            return &Wire1;
   dc83e:	f001 f8c5 	bl	dd9cc <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   dc842:	4631      	mov	r1, r6
   dc844:	f7fe fc65 	bl	db112 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   dc848:	a801      	add	r0, sp, #4
   dc84a:	f7ff ff9d 	bl	dc788 <_ZNSt10lock_guardI4PMICED1Ev>
}
   dc84e:	b006      	add	sp, #24
   dc850:	bd70      	pop	{r4, r5, r6, pc}

000dc852 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   dc852:	b513      	push	{r0, r1, r4, lr}
   dc854:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   dc856:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   dc858:	f7ff ff78 	bl	dc74c <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   dc85c:	2101      	movs	r1, #1
   dc85e:	4620      	mov	r0, r4
   dc860:	f7ff ff99 	bl	dc796 <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
   dc864:	f000 00cf 	and.w	r0, r0, #207	; 0xcf
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
   dc868:	f040 0210 	orr.w	r2, r0, #16
   dc86c:	2101      	movs	r1, #1
   dc86e:	4620      	mov	r0, r4
   dc870:	f7ff ffc3 	bl	dc7fa <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   dc874:	a801      	add	r0, sp, #4
   dc876:	f7ff ff87 	bl	dc788 <_ZNSt10lock_guardI4PMICED1Ev>
}
   dc87a:	2001      	movs	r0, #1
   dc87c:	b002      	add	sp, #8
   dc87e:	bd10      	pop	{r4, pc}

000dc880 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   dc880:	b513      	push	{r0, r1, r4, lr}
   dc882:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   dc884:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   dc886:	f7ff ff61 	bl	dc74c <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   dc88a:	2101      	movs	r1, #1
   dc88c:	4620      	mov	r0, r4
   dc88e:	f7ff ff82 	bl	dc796 <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   dc892:	2101      	movs	r1, #1
   dc894:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   dc898:	4620      	mov	r0, r4
   dc89a:	f7ff ffae 	bl	dc7fa <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   dc89e:	a801      	add	r0, sp, #4
   dc8a0:	f7ff ff72 	bl	dc788 <_ZNSt10lock_guardI4PMICED1Ev>
}
   dc8a4:	2001      	movs	r0, #1
   dc8a6:	b002      	add	sp, #8
   dc8a8:	bd10      	pop	{r4, pc}

000dc8aa <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   dc8aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dc8ac:	4606      	mov	r6, r0
   dc8ae:	460d      	mov	r5, r1
  size_t n = 0;
   dc8b0:	188f      	adds	r7, r1, r2
   dc8b2:	2400      	movs	r4, #0
  while (size--) {
   dc8b4:	42bd      	cmp	r5, r7
   dc8b6:	d00c      	beq.n	dc8d2 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   dc8b8:	6833      	ldr	r3, [r6, #0]
   dc8ba:	f815 1b01 	ldrb.w	r1, [r5], #1
   dc8be:	689b      	ldr	r3, [r3, #8]
   dc8c0:	4630      	mov	r0, r6
   dc8c2:	4798      	blx	r3
     if (chunk>=0)
   dc8c4:	1e03      	subs	r3, r0, #0
   dc8c6:	db01      	blt.n	dc8cc <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   dc8c8:	441c      	add	r4, r3
  while (size--) {
   dc8ca:	e7f3      	b.n	dc8b4 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   dc8cc:	2c00      	cmp	r4, #0
   dc8ce:	bf08      	it	eq
   dc8d0:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   dc8d2:	4620      	mov	r0, r4
   dc8d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dc8d6 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   dc8d6:	b513      	push	{r0, r1, r4, lr}
   dc8d8:	4604      	mov	r4, r0
    }
   dc8da:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   dc8dc:	b159      	cbz	r1, dc8f6 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   dc8de:	9101      	str	r1, [sp, #4]
   dc8e0:	f003 fa6d 	bl	dfdbe <strlen>
   dc8e4:	6823      	ldr	r3, [r4, #0]
   dc8e6:	9901      	ldr	r1, [sp, #4]
   dc8e8:	68db      	ldr	r3, [r3, #12]
   dc8ea:	4602      	mov	r2, r0
   dc8ec:	4620      	mov	r0, r4
    }
   dc8ee:	b002      	add	sp, #8
   dc8f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   dc8f4:	4718      	bx	r3
    }
   dc8f6:	b002      	add	sp, #8
   dc8f8:	bd10      	pop	{r4, pc}

000dc8fa <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   dc8fa:	6803      	ldr	r3, [r0, #0]
   dc8fc:	689b      	ldr	r3, [r3, #8]
   dc8fe:	4718      	bx	r3

000dc900 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   dc900:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   dc902:	210d      	movs	r1, #13
{
   dc904:	4605      	mov	r5, r0
  size_t n = print('\r');
   dc906:	f7ff fff8 	bl	dc8fa <_ZN5Print5printEc>
  n += print('\n');
   dc90a:	210a      	movs	r1, #10
  size_t n = print('\r');
   dc90c:	4604      	mov	r4, r0
  n += print('\n');
   dc90e:	4628      	mov	r0, r5
   dc910:	f7ff fff3 	bl	dc8fa <_ZN5Print5printEc>
  return n;
}
   dc914:	4420      	add	r0, r4
   dc916:	bd38      	pop	{r3, r4, r5, pc}

000dc918 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   dc918:	b530      	push	{r4, r5, lr}
   dc91a:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   dc91c:	2300      	movs	r3, #0
   dc91e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   dc922:	2a01      	cmp	r2, #1
   dc924:	bf98      	it	ls
   dc926:	220a      	movls	r2, #10
   dc928:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   dc92a:	460d      	mov	r5, r1
   dc92c:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   dc930:	fb01 5312 	mls	r3, r1, r2, r5
   dc934:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   dc938:	2b09      	cmp	r3, #9
   dc93a:	bf94      	ite	ls
   dc93c:	3330      	addls	r3, #48	; 0x30
   dc93e:	3337      	addhi	r3, #55	; 0x37
   dc940:	b2db      	uxtb	r3, r3
  } while(n);
   dc942:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   dc944:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   dc948:	d9ef      	bls.n	dc92a <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   dc94a:	4621      	mov	r1, r4
   dc94c:	f7ff ffc3 	bl	dc8d6 <_ZN5Print5writeEPKc>
}
   dc950:	b00b      	add	sp, #44	; 0x2c
   dc952:	bd30      	pop	{r4, r5, pc}

000dc954 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   dc954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dc958:	b086      	sub	sp, #24
   dc95a:	af00      	add	r7, sp, #0
   dc95c:	4605      	mov	r5, r0
   dc95e:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   dc960:	1d38      	adds	r0, r7, #4
   dc962:	2114      	movs	r1, #20
{
   dc964:	4614      	mov	r4, r2
    va_copy(args2, args);
   dc966:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   dc968:	f7fd fd7c 	bl	da464 <vsnprintf>

    if (n<bufsize)
   dc96c:	2813      	cmp	r0, #19
   dc96e:	d80e      	bhi.n	dc98e <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   dc970:	1d39      	adds	r1, r7, #4
   dc972:	4628      	mov	r0, r5
   dc974:	f7ff ffaf 	bl	dc8d6 <_ZN5Print5writeEPKc>
   dc978:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   dc97a:	b11e      	cbz	r6, dc984 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   dc97c:	4628      	mov	r0, r5
   dc97e:	f7ff ffbf 	bl	dc900 <_ZN5Print7printlnEv>
   dc982:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   dc984:	4620      	mov	r0, r4
   dc986:	3718      	adds	r7, #24
   dc988:	46bd      	mov	sp, r7
   dc98a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   dc98e:	f100 0308 	add.w	r3, r0, #8
   dc992:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   dc996:	46e8      	mov	r8, sp
        char bigger[n+1];
   dc998:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   dc99c:	4622      	mov	r2, r4
   dc99e:	1c41      	adds	r1, r0, #1
   dc9a0:	683b      	ldr	r3, [r7, #0]
   dc9a2:	4668      	mov	r0, sp
   dc9a4:	f7fd fd5e 	bl	da464 <vsnprintf>
  return write(str);
   dc9a8:	4669      	mov	r1, sp
   dc9aa:	4628      	mov	r0, r5
   dc9ac:	f7ff ff93 	bl	dc8d6 <_ZN5Print5writeEPKc>
   dc9b0:	4604      	mov	r4, r0
   dc9b2:	46c5      	mov	sp, r8
   dc9b4:	e7e1      	b.n	dc97a <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000dc9b6 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   dc9b6:	b510      	push	{r4, lr}
   dc9b8:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
   dc9ba:	f7fd fb8f 	bl	da0dc <LED_RGB_IsOverRidden>
    if (override == controlled()) {
   dc9be:	4284      	cmp	r4, r0
   dc9c0:	d008      	beq.n	dc9d4 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   dc9c2:	b11c      	cbz	r4, dc9cc <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   dc9c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
   dc9c8:	f7fd bb70 	b.w	da0ac <LED_Signaling_Start>
}
   dc9cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
   dc9d0:	f7fd bb74 	b.w	da0bc <LED_Signaling_Stop>
}
   dc9d4:	bd10      	pop	{r4, pc}

000dc9d6 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   dc9d6:	b570      	push	{r4, r5, r6, lr}
   dc9d8:	4605      	mov	r5, r0
   dc9da:	460e      	mov	r6, r1
   dc9dc:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
   dc9de:	f7fd fb7d 	bl	da0dc <LED_RGB_IsOverRidden>
    if (!controlled()) {
   dc9e2:	b150      	cbz	r0, dc9fa <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   dc9e4:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   dc9e8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   dc9ec:	f7fd fb56 	bl	da09c <LED_SetSignalingColor>
    LED_On(LED_RGB);
}
   dc9f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(LED_RGB);
   dc9f4:	20e7      	movs	r0, #231	; 0xe7
   dc9f6:	f7fd bb79 	b.w	da0ec <LED_On>
}
   dc9fa:	bd70      	pop	{r4, r5, r6, pc}

000dc9fc <_ZN8RGBClass10brightnessEhb>:

void RGBClass::brightness(uint8_t brightness, bool update)
{
   dc9fc:	b510      	push	{r4, lr}
   dc9fe:	460c      	mov	r4, r1
    LED_SetBrightness(brightness);
   dca00:	f7fd fb64 	bl	da0cc <LED_SetBrightness>
    return LED_RGB_IsOverRidden();
   dca04:	f7fd fb6a 	bl	da0dc <LED_RGB_IsOverRidden>
    if (controlled() && update) {
   dca08:	b128      	cbz	r0, dca16 <_ZN8RGBClass10brightnessEhb+0x1a>
   dca0a:	b124      	cbz	r4, dca16 <_ZN8RGBClass10brightnessEhb+0x1a>
        LED_On(LED_RGB);
    }
}
   dca0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_On(LED_RGB);
   dca10:	20e7      	movs	r0, #231	; 0xe7
   dca12:	f7fd bb6b 	b.w	da0ec <LED_On>
}
   dca16:	bd10      	pop	{r4, pc}

000dca18 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   dca18:	4b01      	ldr	r3, [pc, #4]	; (dca20 <_GLOBAL__sub_I_RGB+0x8>)
   dca1a:	2200      	movs	r2, #0
   dca1c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   dca1e:	4770      	bx	lr
   dca20:	2003e578 	.word	0x2003e578

000dca24 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   dca24:	2100      	movs	r1, #0
   dca26:	f7fd ba39 	b.w	d9e9c <hal_spi_acquire>

000dca2a <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   dca2a:	2100      	movs	r1, #0
   dca2c:	f7fd ba3e 	b.w	d9eac <hal_spi_release>

000dca30 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   dca30:	b510      	push	{r4, lr}
   dca32:	4604      	mov	r4, r0
   dca34:	4608      	mov	r0, r1
{
    _spi = spi;
   dca36:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   dca38:	f7fd fa18 	bl	d9e6c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   dca3c:	2300      	movs	r3, #0
   dca3e:	6063      	str	r3, [r4, #4]
}
   dca40:	4620      	mov	r0, r4
   dca42:	bd10      	pop	{r4, pc}

000dca44 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   dca44:	b510      	push	{r4, lr}
   dca46:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   dca48:	7800      	ldrb	r0, [r0, #0]
   dca4a:	f7ff ffeb 	bl	dca24 <_ZN8SPIClass4lockEv.isra.0>
   dca4e:	b948      	cbnz	r0, dca64 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   dca50:	7820      	ldrb	r0, [r4, #0]
   dca52:	f64f 71ff 	movw	r1, #65535	; 0xffff
   dca56:	f7fd f9e1 	bl	d9e1c <hal_spi_begin>
        unlock();
   dca5a:	7820      	ldrb	r0, [r4, #0]
    }
}
   dca5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   dca60:	f7ff bfe3 	b.w	dca2a <_ZN8SPIClass6unlockEv.isra.0>
}
   dca64:	bd10      	pop	{r4, pc}

000dca66 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   dca66:	b513      	push	{r0, r1, r4, lr}
   dca68:	4604      	mov	r4, r0
    if (!lock())
   dca6a:	7800      	ldrb	r0, [r0, #0]
{
   dca6c:	9101      	str	r1, [sp, #4]
    if (!lock())
   dca6e:	f7ff ffd9 	bl	dca24 <_ZN8SPIClass4lockEv.isra.0>
   dca72:	9901      	ldr	r1, [sp, #4]
   dca74:	b940      	cbnz	r0, dca88 <_ZN8SPIClass11setBitOrderEh+0x22>
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   dca76:	7820      	ldrb	r0, [r4, #0]
   dca78:	f7fd f9d8 	bl	d9e2c <hal_spi_set_bit_order>
        unlock();
   dca7c:	7820      	ldrb	r0, [r4, #0]
    }
}
   dca7e:	b002      	add	sp, #8
   dca80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   dca84:	f7ff bfd1 	b.w	dca2a <_ZN8SPIClass6unlockEv.isra.0>
}
   dca88:	b002      	add	sp, #8
   dca8a:	bd10      	pop	{r4, pc}

000dca8c <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   dca8c:	b513      	push	{r0, r1, r4, lr}
   dca8e:	4604      	mov	r4, r0
    if (!lock())
   dca90:	7800      	ldrb	r0, [r0, #0]
{
   dca92:	9101      	str	r1, [sp, #4]
    if (!lock())
   dca94:	f7ff ffc6 	bl	dca24 <_ZN8SPIClass4lockEv.isra.0>
   dca98:	9901      	ldr	r1, [sp, #4]
   dca9a:	b940      	cbnz	r0, dcaae <_ZN8SPIClass11setDataModeEh+0x22>
    {
        hal_spi_set_data_mode(_spi, mode);
   dca9c:	7820      	ldrb	r0, [r4, #0]
   dca9e:	f7fd f9cd 	bl	d9e3c <hal_spi_set_data_mode>
        unlock();
   dcaa2:	7820      	ldrb	r0, [r4, #0]
    }
}
   dcaa4:	b002      	add	sp, #8
   dcaa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   dcaaa:	f7ff bfbe 	b.w	dca2a <_ZN8SPIClass6unlockEv.isra.0>
}
   dcaae:	b002      	add	sp, #8
   dcab0:	bd10      	pop	{r4, pc}

000dcab2 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   dcab2:	7800      	ldrb	r0, [r0, #0]
   dcab4:	f7ff bfb9 	b.w	dca2a <_ZN8SPIClass6unlockEv.isra.0>

000dcab8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   dcab8:	0840      	lsrs	r0, r0, #1
{
   dcaba:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   dcabc:	6018      	str	r0, [r3, #0]
   dcabe:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   dcac0:	6818      	ldr	r0, [r3, #0]
   dcac2:	4288      	cmp	r0, r1
   dcac4:	b2e5      	uxtb	r5, r4
   dcac6:	d906      	bls.n	dcad6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   dcac8:	3401      	adds	r4, #1
   dcaca:	2c08      	cmp	r4, #8
   dcacc:	d002      	beq.n	dcad4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   dcace:	0840      	lsrs	r0, r0, #1
   dcad0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   dcad2:	e7f5      	b.n	dcac0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   dcad4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   dcad6:	4b02      	ldr	r3, [pc, #8]	; (dcae0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   dcad8:	5d5b      	ldrb	r3, [r3, r5]
   dcada:	7013      	strb	r3, [r2, #0]
}
   dcadc:	bd30      	pop	{r4, r5, pc}
   dcade:	bf00      	nop
   dcae0:	000e12a8 	.word	0x000e12a8

000dcae4 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   dcae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dcae8:	b088      	sub	sp, #32
    unsigned clock = 0;
   dcaea:	2300      	movs	r3, #0
{
   dcaec:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   dcaee:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   dcaf0:	9302      	str	r3, [sp, #8]
{
   dcaf2:	460e      	mov	r6, r1
   dcaf4:	4617      	mov	r7, r2
    if (!lock())
   dcaf6:	f7ff ff95 	bl	dca24 <_ZN8SPIClass4lockEv.isra.0>
   dcafa:	4605      	mov	r5, r0
   dcafc:	bb00      	cbnz	r0, dcb40 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   dcafe:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   dcb02:	4601      	mov	r1, r0
   dcb04:	2214      	movs	r2, #20
   dcb06:	a803      	add	r0, sp, #12
   dcb08:	f003 f8e6 	bl	dfcd8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   dcb0c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   dcb0e:	462a      	mov	r2, r5
   dcb10:	a903      	add	r1, sp, #12
   dcb12:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   dcb14:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   dcb18:	f7fd f9b8 	bl	d9e8c <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   dcb1c:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   dcb1e:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   dcb22:	ab02      	add	r3, sp, #8
   dcb24:	f10d 0207 	add.w	r2, sp, #7
   dcb28:	fb07 f106 	mul.w	r1, r7, r6
   dcb2c:	f7ff ffc4 	bl	dcab8 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   dcb30:	7820      	ldrb	r0, [r4, #0]
   dcb32:	f89d 1007 	ldrb.w	r1, [sp, #7]
   dcb36:	f7fd f989 	bl	d9e4c <hal_spi_set_clock_divider>
        unlock();
   dcb3a:	7820      	ldrb	r0, [r4, #0]
   dcb3c:	f7ff ff75 	bl	dca2a <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   dcb40:	9802      	ldr	r0, [sp, #8]
   dcb42:	b008      	add	sp, #32
   dcb44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dcb48 <_ZN8SPIClass15setClockDividerEh>:
{
   dcb48:	b538      	push	{r3, r4, r5, lr}
   dcb4a:	4604      	mov	r4, r0
    if (!lock())
   dcb4c:	7800      	ldrb	r0, [r0, #0]
{
   dcb4e:	460d      	mov	r5, r1
    if (!lock())
   dcb50:	f7ff ff68 	bl	dca24 <_ZN8SPIClass4lockEv.isra.0>
   dcb54:	4603      	mov	r3, r0
   dcb56:	b9d0      	cbnz	r0, dcb8e <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   dcb58:	6861      	ldr	r1, [r4, #4]
   dcb5a:	b199      	cbz	r1, dcb84 <_ZN8SPIClass15setClockDividerEh+0x3c>
   dcb5c:	4a0c      	ldr	r2, [pc, #48]	; (dcb90 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   dcb5e:	f812 0b01 	ldrb.w	r0, [r2], #1
   dcb62:	4285      	cmp	r5, r0
   dcb64:	d002      	beq.n	dcb6c <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   dcb66:	3301      	adds	r3, #1
   dcb68:	2b08      	cmp	r3, #8
   dcb6a:	d1f8      	bne.n	dcb5e <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   dcb6c:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   dcb6e:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   dcb70:	2201      	movs	r2, #1
   dcb72:	40d9      	lsrs	r1, r3
   dcb74:	4620      	mov	r0, r4
   dcb76:	f7ff ffb5 	bl	dcae4 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   dcb7a:	7820      	ldrb	r0, [r4, #0]
}
   dcb7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   dcb80:	f7ff bf53 	b.w	dca2a <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   dcb84:	7820      	ldrb	r0, [r4, #0]
   dcb86:	4629      	mov	r1, r5
   dcb88:	f7fd f960 	bl	d9e4c <hal_spi_set_clock_divider>
   dcb8c:	e7f5      	b.n	dcb7a <_ZN8SPIClass15setClockDividerEh+0x32>
}
   dcb8e:	bd38      	pop	{r3, r4, r5, pc}
   dcb90:	000e12a8 	.word	0x000e12a8

000dcb94 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   dcb94:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   dcb96:	7800      	ldrb	r0, [r0, #0]
   dcb98:	f7fd f960 	bl	d9e5c <hal_spi_transfer>
}
   dcb9c:	b2c0      	uxtb	r0, r0
   dcb9e:	bd08      	pop	{r3, pc}

000dcba0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   dcba0:	b510      	push	{r4, lr}
   dcba2:	4604      	mov	r4, r0
{
	free(buffer);
   dcba4:	6800      	ldr	r0, [r0, #0]
   dcba6:	f7fd fc35 	bl	da414 <free>
}
   dcbaa:	4620      	mov	r0, r4
   dcbac:	bd10      	pop	{r4, pc}

000dcbae <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   dcbae:	b510      	push	{r4, lr}
   dcbb0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   dcbb2:	6800      	ldr	r0, [r0, #0]
   dcbb4:	b108      	cbz	r0, dcbba <_ZN6String10invalidateEv+0xc>
   dcbb6:	f7fd fc2d 	bl	da414 <free>
	buffer = NULL;
   dcbba:	2300      	movs	r3, #0
	capacity = len = 0;
   dcbbc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   dcbc0:	6023      	str	r3, [r4, #0]
}
   dcbc2:	bd10      	pop	{r4, pc}

000dcbc4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   dcbc4:	b538      	push	{r3, r4, r5, lr}
   dcbc6:	4604      	mov	r4, r0
   dcbc8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   dcbca:	6800      	ldr	r0, [r0, #0]
   dcbcc:	3101      	adds	r1, #1
   dcbce:	f7fd fc29 	bl	da424 <realloc>
	if (newbuffer) {
   dcbd2:	b110      	cbz	r0, dcbda <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   dcbd4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   dcbd8:	2001      	movs	r0, #1
	}
	return 0;
}
   dcbda:	bd38      	pop	{r3, r4, r5, pc}

000dcbdc <_ZN6String7reserveEj>:
{
   dcbdc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   dcbde:	6803      	ldr	r3, [r0, #0]
{
   dcbe0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   dcbe2:	b123      	cbz	r3, dcbee <_ZN6String7reserveEj+0x12>
   dcbe4:	6843      	ldr	r3, [r0, #4]
   dcbe6:	428b      	cmp	r3, r1
   dcbe8:	d301      	bcc.n	dcbee <_ZN6String7reserveEj+0x12>
   dcbea:	2001      	movs	r0, #1
}
   dcbec:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   dcbee:	4620      	mov	r0, r4
   dcbf0:	f7ff ffe8 	bl	dcbc4 <_ZN6String12changeBufferEj>
   dcbf4:	2800      	cmp	r0, #0
   dcbf6:	d0f9      	beq.n	dcbec <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   dcbf8:	68a3      	ldr	r3, [r4, #8]
   dcbfa:	2b00      	cmp	r3, #0
   dcbfc:	d1f5      	bne.n	dcbea <_ZN6String7reserveEj+0xe>
   dcbfe:	6822      	ldr	r2, [r4, #0]
   dcc00:	7013      	strb	r3, [r2, #0]
   dcc02:	e7f2      	b.n	dcbea <_ZN6String7reserveEj+0xe>

000dcc04 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   dcc04:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dcc06:	460d      	mov	r5, r1
	if (!reserve(length)) {
   dcc08:	4611      	mov	r1, r2
   dcc0a:	9201      	str	r2, [sp, #4]
{
   dcc0c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   dcc0e:	f7ff ffe5 	bl	dcbdc <_ZN6String7reserveEj>
   dcc12:	9a01      	ldr	r2, [sp, #4]
   dcc14:	b928      	cbnz	r0, dcc22 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   dcc16:	4620      	mov	r0, r4
   dcc18:	f7ff ffc9 	bl	dcbae <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   dcc1c:	4620      	mov	r0, r4
   dcc1e:	b003      	add	sp, #12
   dcc20:	bd30      	pop	{r4, r5, pc}
	len = length;
   dcc22:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   dcc24:	4629      	mov	r1, r5
   dcc26:	6820      	ldr	r0, [r4, #0]
   dcc28:	f003 f82e 	bl	dfc88 <memcpy>
	buffer[len] = 0;
   dcc2c:	6822      	ldr	r2, [r4, #0]
   dcc2e:	68a3      	ldr	r3, [r4, #8]
   dcc30:	2100      	movs	r1, #0
   dcc32:	54d1      	strb	r1, [r2, r3]
	return *this;
   dcc34:	e7f2      	b.n	dcc1c <_ZN6String4copyEPKcj+0x18>

000dcc36 <_ZN6StringC1EPKc>:
	buffer = NULL;
   dcc36:	2300      	movs	r3, #0
String::String(const char *cstr)
   dcc38:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   dcc3a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   dcc3e:	4604      	mov	r4, r0
	len = 0;
   dcc40:	6083      	str	r3, [r0, #8]
	flags = 0;
   dcc42:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   dcc44:	b141      	cbz	r1, dcc58 <_ZN6StringC1EPKc+0x22>
   dcc46:	4608      	mov	r0, r1
   dcc48:	9101      	str	r1, [sp, #4]
   dcc4a:	f003 f8b8 	bl	dfdbe <strlen>
   dcc4e:	9901      	ldr	r1, [sp, #4]
   dcc50:	4602      	mov	r2, r0
   dcc52:	4620      	mov	r0, r4
   dcc54:	f7ff ffd6 	bl	dcc04 <_ZN6String4copyEPKcj>
}
   dcc58:	4620      	mov	r0, r4
   dcc5a:	b002      	add	sp, #8
   dcc5c:	bd10      	pop	{r4, pc}

000dcc5e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   dcc5e:	b538      	push	{r3, r4, r5, lr}
   dcc60:	4605      	mov	r5, r0
	if (buffer) {
   dcc62:	6800      	ldr	r0, [r0, #0]
{
   dcc64:	460c      	mov	r4, r1
	if (buffer) {
   dcc66:	b168      	cbz	r0, dcc84 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   dcc68:	686a      	ldr	r2, [r5, #4]
   dcc6a:	688b      	ldr	r3, [r1, #8]
   dcc6c:	429a      	cmp	r2, r3
   dcc6e:	d307      	bcc.n	dcc80 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   dcc70:	6809      	ldr	r1, [r1, #0]
   dcc72:	f003 f87e 	bl	dfd72 <strcpy>
			len = rhs.len;
   dcc76:	68a3      	ldr	r3, [r4, #8]
   dcc78:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   dcc7a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   dcc7c:	60a3      	str	r3, [r4, #8]
}
   dcc7e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   dcc80:	f7fd fbc8 	bl	da414 <free>
	buffer = rhs.buffer;
   dcc84:	6823      	ldr	r3, [r4, #0]
   dcc86:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   dcc88:	6863      	ldr	r3, [r4, #4]
   dcc8a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   dcc8c:	68a3      	ldr	r3, [r4, #8]
   dcc8e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   dcc90:	2300      	movs	r3, #0
	rhs.capacity = 0;
   dcc92:	e9c4 3300 	strd	r3, r3, [r4]
   dcc96:	e7f1      	b.n	dcc7c <_ZN6String4moveERS_+0x1e>

000dcc98 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   dcc98:	b510      	push	{r4, lr}
	buffer = NULL;
   dcc9a:	2300      	movs	r3, #0
	capacity = 0;
   dcc9c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   dcca0:	4604      	mov	r4, r0
	len = 0;
   dcca2:	6083      	str	r3, [r0, #8]
	flags = 0;
   dcca4:	7303      	strb	r3, [r0, #12]
	move(rval);
   dcca6:	f7ff ffda 	bl	dcc5e <_ZN6String4moveERS_>
}
   dccaa:	4620      	mov	r0, r4
   dccac:	bd10      	pop	{r4, pc}

000dccae <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   dccae:	4288      	cmp	r0, r1
{
   dccb0:	b510      	push	{r4, lr}
   dccb2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   dccb4:	d005      	beq.n	dccc2 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   dccb6:	680b      	ldr	r3, [r1, #0]
   dccb8:	b12b      	cbz	r3, dccc6 <_ZN6StringaSERKS_+0x18>
   dccba:	688a      	ldr	r2, [r1, #8]
   dccbc:	4619      	mov	r1, r3
   dccbe:	f7ff ffa1 	bl	dcc04 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   dccc2:	4620      	mov	r0, r4
   dccc4:	bd10      	pop	{r4, pc}
	else invalidate();
   dccc6:	f7ff ff72 	bl	dcbae <_ZN6String10invalidateEv>
   dccca:	e7fa      	b.n	dccc2 <_ZN6StringaSERKS_+0x14>

000dcccc <_ZN6StringC1ERKS_>:
String::String(const String &value)
   dcccc:	b510      	push	{r4, lr}
	buffer = NULL;
   dccce:	2300      	movs	r3, #0
String::String(const String &value)
   dccd0:	4604      	mov	r4, r0
	capacity = 0;
   dccd2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   dccd6:	6083      	str	r3, [r0, #8]
	flags = 0;
   dccd8:	7303      	strb	r3, [r0, #12]
	*this = value;
   dccda:	f7ff ffe8 	bl	dccae <_ZN6StringaSERKS_>
}
   dccde:	4620      	mov	r0, r4
   dcce0:	bd10      	pop	{r4, pc}

000dcce2 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   dcce2:	4288      	cmp	r0, r1
{
   dcce4:	b510      	push	{r4, lr}
   dcce6:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   dcce8:	d001      	beq.n	dccee <_ZN6StringaSEOS_+0xc>
   dccea:	f7ff ffb8 	bl	dcc5e <_ZN6String4moveERS_>
	return *this;
}
   dccee:	4620      	mov	r0, r4
   dccf0:	bd10      	pop	{r4, pc}

000dccf2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   dccf2:	b513      	push	{r0, r1, r4, lr}
   dccf4:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   dccf6:	b159      	cbz	r1, dcd10 <_ZN6StringaSEPKc+0x1e>
   dccf8:	4608      	mov	r0, r1
   dccfa:	9101      	str	r1, [sp, #4]
   dccfc:	f003 f85f 	bl	dfdbe <strlen>
   dcd00:	9901      	ldr	r1, [sp, #4]
   dcd02:	4602      	mov	r2, r0
   dcd04:	4620      	mov	r0, r4
   dcd06:	f7ff ff7d 	bl	dcc04 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   dcd0a:	4620      	mov	r0, r4
   dcd0c:	b002      	add	sp, #8
   dcd0e:	bd10      	pop	{r4, pc}
	else invalidate();
   dcd10:	f7ff ff4d 	bl	dcbae <_ZN6String10invalidateEv>
   dcd14:	e7f9      	b.n	dcd0a <_ZN6StringaSEPKc+0x18>

000dcd16 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   dcd16:	b570      	push	{r4, r5, r6, lr}
   dcd18:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   dcd1a:	460e      	mov	r6, r1
   dcd1c:	b909      	cbnz	r1, dcd22 <_ZN6String6concatEPKcj+0xc>
   dcd1e:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   dcd20:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   dcd22:	b16a      	cbz	r2, dcd40 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   dcd24:	6884      	ldr	r4, [r0, #8]
   dcd26:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   dcd28:	4621      	mov	r1, r4
   dcd2a:	f7ff ff57 	bl	dcbdc <_ZN6String7reserveEj>
   dcd2e:	2800      	cmp	r0, #0
   dcd30:	d0f5      	beq.n	dcd1e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   dcd32:	6828      	ldr	r0, [r5, #0]
   dcd34:	68ab      	ldr	r3, [r5, #8]
   dcd36:	4631      	mov	r1, r6
   dcd38:	4418      	add	r0, r3
   dcd3a:	f003 f81a 	bl	dfd72 <strcpy>
	len = newlen;
   dcd3e:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   dcd40:	2001      	movs	r0, #1
   dcd42:	e7ed      	b.n	dcd20 <_ZN6String6concatEPKcj+0xa>

000dcd44 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   dcd44:	b513      	push	{r0, r1, r4, lr}
   dcd46:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   dcd48:	4608      	mov	r0, r1
	if (!cstr) return 0;
   dcd4a:	b151      	cbz	r1, dcd62 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   dcd4c:	9101      	str	r1, [sp, #4]
   dcd4e:	f003 f836 	bl	dfdbe <strlen>
   dcd52:	9901      	ldr	r1, [sp, #4]
   dcd54:	4602      	mov	r2, r0
   dcd56:	4620      	mov	r0, r4
}
   dcd58:	b002      	add	sp, #8
   dcd5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   dcd5e:	f7ff bfda 	b.w	dcd16 <_ZN6String6concatEPKcj>
}
   dcd62:	b002      	add	sp, #8
   dcd64:	bd10      	pop	{r4, pc}

000dcd66 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   dcd66:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   dcd68:	688a      	ldr	r2, [r1, #8]
   dcd6a:	6809      	ldr	r1, [r1, #0]
{
   dcd6c:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   dcd6e:	f7ff ffd2 	bl	dcd16 <_ZN6String6concatEPKcj>
   dcd72:	b910      	cbnz	r0, dcd7a <_ZplRK15StringSumHelperRK6String+0x14>
   dcd74:	4620      	mov	r0, r4
   dcd76:	f7ff ff1a 	bl	dcbae <_ZN6String10invalidateEv>
	return a;
}
   dcd7a:	4620      	mov	r0, r4
   dcd7c:	bd10      	pop	{r4, pc}

000dcd7e <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   dcd7e:	b513      	push	{r0, r1, r4, lr}
   dcd80:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   dcd82:	b929      	cbnz	r1, dcd90 <_ZplRK15StringSumHelperPKc+0x12>
   dcd84:	4620      	mov	r0, r4
   dcd86:	f7ff ff12 	bl	dcbae <_ZN6String10invalidateEv>
	return a;
}
   dcd8a:	4620      	mov	r0, r4
   dcd8c:	b002      	add	sp, #8
   dcd8e:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   dcd90:	4608      	mov	r0, r1
   dcd92:	9101      	str	r1, [sp, #4]
   dcd94:	f003 f813 	bl	dfdbe <strlen>
   dcd98:	9901      	ldr	r1, [sp, #4]
   dcd9a:	4602      	mov	r2, r0
   dcd9c:	4620      	mov	r0, r4
   dcd9e:	f7ff ffba 	bl	dcd16 <_ZN6String6concatEPKcj>
   dcda2:	2800      	cmp	r0, #0
   dcda4:	d0ee      	beq.n	dcd84 <_ZplRK15StringSumHelperPKc+0x6>
   dcda6:	e7f0      	b.n	dcd8a <_ZplRK15StringSumHelperPKc+0xc>

000dcda8 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   dcda8:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   dcdaa:	6882      	ldr	r2, [r0, #8]
   dcdac:	b93a      	cbnz	r2, dcdbe <_ZNK6String6equalsEPKc+0x16>
   dcdae:	b121      	cbz	r1, dcdba <_ZNK6String6equalsEPKc+0x12>
   dcdb0:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   dcdb2:	fab0 f080 	clz	r0, r0
   dcdb6:	0940      	lsrs	r0, r0, #5
   dcdb8:	e000      	b.n	dcdbc <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   dcdba:	2001      	movs	r0, #1
}
   dcdbc:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   dcdbe:	6800      	ldr	r0, [r0, #0]
   dcdc0:	b909      	cbnz	r1, dcdc6 <_ZNK6String6equalsEPKc+0x1e>
   dcdc2:	7800      	ldrb	r0, [r0, #0]
   dcdc4:	e7f5      	b.n	dcdb2 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   dcdc6:	f002 ffca 	bl	dfd5e <strcmp>
   dcdca:	e7f2      	b.n	dcdb2 <_ZNK6String6equalsEPKc+0xa>

000dcdcc <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   dcdcc:	b508      	push	{r3, lr}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   dcdce:	6883      	ldr	r3, [r0, #8]
   dcdd0:	688a      	ldr	r2, [r1, #8]
   dcdd2:	4293      	cmp	r3, r2
   dcdd4:	d30b      	bcc.n	dcdee <_ZNK6String8endsWithERKS_+0x22>
   dcdd6:	6800      	ldr	r0, [r0, #0]
   dcdd8:	b140      	cbz	r0, dcdec <_ZNK6String8endsWithERKS_+0x20>
   dcdda:	6809      	ldr	r1, [r1, #0]
   dcddc:	b149      	cbz	r1, dcdf2 <_ZNK6String8endsWithERKS_+0x26>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   dcdde:	1a9b      	subs	r3, r3, r2
   dcde0:	4418      	add	r0, r3
   dcde2:	f002 ffbc 	bl	dfd5e <strcmp>
   dcde6:	fab0 f080 	clz	r0, r0
   dcdea:	0940      	lsrs	r0, r0, #5
}
   dcdec:	bd08      	pop	{r3, pc}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   dcdee:	2000      	movs	r0, #0
   dcdf0:	e7fc      	b.n	dcdec <_ZNK6String8endsWithERKS_+0x20>
   dcdf2:	4608      	mov	r0, r1
   dcdf4:	e7fa      	b.n	dcdec <_ZNK6String8endsWithERKS_+0x20>

000dcdf6 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   dcdf6:	b558      	push	{r3, r4, r6, lr}
   dcdf8:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   dcdfa:	b12a      	cbz	r2, dce08 <_ZNK6String8getBytesEPhjj+0x12>
   dcdfc:	b121      	cbz	r1, dce08 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   dcdfe:	6884      	ldr	r4, [r0, #8]
   dce00:	42a3      	cmp	r3, r4
   dce02:	d302      	bcc.n	dce0a <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   dce04:	2300      	movs	r3, #0
   dce06:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   dce08:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   dce0a:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   dce0c:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   dce0e:	6801      	ldr	r1, [r0, #0]
   dce10:	4294      	cmp	r4, r2
   dce12:	bf28      	it	cs
   dce14:	4614      	movcs	r4, r2
   dce16:	4419      	add	r1, r3
   dce18:	4622      	mov	r2, r4
   dce1a:	4630      	mov	r0, r6
   dce1c:	f002 ffe9 	bl	dfdf2 <strncpy>
	buf[n] = 0;
   dce20:	2300      	movs	r3, #0
   dce22:	5533      	strb	r3, [r6, r4]
   dce24:	e7f0      	b.n	dce08 <_ZNK6String8getBytesEPhjj+0x12>
	...

000dce28 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   dce28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   dce2a:	429a      	cmp	r2, r3
{
   dce2c:	460f      	mov	r7, r1
   dce2e:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   dce30:	490c      	ldr	r1, [pc, #48]	; (dce64 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   dce32:	bf88      	it	hi
   dce34:	4613      	movhi	r3, r2
{
   dce36:	4614      	mov	r4, r2
   dce38:	4606      	mov	r6, r0
	if (left > right) {
   dce3a:	bf84      	itt	hi
   dce3c:	462c      	movhi	r4, r5
   dce3e:	461d      	movhi	r5, r3
	String out;
   dce40:	f7ff fef9 	bl	dcc36 <_ZN6StringC1EPKc>
	if (left > len) return out;
   dce44:	68ba      	ldr	r2, [r7, #8]
   dce46:	42a2      	cmp	r2, r4
   dce48:	d30a      	bcc.n	dce60 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   dce4a:	6839      	ldr	r1, [r7, #0]
   dce4c:	42aa      	cmp	r2, r5
   dce4e:	bf94      	ite	ls
   dce50:	ebc4 0202 	rsbls	r2, r4, r2
   dce54:	ebc4 0205 	rsbhi	r2, r4, r5
   dce58:	4421      	add	r1, r4
   dce5a:	4630      	mov	r0, r6
   dce5c:	f7ff fed2 	bl	dcc04 <_ZN6String4copyEPKcj>
	return out;
}
   dce60:	4630      	mov	r0, r6
   dce62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dce64:	000e11dd 	.word	0x000e11dd

000dce68 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   dce68:	b40e      	push	{r1, r2, r3}
   dce6a:	b570      	push	{r4, r5, r6, lr}
   dce6c:	b087      	sub	sp, #28
   dce6e:	ad0b      	add	r5, sp, #44	; 0x2c
   dce70:	4604      	mov	r4, r0
   dce72:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dce76:	9201      	str	r2, [sp, #4]
   dce78:	462b      	mov	r3, r5
   dce7a:	2105      	movs	r1, #5
   dce7c:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   dce7e:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dce80:	f7fd faf0 	bl	da464 <vsnprintf>
    va_end(marker);

    String result;
   dce84:	490b      	ldr	r1, [pc, #44]	; (dceb4 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dce86:	4606      	mov	r6, r0
    String result;
   dce88:	4620      	mov	r0, r4
   dce8a:	f7ff fed4 	bl	dcc36 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   dce8e:	4631      	mov	r1, r6
   dce90:	4620      	mov	r0, r4
   dce92:	f7ff fea3 	bl	dcbdc <_ZN6String7reserveEj>
    if (result.buffer) {
   dce96:	6820      	ldr	r0, [r4, #0]
   dce98:	b130      	cbz	r0, dcea8 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   dce9a:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   dce9c:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   dce9e:	462b      	mov	r3, r5
   dcea0:	1c71      	adds	r1, r6, #1
   dcea2:	f7fd fadf 	bl	da464 <vsnprintf>
        va_end(marker);
        result.len = n;
   dcea6:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   dcea8:	4620      	mov	r0, r4
   dceaa:	b007      	add	sp, #28
   dceac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   dceb0:	b003      	add	sp, #12
   dceb2:	4770      	bx	lr
   dceb4:	000e11dd 	.word	0x000e11dd

000dceb8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   dceb8:	b510      	push	{r4, lr}
   dceba:	4604      	mov	r4, r0
        if (wakeupSource_) {
   dcebc:	6800      	ldr	r0, [r0, #0]
   dcebe:	b118      	cbz	r0, dcec8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   dcec0:	f7fd faa8 	bl	da414 <free>
            wakeupSource_ = nullptr;
   dcec4:	2300      	movs	r3, #0
   dcec6:	6023      	str	r3, [r4, #0]
        }
    }
   dcec8:	bd10      	pop	{r4, pc}

000dceca <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dceca:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   dcecc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   dced0:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   dced2:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dced4:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   dced6:	f853 2f06 	ldr.w	r2, [r3, #6]!
   dceda:	f8c0 2006 	str.w	r2, [r0, #6]
   dcede:	889b      	ldrh	r3, [r3, #4]
   dcee0:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dcee2:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   dcee4:	f7ff ffe8 	bl	dceb8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   dcee8:	682b      	ldr	r3, [r5, #0]
   dceea:	b113      	cbz	r3, dcef2 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   dceec:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   dceee:	2300      	movs	r3, #0
   dcef0:	602b      	str	r3, [r5, #0]
    }
   dcef2:	4620      	mov	r0, r4
   dcef4:	bd38      	pop	{r3, r4, r5, pc}
	...

000dcef8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   dcef8:	b538      	push	{r3, r4, r5, lr}
   dcefa:	460c      	mov	r4, r1
   dcefc:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   dcefe:	f7ff ffdb 	bl	dceb8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   dcf02:	b144      	cbz	r4, dcf16 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   dcf04:	8820      	ldrh	r0, [r4, #0]
   dcf06:	f7fd fa7d 	bl	da404 <malloc>
   dcf0a:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   dcf0c:	b128      	cbz	r0, dcf1a <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   dcf0e:	8822      	ldrh	r2, [r4, #0]
   dcf10:	4621      	mov	r1, r4
   dcf12:	f002 feb9 	bl	dfc88 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   dcf16:	2000      	movs	r0, #0
    }
   dcf18:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   dcf1a:	4801      	ldr	r0, [pc, #4]	; (dcf20 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   dcf1c:	e7fc      	b.n	dcf18 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   dcf1e:	bf00      	nop
   dcf20:	fffffefc 	.word	0xfffffefc

000dcf24 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   dcf24:	b507      	push	{r0, r1, r2, lr}
   dcf26:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   dcf28:	2100      	movs	r1, #0
{
   dcf2a:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   dcf2c:	9100      	str	r1, [sp, #0]
   dcf2e:	2001      	movs	r0, #1
   dcf30:	218c      	movs	r1, #140	; 0x8c
   dcf32:	f7fd f98d 	bl	da250 <system_reset>
}
   dcf36:	b003      	add	sp, #12
   dcf38:	f85d fb04 	ldr.w	pc, [sp], #4

000dcf3c <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   dcf3c:	4601      	mov	r1, r0
    reset(0, flags);
   dcf3e:	2000      	movs	r0, #0
   dcf40:	f7ff bff0 	b.w	dcf24 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000dcf44 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   dcf44:	2000      	movs	r0, #0
   dcf46:	f7ff bff9 	b.w	dcf3c <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000dcf4c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   dcf4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   dcf4e:	4d2d      	ldr	r5, [pc, #180]	; (dd004 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   dcf50:	7d0b      	ldrb	r3, [r1, #20]
   dcf52:	4604      	mov	r4, r0
   dcf54:	b08b      	sub	sp, #44	; 0x2c
   dcf56:	4608      	mov	r0, r1
   dcf58:	1daf      	adds	r7, r5, #6
   dcf5a:	2b00      	cmp	r3, #0
   dcf5c:	d038      	beq.n	dcfd0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   dcf5e:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   dcf60:	791b      	ldrb	r3, [r3, #4]
   dcf62:	2b00      	cmp	r3, #0
   dcf64:	d034      	beq.n	dcfd0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   dcf66:	2200      	movs	r2, #0
    SleepResult() {}
   dcf68:	4b27      	ldr	r3, [pc, #156]	; (dd008 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   dcf6a:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   dcf6c:	a902      	add	r1, sp, #8
   dcf6e:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   dcf70:	9202      	str	r2, [sp, #8]
   dcf72:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   dcf76:	f88d 200e 	strb.w	r2, [sp, #14]
   dcf7a:	f7fd f95f 	bl	da23c <system_sleep_ext>
        compatResult_ = result.compatResult_;
   dcf7e:	f8dd 300e 	ldr.w	r3, [sp, #14]
   dcf82:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   dcf86:	b200      	sxth	r0, r0
   dcf88:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   dcf8c:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   dcf90:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   dcf92:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   dcf94:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   dcf96:	4628      	mov	r0, r5
   dcf98:	f7ff ffae 	bl	dcef8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   dcf9c:	a802      	add	r0, sp, #8
   dcf9e:	f7ff ff8b 	bl	dceb8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   dcfa2:	2300      	movs	r3, #0
   dcfa4:	6023      	str	r3, [r4, #0]
   dcfa6:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   dcfa8:	71a3      	strb	r3, [r4, #6]
   dcfaa:	8123      	strh	r3, [r4, #8]
   dcfac:	f64f 73ff 	movw	r3, #65535	; 0xffff
   dcfb0:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   dcfb2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   dcfb6:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   dcfb8:	683b      	ldr	r3, [r7, #0]
   dcfba:	f8c4 3006 	str.w	r3, [r4, #6]
   dcfbe:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   dcfc0:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   dcfc2:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   dcfc4:	4620      	mov	r0, r4
   dcfc6:	f7ff ff97 	bl	dcef8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   dcfca:	4620      	mov	r0, r4
   dcfcc:	b00b      	add	sp, #44	; 0x2c
   dcfce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   dcfd0:	2600      	movs	r6, #0
   dcfd2:	2320      	movs	r3, #32
   dcfd4:	e9cd 3602 	strd	r3, r6, [sp, #8]
   dcfd8:	4b0c      	ldr	r3, [pc, #48]	; (dd00c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   dcfda:	9300      	str	r3, [sp, #0]
   dcfdc:	490c      	ldr	r1, [pc, #48]	; (dd010 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   dcfde:	4633      	mov	r3, r6
   dcfe0:	aa02      	add	r2, sp, #8
   dcfe2:	2032      	movs	r0, #50	; 0x32
   dcfe4:	f7fd f892 	bl	da10c <log_message>
    SleepResult() {}
   dcfe8:	4b07      	ldr	r3, [pc, #28]	; (dd008 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   dcfea:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   dcfec:	a902      	add	r1, sp, #8
        error_ = error;
   dcfee:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   dcff2:	4804      	ldr	r0, [pc, #16]	; (dd004 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   dcff4:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   dcff6:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   dcffa:	f8ad 300c 	strh.w	r3, [sp, #12]
   dcffe:	f7ff ff64 	bl	dceca <_ZN17SystemSleepResultaSEOS_>
   dd002:	e7cb      	b.n	dcf9c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   dd004:	2003e588 	.word	0x2003e588
   dd008:	ffff0000 	.word	0xffff0000
   dd00c:	000e12b7 	.word	0x000e12b7
   dd010:	000e12b0 	.word	0x000e12b0

000dd014 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   dd014:	4b05      	ldr	r3, [pc, #20]	; (dd02c <_GLOBAL__sub_I_System+0x18>)
   dd016:	2202      	movs	r2, #2
   dd018:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   dd01a:	4b05      	ldr	r3, [pc, #20]	; (dd030 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   dd01c:	4a05      	ldr	r2, [pc, #20]	; (dd034 <_GLOBAL__sub_I_System+0x20>)
   dd01e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   dd020:	2000      	movs	r0, #0
   dd022:	6018      	str	r0, [r3, #0]
   dd024:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   dd026:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   dd028:	f7fd b8a2 	b.w	da170 <set_system_mode>
   dd02c:	2003e594 	.word	0x2003e594
   dd030:	2003e588 	.word	0x2003e588
   dd034:	ffff0000 	.word	0xffff0000

000dd038 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   dd038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   dd03c:	4a15      	ldr	r2, [pc, #84]	; (dd094 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   dd03e:	f8df 8060 	ldr.w	r8, [pc, #96]	; dd0a0 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   dd042:	e9d2 3200 	ldrd	r3, r2, [r2]
   dd046:	18c0      	adds	r0, r0, r3
   dd048:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   dd04c:	4a12      	ldr	r2, [pc, #72]	; (dd098 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   dd04e:	e9d2 3200 	ldrd	r3, r2, [r2]
   dd052:	18c6      	adds	r6, r0, r3
   dd054:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   dd058:	e9d8 2300 	ldrd	r2, r3, [r8]
   dd05c:	42bb      	cmp	r3, r7
   dd05e:	bf08      	it	eq
   dd060:	42b2      	cmpeq	r2, r6
{
   dd062:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   dd064:	d013      	beq.n	dd08e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   dd066:	a903      	add	r1, sp, #12
   dd068:	4668      	mov	r0, sp
   dd06a:	e9cd 6700 	strd	r6, r7, [sp]
   dd06e:	f7fd fa29 	bl	da4c4 <localtime_r>
	calendar_time.tm_year += 1900;
   dd072:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dd074:	4d09      	ldr	r5, [pc, #36]	; (dd09c <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   dd076:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dd07a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   dd07c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dd07e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dd080:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   dd082:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dd084:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   dd086:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dd08a:	6823      	ldr	r3, [r4, #0]
   dd08c:	602b      	str	r3, [r5, #0]
    }
}
   dd08e:	b00c      	add	sp, #48	; 0x30
   dd090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd094:	2003e5d0 	.word	0x2003e5d0
   dd098:	2003e5c8 	.word	0x2003e5c8
   dd09c:	2003e5a0 	.word	0x2003e5a0
   dd0a0:	2003e5d8 	.word	0x2003e5d8

000dd0a4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   dd0a4:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   dd0a6:	2000      	movs	r0, #0
   dd0a8:	f7fd f924 	bl	da2f4 <spark_sync_time_pending>
   dd0ac:	b128      	cbz	r0, dd0ba <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   dd0ae:	f7fd f8f9 	bl	da2a4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   dd0b2:	f080 0001 	eor.w	r0, r0, #1
   dd0b6:	b2c0      	uxtb	r0, r0
    }
   dd0b8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   dd0ba:	2001      	movs	r0, #1
   dd0bc:	e7fc      	b.n	dd0b8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000dd0c0 <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   dd0c0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dd0c2:	f7ff ffb9 	bl	dd038 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   dd0c6:	4b01      	ldr	r3, [pc, #4]	; (dd0cc <_ZN9TimeClass4hourEx+0xc>)
   dd0c8:	6898      	ldr	r0, [r3, #8]
   dd0ca:	bd08      	pop	{r3, pc}
   dd0cc:	2003e5a0 	.word	0x2003e5a0

000dd0d0 <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   dd0d0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dd0d2:	f7ff ffb1 	bl	dd038 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   dd0d6:	4b01      	ldr	r3, [pc, #4]	; (dd0dc <_ZN9TimeClass3dayEx+0xc>)
   dd0d8:	68d8      	ldr	r0, [r3, #12]
   dd0da:	bd08      	pop	{r3, pc}
   dd0dc:	2003e5a0 	.word	0x2003e5a0

000dd0e0 <_ZN9TimeClass7weekdayEx>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   dd0e0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dd0e2:	f7ff ffa9 	bl	dd038 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   dd0e6:	4b02      	ldr	r3, [pc, #8]	; (dd0f0 <_ZN9TimeClass7weekdayEx+0x10>)
   dd0e8:	6998      	ldr	r0, [r3, #24]
}
   dd0ea:	3001      	adds	r0, #1
   dd0ec:	bd08      	pop	{r3, pc}
   dd0ee:	bf00      	nop
   dd0f0:	2003e5a0 	.word	0x2003e5a0

000dd0f4 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   dd0f4:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dd0f6:	f7ff ff9f 	bl	dd038 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   dd0fa:	4b02      	ldr	r3, [pc, #8]	; (dd104 <_ZN9TimeClass5monthEx+0x10>)
   dd0fc:	6918      	ldr	r0, [r3, #16]
}
   dd0fe:	3001      	adds	r0, #1
   dd100:	bd08      	pop	{r3, pc}
   dd102:	bf00      	nop
   dd104:	2003e5a0 	.word	0x2003e5a0

000dd108 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   dd108:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   dd10c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   dd110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   dd114:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   dd116:	d411      	bmi.n	dd13c <_ZN9TimeClass4zoneEf+0x34>
   dd118:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   dd11c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   dd120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dd124:	dc0a      	bgt.n	dd13c <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   dd126:	eddf 7a06 	vldr	s15, [pc, #24]	; dd140 <_ZN9TimeClass4zoneEf+0x38>
   dd12a:	ee60 7a27 	vmul.f32	s15, s0, s15
   dd12e:	ee17 0a90 	vmov	r0, s15
   dd132:	f002 fbcf 	bl	df8d4 <__aeabi_f2lz>
   dd136:	4b03      	ldr	r3, [pc, #12]	; (dd144 <_ZN9TimeClass4zoneEf+0x3c>)
   dd138:	e9c3 0100 	strd	r0, r1, [r3]
}
   dd13c:	bd08      	pop	{r3, pc}
   dd13e:	bf00      	nop
   dd140:	45610000 	.word	0x45610000
   dd144:	2003e5d0 	.word	0x2003e5d0

000dd148 <_ZN9TimeClass12setDSTOffsetEf>:
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
    if (offset < 0 || offset > 2)
   dd148:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   dd14c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   dd150:	b508      	push	{r3, lr}
    if (offset < 0 || offset > 2)
   dd152:	d411      	bmi.n	dd178 <_ZN9TimeClass12setDSTOffsetEf+0x30>
   dd154:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   dd158:	eeb4 0ae7 	vcmpe.f32	s0, s15
   dd15c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dd160:	dc0a      	bgt.n	dd178 <_ZN9TimeClass12setDSTOffsetEf+0x30>
    {
        return;
    }
    dst_cache = offset * 3600;
   dd162:	eddf 7a06 	vldr	s15, [pc, #24]	; dd17c <_ZN9TimeClass12setDSTOffsetEf+0x34>
   dd166:	ee60 7a27 	vmul.f32	s15, s0, s15
   dd16a:	ee17 0a90 	vmov	r0, s15
   dd16e:	f002 fbb1 	bl	df8d4 <__aeabi_f2lz>
   dd172:	4b03      	ldr	r3, [pc, #12]	; (dd180 <_ZN9TimeClass12setDSTOffsetEf+0x38>)
   dd174:	e9c3 0100 	strd	r0, r1, [r3]
}
   dd178:	bd08      	pop	{r3, pc}
   dd17a:	bf00      	nop
   dd17c:	45610000 	.word	0x45610000
   dd180:	2003e120 	.word	0x2003e120

000dd184 <_ZN9TimeClass8beginDSTEv>:

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
   dd184:	4b03      	ldr	r3, [pc, #12]	; (dd194 <_ZN9TimeClass8beginDSTEv+0x10>)
   dd186:	e9d3 0100 	ldrd	r0, r1, [r3]
   dd18a:	4b03      	ldr	r3, [pc, #12]	; (dd198 <_ZN9TimeClass8beginDSTEv+0x14>)
   dd18c:	e9c3 0100 	strd	r0, r1, [r3]
}
   dd190:	4770      	bx	lr
   dd192:	bf00      	nop
   dd194:	2003e120 	.word	0x2003e120
   dd198:	2003e5c8 	.word	0x2003e5c8

000dd19c <_ZN9TimeClass6endDSTEv>:

void TimeClass::endDST()
{
    dst_current_cache = 0;
   dd19c:	4b02      	ldr	r3, [pc, #8]	; (dd1a8 <_ZN9TimeClass6endDSTEv+0xc>)
   dd19e:	2000      	movs	r0, #0
   dd1a0:	2100      	movs	r1, #0
   dd1a2:	e9c3 0100 	strd	r0, r1, [r3]
}
   dd1a6:	4770      	bx	lr
   dd1a8:	2003e5c8 	.word	0x2003e5c8

000dd1ac <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   dd1ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   dd1ae:	4602      	mov	r2, r0
   dd1b0:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   dd1b2:	4668      	mov	r0, sp
    struct timeval tv = {
   dd1b4:	2100      	movs	r1, #0
    };
   dd1b6:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   dd1ba:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   dd1be:	f7fc fd65 	bl	d9c8c <hal_rtc_set_time>
   dd1c2:	4602      	mov	r2, r0
   dd1c4:	b910      	cbnz	r0, dd1cc <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   dd1c6:	4601      	mov	r1, r0
   dd1c8:	f7fd f812 	bl	da1f0 <system_notify_time_changed>
    }
}
   dd1cc:	b005      	add	sp, #20
   dd1ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dd1d4 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   dd1d4:	b530      	push	{r4, r5, lr}
   dd1d6:	4604      	mov	r4, r0
    t += time_zone_cache;
   dd1d8:	4818      	ldr	r0, [pc, #96]	; (dd23c <_ZN9TimeClass7timeStrEx+0x68>)
   dd1da:	e9d0 1000 	ldrd	r1, r0, [r0]
   dd1de:	1852      	adds	r2, r2, r1
   dd1e0:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   dd1e4:	4816      	ldr	r0, [pc, #88]	; (dd240 <_ZN9TimeClass7timeStrEx+0x6c>)
   dd1e6:	e9d0 1000 	ldrd	r1, r0, [r0]
   dd1ea:	1852      	adds	r2, r2, r1
{
   dd1ec:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   dd1ee:	eb40 0303 	adc.w	r3, r0, r3
   dd1f2:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   dd1f6:	2224      	movs	r2, #36	; 0x24
   dd1f8:	eb0d 0002 	add.w	r0, sp, r2
   dd1fc:	2100      	movs	r1, #0
   dd1fe:	f002 fd6b 	bl	dfcd8 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   dd202:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   dd204:	a909      	add	r1, sp, #36	; 0x24
   dd206:	4668      	mov	r0, sp
   dd208:	f7fd f95c 	bl	da4c4 <localtime_r>
    char ascstr[26] = {};
   dd20c:	2216      	movs	r2, #22
   dd20e:	4629      	mov	r1, r5
   dd210:	a803      	add	r0, sp, #12
   dd212:	9502      	str	r5, [sp, #8]
   dd214:	f002 fd60 	bl	dfcd8 <memset>
    asctime_r(&calendar_time, ascstr);
   dd218:	a902      	add	r1, sp, #8
   dd21a:	a809      	add	r0, sp, #36	; 0x24
   dd21c:	f002 fcf2 	bl	dfc04 <asctime_r>
    int len = strlen(ascstr);
   dd220:	a802      	add	r0, sp, #8
   dd222:	f002 fdcc 	bl	dfdbe <strlen>
    ascstr[len-1] = 0; // remove final newline
   dd226:	ab12      	add	r3, sp, #72	; 0x48
   dd228:	4418      	add	r0, r3
    return String(ascstr);
   dd22a:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   dd22c:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   dd230:	4620      	mov	r0, r4
   dd232:	f7ff fd00 	bl	dcc36 <_ZN6StringC1EPKc>
}
   dd236:	4620      	mov	r0, r4
   dd238:	b013      	add	sp, #76	; 0x4c
   dd23a:	bd30      	pop	{r4, r5, pc}
   dd23c:	2003e5d0 	.word	0x2003e5d0
   dd240:	2003e5c8 	.word	0x2003e5c8

000dd244 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   dd244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd248:	b0a5      	sub	sp, #148	; 0x94
   dd24a:	4607      	mov	r7, r0
   dd24c:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dd24e:	a814      	add	r0, sp, #80	; 0x50
{
   dd250:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dd252:	223f      	movs	r2, #63	; 0x3f
{
   dd254:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dd256:	f002 fdcc 	bl	dfdf2 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dd25a:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dd25c:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dd25e:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dd262:	f002 fdac 	bl	dfdbe <strlen>
   dd266:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   dd268:	bb5d      	cbnz	r5, dd2c2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   dd26a:	492a      	ldr	r1, [pc, #168]	; (dd314 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   dd26c:	a803      	add	r0, sp, #12
   dd26e:	f002 fd80 	bl	dfd72 <strcpy>
   dd272:	ae14      	add	r6, sp, #80	; 0x50
{
   dd274:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   dd276:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   dd27a:	45ab      	cmp	fp, r5
   dd27c:	d936      	bls.n	dd2ec <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   dd27e:	46b1      	mov	r9, r6
   dd280:	f105 0a01 	add.w	sl, r5, #1
   dd284:	f819 3b01 	ldrb.w	r3, [r9], #1
   dd288:	2b25      	cmp	r3, #37	; 0x25
   dd28a:	d117      	bne.n	dd2bc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   dd28c:	7873      	ldrb	r3, [r6, #1]
   dd28e:	2b7a      	cmp	r3, #122	; 0x7a
   dd290:	d114      	bne.n	dd2bc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   dd292:	a803      	add	r0, sp, #12
   dd294:	f002 fd93 	bl	dfdbe <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   dd298:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   dd29a:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   dd29c:	1828      	adds	r0, r5, r0
   dd29e:	4418      	add	r0, r3
   dd2a0:	ebab 0205 	sub.w	r2, fp, r5
   dd2a4:	1cb1      	adds	r1, r6, #2
   dd2a6:	f002 fcef 	bl	dfc88 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   dd2aa:	4622      	mov	r2, r4
   dd2ac:	a903      	add	r1, sp, #12
   dd2ae:	4630      	mov	r0, r6
   dd2b0:	f002 fcea 	bl	dfc88 <memcpy>
            len = strlen(format_str);
   dd2b4:	a814      	add	r0, sp, #80	; 0x50
   dd2b6:	f002 fd82 	bl	dfdbe <strlen>
   dd2ba:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   dd2bc:	464e      	mov	r6, r9
   dd2be:	4655      	mov	r5, sl
   dd2c0:	e7d9      	b.n	dd276 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   dd2c2:	213c      	movs	r1, #60	; 0x3c
   dd2c4:	fb95 f3f1 	sdiv	r3, r5, r1
   dd2c8:	2b00      	cmp	r3, #0
   dd2ca:	bfb8      	it	lt
   dd2cc:	425b      	neglt	r3, r3
   dd2ce:	fbb3 f2f1 	udiv	r2, r3, r1
   dd2d2:	fb01 3312 	mls	r3, r1, r2, r3
   dd2d6:	9300      	str	r3, [sp, #0]
   dd2d8:	4a0f      	ldr	r2, [pc, #60]	; (dd318 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   dd2da:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dd2de:	2110      	movs	r1, #16
   dd2e0:	a803      	add	r0, sp, #12
   dd2e2:	fb95 f3f3 	sdiv	r3, r5, r3
   dd2e6:	f7fd f8b5 	bl	da454 <snprintf>
   dd2ea:	e7c2      	b.n	dd272 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   dd2ec:	2100      	movs	r1, #0
   dd2ee:	222e      	movs	r2, #46	; 0x2e
   dd2f0:	a808      	add	r0, sp, #32
   dd2f2:	9107      	str	r1, [sp, #28]
   dd2f4:	f002 fcf0 	bl	dfcd8 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   dd2f8:	4643      	mov	r3, r8
   dd2fa:	aa14      	add	r2, sp, #80	; 0x50
   dd2fc:	2132      	movs	r1, #50	; 0x32
   dd2fe:	a807      	add	r0, sp, #28
   dd300:	f7fd f8d8 	bl	da4b4 <strftime>
    return String(buf);
   dd304:	a907      	add	r1, sp, #28
   dd306:	4638      	mov	r0, r7
   dd308:	f7ff fc95 	bl	dcc36 <_ZN6StringC1EPKc>
}
   dd30c:	4638      	mov	r0, r7
   dd30e:	b025      	add	sp, #148	; 0x94
   dd310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd314:	000e12de 	.word	0x000e12de
   dd318:	000e12e0 	.word	0x000e12e0

000dd31c <_ZN9TimeClass6formatExPKc>:
{
   dd31c:	b5f0      	push	{r4, r5, r6, r7, lr}
   dd31e:	b08d      	sub	sp, #52	; 0x34
   dd320:	e9cd 2300 	strd	r2, r3, [sp]
   dd324:	9d12      	ldr	r5, [sp, #72]	; 0x48
   dd326:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   dd328:	b915      	cbnz	r5, dd330 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   dd32a:	4b19      	ldr	r3, [pc, #100]	; (dd390 <_ZN9TimeClass6formatExPKc+0x74>)
   dd32c:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   dd32e:	b12d      	cbz	r5, dd33c <_ZN9TimeClass6formatExPKc+0x20>
   dd330:	4b18      	ldr	r3, [pc, #96]	; (dd394 <_ZN9TimeClass6formatExPKc+0x78>)
   dd332:	4628      	mov	r0, r5
   dd334:	6819      	ldr	r1, [r3, #0]
   dd336:	f002 fd12 	bl	dfd5e <strcmp>
   dd33a:	b938      	cbnz	r0, dd34c <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   dd33c:	e9dd 2300 	ldrd	r2, r3, [sp]
   dd340:	4620      	mov	r0, r4
   dd342:	f7ff ff47 	bl	dd1d4 <_ZN9TimeClass7timeStrEx>
}
   dd346:	4620      	mov	r0, r4
   dd348:	b00d      	add	sp, #52	; 0x34
   dd34a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   dd34c:	4e12      	ldr	r6, [pc, #72]	; (dd398 <_ZN9TimeClass6formatExPKc+0x7c>)
   dd34e:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   dd350:	4f12      	ldr	r7, [pc, #72]	; (dd39c <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   dd352:	e9d6 3200 	ldrd	r3, r2, [r6]
   dd356:	185b      	adds	r3, r3, r1
   dd358:	9901      	ldr	r1, [sp, #4]
   dd35a:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   dd35e:	e9d7 0100 	ldrd	r0, r1, [r7]
   dd362:	181b      	adds	r3, r3, r0
   dd364:	eb41 0202 	adc.w	r2, r1, r2
   dd368:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   dd36c:	2100      	movs	r1, #0
   dd36e:	2224      	movs	r2, #36	; 0x24
   dd370:	a803      	add	r0, sp, #12
   dd372:	f002 fcb1 	bl	dfcd8 <memset>
    localtime_r(&t, &calendar_time);
   dd376:	a903      	add	r1, sp, #12
   dd378:	4668      	mov	r0, sp
   dd37a:	f7fd f8a3 	bl	da4c4 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   dd37e:	6832      	ldr	r2, [r6, #0]
   dd380:	683b      	ldr	r3, [r7, #0]
   dd382:	a903      	add	r1, sp, #12
   dd384:	4413      	add	r3, r2
   dd386:	4620      	mov	r0, r4
   dd388:	462a      	mov	r2, r5
   dd38a:	f7ff ff5b 	bl	dd244 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   dd38e:	e7da      	b.n	dd346 <_ZN9TimeClass6formatExPKc+0x2a>
   dd390:	2003e59c 	.word	0x2003e59c
   dd394:	2003e11c 	.word	0x2003e11c
   dd398:	2003e5d0 	.word	0x2003e5d0
   dd39c:	2003e5c8 	.word	0x2003e5c8

000dd3a0 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   dd3a0:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   dd3a2:	2000      	movs	r0, #0
   dd3a4:	f7fc fc5a 	bl	d9c5c <hal_rtc_time_is_valid>
    if (rtcstate)
   dd3a8:	4604      	mov	r4, r0
   dd3aa:	b9a0      	cbnz	r0, dd3d6 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   dd3ac:	f7fc fed8 	bl	da160 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   dd3b0:	2801      	cmp	r0, #1
   dd3b2:	d110      	bne.n	dd3d6 <_ZN9TimeClass7isValidEv+0x36>
   dd3b4:	4620      	mov	r0, r4
   dd3b6:	f7fc ff13 	bl	da1e0 <system_thread_get_state>
   dd3ba:	b960      	cbnz	r0, dd3d6 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   dd3bc:	f7ff fe72 	bl	dd0a4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   dd3c0:	b910      	cbnz	r0, dd3c8 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   dd3c2:	f7fc ff5f 	bl	da284 <spark_process>
        while (_while() && !_condition()) {
   dd3c6:	e7f9      	b.n	dd3bc <_ZN9TimeClass7isValidEv+0x1c>
   dd3c8:	f7ff fe6c 	bl	dd0a4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   dd3cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   dd3d0:	2000      	movs	r0, #0
   dd3d2:	f7fc bc43 	b.w	d9c5c <hal_rtc_time_is_valid>
}
   dd3d6:	4620      	mov	r0, r4
   dd3d8:	bd10      	pop	{r4, pc}

000dd3da <_ZN9TimeClass3nowEv>:
{
   dd3da:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   dd3dc:	f7ff ffe0 	bl	dd3a0 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   dd3e0:	2210      	movs	r2, #16
   dd3e2:	2100      	movs	r1, #0
   dd3e4:	4668      	mov	r0, sp
   dd3e6:	f002 fc77 	bl	dfcd8 <memset>
    hal_rtc_get_time(&tv, nullptr);
   dd3ea:	2100      	movs	r1, #0
   dd3ec:	4668      	mov	r0, sp
   dd3ee:	f7fc fc45 	bl	d9c7c <hal_rtc_get_time>
}
   dd3f2:	9800      	ldr	r0, [sp, #0]
   dd3f4:	b005      	add	sp, #20
   dd3f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dd3fc <_ZN9TimeClass4hourEv>:
{
   dd3fc:	b508      	push	{r3, lr}
	return hour(now());
   dd3fe:	f7ff ffec 	bl	dd3da <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   dd402:	17c1      	asrs	r1, r0, #31
   dd404:	f7ff fe18 	bl	dd038 <_ZL22Refresh_UnixTime_Cachex>
}
   dd408:	4b01      	ldr	r3, [pc, #4]	; (dd410 <_ZN9TimeClass4hourEv+0x14>)
   dd40a:	6898      	ldr	r0, [r3, #8]
   dd40c:	bd08      	pop	{r3, pc}
   dd40e:	bf00      	nop
   dd410:	2003e5a0 	.word	0x2003e5a0

000dd414 <_ZN9TimeClass3dayEv>:
{
   dd414:	b508      	push	{r3, lr}
	return day(now());
   dd416:	f7ff ffe0 	bl	dd3da <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   dd41a:	17c1      	asrs	r1, r0, #31
   dd41c:	f7ff fe0c 	bl	dd038 <_ZL22Refresh_UnixTime_Cachex>
}
   dd420:	4b01      	ldr	r3, [pc, #4]	; (dd428 <_ZN9TimeClass3dayEv+0x14>)
   dd422:	68d8      	ldr	r0, [r3, #12]
   dd424:	bd08      	pop	{r3, pc}
   dd426:	bf00      	nop
   dd428:	2003e5a0 	.word	0x2003e5a0

000dd42c <_ZN9TimeClass7weekdayEv>:
{
   dd42c:	b508      	push	{r3, lr}
	return weekday(now());
   dd42e:	f7ff ffd4 	bl	dd3da <_ZN9TimeClass3nowEv>
}
   dd432:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return weekday(now());
   dd436:	17c1      	asrs	r1, r0, #31
   dd438:	f7ff be52 	b.w	dd0e0 <_ZN9TimeClass7weekdayEx>

000dd43c <_ZN9TimeClass5monthEv>:
{
   dd43c:	b508      	push	{r3, lr}
	return month(now());
   dd43e:	f7ff ffcc 	bl	dd3da <_ZN9TimeClass3nowEv>
}
   dd442:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   dd446:	17c1      	asrs	r1, r0, #31
   dd448:	f7ff be54 	b.w	dd0f4 <_ZN9TimeClass5monthEx>

000dd44c <_ZN9TimeClass5localEv>:
{
   dd44c:	b508      	push	{r3, lr}
	return now() + time_zone_cache + dst_current_cache;
   dd44e:	f7ff ffc4 	bl	dd3da <_ZN9TimeClass3nowEv>
   dd452:	4b03      	ldr	r3, [pc, #12]	; (dd460 <_ZN9TimeClass5localEv+0x14>)
   dd454:	4a03      	ldr	r2, [pc, #12]	; (dd464 <_ZN9TimeClass5localEv+0x18>)
   dd456:	681b      	ldr	r3, [r3, #0]
   dd458:	6812      	ldr	r2, [r2, #0]
   dd45a:	4413      	add	r3, r2
}
   dd45c:	4418      	add	r0, r3
   dd45e:	bd08      	pop	{r3, pc}
   dd460:	2003e5d0 	.word	0x2003e5d0
   dd464:	2003e5c8 	.word	0x2003e5c8

000dd468 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   dd468:	4b02      	ldr	r3, [pc, #8]	; (dd474 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   dd46a:	681a      	ldr	r2, [r3, #0]
   dd46c:	4b02      	ldr	r3, [pc, #8]	; (dd478 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   dd46e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   dd470:	4770      	bx	lr
   dd472:	bf00      	nop
   dd474:	2003e11c 	.word	0x2003e11c
   dd478:	2003e59c 	.word	0x2003e59c

000dd47c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   dd47c:	4770      	bx	lr

000dd47e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dd47e:	7441      	strb	r1, [r0, #17]
}
   dd480:	4770      	bx	lr

000dd482 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   dd482:	4770      	bx	lr

000dd484 <_ZN11USARTSerial17availableForWriteEv>:
{
   dd484:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   dd486:	7c00      	ldrb	r0, [r0, #16]
   dd488:	f7fc fdb8 	bl	d9ffc <hal_usart_available_data_for_write>
}
   dd48c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dd490:	bd08      	pop	{r3, pc}

000dd492 <_ZN11USARTSerial9availableEv>:
{
   dd492:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   dd494:	7c00      	ldrb	r0, [r0, #16]
   dd496:	f7fc fd89 	bl	d9fac <hal_usart_available>
}
   dd49a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dd49e:	bd08      	pop	{r3, pc}

000dd4a0 <_ZN11USARTSerial4peekEv>:
{
   dd4a0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   dd4a2:	7c00      	ldrb	r0, [r0, #16]
   dd4a4:	f7fc fd92 	bl	d9fcc <hal_usart_peek>
}
   dd4a8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dd4ac:	bd08      	pop	{r3, pc}

000dd4ae <_ZN11USARTSerial4readEv>:
{
   dd4ae:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   dd4b0:	7c00      	ldrb	r0, [r0, #16]
   dd4b2:	f7fc fd83 	bl	d9fbc <hal_usart_read>
}
   dd4b6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dd4ba:	bd08      	pop	{r3, pc}

000dd4bc <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   dd4bc:	7c00      	ldrb	r0, [r0, #16]
   dd4be:	f7fc bd8d 	b.w	d9fdc <hal_usart_flush>

000dd4c2 <_ZN11USARTSerial5writeEh>:
{
   dd4c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   dd4c4:	7c45      	ldrb	r5, [r0, #17]
{
   dd4c6:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   dd4c8:	b12d      	cbz	r5, dd4d6 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   dd4ca:	7c20      	ldrb	r0, [r4, #16]
}
   dd4cc:	b003      	add	sp, #12
   dd4ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   dd4d2:	f7fc bd63 	b.w	d9f9c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   dd4d6:	7c00      	ldrb	r0, [r0, #16]
   dd4d8:	9101      	str	r1, [sp, #4]
   dd4da:	f7fc fd8f 	bl	d9ffc <hal_usart_available_data_for_write>
   dd4de:	2800      	cmp	r0, #0
   dd4e0:	9901      	ldr	r1, [sp, #4]
   dd4e2:	dcf2      	bgt.n	dd4ca <_ZN11USARTSerial5writeEh+0x8>
}
   dd4e4:	4628      	mov	r0, r5
   dd4e6:	b003      	add	sp, #12
   dd4e8:	bd30      	pop	{r4, r5, pc}

000dd4ea <_ZN11USARTSerialD0Ev>:
   dd4ea:	b510      	push	{r4, lr}
   dd4ec:	2114      	movs	r1, #20
   dd4ee:	4604      	mov	r4, r0
   dd4f0:	f000 fa90 	bl	dda14 <_ZdlPvj>
   dd4f4:	4620      	mov	r0, r4
   dd4f6:	bd10      	pop	{r4, pc}

000dd4f8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   dd4f8:	b510      	push	{r4, lr}
   dd4fa:	f04f 0c00 	mov.w	ip, #0
   dd4fe:	4604      	mov	r4, r0
   dd500:	4608      	mov	r0, r1
   dd502:	4611      	mov	r1, r2
   dd504:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   dd508:	e9c4 c201 	strd	ip, r2, [r4, #4]
   dd50c:	4a04      	ldr	r2, [pc, #16]	; (dd520 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   dd50e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   dd510:	2201      	movs	r2, #1
  _serial = serial;
   dd512:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   dd514:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   dd516:	461a      	mov	r2, r3
   dd518:	f7fc fd30 	bl	d9f7c <hal_usart_init>
}
   dd51c:	4620      	mov	r0, r4
   dd51e:	bd10      	pop	{r4, pc}
   dd520:	000e1310 	.word	0x000e1310

000dd524 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   dd524:	7c00      	ldrb	r0, [r0, #16]
   dd526:	2300      	movs	r3, #0
   dd528:	f7fc bd70 	b.w	da00c <hal_usart_begin_config>

000dd52c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   dd52c:	2200      	movs	r2, #0
   dd52e:	f7ff bff9 	b.w	dd524 <_ZN11USARTSerial5beginEmm>

000dd532 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   dd532:	7c00      	ldrb	r0, [r0, #16]
   dd534:	f7fc bd2a 	b.w	d9f8c <hal_usart_end>

000dd538 <_Z22__fetch_global_Serial1v>:
{
   dd538:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   dd53a:	4c0d      	ldr	r4, [pc, #52]	; (dd570 <_Z22__fetch_global_Serial1v+0x38>)
   dd53c:	7821      	ldrb	r1, [r4, #0]
   dd53e:	f3bf 8f5b 	dmb	ish
   dd542:	f011 0101 	ands.w	r1, r1, #1
   dd546:	d110      	bne.n	dd56a <_Z22__fetch_global_Serial1v+0x32>
   dd548:	4620      	mov	r0, r4
   dd54a:	9101      	str	r1, [sp, #4]
   dd54c:	f7f6 fdb4 	bl	d40b8 <__cxa_guard_acquire>
   dd550:	9901      	ldr	r1, [sp, #4]
   dd552:	b150      	cbz	r0, dd56a <_Z22__fetch_global_Serial1v+0x32>
   dd554:	4b07      	ldr	r3, [pc, #28]	; (dd574 <_Z22__fetch_global_Serial1v+0x3c>)
   dd556:	4a08      	ldr	r2, [pc, #32]	; (dd578 <_Z22__fetch_global_Serial1v+0x40>)
   dd558:	4808      	ldr	r0, [pc, #32]	; (dd57c <_Z22__fetch_global_Serial1v+0x44>)
   dd55a:	f7ff ffcd 	bl	dd4f8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   dd55e:	4620      	mov	r0, r4
   dd560:	f7f6 fdaf 	bl	d40c2 <__cxa_guard_release>
   dd564:	4806      	ldr	r0, [pc, #24]	; (dd580 <_Z22__fetch_global_Serial1v+0x48>)
   dd566:	f002 fb73 	bl	dfc50 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   dd56a:	4804      	ldr	r0, [pc, #16]	; (dd57c <_Z22__fetch_global_Serial1v+0x44>)
   dd56c:	b002      	add	sp, #8
   dd56e:	bd10      	pop	{r4, pc}
   dd570:	2003e5e0 	.word	0x2003e5e0
   dd574:	2003e668 	.word	0x2003e668
   dd578:	2003e5e4 	.word	0x2003e5e4
   dd57c:	2003e6ec 	.word	0x2003e6ec
   dd580:	000dd483 	.word	0x000dd483

000dd584 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dd584:	7441      	strb	r1, [r0, #17]
}
   dd586:	4770      	bx	lr

000dd588 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dd588:	4770      	bx	lr

000dd58a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   dd58a:	4770      	bx	lr

000dd58c <_ZN9USBSerial4readEv>:
{
   dd58c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   dd58e:	2100      	movs	r1, #0
   dd590:	7c00      	ldrb	r0, [r0, #16]
   dd592:	f7fc fd6b 	bl	da06c <HAL_USB_USART_Receive_Data>
}
   dd596:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dd59a:	bd08      	pop	{r3, pc}

000dd59c <_ZN9USBSerial4peekEv>:
{
   dd59c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   dd59e:	2101      	movs	r1, #1
   dd5a0:	7c00      	ldrb	r0, [r0, #16]
   dd5a2:	f7fc fd63 	bl	da06c <HAL_USB_USART_Receive_Data>
}
   dd5a6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dd5aa:	bd08      	pop	{r3, pc}

000dd5ac <_ZN9USBSerial17availableForWriteEv>:
{
   dd5ac:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   dd5ae:	7c00      	ldrb	r0, [r0, #16]
   dd5b0:	f7fc fd54 	bl	da05c <HAL_USB_USART_Available_Data_For_Write>
}
   dd5b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dd5b8:	bd08      	pop	{r3, pc}

000dd5ba <_ZN9USBSerial9availableEv>:
{
   dd5ba:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   dd5bc:	7c00      	ldrb	r0, [r0, #16]
   dd5be:	f7fc fd45 	bl	da04c <HAL_USB_USART_Available_Data>
}
   dd5c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dd5c6:	bd08      	pop	{r3, pc}

000dd5c8 <_ZN9USBSerial5writeEh>:
{
   dd5c8:	b513      	push	{r0, r1, r4, lr}
   dd5ca:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dd5cc:	7c00      	ldrb	r0, [r0, #16]
{
   dd5ce:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dd5d0:	f7fc fd44 	bl	da05c <HAL_USB_USART_Available_Data_For_Write>
   dd5d4:	2800      	cmp	r0, #0
   dd5d6:	9901      	ldr	r1, [sp, #4]
   dd5d8:	dc01      	bgt.n	dd5de <_ZN9USBSerial5writeEh+0x16>
   dd5da:	7c60      	ldrb	r0, [r4, #17]
   dd5dc:	b120      	cbz	r0, dd5e8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   dd5de:	7c20      	ldrb	r0, [r4, #16]
   dd5e0:	f7fc fd4c 	bl	da07c <HAL_USB_USART_Send_Data>
   dd5e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   dd5e8:	b002      	add	sp, #8
   dd5ea:	bd10      	pop	{r4, pc}

000dd5ec <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   dd5ec:	7c00      	ldrb	r0, [r0, #16]
   dd5ee:	f7fc bd4d 	b.w	da08c <HAL_USB_USART_Flush_Data>

000dd5f2 <_ZN9USBSerialD0Ev>:
   dd5f2:	b510      	push	{r4, lr}
   dd5f4:	2114      	movs	r1, #20
   dd5f6:	4604      	mov	r4, r0
   dd5f8:	f000 fa0c 	bl	dda14 <_ZdlPvj>
   dd5fc:	4620      	mov	r0, r4
   dd5fe:	bd10      	pop	{r4, pc}

000dd600 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   dd600:	b510      	push	{r4, lr}
   dd602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dd606:	4604      	mov	r4, r0
   dd608:	4608      	mov	r0, r1
   dd60a:	2100      	movs	r1, #0
   dd60c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   dd610:	4b04      	ldr	r3, [pc, #16]	; (dd624 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   dd612:	6023      	str	r3, [r4, #0]
  _blocking = true;
   dd614:	2301      	movs	r3, #1
  _serial = serial;
   dd616:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   dd618:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   dd61a:	4611      	mov	r1, r2
   dd61c:	f7fc fcfe 	bl	da01c <HAL_USB_USART_Init>
}
   dd620:	4620      	mov	r0, r4
   dd622:	bd10      	pop	{r4, pc}
   dd624:	000e1340 	.word	0x000e1340

000dd628 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   dd628:	7c00      	ldrb	r0, [r0, #16]
   dd62a:	2200      	movs	r2, #0
   dd62c:	f7fc bcfe 	b.w	da02c <HAL_USB_USART_Begin>

000dd630 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   dd630:	7c00      	ldrb	r0, [r0, #16]
   dd632:	f7fc bd03 	b.w	da03c <HAL_USB_USART_End>

000dd636 <_Z19acquireSerialBufferv>:
{
   dd636:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   dd638:	2214      	movs	r2, #20
{
   dd63a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   dd63c:	2100      	movs	r1, #0
   dd63e:	f002 fb4b 	bl	dfcd8 <memset>
}
   dd642:	4620      	mov	r0, r4
   dd644:	bd10      	pop	{r4, pc}
	...

000dd648 <_Z16_fetch_usbserialv>:
{
   dd648:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dd64a:	4c0f      	ldr	r4, [pc, #60]	; (dd688 <_Z16_fetch_usbserialv+0x40>)
{
   dd64c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   dd64e:	a803      	add	r0, sp, #12
   dd650:	f7ff fff1 	bl	dd636 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dd654:	7821      	ldrb	r1, [r4, #0]
   dd656:	f3bf 8f5b 	dmb	ish
   dd65a:	f011 0101 	ands.w	r1, r1, #1
   dd65e:	d10f      	bne.n	dd680 <_Z16_fetch_usbserialv+0x38>
   dd660:	4620      	mov	r0, r4
   dd662:	9101      	str	r1, [sp, #4]
   dd664:	f7f6 fd28 	bl	d40b8 <__cxa_guard_acquire>
   dd668:	9901      	ldr	r1, [sp, #4]
   dd66a:	b148      	cbz	r0, dd680 <_Z16_fetch_usbserialv+0x38>
   dd66c:	aa03      	add	r2, sp, #12
   dd66e:	4807      	ldr	r0, [pc, #28]	; (dd68c <_Z16_fetch_usbserialv+0x44>)
   dd670:	f7ff ffc6 	bl	dd600 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   dd674:	4620      	mov	r0, r4
   dd676:	f7f6 fd24 	bl	d40c2 <__cxa_guard_release>
   dd67a:	4805      	ldr	r0, [pc, #20]	; (dd690 <_Z16_fetch_usbserialv+0x48>)
   dd67c:	f002 fae8 	bl	dfc50 <atexit>
	return _usbserial;
}
   dd680:	4802      	ldr	r0, [pc, #8]	; (dd68c <_Z16_fetch_usbserialv+0x44>)
   dd682:	b008      	add	sp, #32
   dd684:	bd10      	pop	{r4, pc}
   dd686:	bf00      	nop
   dd688:	2003e700 	.word	0x2003e700
   dd68c:	2003e704 	.word	0x2003e704
   dd690:	000dd589 	.word	0x000dd589

000dd694 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   dd694:	4b01      	ldr	r3, [pc, #4]	; (dd69c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   dd696:	6018      	str	r0, [r3, #0]
    }, nullptr);
   dd698:	4770      	bx	lr
   dd69a:	bf00      	nop
   dd69c:	2003e12c 	.word	0x2003e12c

000dd6a0 <serialEventRun>:
{
   dd6a0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   dd6a2:	4b0b      	ldr	r3, [pc, #44]	; (dd6d0 <serialEventRun+0x30>)
   dd6a4:	b143      	cbz	r3, dd6b8 <serialEventRun+0x18>
   dd6a6:	f7ff ffcf 	bl	dd648 <_Z16_fetch_usbserialv>
   dd6aa:	6803      	ldr	r3, [r0, #0]
   dd6ac:	691b      	ldr	r3, [r3, #16]
   dd6ae:	4798      	blx	r3
   dd6b0:	2800      	cmp	r0, #0
   dd6b2:	dd01      	ble.n	dd6b8 <serialEventRun+0x18>
        serialEvent();
   dd6b4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   dd6b8:	4b06      	ldr	r3, [pc, #24]	; (dd6d4 <serialEventRun+0x34>)
   dd6ba:	b143      	cbz	r3, dd6ce <serialEventRun+0x2e>
   dd6bc:	f7ff ff3c 	bl	dd538 <_Z22__fetch_global_Serial1v>
   dd6c0:	6803      	ldr	r3, [r0, #0]
   dd6c2:	691b      	ldr	r3, [r3, #16]
   dd6c4:	4798      	blx	r3
   dd6c6:	2800      	cmp	r0, #0
   dd6c8:	dd01      	ble.n	dd6ce <serialEventRun+0x2e>
        serialEvent1();
   dd6ca:	f3af 8000 	nop.w
}
   dd6ce:	bd08      	pop	{r3, pc}
	...

000dd6d8 <_post_loop>:
{
   dd6d8:	b508      	push	{r3, lr}
	serialEventRun();
   dd6da:	f7ff ffe1 	bl	dd6a0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   dd6de:	f7fc fab5 	bl	d9c4c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   dd6e2:	4b01      	ldr	r3, [pc, #4]	; (dd6e8 <_post_loop+0x10>)
   dd6e4:	6018      	str	r0, [r3, #0]
}
   dd6e6:	bd08      	pop	{r3, pc}
   dd6e8:	2003e720 	.word	0x2003e720

000dd6ec <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   dd6ec:	4805      	ldr	r0, [pc, #20]	; (dd704 <_Z33system_initialize_user_backup_ramv+0x18>)
   dd6ee:	4a06      	ldr	r2, [pc, #24]	; (dd708 <_Z33system_initialize_user_backup_ramv+0x1c>)
   dd6f0:	4906      	ldr	r1, [pc, #24]	; (dd70c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   dd6f2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   dd6f4:	1a12      	subs	r2, r2, r0
   dd6f6:	f002 fac7 	bl	dfc88 <memcpy>
    __backup_sram_signature = signature;
   dd6fa:	4b05      	ldr	r3, [pc, #20]	; (dd710 <_Z33system_initialize_user_backup_ramv+0x24>)
   dd6fc:	4a05      	ldr	r2, [pc, #20]	; (dd714 <_Z33system_initialize_user_backup_ramv+0x28>)
   dd6fe:	601a      	str	r2, [r3, #0]
}
   dd700:	bd08      	pop	{r3, pc}
   dd702:	bf00      	nop
   dd704:	2003f400 	.word	0x2003f400
   dd708:	2003f404 	.word	0x2003f404
   dd70c:	000e1528 	.word	0x000e1528
   dd710:	2003f400 	.word	0x2003f400
   dd714:	9a271c1e 	.word	0x9a271c1e

000dd718 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   dd718:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dd71a:	2300      	movs	r3, #0
   dd71c:	9300      	str	r3, [sp, #0]
   dd71e:	461a      	mov	r2, r3
   dd720:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dd724:	f7fc fd76 	bl	da214 <system_ctrl_set_result>
}
   dd728:	b003      	add	sp, #12
   dd72a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dd730 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   dd730:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   dd732:	8843      	ldrh	r3, [r0, #2]
   dd734:	2b0a      	cmp	r3, #10
   dd736:	d008      	beq.n	dd74a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   dd738:	2b50      	cmp	r3, #80	; 0x50
   dd73a:	d10b      	bne.n	dd754 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   dd73c:	4b09      	ldr	r3, [pc, #36]	; (dd764 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   dd73e:	681b      	ldr	r3, [r3, #0]
   dd740:	b14b      	cbz	r3, dd756 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   dd742:	b003      	add	sp, #12
   dd744:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   dd748:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   dd74a:	f7ff ffe5 	bl	dd718 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   dd74e:	b003      	add	sp, #12
   dd750:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dd754:	2300      	movs	r3, #0
   dd756:	9300      	str	r3, [sp, #0]
   dd758:	461a      	mov	r2, r3
   dd75a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dd75e:	f7fc fd59 	bl	da214 <system_ctrl_set_result>
}
   dd762:	e7f4      	b.n	dd74e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   dd764:	2003e71c 	.word	0x2003e71c

000dd768 <module_user_init_hook>:
{
   dd768:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   dd76a:	4812      	ldr	r0, [pc, #72]	; (dd7b4 <module_user_init_hook+0x4c>)
   dd76c:	2100      	movs	r1, #0
   dd76e:	f7fc fe99 	bl	da4a4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   dd772:	4b11      	ldr	r3, [pc, #68]	; (dd7b8 <module_user_init_hook+0x50>)
   dd774:	681a      	ldr	r2, [r3, #0]
   dd776:	4b11      	ldr	r3, [pc, #68]	; (dd7bc <module_user_init_hook+0x54>)
   dd778:	429a      	cmp	r2, r3
   dd77a:	4b11      	ldr	r3, [pc, #68]	; (dd7c0 <module_user_init_hook+0x58>)
   dd77c:	bf0c      	ite	eq
   dd77e:	2201      	moveq	r2, #1
   dd780:	2200      	movne	r2, #0
   dd782:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   dd784:	d001      	beq.n	dd78a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   dd786:	f7ff ffb1 	bl	dd6ec <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   dd78a:	f7fc fa47 	bl	d9c1c <HAL_RNG_GetRandomNumber>
   dd78e:	4604      	mov	r4, r0
    srand(seed);
   dd790:	f002 faaa 	bl	dfce8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   dd794:	4b0b      	ldr	r3, [pc, #44]	; (dd7c4 <module_user_init_hook+0x5c>)
   dd796:	b113      	cbz	r3, dd79e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   dd798:	4620      	mov	r0, r4
   dd79a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   dd79e:	2100      	movs	r1, #0
   dd7a0:	4808      	ldr	r0, [pc, #32]	; (dd7c4 <module_user_init_hook+0x5c>)
   dd7a2:	f7fc fdbf 	bl	da324 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   dd7a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   dd7aa:	4807      	ldr	r0, [pc, #28]	; (dd7c8 <module_user_init_hook+0x60>)
   dd7ac:	2100      	movs	r1, #0
   dd7ae:	f7fc bd27 	b.w	da200 <system_ctrl_set_app_request_handler>
   dd7b2:	bf00      	nop
   dd7b4:	000dd695 	.word	0x000dd695
   dd7b8:	2003f400 	.word	0x2003f400
   dd7bc:	9a271c1e 	.word	0x9a271c1e
   dd7c0:	2003e718 	.word	0x2003e718
   dd7c4:	00000000 	.word	0x00000000
   dd7c8:	000dd731 	.word	0x000dd731

000dd7cc <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   dd7cc:	b508      	push	{r3, lr}
   dd7ce:	4b02      	ldr	r3, [pc, #8]	; (dd7d8 <spark_protocol_instance+0xc>)
   dd7d0:	681b      	ldr	r3, [r3, #0]
   dd7d2:	681b      	ldr	r3, [r3, #0]
   dd7d4:	9301      	str	r3, [sp, #4]
   dd7d6:	bd08      	pop	{r3, pc}
   dd7d8:	0003025c 	.word	0x0003025c

000dd7dc <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   dd7dc:	b508      	push	{r3, lr}
   dd7de:	4b02      	ldr	r3, [pc, #8]	; (dd7e8 <spark_protocol_set_product_id+0xc>)
   dd7e0:	681b      	ldr	r3, [r3, #0]
   dd7e2:	685b      	ldr	r3, [r3, #4]
   dd7e4:	9301      	str	r3, [sp, #4]
   dd7e6:	bd08      	pop	{r3, pc}
   dd7e8:	0003025c 	.word	0x0003025c

000dd7ec <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   dd7ec:	b508      	push	{r3, lr}
   dd7ee:	4b02      	ldr	r3, [pc, #8]	; (dd7f8 <spark_protocol_set_product_firmware_version+0xc>)
   dd7f0:	681b      	ldr	r3, [r3, #0]
   dd7f2:	689b      	ldr	r3, [r3, #8]
   dd7f4:	9301      	str	r3, [sp, #4]
   dd7f6:	bd08      	pop	{r3, pc}
   dd7f8:	0003025c 	.word	0x0003025c

000dd7fc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   dd7fc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   dd7fe:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   dd800:	d902      	bls.n	dd808 <pinAvailable+0xc>
    return false;
   dd802:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   dd804:	b002      	add	sp, #8
   dd806:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   dd808:	f1a0 030b 	sub.w	r3, r0, #11
   dd80c:	2b02      	cmp	r3, #2
   dd80e:	d81a      	bhi.n	dd846 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   dd810:	4c17      	ldr	r4, [pc, #92]	; (dd870 <pinAvailable+0x74>)
   dd812:	7821      	ldrb	r1, [r4, #0]
   dd814:	f3bf 8f5b 	dmb	ish
   dd818:	f011 0101 	ands.w	r1, r1, #1
   dd81c:	d10b      	bne.n	dd836 <pinAvailable+0x3a>
   dd81e:	4620      	mov	r0, r4
   dd820:	9101      	str	r1, [sp, #4]
   dd822:	f7f6 fc49 	bl	d40b8 <__cxa_guard_acquire>
   dd826:	9901      	ldr	r1, [sp, #4]
   dd828:	b128      	cbz	r0, dd836 <pinAvailable+0x3a>
   dd82a:	4812      	ldr	r0, [pc, #72]	; (dd874 <pinAvailable+0x78>)
   dd82c:	f7ff f900 	bl	dca30 <_ZN8SPIClassC1E19hal_spi_interface_t>
   dd830:	4620      	mov	r0, r4
   dd832:	f7f6 fc46 	bl	d40c2 <__cxa_guard_release>
   dd836:	4b0f      	ldr	r3, [pc, #60]	; (dd874 <pinAvailable+0x78>)
   dd838:	7818      	ldrb	r0, [r3, #0]
   dd83a:	f7fc fb1f 	bl	d9e7c <hal_spi_is_enabled>
   dd83e:	2800      	cmp	r0, #0
   dd840:	d1df      	bne.n	dd802 <pinAvailable+0x6>
  return true; // 'pin' is available
   dd842:	2001      	movs	r0, #1
   dd844:	e7de      	b.n	dd804 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   dd846:	2801      	cmp	r0, #1
   dd848:	d809      	bhi.n	dd85e <pinAvailable+0x62>
   dd84a:	f000 f89b 	bl	dd984 <_Z19__fetch_global_Wirev>
   dd84e:	2100      	movs	r1, #0
   dd850:	7c00      	ldrb	r0, [r0, #16]
   dd852:	f7fc faa3 	bl	d9d9c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   dd856:	f080 0001 	eor.w	r0, r0, #1
   dd85a:	b2c0      	uxtb	r0, r0
   dd85c:	e7d2      	b.n	dd804 <pinAvailable+0x8>
   dd85e:	3809      	subs	r0, #9
   dd860:	2801      	cmp	r0, #1
   dd862:	d8ee      	bhi.n	dd842 <pinAvailable+0x46>
   dd864:	f7ff fe68 	bl	dd538 <_Z22__fetch_global_Serial1v>
   dd868:	7c00      	ldrb	r0, [r0, #16]
   dd86a:	f7fc fbbf 	bl	d9fec <hal_usart_is_enabled>
   dd86e:	e7f2      	b.n	dd856 <pinAvailable+0x5a>
   dd870:	2003e44c 	.word	0x2003e44c
   dd874:	2003e450 	.word	0x2003e450

000dd878 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dd878:	2823      	cmp	r0, #35	; 0x23
{
   dd87a:	b538      	push	{r3, r4, r5, lr}
   dd87c:	4604      	mov	r4, r0
   dd87e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dd880:	d80a      	bhi.n	dd898 <pinMode+0x20>
   dd882:	29ff      	cmp	r1, #255	; 0xff
   dd884:	d008      	beq.n	dd898 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   dd886:	f7ff ffb9 	bl	dd7fc <pinAvailable>
   dd88a:	b128      	cbz	r0, dd898 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   dd88c:	4629      	mov	r1, r5
   dd88e:	4620      	mov	r0, r4
}
   dd890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   dd894:	f7fc ba0a 	b.w	d9cac <HAL_Pin_Mode>
}
   dd898:	bd38      	pop	{r3, r4, r5, pc}

000dd89a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   dd89a:	b538      	push	{r3, r4, r5, lr}
   dd89c:	4604      	mov	r4, r0
   dd89e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dd8a0:	f7fc fa0c 	bl	d9cbc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   dd8a4:	28ff      	cmp	r0, #255	; 0xff
   dd8a6:	d010      	beq.n	dd8ca <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   dd8a8:	2806      	cmp	r0, #6
   dd8aa:	d804      	bhi.n	dd8b6 <digitalWrite+0x1c>
   dd8ac:	234d      	movs	r3, #77	; 0x4d
   dd8ae:	fa23 f000 	lsr.w	r0, r3, r0
   dd8b2:	07c3      	lsls	r3, r0, #31
   dd8b4:	d409      	bmi.n	dd8ca <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   dd8b6:	4620      	mov	r0, r4
   dd8b8:	f7ff ffa0 	bl	dd7fc <pinAvailable>
   dd8bc:	b128      	cbz	r0, dd8ca <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   dd8be:	4629      	mov	r1, r5
   dd8c0:	4620      	mov	r0, r4
}
   dd8c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   dd8c6:	f7fc ba01 	b.w	d9ccc <HAL_GPIO_Write>
}
   dd8ca:	bd38      	pop	{r3, r4, r5, pc}

000dd8cc <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   dd8cc:	b510      	push	{r4, lr}
   dd8ce:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dd8d0:	f7fc f9f4 	bl	d9cbc <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   dd8d4:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   dd8d6:	b2db      	uxtb	r3, r3
   dd8d8:	2b01      	cmp	r3, #1
   dd8da:	d908      	bls.n	dd8ee <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   dd8dc:	4620      	mov	r0, r4
   dd8de:	f7ff ff8d 	bl	dd7fc <pinAvailable>
   dd8e2:	b120      	cbz	r0, dd8ee <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   dd8e4:	4620      	mov	r0, r4
}
   dd8e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   dd8ea:	f7fc b9f7 	b.w	d9cdc <HAL_GPIO_Read>
}
   dd8ee:	2000      	movs	r0, #0
   dd8f0:	bd10      	pop	{r4, pc}

000dd8f2 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   dd8f2:	280d      	cmp	r0, #13
{
   dd8f4:	b510      	push	{r4, lr}
   dd8f6:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   dd8f8:	bf9c      	itt	ls
   dd8fa:	340e      	addls	r4, #14
   dd8fc:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   dd8fe:	4620      	mov	r0, r4
   dd900:	f7ff ff7c 	bl	dd7fc <pinAvailable>
   dd904:	b150      	cbz	r0, dd91c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   dd906:	2103      	movs	r1, #3
   dd908:	4620      	mov	r0, r4
   dd90a:	f7fc f9c7 	bl	d9c9c <HAL_Validate_Pin_Function>
   dd90e:	2803      	cmp	r0, #3
   dd910:	d104      	bne.n	dd91c <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   dd912:	4620      	mov	r0, r4
}
   dd914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   dd918:	f7fc b9f8 	b.w	d9d0c <hal_adc_read>
}
   dd91c:	2000      	movs	r0, #0
   dd91e:	bd10      	pop	{r4, pc}

000dd920 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dd920:	4770      	bx	lr

000dd922 <__tcf_1>:
   dd922:	4770      	bx	lr

000dd924 <_Z17acquireWireBufferv>:
{
   dd924:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   dd926:	2300      	movs	r3, #0
   dd928:	2520      	movs	r5, #32
   dd92a:	8043      	strh	r3, [r0, #2]
   dd92c:	2314      	movs	r3, #20
{
   dd92e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   dd930:	8003      	strh	r3, [r0, #0]
   dd932:	6085      	str	r5, [r0, #8]
   dd934:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dd936:	4906      	ldr	r1, [pc, #24]	; (dd950 <_Z17acquireWireBufferv+0x2c>)
   dd938:	4628      	mov	r0, r5
   dd93a:	f000 f86f 	bl	dda1c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dd93e:	4904      	ldr	r1, [pc, #16]	; (dd950 <_Z17acquireWireBufferv+0x2c>)
	};
   dd940:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dd942:	4628      	mov	r0, r5
   dd944:	f000 f86a 	bl	dda1c <_ZnajRKSt9nothrow_t>
	};
   dd948:	60e0      	str	r0, [r4, #12]
}
   dd94a:	4620      	mov	r0, r4
   dd94c:	bd38      	pop	{r3, r4, r5, pc}
   dd94e:	bf00      	nop
   dd950:	000e1368 	.word	0x000e1368

000dd954 <_Z18acquireWire1Bufferv>:
   dd954:	b538      	push	{r3, r4, r5, lr}
   dd956:	2300      	movs	r3, #0
   dd958:	2520      	movs	r5, #32
   dd95a:	8043      	strh	r3, [r0, #2]
   dd95c:	2314      	movs	r3, #20
   dd95e:	4604      	mov	r4, r0
   dd960:	8003      	strh	r3, [r0, #0]
   dd962:	6085      	str	r5, [r0, #8]
   dd964:	6105      	str	r5, [r0, #16]
   dd966:	4906      	ldr	r1, [pc, #24]	; (dd980 <_Z18acquireWire1Bufferv+0x2c>)
   dd968:	4628      	mov	r0, r5
   dd96a:	f000 f857 	bl	dda1c <_ZnajRKSt9nothrow_t>
   dd96e:	4904      	ldr	r1, [pc, #16]	; (dd980 <_Z18acquireWire1Bufferv+0x2c>)
   dd970:	6060      	str	r0, [r4, #4]
   dd972:	4628      	mov	r0, r5
   dd974:	f000 f852 	bl	dda1c <_ZnajRKSt9nothrow_t>
   dd978:	60e0      	str	r0, [r4, #12]
   dd97a:	4620      	mov	r0, r4
   dd97c:	bd38      	pop	{r3, r4, r5, pc}
   dd97e:	bf00      	nop
   dd980:	000e1368 	.word	0x000e1368

000dd984 <_Z19__fetch_global_Wirev>:
{
   dd984:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dd986:	4d0e      	ldr	r5, [pc, #56]	; (dd9c0 <_Z19__fetch_global_Wirev+0x3c>)
   dd988:	7829      	ldrb	r1, [r5, #0]
   dd98a:	f3bf 8f5b 	dmb	ish
   dd98e:	f011 0401 	ands.w	r4, r1, #1
{
   dd992:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dd994:	d111      	bne.n	dd9ba <_Z19__fetch_global_Wirev+0x36>
   dd996:	4628      	mov	r0, r5
   dd998:	f7f6 fb8e 	bl	d40b8 <__cxa_guard_acquire>
   dd99c:	b168      	cbz	r0, dd9ba <_Z19__fetch_global_Wirev+0x36>
   dd99e:	a801      	add	r0, sp, #4
   dd9a0:	f7ff ffc0 	bl	dd924 <_Z17acquireWireBufferv>
   dd9a4:	aa01      	add	r2, sp, #4
   dd9a6:	4621      	mov	r1, r4
   dd9a8:	4806      	ldr	r0, [pc, #24]	; (dd9c4 <_Z19__fetch_global_Wirev+0x40>)
   dd9aa:	f7fd fb4f 	bl	db04c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   dd9ae:	4628      	mov	r0, r5
   dd9b0:	f7f6 fb87 	bl	d40c2 <__cxa_guard_release>
   dd9b4:	4804      	ldr	r0, [pc, #16]	; (dd9c8 <_Z19__fetch_global_Wirev+0x44>)
   dd9b6:	f002 f94b 	bl	dfc50 <atexit>
	return wire;
}
   dd9ba:	4802      	ldr	r0, [pc, #8]	; (dd9c4 <_Z19__fetch_global_Wirev+0x40>)
   dd9bc:	b007      	add	sp, #28
   dd9be:	bd30      	pop	{r4, r5, pc}
   dd9c0:	2003e724 	.word	0x2003e724
   dd9c4:	2003e72c 	.word	0x2003e72c
   dd9c8:	000dd921 	.word	0x000dd921

000dd9cc <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   dd9cc:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   dd9ce:	4c0e      	ldr	r4, [pc, #56]	; (dda08 <_Z20__fetch_global_Wire1v+0x3c>)
   dd9d0:	7823      	ldrb	r3, [r4, #0]
   dd9d2:	f3bf 8f5b 	dmb	ish
   dd9d6:	07db      	lsls	r3, r3, #31
{
   dd9d8:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   dd9da:	d411      	bmi.n	dda00 <_Z20__fetch_global_Wire1v+0x34>
   dd9dc:	4620      	mov	r0, r4
   dd9de:	f7f6 fb6b 	bl	d40b8 <__cxa_guard_acquire>
   dd9e2:	b168      	cbz	r0, dda00 <_Z20__fetch_global_Wire1v+0x34>
   dd9e4:	a801      	add	r0, sp, #4
   dd9e6:	f7ff ffb5 	bl	dd954 <_Z18acquireWire1Bufferv>
   dd9ea:	aa01      	add	r2, sp, #4
   dd9ec:	2101      	movs	r1, #1
   dd9ee:	4807      	ldr	r0, [pc, #28]	; (dda0c <_Z20__fetch_global_Wire1v+0x40>)
   dd9f0:	f7fd fb2c 	bl	db04c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   dd9f4:	4620      	mov	r0, r4
   dd9f6:	f7f6 fb64 	bl	d40c2 <__cxa_guard_release>
   dd9fa:	4805      	ldr	r0, [pc, #20]	; (dda10 <_Z20__fetch_global_Wire1v+0x44>)
   dd9fc:	f002 f928 	bl	dfc50 <atexit>
	return wire;
}
   dda00:	4802      	ldr	r0, [pc, #8]	; (dda0c <_Z20__fetch_global_Wire1v+0x40>)
   dda02:	b006      	add	sp, #24
   dda04:	bd10      	pop	{r4, pc}
   dda06:	bf00      	nop
   dda08:	2003e728 	.word	0x2003e728
   dda0c:	2003e740 	.word	0x2003e740
   dda10:	000dd923 	.word	0x000dd923

000dda14 <_ZdlPvj>:
   dda14:	f7f6 bb43 	b.w	d409e <_ZdlPv>

000dda18 <_ZnwjRKSt9nothrow_t>:
   dda18:	f7f6 bb3d 	b.w	d4096 <_Znwj>

000dda1c <_ZnajRKSt9nothrow_t>:
   dda1c:	f7f6 bb3d 	b.w	d409a <_Znaj>

000dda20 <_ZSt17__throw_bad_allocv>:
   dda20:	b508      	push	{r3, lr}
   dda22:	f7fc fd27 	bl	da474 <abort>

000dda26 <_ZSt20__throw_length_errorPKc>:
   dda26:	b508      	push	{r3, lr}
   dda28:	f7fc fd24 	bl	da474 <abort>

000dda2c <_ZSt25__throw_bad_function_callv>:
   dda2c:	b508      	push	{r3, lr}
   dda2e:	f7fc fd21 	bl	da474 <abort>
   dda32:	0000      	movs	r0, r0
   dda34:	0000      	movs	r0, r0
	...

000dda38 <pow>:
   dda38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dda3c:	ed2d 8b02 	vpush	{d8}
   dda40:	b08d      	sub	sp, #52	; 0x34
   dda42:	ec57 6b10 	vmov	r6, r7, d0
   dda46:	ec55 4b11 	vmov	r4, r5, d1
   dda4a:	f000 fa05 	bl	dde58 <__ieee754_pow>
   dda4e:	4bae      	ldr	r3, [pc, #696]	; (ddd08 <pow+0x2d0>)
   dda50:	eeb0 8a40 	vmov.f32	s16, s0
   dda54:	eef0 8a60 	vmov.f32	s17, s1
   dda58:	f993 9000 	ldrsb.w	r9, [r3]
   dda5c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   dda60:	d037      	beq.n	ddad2 <pow+0x9a>
   dda62:	4622      	mov	r2, r4
   dda64:	462b      	mov	r3, r5
   dda66:	4620      	mov	r0, r4
   dda68:	4629      	mov	r1, r5
   dda6a:	f001 fe35 	bl	df6d8 <__aeabi_dcmpun>
   dda6e:	4683      	mov	fp, r0
   dda70:	bb78      	cbnz	r0, ddad2 <pow+0x9a>
   dda72:	4632      	mov	r2, r6
   dda74:	463b      	mov	r3, r7
   dda76:	4630      	mov	r0, r6
   dda78:	4639      	mov	r1, r7
   dda7a:	f001 fe2d 	bl	df6d8 <__aeabi_dcmpun>
   dda7e:	4680      	mov	r8, r0
   dda80:	2800      	cmp	r0, #0
   dda82:	f040 8093 	bne.w	ddbac <pow+0x174>
   dda86:	f04f 0a00 	mov.w	sl, #0
   dda8a:	f04f 0b00 	mov.w	fp, #0
   dda8e:	4630      	mov	r0, r6
   dda90:	4639      	mov	r1, r7
   dda92:	4652      	mov	r2, sl
   dda94:	465b      	mov	r3, fp
   dda96:	f001 fded 	bl	df674 <__aeabi_dcmpeq>
   dda9a:	b318      	cbz	r0, ddae4 <pow+0xac>
   dda9c:	4652      	mov	r2, sl
   dda9e:	465b      	mov	r3, fp
   ddaa0:	4620      	mov	r0, r4
   ddaa2:	4629      	mov	r1, r5
   ddaa4:	f001 fde6 	bl	df674 <__aeabi_dcmpeq>
   ddaa8:	9000      	str	r0, [sp, #0]
   ddaaa:	2800      	cmp	r0, #0
   ddaac:	d057      	beq.n	ddb5e <pow+0x126>
   ddaae:	4b97      	ldr	r3, [pc, #604]	; (ddd0c <pow+0x2d4>)
   ddab0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   ddab4:	2201      	movs	r2, #1
   ddab6:	e9cd 6704 	strd	r6, r7, [sp, #16]
   ddaba:	e9cd 4506 	strd	r4, r5, [sp, #24]
   ddabe:	e9cd ab08 	strd	sl, fp, [sp, #32]
   ddac2:	9202      	str	r2, [sp, #8]
   ddac4:	9303      	str	r3, [sp, #12]
   ddac6:	f1b9 0f00 	cmp.w	r9, #0
   ddaca:	f000 8089 	beq.w	ddbe0 <pow+0x1a8>
   ddace:	ed9f 8b8a 	vldr	d8, [pc, #552]	; ddcf8 <pow+0x2c0>
   ddad2:	eeb0 0a48 	vmov.f32	s0, s16
   ddad6:	eef0 0a68 	vmov.f32	s1, s17
   ddada:	b00d      	add	sp, #52	; 0x34
   ddadc:	ecbd 8b02 	vpop	{d8}
   ddae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ddae4:	eeb0 0a48 	vmov.f32	s0, s16
   ddae8:	eef0 0a68 	vmov.f32	s1, s17
   ddaec:	f001 f860 	bl	debb0 <finite>
   ddaf0:	4680      	mov	r8, r0
   ddaf2:	2800      	cmp	r0, #0
   ddaf4:	f000 8082 	beq.w	ddbfc <pow+0x1c4>
   ddaf8:	f04f 0800 	mov.w	r8, #0
   ddafc:	f04f 0900 	mov.w	r9, #0
   ddb00:	ec51 0b18 	vmov	r0, r1, d8
   ddb04:	4642      	mov	r2, r8
   ddb06:	464b      	mov	r3, r9
   ddb08:	f001 fdb4 	bl	df674 <__aeabi_dcmpeq>
   ddb0c:	2800      	cmp	r0, #0
   ddb0e:	d0e0      	beq.n	ddad2 <pow+0x9a>
   ddb10:	ec47 6b10 	vmov	d0, r6, r7
   ddb14:	f001 f84c 	bl	debb0 <finite>
   ddb18:	2800      	cmp	r0, #0
   ddb1a:	d0da      	beq.n	ddad2 <pow+0x9a>
   ddb1c:	ec45 4b10 	vmov	d0, r4, r5
   ddb20:	f001 f846 	bl	debb0 <finite>
   ddb24:	2800      	cmp	r0, #0
   ddb26:	d0d4      	beq.n	ddad2 <pow+0x9a>
   ddb28:	4b77      	ldr	r3, [pc, #476]	; (ddd08 <pow+0x2d0>)
   ddb2a:	4a78      	ldr	r2, [pc, #480]	; (ddd0c <pow+0x2d4>)
   ddb2c:	f993 3000 	ldrsb.w	r3, [r3]
   ddb30:	9203      	str	r2, [sp, #12]
   ddb32:	2104      	movs	r1, #4
   ddb34:	2200      	movs	r2, #0
   ddb36:	2b02      	cmp	r3, #2
   ddb38:	e9cd 6704 	strd	r6, r7, [sp, #16]
   ddb3c:	e9cd 4506 	strd	r4, r5, [sp, #24]
   ddb40:	e9cd 8908 	strd	r8, r9, [sp, #32]
   ddb44:	9102      	str	r1, [sp, #8]
   ddb46:	920a      	str	r2, [sp, #40]	; 0x28
   ddb48:	d004      	beq.n	ddb54 <pow+0x11c>
   ddb4a:	a802      	add	r0, sp, #8
   ddb4c:	f001 f83c 	bl	debc8 <matherr>
   ddb50:	2800      	cmp	r0, #0
   ddb52:	d14a      	bne.n	ddbea <pow+0x1b2>
   ddb54:	f7fc fc9e 	bl	da494 <__errno>
   ddb58:	2322      	movs	r3, #34	; 0x22
   ddb5a:	6003      	str	r3, [r0, #0]
   ddb5c:	e045      	b.n	ddbea <pow+0x1b2>
   ddb5e:	ec45 4b10 	vmov	d0, r4, r5
   ddb62:	f001 f825 	bl	debb0 <finite>
   ddb66:	2800      	cmp	r0, #0
   ddb68:	d0b3      	beq.n	ddad2 <pow+0x9a>
   ddb6a:	4652      	mov	r2, sl
   ddb6c:	465b      	mov	r3, fp
   ddb6e:	4620      	mov	r0, r4
   ddb70:	4629      	mov	r1, r5
   ddb72:	f001 fd89 	bl	df688 <__aeabi_dcmplt>
   ddb76:	2800      	cmp	r0, #0
   ddb78:	d0ab      	beq.n	ddad2 <pow+0x9a>
   ddb7a:	4b63      	ldr	r3, [pc, #396]	; (ddd08 <pow+0x2d0>)
   ddb7c:	9900      	ldr	r1, [sp, #0]
   ddb7e:	4a63      	ldr	r2, [pc, #396]	; (ddd0c <pow+0x2d4>)
   ddb80:	f993 3000 	ldrsb.w	r3, [r3]
   ddb84:	910a      	str	r1, [sp, #40]	; 0x28
   ddb86:	2101      	movs	r1, #1
   ddb88:	e9cd 6704 	strd	r6, r7, [sp, #16]
   ddb8c:	e9cd 4506 	strd	r4, r5, [sp, #24]
   ddb90:	e9cd 1202 	strd	r1, r2, [sp, #8]
   ddb94:	2b00      	cmp	r3, #0
   ddb96:	d16f      	bne.n	ddc78 <pow+0x240>
   ddb98:	e9cd ab08 	strd	sl, fp, [sp, #32]
   ddb9c:	a802      	add	r0, sp, #8
   ddb9e:	f001 f813 	bl	debc8 <matherr>
   ddba2:	2800      	cmp	r0, #0
   ddba4:	d06e      	beq.n	ddc84 <pow+0x24c>
   ddba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ddba8:	b32b      	cbz	r3, ddbf6 <pow+0x1be>
   ddbaa:	e020      	b.n	ddbee <pow+0x1b6>
   ddbac:	2200      	movs	r2, #0
   ddbae:	2300      	movs	r3, #0
   ddbb0:	4620      	mov	r0, r4
   ddbb2:	4629      	mov	r1, r5
   ddbb4:	f001 fd5e 	bl	df674 <__aeabi_dcmpeq>
   ddbb8:	2800      	cmp	r0, #0
   ddbba:	d08a      	beq.n	ddad2 <pow+0x9a>
   ddbbc:	ed9f 8b4e 	vldr	d8, [pc, #312]	; ddcf8 <pow+0x2c0>
   ddbc0:	4b52      	ldr	r3, [pc, #328]	; (ddd0c <pow+0x2d4>)
   ddbc2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   ddbc6:	2201      	movs	r2, #1
   ddbc8:	f1b9 0f02 	cmp.w	r9, #2
   ddbcc:	e9cd 6704 	strd	r6, r7, [sp, #16]
   ddbd0:	e9cd 4506 	strd	r4, r5, [sp, #24]
   ddbd4:	ed8d 8b08 	vstr	d8, [sp, #32]
   ddbd8:	9202      	str	r2, [sp, #8]
   ddbda:	9303      	str	r3, [sp, #12]
   ddbdc:	f43f af79 	beq.w	ddad2 <pow+0x9a>
   ddbe0:	a802      	add	r0, sp, #8
   ddbe2:	f000 fff1 	bl	debc8 <matherr>
   ddbe6:	2800      	cmp	r0, #0
   ddbe8:	d051      	beq.n	ddc8e <pow+0x256>
   ddbea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ddbec:	b11b      	cbz	r3, ddbf6 <pow+0x1be>
   ddbee:	f7fc fc51 	bl	da494 <__errno>
   ddbf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ddbf4:	6003      	str	r3, [r0, #0]
   ddbf6:	ed9d 8b08 	vldr	d8, [sp, #32]
   ddbfa:	e76a      	b.n	ddad2 <pow+0x9a>
   ddbfc:	ec47 6b10 	vmov	d0, r6, r7
   ddc00:	f000 ffd6 	bl	debb0 <finite>
   ddc04:	2800      	cmp	r0, #0
   ddc06:	f43f af77 	beq.w	ddaf8 <pow+0xc0>
   ddc0a:	ec45 4b10 	vmov	d0, r4, r5
   ddc0e:	f000 ffcf 	bl	debb0 <finite>
   ddc12:	2800      	cmp	r0, #0
   ddc14:	f43f af70 	beq.w	ddaf8 <pow+0xc0>
   ddc18:	ec53 2b18 	vmov	r2, r3, d8
   ddc1c:	ee18 0a10 	vmov	r0, s16
   ddc20:	4619      	mov	r1, r3
   ddc22:	f001 fd59 	bl	df6d8 <__aeabi_dcmpun>
   ddc26:	4b38      	ldr	r3, [pc, #224]	; (ddd08 <pow+0x2d0>)
   ddc28:	2800      	cmp	r0, #0
   ddc2a:	f040 8096 	bne.w	ddd5a <pow+0x322>
   ddc2e:	f993 8000 	ldrsb.w	r8, [r3]
   ddc32:	900a      	str	r0, [sp, #40]	; 0x28
   ddc34:	2303      	movs	r3, #3
   ddc36:	9302      	str	r3, [sp, #8]
   ddc38:	4b34      	ldr	r3, [pc, #208]	; (ddd0c <pow+0x2d4>)
   ddc3a:	9303      	str	r3, [sp, #12]
   ddc3c:	e9cd 6704 	strd	r6, r7, [sp, #16]
   ddc40:	e9cd 4506 	strd	r4, r5, [sp, #24]
   ddc44:	f1b8 0f00 	cmp.w	r8, #0
   ddc48:	d126      	bne.n	ddc98 <pow+0x260>
   ddc4a:	f8df 90d0 	ldr.w	r9, [pc, #208]	; ddd1c <pow+0x2e4>
   ddc4e:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   ddc52:	4652      	mov	r2, sl
   ddc54:	465b      	mov	r3, fp
   ddc56:	4630      	mov	r0, r6
   ddc58:	4639      	mov	r1, r7
   ddc5a:	e9cd 8908 	strd	r8, r9, [sp, #32]
   ddc5e:	f001 fd13 	bl	df688 <__aeabi_dcmplt>
   ddc62:	bb48      	cbnz	r0, ddcb8 <pow+0x280>
   ddc64:	a802      	add	r0, sp, #8
   ddc66:	f000 ffaf 	bl	debc8 <matherr>
   ddc6a:	2800      	cmp	r0, #0
   ddc6c:	d19b      	bne.n	ddba6 <pow+0x16e>
   ddc6e:	f7fc fc11 	bl	da494 <__errno>
   ddc72:	2322      	movs	r3, #34	; 0x22
   ddc74:	6003      	str	r3, [r0, #0]
   ddc76:	e796      	b.n	ddba6 <pow+0x16e>
   ddc78:	4925      	ldr	r1, [pc, #148]	; (ddd10 <pow+0x2d8>)
   ddc7a:	2000      	movs	r0, #0
   ddc7c:	2b02      	cmp	r3, #2
   ddc7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   ddc82:	d18b      	bne.n	ddb9c <pow+0x164>
   ddc84:	f7fc fc06 	bl	da494 <__errno>
   ddc88:	2321      	movs	r3, #33	; 0x21
   ddc8a:	6003      	str	r3, [r0, #0]
   ddc8c:	e78b      	b.n	ddba6 <pow+0x16e>
   ddc8e:	f7fc fc01 	bl	da494 <__errno>
   ddc92:	2321      	movs	r3, #33	; 0x21
   ddc94:	6003      	str	r3, [r0, #0]
   ddc96:	e7a8      	b.n	ddbea <pow+0x1b2>
   ddc98:	ed9f 7b19 	vldr	d7, [pc, #100]	; ddd00 <pow+0x2c8>
   ddc9c:	4652      	mov	r2, sl
   ddc9e:	465b      	mov	r3, fp
   ddca0:	4630      	mov	r0, r6
   ddca2:	4639      	mov	r1, r7
   ddca4:	ed8d 7b08 	vstr	d7, [sp, #32]
   ddca8:	f001 fcee 	bl	df688 <__aeabi_dcmplt>
   ddcac:	2800      	cmp	r0, #0
   ddcae:	d137      	bne.n	ddd20 <pow+0x2e8>
   ddcb0:	f1b8 0f02 	cmp.w	r8, #2
   ddcb4:	d0db      	beq.n	ddc6e <pow+0x236>
   ddcb6:	e7d5      	b.n	ddc64 <pow+0x22c>
   ddcb8:	4b16      	ldr	r3, [pc, #88]	; (ddd14 <pow+0x2dc>)
   ddcba:	2200      	movs	r2, #0
   ddcbc:	4620      	mov	r0, r4
   ddcbe:	4629      	mov	r1, r5
   ddcc0:	f001 fa70 	bl	df1a4 <__aeabi_dmul>
   ddcc4:	4602      	mov	r2, r0
   ddcc6:	460b      	mov	r3, r1
   ddcc8:	ec43 2b10 	vmov	d0, r2, r3
   ddccc:	e9cd 2300 	strd	r2, r3, [sp]
   ddcd0:	f000 ff86 	bl	debe0 <rint>
   ddcd4:	e9dd 2300 	ldrd	r2, r3, [sp]
   ddcd8:	ec51 0b10 	vmov	r0, r1, d0
   ddcdc:	f001 fcca 	bl	df674 <__aeabi_dcmpeq>
   ddce0:	2800      	cmp	r0, #0
   ddce2:	d136      	bne.n	ddd52 <pow+0x31a>
   ddce4:	4b0c      	ldr	r3, [pc, #48]	; (ddd18 <pow+0x2e0>)
   ddce6:	4908      	ldr	r1, [pc, #32]	; (ddd08 <pow+0x2d0>)
   ddce8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   ddcec:	e9cd 2308 	strd	r2, r3, [sp, #32]
   ddcf0:	f991 8000 	ldrsb.w	r8, [r1]
   ddcf4:	e7dc      	b.n	ddcb0 <pow+0x278>
   ddcf6:	bf00      	nop
   ddcf8:	00000000 	.word	0x00000000
   ddcfc:	3ff00000 	.word	0x3ff00000
   ddd00:	00000000 	.word	0x00000000
   ddd04:	7ff00000 	.word	0x7ff00000
   ddd08:	2003e128 	.word	0x2003e128
   ddd0c:	000e136c 	.word	0x000e136c
   ddd10:	fff00000 	.word	0xfff00000
   ddd14:	3fe00000 	.word	0x3fe00000
   ddd18:	c7efffff 	.word	0xc7efffff
   ddd1c:	47efffff 	.word	0x47efffff
   ddd20:	4b1c      	ldr	r3, [pc, #112]	; (ddd94 <pow+0x35c>)
   ddd22:	2200      	movs	r2, #0
   ddd24:	4620      	mov	r0, r4
   ddd26:	4629      	mov	r1, r5
   ddd28:	f001 fa3c 	bl	df1a4 <__aeabi_dmul>
   ddd2c:	4602      	mov	r2, r0
   ddd2e:	460b      	mov	r3, r1
   ddd30:	ec43 2b10 	vmov	d0, r2, r3
   ddd34:	e9cd 2300 	strd	r2, r3, [sp]
   ddd38:	f000 ff52 	bl	debe0 <rint>
   ddd3c:	e9dd 2300 	ldrd	r2, r3, [sp]
   ddd40:	ec51 0b10 	vmov	r0, r1, d0
   ddd44:	f001 fc96 	bl	df674 <__aeabi_dcmpeq>
   ddd48:	b918      	cbnz	r0, ddd52 <pow+0x31a>
   ddd4a:	4b13      	ldr	r3, [pc, #76]	; (ddd98 <pow+0x360>)
   ddd4c:	2200      	movs	r2, #0
   ddd4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   ddd52:	4b12      	ldr	r3, [pc, #72]	; (ddd9c <pow+0x364>)
   ddd54:	f993 8000 	ldrsb.w	r8, [r3]
   ddd58:	e7aa      	b.n	ddcb0 <pow+0x278>
   ddd5a:	f993 9000 	ldrsb.w	r9, [r3]
   ddd5e:	4b10      	ldr	r3, [pc, #64]	; (ddda0 <pow+0x368>)
   ddd60:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   ddd64:	2201      	movs	r2, #1
   ddd66:	e9cd 6704 	strd	r6, r7, [sp, #16]
   ddd6a:	e9cd 4506 	strd	r4, r5, [sp, #24]
   ddd6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   ddd72:	f1b9 0f00 	cmp.w	r9, #0
   ddd76:	f43f af0f 	beq.w	ddb98 <pow+0x160>
   ddd7a:	4652      	mov	r2, sl
   ddd7c:	465b      	mov	r3, fp
   ddd7e:	4650      	mov	r0, sl
   ddd80:	4659      	mov	r1, fp
   ddd82:	f001 fb39 	bl	df3f8 <__aeabi_ddiv>
   ddd86:	f1b9 0f02 	cmp.w	r9, #2
   ddd8a:	e9cd 0108 	strd	r0, r1, [sp, #32]
   ddd8e:	f43f af79 	beq.w	ddc84 <pow+0x24c>
   ddd92:	e703      	b.n	ddb9c <pow+0x164>
   ddd94:	3fe00000 	.word	0x3fe00000
   ddd98:	fff00000 	.word	0xfff00000
   ddd9c:	2003e128 	.word	0x2003e128
   ddda0:	000e136c 	.word	0x000e136c

000ddda4 <sqrtf>:
   ddda4:	b510      	push	{r4, lr}
   ddda6:	ed2d 8b02 	vpush	{d8}
   dddaa:	b08a      	sub	sp, #40	; 0x28
   dddac:	eeb0 8a40 	vmov.f32	s16, s0
   dddb0:	f000 fef0 	bl	deb94 <__ieee754_sqrtf>
   dddb4:	4b25      	ldr	r3, [pc, #148]	; (dde4c <sqrtf+0xa8>)
   dddb6:	f993 4000 	ldrsb.w	r4, [r3]
   dddba:	1c63      	adds	r3, r4, #1
   dddbc:	d009      	beq.n	dddd2 <sqrtf+0x2e>
   dddbe:	eeb4 8a48 	vcmp.f32	s16, s16
   dddc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dddc6:	d604      	bvs.n	dddd2 <sqrtf+0x2e>
   dddc8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   dddcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dddd0:	d403      	bmi.n	dddda <sqrtf+0x36>
   dddd2:	b00a      	add	sp, #40	; 0x28
   dddd4:	ecbd 8b02 	vpop	{d8}
   dddd8:	bd10      	pop	{r4, pc}
   dddda:	2301      	movs	r3, #1
   ddddc:	4a1c      	ldr	r2, [pc, #112]	; (dde50 <sqrtf+0xac>)
   dddde:	9300      	str	r3, [sp, #0]
   ddde0:	ee18 0a10 	vmov	r0, s16
   ddde4:	2300      	movs	r3, #0
   ddde6:	9201      	str	r2, [sp, #4]
   ddde8:	9308      	str	r3, [sp, #32]
   dddea:	f001 f983 	bl	df0f4 <__aeabi_f2d>
   dddee:	2200      	movs	r2, #0
   dddf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
   dddf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   dddf8:	2300      	movs	r3, #0
   dddfa:	b1bc      	cbz	r4, dde2c <sqrtf+0x88>
   dddfc:	4610      	mov	r0, r2
   dddfe:	4619      	mov	r1, r3
   dde00:	f001 fafa 	bl	df3f8 <__aeabi_ddiv>
   dde04:	2c02      	cmp	r4, #2
   dde06:	e9cd 0106 	strd	r0, r1, [sp, #24]
   dde0a:	d111      	bne.n	dde30 <sqrtf+0x8c>
   dde0c:	f7fc fb42 	bl	da494 <__errno>
   dde10:	2321      	movs	r3, #33	; 0x21
   dde12:	6003      	str	r3, [r0, #0]
   dde14:	9b08      	ldr	r3, [sp, #32]
   dde16:	b99b      	cbnz	r3, dde40 <sqrtf+0x9c>
   dde18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   dde1c:	f001 fcba 	bl	df794 <__aeabi_d2f>
   dde20:	ee00 0a10 	vmov	s0, r0
   dde24:	b00a      	add	sp, #40	; 0x28
   dde26:	ecbd 8b02 	vpop	{d8}
   dde2a:	bd10      	pop	{r4, pc}
   dde2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   dde30:	4668      	mov	r0, sp
   dde32:	f000 fec9 	bl	debc8 <matherr>
   dde36:	2800      	cmp	r0, #0
   dde38:	d0e8      	beq.n	dde0c <sqrtf+0x68>
   dde3a:	9b08      	ldr	r3, [sp, #32]
   dde3c:	2b00      	cmp	r3, #0
   dde3e:	d0eb      	beq.n	dde18 <sqrtf+0x74>
   dde40:	f7fc fb28 	bl	da494 <__errno>
   dde44:	9b08      	ldr	r3, [sp, #32]
   dde46:	6003      	str	r3, [r0, #0]
   dde48:	e7e6      	b.n	dde18 <sqrtf+0x74>
   dde4a:	bf00      	nop
   dde4c:	2003e128 	.word	0x2003e128
   dde50:	000e1370 	.word	0x000e1370
   dde54:	00000000 	.word	0x00000000

000dde58 <__ieee754_pow>:
   dde58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dde5c:	ec57 6b11 	vmov	r6, r7, d1
   dde60:	ed2d 8b0a 	vpush	{d8-d12}
   dde64:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   dde68:	ea5a 0206 	orrs.w	r2, sl, r6
   dde6c:	b089      	sub	sp, #36	; 0x24
   dde6e:	d03d      	beq.n	ddeec <__ieee754_pow+0x94>
   dde70:	ec55 4b10 	vmov	r4, r5, d0
   dde74:	4976      	ldr	r1, [pc, #472]	; (de050 <__ieee754_pow+0x1f8>)
   dde76:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   dde7a:	4588      	cmp	r8, r1
   dde7c:	ee10 2a10 	vmov	r2, s0
   dde80:	46a9      	mov	r9, r5
   dde82:	dc2c      	bgt.n	ddede <__ieee754_pow+0x86>
   dde84:	ee11 3a10 	vmov	r3, s2
   dde88:	46bb      	mov	fp, r7
   dde8a:	d03a      	beq.n	ddf02 <__ieee754_pow+0xaa>
   dde8c:	458a      	cmp	sl, r1
   dde8e:	dc26      	bgt.n	ddede <__ieee754_pow+0x86>
   dde90:	496f      	ldr	r1, [pc, #444]	; (de050 <__ieee754_pow+0x1f8>)
   dde92:	458a      	cmp	sl, r1
   dde94:	d021      	beq.n	ddeda <__ieee754_pow+0x82>
   dde96:	f1b9 0f00 	cmp.w	r9, #0
   dde9a:	db3d      	blt.n	ddf18 <__ieee754_pow+0xc0>
   dde9c:	2100      	movs	r1, #0
   dde9e:	9103      	str	r1, [sp, #12]
   ddea0:	2b00      	cmp	r3, #0
   ddea2:	d155      	bne.n	ddf50 <__ieee754_pow+0xf8>
   ddea4:	4b6a      	ldr	r3, [pc, #424]	; (de050 <__ieee754_pow+0x1f8>)
   ddea6:	459a      	cmp	sl, r3
   ddea8:	f000 80a8 	beq.w	ddffc <__ieee754_pow+0x1a4>
   ddeac:	4b69      	ldr	r3, [pc, #420]	; (de054 <__ieee754_pow+0x1fc>)
   ddeae:	459a      	cmp	sl, r3
   ddeb0:	f000 80b6 	beq.w	de020 <__ieee754_pow+0x1c8>
   ddeb4:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   ddeb8:	f000 8501 	beq.w	de8be <__ieee754_pow+0xa66>
   ddebc:	4b66      	ldr	r3, [pc, #408]	; (de058 <__ieee754_pow+0x200>)
   ddebe:	459b      	cmp	fp, r3
   ddec0:	d146      	bne.n	ddf50 <__ieee754_pow+0xf8>
   ddec2:	f1b9 0f00 	cmp.w	r9, #0
   ddec6:	db43      	blt.n	ddf50 <__ieee754_pow+0xf8>
   ddec8:	ec45 4b10 	vmov	d0, r4, r5
   ddecc:	b009      	add	sp, #36	; 0x24
   ddece:	ecbd 8b0a 	vpop	{d8-d12}
   dded2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dded6:	f000 bd99 	b.w	dea0c <__ieee754_sqrt>
   ddeda:	2b00      	cmp	r3, #0
   ddedc:	d0db      	beq.n	dde96 <__ieee754_pow+0x3e>
   ddede:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   ddee2:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   ddee6:	ea58 0302 	orrs.w	r3, r8, r2
   ddeea:	d10d      	bne.n	ddf08 <__ieee754_pow+0xb0>
   ddeec:	ed9f 7b54 	vldr	d7, [pc, #336]	; de040 <__ieee754_pow+0x1e8>
   ddef0:	ed8d 7b00 	vstr	d7, [sp]
   ddef4:	ed9d 0b00 	vldr	d0, [sp]
   ddef8:	b009      	add	sp, #36	; 0x24
   ddefa:	ecbd 8b0a 	vpop	{d8-d12}
   ddefe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ddf02:	b90c      	cbnz	r4, ddf08 <__ieee754_pow+0xb0>
   ddf04:	45c2      	cmp	sl, r8
   ddf06:	ddc3      	ble.n	dde90 <__ieee754_pow+0x38>
   ddf08:	4854      	ldr	r0, [pc, #336]	; (de05c <__ieee754_pow+0x204>)
   ddf0a:	b009      	add	sp, #36	; 0x24
   ddf0c:	ecbd 8b0a 	vpop	{d8-d12}
   ddf10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ddf14:	f000 be5c 	b.w	debd0 <nan>
   ddf18:	4951      	ldr	r1, [pc, #324]	; (de060 <__ieee754_pow+0x208>)
   ddf1a:	458a      	cmp	sl, r1
   ddf1c:	f300 8087 	bgt.w	de02e <__ieee754_pow+0x1d6>
   ddf20:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   ddf24:	458a      	cmp	sl, r1
   ddf26:	dd0f      	ble.n	ddf48 <__ieee754_pow+0xf0>
   ddf28:	ea4f 512a 	mov.w	r1, sl, asr #20
   ddf2c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   ddf30:	2914      	cmp	r1, #20
   ddf32:	f340 84ce 	ble.w	de8d2 <__ieee754_pow+0xa7a>
   ddf36:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   ddf3a:	fa23 f001 	lsr.w	r0, r3, r1
   ddf3e:	fa00 f101 	lsl.w	r1, r0, r1
   ddf42:	4299      	cmp	r1, r3
   ddf44:	f000 8520 	beq.w	de988 <__ieee754_pow+0xb30>
   ddf48:	2100      	movs	r1, #0
   ddf4a:	9103      	str	r1, [sp, #12]
   ddf4c:	2b00      	cmp	r3, #0
   ddf4e:	d0ad      	beq.n	ddeac <__ieee754_pow+0x54>
   ddf50:	ec45 4b10 	vmov	d0, r4, r5
   ddf54:	9206      	str	r2, [sp, #24]
   ddf56:	f000 fe21 	bl	deb9c <fabs>
   ddf5a:	9a06      	ldr	r2, [sp, #24]
   ddf5c:	ed8d 0b00 	vstr	d0, [sp]
   ddf60:	bb5a      	cbnz	r2, ddfba <__ieee754_pow+0x162>
   ddf62:	f1b8 0f00 	cmp.w	r8, #0
   ddf66:	d004      	beq.n	ddf72 <__ieee754_pow+0x11a>
   ddf68:	4b3a      	ldr	r3, [pc, #232]	; (de054 <__ieee754_pow+0x1fc>)
   ddf6a:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   ddf6e:	429a      	cmp	r2, r3
   ddf70:	d123      	bne.n	ddfba <__ieee754_pow+0x162>
   ddf72:	f1bb 0f00 	cmp.w	fp, #0
   ddf76:	da07      	bge.n	ddf88 <__ieee754_pow+0x130>
   ddf78:	e9dd 2300 	ldrd	r2, r3, [sp]
   ddf7c:	4935      	ldr	r1, [pc, #212]	; (de054 <__ieee754_pow+0x1fc>)
   ddf7e:	2000      	movs	r0, #0
   ddf80:	f001 fa3a 	bl	df3f8 <__aeabi_ddiv>
   ddf84:	e9cd 0100 	strd	r0, r1, [sp]
   ddf88:	f1b9 0f00 	cmp.w	r9, #0
   ddf8c:	dab2      	bge.n	ddef4 <__ieee754_pow+0x9c>
   ddf8e:	9b03      	ldr	r3, [sp, #12]
   ddf90:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   ddf94:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   ddf98:	ea58 0303 	orrs.w	r3, r8, r3
   ddf9c:	f040 84be 	bne.w	de91c <__ieee754_pow+0xac4>
   ddfa0:	e9dd 2300 	ldrd	r2, r3, [sp]
   ddfa4:	4610      	mov	r0, r2
   ddfa6:	4619      	mov	r1, r3
   ddfa8:	f000 ff44 	bl	dee34 <__aeabi_dsub>
   ddfac:	4602      	mov	r2, r0
   ddfae:	460b      	mov	r3, r1
   ddfb0:	f001 fa22 	bl	df3f8 <__aeabi_ddiv>
   ddfb4:	e9cd 0100 	strd	r0, r1, [sp]
   ddfb8:	e79c      	b.n	ddef4 <__ieee754_pow+0x9c>
   ddfba:	9a03      	ldr	r2, [sp, #12]
   ddfbc:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   ddfc0:	3b01      	subs	r3, #1
   ddfc2:	9306      	str	r3, [sp, #24]
   ddfc4:	4313      	orrs	r3, r2
   ddfc6:	d035      	beq.n	de034 <__ieee754_pow+0x1dc>
   ddfc8:	4b26      	ldr	r3, [pc, #152]	; (de064 <__ieee754_pow+0x20c>)
   ddfca:	459a      	cmp	sl, r3
   ddfcc:	dd4e      	ble.n	de06c <__ieee754_pow+0x214>
   ddfce:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   ddfd2:	459a      	cmp	sl, r3
   ddfd4:	4b24      	ldr	r3, [pc, #144]	; (de068 <__ieee754_pow+0x210>)
   ddfd6:	f340 83ed 	ble.w	de7b4 <__ieee754_pow+0x95c>
   ddfda:	4598      	cmp	r8, r3
   ddfdc:	f340 836b 	ble.w	de6b6 <__ieee754_pow+0x85e>
   ddfe0:	f1bb 0f00 	cmp.w	fp, #0
   ddfe4:	f340 836b 	ble.w	de6be <__ieee754_pow+0x866>
   ddfe8:	a317      	add	r3, pc, #92	; (adr r3, de048 <__ieee754_pow+0x1f0>)
   ddfea:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddfee:	4610      	mov	r0, r2
   ddff0:	4619      	mov	r1, r3
   ddff2:	f001 f8d7 	bl	df1a4 <__aeabi_dmul>
   ddff6:	e9cd 0100 	strd	r0, r1, [sp]
   ddffa:	e77b      	b.n	ddef4 <__ieee754_pow+0x9c>
   ddffc:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   de000:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   de004:	4313      	orrs	r3, r2
   de006:	f43f af71 	beq.w	ddeec <__ieee754_pow+0x94>
   de00a:	4b17      	ldr	r3, [pc, #92]	; (de068 <__ieee754_pow+0x210>)
   de00c:	4598      	cmp	r8, r3
   de00e:	f340 8388 	ble.w	de722 <__ieee754_pow+0x8ca>
   de012:	f1bb 0f00 	cmp.w	fp, #0
   de016:	f2c0 8352 	blt.w	de6be <__ieee754_pow+0x866>
   de01a:	e9cd 6700 	strd	r6, r7, [sp]
   de01e:	e769      	b.n	ddef4 <__ieee754_pow+0x9c>
   de020:	f1bb 0f00 	cmp.w	fp, #0
   de024:	f2c0 8441 	blt.w	de8aa <__ieee754_pow+0xa52>
   de028:	e9cd 4500 	strd	r4, r5, [sp]
   de02c:	e762      	b.n	ddef4 <__ieee754_pow+0x9c>
   de02e:	2102      	movs	r1, #2
   de030:	9103      	str	r1, [sp, #12]
   de032:	e735      	b.n	ddea0 <__ieee754_pow+0x48>
   de034:	4622      	mov	r2, r4
   de036:	462b      	mov	r3, r5
   de038:	e7b4      	b.n	ddfa4 <__ieee754_pow+0x14c>
   de03a:	bf00      	nop
   de03c:	f3af 8000 	nop.w
   de040:	00000000 	.word	0x00000000
   de044:	3ff00000 	.word	0x3ff00000
   de048:	8800759c 	.word	0x8800759c
   de04c:	7e37e43c 	.word	0x7e37e43c
   de050:	7ff00000 	.word	0x7ff00000
   de054:	3ff00000 	.word	0x3ff00000
   de058:	3fe00000 	.word	0x3fe00000
   de05c:	000e1378 	.word	0x000e1378
   de060:	433fffff 	.word	0x433fffff
   de064:	41e00000 	.word	0x41e00000
   de068:	3fefffff 	.word	0x3fefffff
   de06c:	4be4      	ldr	r3, [pc, #912]	; (de400 <__ieee754_pow+0x5a8>)
   de06e:	ea09 0303 	and.w	r3, r9, r3
   de072:	2b00      	cmp	r3, #0
   de074:	f040 8416 	bne.w	de8a4 <__ieee754_pow+0xa4c>
   de078:	e9dd 0100 	ldrd	r0, r1, [sp]
   de07c:	4be1      	ldr	r3, [pc, #900]	; (de404 <__ieee754_pow+0x5ac>)
   de07e:	2200      	movs	r2, #0
   de080:	f001 f890 	bl	df1a4 <__aeabi_dmul>
   de084:	e9cd 0100 	strd	r0, r1, [sp]
   de088:	f8dd 8004 	ldr.w	r8, [sp, #4]
   de08c:	f06f 0034 	mvn.w	r0, #52	; 0x34
   de090:	ea4f 5328 	mov.w	r3, r8, asr #20
   de094:	49dc      	ldr	r1, [pc, #880]	; (de408 <__ieee754_pow+0x5b0>)
   de096:	f3c8 0213 	ubfx	r2, r8, #0, #20
   de09a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   de09e:	f042 587f 	orr.w	r8, r2, #1069547520	; 0x3fc00000
   de0a2:	1818      	adds	r0, r3, r0
   de0a4:	428a      	cmp	r2, r1
   de0a6:	9007      	str	r0, [sp, #28]
   de0a8:	f448 1840 	orr.w	r8, r8, #3145728	; 0x300000
   de0ac:	f340 83e9 	ble.w	de882 <__ieee754_pow+0xa2a>
   de0b0:	4bd6      	ldr	r3, [pc, #856]	; (de40c <__ieee754_pow+0x5b4>)
   de0b2:	429a      	cmp	r2, r3
   de0b4:	f340 843e 	ble.w	de934 <__ieee754_pow+0xadc>
   de0b8:	ed9f 7bbb 	vldr	d7, [pc, #748]	; de3a8 <__ieee754_pow+0x550>
   de0bc:	eeb0 ba47 	vmov.f32	s22, s14
   de0c0:	eef0 ba67 	vmov.f32	s23, s15
   de0c4:	eeb0 ca47 	vmov.f32	s24, s14
   de0c8:	eef0 ca67 	vmov.f32	s25, s15
   de0cc:	ed9f 7bb8 	vldr	d7, [pc, #736]	; de3b0 <__ieee754_pow+0x558>
   de0d0:	3001      	adds	r0, #1
   de0d2:	ec54 3b17 	vmov	r3, r4, d7
   de0d6:	9007      	str	r0, [sp, #28]
   de0d8:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
   de0dc:	f04f 0900 	mov.w	r9, #0
   de0e0:	e9dd ab00 	ldrd	sl, fp, [sp]
   de0e4:	ec44 3b18 	vmov	d8, r3, r4
   de0e8:	461a      	mov	r2, r3
   de0ea:	4650      	mov	r0, sl
   de0ec:	4623      	mov	r3, r4
   de0ee:	4641      	mov	r1, r8
   de0f0:	f000 fea0 	bl	dee34 <__aeabi_dsub>
   de0f4:	ec53 2b18 	vmov	r2, r3, d8
   de0f8:	4604      	mov	r4, r0
   de0fa:	460d      	mov	r5, r1
   de0fc:	4650      	mov	r0, sl
   de0fe:	4641      	mov	r1, r8
   de100:	f000 fe9a 	bl	dee38 <__adddf3>
   de104:	4602      	mov	r2, r0
   de106:	460b      	mov	r3, r1
   de108:	2000      	movs	r0, #0
   de10a:	49c1      	ldr	r1, [pc, #772]	; (de410 <__ieee754_pow+0x5b8>)
   de10c:	f001 f974 	bl	df3f8 <__aeabi_ddiv>
   de110:	ec45 4b1a 	vmov	d10, r4, r5
   de114:	ec41 0b19 	vmov	d9, r0, r1
   de118:	ec51 0b1a 	vmov	r0, r1, d10
   de11c:	ec53 2b19 	vmov	r2, r3, d9
   de120:	f001 f840 	bl	df1a4 <__aeabi_dmul>
   de124:	46c3      	mov	fp, r8
   de126:	ea4f 0868 	mov.w	r8, r8, asr #1
   de12a:	f048 5800 	orr.w	r8, r8, #536870912	; 0x20000000
   de12e:	f508 2300 	add.w	r3, r8, #524288	; 0x80000
   de132:	eb03 0509 	add.w	r5, r3, r9
   de136:	460a      	mov	r2, r1
   de138:	2300      	movs	r3, #0
   de13a:	4601      	mov	r1, r0
   de13c:	e9cd 1200 	strd	r1, r2, [sp]
   de140:	9300      	str	r3, [sp, #0]
   de142:	e9dd 8900 	ldrd	r8, r9, [sp]
   de146:	2400      	movs	r4, #0
   de148:	e9cd 1204 	strd	r1, r2, [sp, #16]
   de14c:	462b      	mov	r3, r5
   de14e:	4622      	mov	r2, r4
   de150:	4640      	mov	r0, r8
   de152:	4649      	mov	r1, r9
   de154:	f001 f826 	bl	df1a4 <__aeabi_dmul>
   de158:	4602      	mov	r2, r0
   de15a:	460b      	mov	r3, r1
   de15c:	ec51 0b1a 	vmov	r0, r1, d10
   de160:	f000 fe68 	bl	dee34 <__aeabi_dsub>
   de164:	ec41 0b17 	vmov	d7, r0, r1
   de168:	ec53 2b18 	vmov	r2, r3, d8
   de16c:	4620      	mov	r0, r4
   de16e:	4629      	mov	r1, r5
   de170:	ec55 4b17 	vmov	r4, r5, d7
   de174:	f000 fe5e 	bl	dee34 <__aeabi_dsub>
   de178:	4602      	mov	r2, r0
   de17a:	460b      	mov	r3, r1
   de17c:	4650      	mov	r0, sl
   de17e:	4659      	mov	r1, fp
   de180:	f000 fe58 	bl	dee34 <__aeabi_dsub>
   de184:	4642      	mov	r2, r8
   de186:	464b      	mov	r3, r9
   de188:	f001 f80c 	bl	df1a4 <__aeabi_dmul>
   de18c:	4602      	mov	r2, r0
   de18e:	460b      	mov	r3, r1
   de190:	4620      	mov	r0, r4
   de192:	4629      	mov	r1, r5
   de194:	f000 fe4e 	bl	dee34 <__aeabi_dsub>
   de198:	ec53 2b19 	vmov	r2, r3, d9
   de19c:	f001 f802 	bl	df1a4 <__aeabi_dmul>
   de1a0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   de1a4:	4604      	mov	r4, r0
   de1a6:	460d      	mov	r5, r1
   de1a8:	4652      	mov	r2, sl
   de1aa:	465b      	mov	r3, fp
   de1ac:	4650      	mov	r0, sl
   de1ae:	4659      	mov	r1, fp
   de1b0:	f000 fff8 	bl	df1a4 <__aeabi_dmul>
   de1b4:	a380      	add	r3, pc, #512	; (adr r3, de3b8 <__ieee754_pow+0x560>)
   de1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   de1ba:	ec45 4b1a 	vmov	d10, r4, r5
   de1be:	4604      	mov	r4, r0
   de1c0:	460d      	mov	r5, r1
   de1c2:	f000 ffef 	bl	df1a4 <__aeabi_dmul>
   de1c6:	a37e      	add	r3, pc, #504	; (adr r3, de3c0 <__ieee754_pow+0x568>)
   de1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   de1cc:	f000 fe34 	bl	dee38 <__adddf3>
   de1d0:	4622      	mov	r2, r4
   de1d2:	462b      	mov	r3, r5
   de1d4:	f000 ffe6 	bl	df1a4 <__aeabi_dmul>
   de1d8:	a37b      	add	r3, pc, #492	; (adr r3, de3c8 <__ieee754_pow+0x570>)
   de1da:	e9d3 2300 	ldrd	r2, r3, [r3]
   de1de:	f000 fe2b 	bl	dee38 <__adddf3>
   de1e2:	4622      	mov	r2, r4
   de1e4:	462b      	mov	r3, r5
   de1e6:	f000 ffdd 	bl	df1a4 <__aeabi_dmul>
   de1ea:	a379      	add	r3, pc, #484	; (adr r3, de3d0 <__ieee754_pow+0x578>)
   de1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   de1f0:	f000 fe22 	bl	dee38 <__adddf3>
   de1f4:	4622      	mov	r2, r4
   de1f6:	462b      	mov	r3, r5
   de1f8:	f000 ffd4 	bl	df1a4 <__aeabi_dmul>
   de1fc:	a376      	add	r3, pc, #472	; (adr r3, de3d8 <__ieee754_pow+0x580>)
   de1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   de202:	f000 fe19 	bl	dee38 <__adddf3>
   de206:	4622      	mov	r2, r4
   de208:	462b      	mov	r3, r5
   de20a:	f000 ffcb 	bl	df1a4 <__aeabi_dmul>
   de20e:	a374      	add	r3, pc, #464	; (adr r3, de3e0 <__ieee754_pow+0x588>)
   de210:	e9d3 2300 	ldrd	r2, r3, [r3]
   de214:	f000 fe10 	bl	dee38 <__adddf3>
   de218:	4622      	mov	r2, r4
   de21a:	462b      	mov	r3, r5
   de21c:	4604      	mov	r4, r0
   de21e:	460d      	mov	r5, r1
   de220:	4610      	mov	r0, r2
   de222:	4619      	mov	r1, r3
   de224:	f000 ffbe 	bl	df1a4 <__aeabi_dmul>
   de228:	4602      	mov	r2, r0
   de22a:	460b      	mov	r3, r1
   de22c:	4620      	mov	r0, r4
   de22e:	4629      	mov	r1, r5
   de230:	f000 ffb8 	bl	df1a4 <__aeabi_dmul>
   de234:	4642      	mov	r2, r8
   de236:	4604      	mov	r4, r0
   de238:	460d      	mov	r5, r1
   de23a:	464b      	mov	r3, r9
   de23c:	4650      	mov	r0, sl
   de23e:	4659      	mov	r1, fp
   de240:	e9cd ab04 	strd	sl, fp, [sp, #16]
   de244:	f000 fdf8 	bl	dee38 <__adddf3>
   de248:	ec53 2b1a 	vmov	r2, r3, d10
   de24c:	f000 ffaa 	bl	df1a4 <__aeabi_dmul>
   de250:	4622      	mov	r2, r4
   de252:	462b      	mov	r3, r5
   de254:	f000 fdf0 	bl	dee38 <__adddf3>
   de258:	4642      	mov	r2, r8
   de25a:	4604      	mov	r4, r0
   de25c:	460d      	mov	r5, r1
   de25e:	464b      	mov	r3, r9
   de260:	4640      	mov	r0, r8
   de262:	4649      	mov	r1, r9
   de264:	f000 ff9e 	bl	df1a4 <__aeabi_dmul>
   de268:	ec45 4b19 	vmov	d9, r4, r5
   de26c:	4b69      	ldr	r3, [pc, #420]	; (de414 <__ieee754_pow+0x5bc>)
   de26e:	2200      	movs	r2, #0
   de270:	4682      	mov	sl, r0
   de272:	468b      	mov	fp, r1
   de274:	f000 fde0 	bl	dee38 <__adddf3>
   de278:	ec53 2b19 	vmov	r2, r3, d9
   de27c:	f000 fddc 	bl	dee38 <__adddf3>
   de280:	9c00      	ldr	r4, [sp, #0]
   de282:	460d      	mov	r5, r1
   de284:	4622      	mov	r2, r4
   de286:	462b      	mov	r3, r5
   de288:	4640      	mov	r0, r8
   de28a:	4649      	mov	r1, r9
   de28c:	f000 ff8a 	bl	df1a4 <__aeabi_dmul>
   de290:	4b60      	ldr	r3, [pc, #384]	; (de414 <__ieee754_pow+0x5bc>)
   de292:	4680      	mov	r8, r0
   de294:	4689      	mov	r9, r1
   de296:	2200      	movs	r2, #0
   de298:	4620      	mov	r0, r4
   de29a:	4629      	mov	r1, r5
   de29c:	f000 fdca 	bl	dee34 <__aeabi_dsub>
   de2a0:	4652      	mov	r2, sl
   de2a2:	465b      	mov	r3, fp
   de2a4:	f000 fdc6 	bl	dee34 <__aeabi_dsub>
   de2a8:	4602      	mov	r2, r0
   de2aa:	460b      	mov	r3, r1
   de2ac:	ec51 0b19 	vmov	r0, r1, d9
   de2b0:	f000 fdc0 	bl	dee34 <__aeabi_dsub>
   de2b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   de2b8:	f000 ff74 	bl	df1a4 <__aeabi_dmul>
   de2bc:	ec49 8b18 	vmov	d8, r8, r9
   de2c0:	4622      	mov	r2, r4
   de2c2:	4680      	mov	r8, r0
   de2c4:	4689      	mov	r9, r1
   de2c6:	462b      	mov	r3, r5
   de2c8:	ec51 0b1a 	vmov	r0, r1, d10
   de2cc:	f000 ff6a 	bl	df1a4 <__aeabi_dmul>
   de2d0:	4602      	mov	r2, r0
   de2d2:	460b      	mov	r3, r1
   de2d4:	4640      	mov	r0, r8
   de2d6:	4649      	mov	r1, r9
   de2d8:	f000 fdae 	bl	dee38 <__adddf3>
   de2dc:	4682      	mov	sl, r0
   de2de:	468b      	mov	fp, r1
   de2e0:	4652      	mov	r2, sl
   de2e2:	465b      	mov	r3, fp
   de2e4:	ec51 0b18 	vmov	r0, r1, d8
   de2e8:	f000 fda6 	bl	dee38 <__adddf3>
   de2ec:	9c00      	ldr	r4, [sp, #0]
   de2ee:	a33e      	add	r3, pc, #248	; (adr r3, de3e8 <__ieee754_pow+0x590>)
   de2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   de2f4:	4620      	mov	r0, r4
   de2f6:	460d      	mov	r5, r1
   de2f8:	f000 ff54 	bl	df1a4 <__aeabi_dmul>
   de2fc:	ec53 2b18 	vmov	r2, r3, d8
   de300:	4680      	mov	r8, r0
   de302:	4689      	mov	r9, r1
   de304:	4620      	mov	r0, r4
   de306:	4629      	mov	r1, r5
   de308:	f000 fd94 	bl	dee34 <__aeabi_dsub>
   de30c:	4602      	mov	r2, r0
   de30e:	460b      	mov	r3, r1
   de310:	4650      	mov	r0, sl
   de312:	4659      	mov	r1, fp
   de314:	f000 fd8e 	bl	dee34 <__aeabi_dsub>
   de318:	a335      	add	r3, pc, #212	; (adr r3, de3f0 <__ieee754_pow+0x598>)
   de31a:	e9d3 2300 	ldrd	r2, r3, [r3]
   de31e:	f000 ff41 	bl	df1a4 <__aeabi_dmul>
   de322:	ec49 8b19 	vmov	d9, r8, r9
   de326:	a334      	add	r3, pc, #208	; (adr r3, de3f8 <__ieee754_pow+0x5a0>)
   de328:	e9d3 2300 	ldrd	r2, r3, [r3]
   de32c:	4680      	mov	r8, r0
   de32e:	4689      	mov	r9, r1
   de330:	4620      	mov	r0, r4
   de332:	4629      	mov	r1, r5
   de334:	f000 ff36 	bl	df1a4 <__aeabi_dmul>
   de338:	4602      	mov	r2, r0
   de33a:	460b      	mov	r3, r1
   de33c:	4640      	mov	r0, r8
   de33e:	4649      	mov	r1, r9
   de340:	f000 fd7a 	bl	dee38 <__adddf3>
   de344:	ec53 2b1c 	vmov	r2, r3, d12
   de348:	f000 fd76 	bl	dee38 <__adddf3>
   de34c:	4682      	mov	sl, r0
   de34e:	9807      	ldr	r0, [sp, #28]
   de350:	468b      	mov	fp, r1
   de352:	f000 febd 	bl	df0d0 <__aeabi_i2d>
   de356:	4652      	mov	r2, sl
   de358:	4680      	mov	r8, r0
   de35a:	4689      	mov	r9, r1
   de35c:	465b      	mov	r3, fp
   de35e:	ec51 0b19 	vmov	r0, r1, d9
   de362:	f000 fd69 	bl	dee38 <__adddf3>
   de366:	ec53 2b1b 	vmov	r2, r3, d11
   de36a:	f000 fd65 	bl	dee38 <__adddf3>
   de36e:	4642      	mov	r2, r8
   de370:	464b      	mov	r3, r9
   de372:	f000 fd61 	bl	dee38 <__adddf3>
   de376:	9c00      	ldr	r4, [sp, #0]
   de378:	4642      	mov	r2, r8
   de37a:	464b      	mov	r3, r9
   de37c:	4620      	mov	r0, r4
   de37e:	460d      	mov	r5, r1
   de380:	f000 fd58 	bl	dee34 <__aeabi_dsub>
   de384:	ec53 2b1b 	vmov	r2, r3, d11
   de388:	f000 fd54 	bl	dee34 <__aeabi_dsub>
   de38c:	ec53 2b19 	vmov	r2, r3, d9
   de390:	f000 fd50 	bl	dee34 <__aeabi_dsub>
   de394:	4602      	mov	r2, r0
   de396:	460b      	mov	r3, r1
   de398:	4650      	mov	r0, sl
   de39a:	4659      	mov	r1, fp
   de39c:	f000 fd4a 	bl	dee34 <__aeabi_dsub>
   de3a0:	4682      	mov	sl, r0
   de3a2:	468b      	mov	fp, r1
   de3a4:	e038      	b.n	de418 <__ieee754_pow+0x5c0>
   de3a6:	bf00      	nop
	...
   de3b4:	3ff00000 	.word	0x3ff00000
   de3b8:	4a454eef 	.word	0x4a454eef
   de3bc:	3fca7e28 	.word	0x3fca7e28
   de3c0:	93c9db65 	.word	0x93c9db65
   de3c4:	3fcd864a 	.word	0x3fcd864a
   de3c8:	a91d4101 	.word	0xa91d4101
   de3cc:	3fd17460 	.word	0x3fd17460
   de3d0:	518f264d 	.word	0x518f264d
   de3d4:	3fd55555 	.word	0x3fd55555
   de3d8:	db6fabff 	.word	0xdb6fabff
   de3dc:	3fdb6db6 	.word	0x3fdb6db6
   de3e0:	33333303 	.word	0x33333303
   de3e4:	3fe33333 	.word	0x3fe33333
   de3e8:	e0000000 	.word	0xe0000000
   de3ec:	3feec709 	.word	0x3feec709
   de3f0:	dc3a03fd 	.word	0xdc3a03fd
   de3f4:	3feec709 	.word	0x3feec709
   de3f8:	145b01f5 	.word	0x145b01f5
   de3fc:	be3e2fe0 	.word	0xbe3e2fe0
   de400:	7ff00000 	.word	0x7ff00000
   de404:	43400000 	.word	0x43400000
   de408:	0003988e 	.word	0x0003988e
   de40c:	000bb679 	.word	0x000bb679
   de410:	3ff00000 	.word	0x3ff00000
   de414:	40080000 	.word	0x40080000
   de418:	9b03      	ldr	r3, [sp, #12]
   de41a:	9a06      	ldr	r2, [sp, #24]
   de41c:	3b01      	subs	r3, #1
   de41e:	4313      	orrs	r3, r2
   de420:	f040 8178 	bne.w	de714 <__ieee754_pow+0x8bc>
   de424:	ed9f 7bc4 	vldr	d7, [pc, #784]	; de738 <__ieee754_pow+0x8e0>
   de428:	eeb0 9a47 	vmov.f32	s18, s14
   de42c:	eef0 9a67 	vmov.f32	s19, s15
   de430:	2300      	movs	r3, #0
   de432:	e9cd 6700 	strd	r6, r7, [sp]
   de436:	9300      	str	r3, [sp, #0]
   de438:	e9dd 8900 	ldrd	r8, r9, [sp]
   de43c:	4630      	mov	r0, r6
   de43e:	4642      	mov	r2, r8
   de440:	4639      	mov	r1, r7
   de442:	464b      	mov	r3, r9
   de444:	f000 fcf6 	bl	dee34 <__aeabi_dsub>
   de448:	4622      	mov	r2, r4
   de44a:	462b      	mov	r3, r5
   de44c:	f000 feaa 	bl	df1a4 <__aeabi_dmul>
   de450:	4632      	mov	r2, r6
   de452:	463b      	mov	r3, r7
   de454:	4606      	mov	r6, r0
   de456:	460f      	mov	r7, r1
   de458:	4650      	mov	r0, sl
   de45a:	4659      	mov	r1, fp
   de45c:	f000 fea2 	bl	df1a4 <__aeabi_dmul>
   de460:	4602      	mov	r2, r0
   de462:	460b      	mov	r3, r1
   de464:	4630      	mov	r0, r6
   de466:	4639      	mov	r1, r7
   de468:	f000 fce6 	bl	dee38 <__adddf3>
   de46c:	4642      	mov	r2, r8
   de46e:	4682      	mov	sl, r0
   de470:	468b      	mov	fp, r1
   de472:	464b      	mov	r3, r9
   de474:	4620      	mov	r0, r4
   de476:	4629      	mov	r1, r5
   de478:	f000 fe94 	bl	df1a4 <__aeabi_dmul>
   de47c:	4606      	mov	r6, r0
   de47e:	460f      	mov	r7, r1
   de480:	463b      	mov	r3, r7
   de482:	4650      	mov	r0, sl
   de484:	4659      	mov	r1, fp
   de486:	4632      	mov	r2, r6
   de488:	f000 fcd6 	bl	dee38 <__adddf3>
   de48c:	4bc4      	ldr	r3, [pc, #784]	; (de7a0 <__ieee754_pow+0x948>)
   de48e:	4299      	cmp	r1, r3
   de490:	4604      	mov	r4, r0
   de492:	460d      	mov	r5, r1
   de494:	4688      	mov	r8, r1
   de496:	f340 8117 	ble.w	de6c8 <__ieee754_pow+0x870>
   de49a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   de49e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   de4a2:	4303      	orrs	r3, r0
   de4a4:	f040 822a 	bne.w	de8fc <__ieee754_pow+0xaa4>
   de4a8:	a3a5      	add	r3, pc, #660	; (adr r3, de740 <__ieee754_pow+0x8e8>)
   de4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   de4ae:	4650      	mov	r0, sl
   de4b0:	4659      	mov	r1, fp
   de4b2:	f000 fcc1 	bl	dee38 <__adddf3>
   de4b6:	4632      	mov	r2, r6
   de4b8:	ec41 0b18 	vmov	d8, r0, r1
   de4bc:	463b      	mov	r3, r7
   de4be:	4620      	mov	r0, r4
   de4c0:	4629      	mov	r1, r5
   de4c2:	f000 fcb7 	bl	dee34 <__aeabi_dsub>
   de4c6:	4602      	mov	r2, r0
   de4c8:	460b      	mov	r3, r1
   de4ca:	ec51 0b18 	vmov	r0, r1, d8
   de4ce:	f001 f8f9 	bl	df6c4 <__aeabi_dcmpgt>
   de4d2:	2800      	cmp	r0, #0
   de4d4:	f040 8212 	bne.w	de8fc <__ieee754_pow+0xaa4>
   de4d8:	f3c8 530a 	ubfx	r3, r8, #20, #11
   de4dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   de4e0:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   de4e4:	fa42 f303 	asr.w	r3, r2, r3
   de4e8:	4443      	add	r3, r8
   de4ea:	49ae      	ldr	r1, [pc, #696]	; (de7a4 <__ieee754_pow+0x94c>)
   de4ec:	f3c3 520a 	ubfx	r2, r3, #20, #11
   de4f0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   de4f4:	fa41 fc02 	asr.w	ip, r1, r2
   de4f8:	f3c3 0513 	ubfx	r5, r3, #0, #20
   de4fc:	ea23 010c 	bic.w	r1, r3, ip
   de500:	f1c2 0414 	rsb	r4, r2, #20
   de504:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   de508:	f1b8 0f00 	cmp.w	r8, #0
   de50c:	460b      	mov	r3, r1
   de50e:	fa45 f104 	asr.w	r1, r5, r4
   de512:	9103      	str	r1, [sp, #12]
   de514:	f04f 0000 	mov.w	r0, #0
   de518:	bfb8      	it	lt
   de51a:	4249      	neglt	r1, r1
   de51c:	4602      	mov	r2, r0
   de51e:	bfb8      	it	lt
   de520:	9103      	strlt	r1, [sp, #12]
   de522:	4630      	mov	r0, r6
   de524:	4639      	mov	r1, r7
   de526:	f000 fc85 	bl	dee34 <__aeabi_dsub>
   de52a:	4606      	mov	r6, r0
   de52c:	460f      	mov	r7, r1
   de52e:	463b      	mov	r3, r7
   de530:	4650      	mov	r0, sl
   de532:	4659      	mov	r1, fp
   de534:	4632      	mov	r2, r6
   de536:	f000 fc7f 	bl	dee38 <__adddf3>
   de53a:	9b03      	ldr	r3, [sp, #12]
   de53c:	051b      	lsls	r3, r3, #20
   de53e:	9300      	str	r3, [sp, #0]
   de540:	460d      	mov	r5, r1
   de542:	2400      	movs	r4, #0
   de544:	a380      	add	r3, pc, #512	; (adr r3, de748 <__ieee754_pow+0x8f0>)
   de546:	e9d3 2300 	ldrd	r2, r3, [r3]
   de54a:	4620      	mov	r0, r4
   de54c:	4629      	mov	r1, r5
   de54e:	f000 fe29 	bl	df1a4 <__aeabi_dmul>
   de552:	4632      	mov	r2, r6
   de554:	4680      	mov	r8, r0
   de556:	4689      	mov	r9, r1
   de558:	463b      	mov	r3, r7
   de55a:	4620      	mov	r0, r4
   de55c:	4629      	mov	r1, r5
   de55e:	f000 fc69 	bl	dee34 <__aeabi_dsub>
   de562:	4602      	mov	r2, r0
   de564:	460b      	mov	r3, r1
   de566:	4650      	mov	r0, sl
   de568:	4659      	mov	r1, fp
   de56a:	f000 fc63 	bl	dee34 <__aeabi_dsub>
   de56e:	a378      	add	r3, pc, #480	; (adr r3, de750 <__ieee754_pow+0x8f8>)
   de570:	e9d3 2300 	ldrd	r2, r3, [r3]
   de574:	f000 fe16 	bl	df1a4 <__aeabi_dmul>
   de578:	a377      	add	r3, pc, #476	; (adr r3, de758 <__ieee754_pow+0x900>)
   de57a:	e9d3 2300 	ldrd	r2, r3, [r3]
   de57e:	4606      	mov	r6, r0
   de580:	460f      	mov	r7, r1
   de582:	4620      	mov	r0, r4
   de584:	4629      	mov	r1, r5
   de586:	f000 fe0d 	bl	df1a4 <__aeabi_dmul>
   de58a:	4602      	mov	r2, r0
   de58c:	460b      	mov	r3, r1
   de58e:	4630      	mov	r0, r6
   de590:	4639      	mov	r1, r7
   de592:	f000 fc51 	bl	dee38 <__adddf3>
   de596:	4606      	mov	r6, r0
   de598:	460f      	mov	r7, r1
   de59a:	4632      	mov	r2, r6
   de59c:	463b      	mov	r3, r7
   de59e:	4640      	mov	r0, r8
   de5a0:	4649      	mov	r1, r9
   de5a2:	f000 fc49 	bl	dee38 <__adddf3>
   de5a6:	4642      	mov	r2, r8
   de5a8:	464b      	mov	r3, r9
   de5aa:	4604      	mov	r4, r0
   de5ac:	460d      	mov	r5, r1
   de5ae:	f000 fc41 	bl	dee34 <__aeabi_dsub>
   de5b2:	4602      	mov	r2, r0
   de5b4:	460b      	mov	r3, r1
   de5b6:	4630      	mov	r0, r6
   de5b8:	4639      	mov	r1, r7
   de5ba:	f000 fc3b 	bl	dee34 <__aeabi_dsub>
   de5be:	4622      	mov	r2, r4
   de5c0:	4682      	mov	sl, r0
   de5c2:	468b      	mov	fp, r1
   de5c4:	462b      	mov	r3, r5
   de5c6:	4620      	mov	r0, r4
   de5c8:	4629      	mov	r1, r5
   de5ca:	f000 fdeb 	bl	df1a4 <__aeabi_dmul>
   de5ce:	a364      	add	r3, pc, #400	; (adr r3, de760 <__ieee754_pow+0x908>)
   de5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   de5d4:	4606      	mov	r6, r0
   de5d6:	460f      	mov	r7, r1
   de5d8:	f000 fde4 	bl	df1a4 <__aeabi_dmul>
   de5dc:	a362      	add	r3, pc, #392	; (adr r3, de768 <__ieee754_pow+0x910>)
   de5de:	e9d3 2300 	ldrd	r2, r3, [r3]
   de5e2:	f000 fc27 	bl	dee34 <__aeabi_dsub>
   de5e6:	4632      	mov	r2, r6
   de5e8:	463b      	mov	r3, r7
   de5ea:	f000 fddb 	bl	df1a4 <__aeabi_dmul>
   de5ee:	a360      	add	r3, pc, #384	; (adr r3, de770 <__ieee754_pow+0x918>)
   de5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   de5f4:	f000 fc20 	bl	dee38 <__adddf3>
   de5f8:	4632      	mov	r2, r6
   de5fa:	463b      	mov	r3, r7
   de5fc:	f000 fdd2 	bl	df1a4 <__aeabi_dmul>
   de600:	a35d      	add	r3, pc, #372	; (adr r3, de778 <__ieee754_pow+0x920>)
   de602:	e9d3 2300 	ldrd	r2, r3, [r3]
   de606:	f000 fc15 	bl	dee34 <__aeabi_dsub>
   de60a:	4632      	mov	r2, r6
   de60c:	463b      	mov	r3, r7
   de60e:	f000 fdc9 	bl	df1a4 <__aeabi_dmul>
   de612:	a35b      	add	r3, pc, #364	; (adr r3, de780 <__ieee754_pow+0x928>)
   de614:	e9d3 2300 	ldrd	r2, r3, [r3]
   de618:	f000 fc0e 	bl	dee38 <__adddf3>
   de61c:	4632      	mov	r2, r6
   de61e:	463b      	mov	r3, r7
   de620:	f000 fdc0 	bl	df1a4 <__aeabi_dmul>
   de624:	4602      	mov	r2, r0
   de626:	460b      	mov	r3, r1
   de628:	4620      	mov	r0, r4
   de62a:	4629      	mov	r1, r5
   de62c:	f000 fc02 	bl	dee34 <__aeabi_dsub>
   de630:	4606      	mov	r6, r0
   de632:	460f      	mov	r7, r1
   de634:	4632      	mov	r2, r6
   de636:	463b      	mov	r3, r7
   de638:	4620      	mov	r0, r4
   de63a:	4629      	mov	r1, r5
   de63c:	f000 fdb2 	bl	df1a4 <__aeabi_dmul>
   de640:	2200      	movs	r2, #0
   de642:	4680      	mov	r8, r0
   de644:	4689      	mov	r9, r1
   de646:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   de64a:	4630      	mov	r0, r6
   de64c:	4639      	mov	r1, r7
   de64e:	f000 fbf1 	bl	dee34 <__aeabi_dsub>
   de652:	4602      	mov	r2, r0
   de654:	460b      	mov	r3, r1
   de656:	4640      	mov	r0, r8
   de658:	4649      	mov	r1, r9
   de65a:	f000 fecd 	bl	df3f8 <__aeabi_ddiv>
   de65e:	4652      	mov	r2, sl
   de660:	4606      	mov	r6, r0
   de662:	460f      	mov	r7, r1
   de664:	465b      	mov	r3, fp
   de666:	4620      	mov	r0, r4
   de668:	4629      	mov	r1, r5
   de66a:	f000 fd9b 	bl	df1a4 <__aeabi_dmul>
   de66e:	4652      	mov	r2, sl
   de670:	465b      	mov	r3, fp
   de672:	f000 fbe1 	bl	dee38 <__adddf3>
   de676:	4602      	mov	r2, r0
   de678:	460b      	mov	r3, r1
   de67a:	4630      	mov	r0, r6
   de67c:	4639      	mov	r1, r7
   de67e:	f000 fbd9 	bl	dee34 <__aeabi_dsub>
   de682:	4622      	mov	r2, r4
   de684:	462b      	mov	r3, r5
   de686:	f000 fbd5 	bl	dee34 <__aeabi_dsub>
   de68a:	4602      	mov	r2, r0
   de68c:	460b      	mov	r3, r1
   de68e:	2000      	movs	r0, #0
   de690:	4945      	ldr	r1, [pc, #276]	; (de7a8 <__ieee754_pow+0x950>)
   de692:	f000 fbcf 	bl	dee34 <__aeabi_dsub>
   de696:	460b      	mov	r3, r1
   de698:	9900      	ldr	r1, [sp, #0]
   de69a:	4419      	add	r1, r3
   de69c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   de6a0:	4602      	mov	r2, r0
   de6a2:	f2c0 8169 	blt.w	de978 <__ieee754_pow+0xb20>
   de6a6:	4610      	mov	r0, r2
   de6a8:	ec53 2b19 	vmov	r2, r3, d9
   de6ac:	f000 fd7a 	bl	df1a4 <__aeabi_dmul>
   de6b0:	e9cd 0100 	strd	r0, r1, [sp]
   de6b4:	e41e      	b.n	ddef4 <__ieee754_pow+0x9c>
   de6b6:	f1bb 0f00 	cmp.w	fp, #0
   de6ba:	f6ff ac95 	blt.w	ddfe8 <__ieee754_pow+0x190>
   de6be:	ed9f 7b32 	vldr	d7, [pc, #200]	; de788 <__ieee754_pow+0x930>
   de6c2:	ed8d 7b00 	vstr	d7, [sp]
   de6c6:	e415      	b.n	ddef4 <__ieee754_pow+0x9c>
   de6c8:	f8df c0e4 	ldr.w	ip, [pc, #228]	; de7b0 <__ieee754_pow+0x958>
   de6cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   de6d0:	4563      	cmp	r3, ip
   de6d2:	f340 810b 	ble.w	de8ec <__ieee754_pow+0xa94>
   de6d6:	4b35      	ldr	r3, [pc, #212]	; (de7ac <__ieee754_pow+0x954>)
   de6d8:	440b      	add	r3, r1
   de6da:	4303      	orrs	r3, r0
   de6dc:	d10a      	bne.n	de6f4 <__ieee754_pow+0x89c>
   de6de:	4632      	mov	r2, r6
   de6e0:	463b      	mov	r3, r7
   de6e2:	f000 fba7 	bl	dee34 <__aeabi_dsub>
   de6e6:	4652      	mov	r2, sl
   de6e8:	465b      	mov	r3, fp
   de6ea:	f000 ffe1 	bl	df6b0 <__aeabi_dcmpge>
   de6ee:	2800      	cmp	r0, #0
   de6f0:	f43f aef2 	beq.w	de4d8 <__ieee754_pow+0x680>
   de6f4:	a326      	add	r3, pc, #152	; (adr r3, de790 <__ieee754_pow+0x938>)
   de6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   de6fa:	ec51 0b19 	vmov	r0, r1, d9
   de6fe:	f000 fd51 	bl	df1a4 <__aeabi_dmul>
   de702:	a323      	add	r3, pc, #140	; (adr r3, de790 <__ieee754_pow+0x938>)
   de704:	e9d3 2300 	ldrd	r2, r3, [r3]
   de708:	f000 fd4c 	bl	df1a4 <__aeabi_dmul>
   de70c:	e9cd 0100 	strd	r0, r1, [sp]
   de710:	f7ff bbf0 	b.w	ddef4 <__ieee754_pow+0x9c>
   de714:	ed9f 7b20 	vldr	d7, [pc, #128]	; de798 <__ieee754_pow+0x940>
   de718:	eeb0 9a47 	vmov.f32	s18, s14
   de71c:	eef0 9a67 	vmov.f32	s19, s15
   de720:	e686      	b.n	de430 <__ieee754_pow+0x5d8>
   de722:	f1bb 0f00 	cmp.w	fp, #0
   de726:	daca      	bge.n	de6be <__ieee754_pow+0x866>
   de728:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   de72c:	9600      	str	r6, [sp, #0]
   de72e:	9301      	str	r3, [sp, #4]
   de730:	f7ff bbe0 	b.w	ddef4 <__ieee754_pow+0x9c>
   de734:	f3af 8000 	nop.w
   de738:	00000000 	.word	0x00000000
   de73c:	bff00000 	.word	0xbff00000
   de740:	652b82fe 	.word	0x652b82fe
   de744:	3c971547 	.word	0x3c971547
   de748:	00000000 	.word	0x00000000
   de74c:	3fe62e43 	.word	0x3fe62e43
   de750:	fefa39ef 	.word	0xfefa39ef
   de754:	3fe62e42 	.word	0x3fe62e42
   de758:	0ca86c39 	.word	0x0ca86c39
   de75c:	be205c61 	.word	0xbe205c61
   de760:	72bea4d0 	.word	0x72bea4d0
   de764:	3e663769 	.word	0x3e663769
   de768:	c5d26bf1 	.word	0xc5d26bf1
   de76c:	3ebbbd41 	.word	0x3ebbbd41
   de770:	af25de2c 	.word	0xaf25de2c
   de774:	3f11566a 	.word	0x3f11566a
   de778:	16bebd93 	.word	0x16bebd93
   de77c:	3f66c16c 	.word	0x3f66c16c
   de780:	5555553e 	.word	0x5555553e
   de784:	3fc55555 	.word	0x3fc55555
	...
   de790:	c2f8f359 	.word	0xc2f8f359
   de794:	01a56e1f 	.word	0x01a56e1f
   de798:	00000000 	.word	0x00000000
   de79c:	3ff00000 	.word	0x3ff00000
   de7a0:	408fffff 	.word	0x408fffff
   de7a4:	000fffff 	.word	0x000fffff
   de7a8:	3ff00000 	.word	0x3ff00000
   de7ac:	3f6f3400 	.word	0x3f6f3400
   de7b0:	4090cbff 	.word	0x4090cbff
   de7b4:	4598      	cmp	r8, r3
   de7b6:	f6ff af7e 	blt.w	de6b6 <__ieee754_pow+0x85e>
   de7ba:	4b91      	ldr	r3, [pc, #580]	; (dea00 <__ieee754_pow+0xba8>)
   de7bc:	4598      	cmp	r8, r3
   de7be:	f73f ac0f 	bgt.w	ddfe0 <__ieee754_pow+0x188>
   de7c2:	4b8f      	ldr	r3, [pc, #572]	; (dea00 <__ieee754_pow+0xba8>)
   de7c4:	2200      	movs	r2, #0
   de7c6:	e9dd 0100 	ldrd	r0, r1, [sp]
   de7ca:	f000 fb33 	bl	dee34 <__aeabi_dsub>
   de7ce:	a378      	add	r3, pc, #480	; (adr r3, de9b0 <__ieee754_pow+0xb58>)
   de7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   de7d4:	4604      	mov	r4, r0
   de7d6:	460d      	mov	r5, r1
   de7d8:	f000 fce4 	bl	df1a4 <__aeabi_dmul>
   de7dc:	a376      	add	r3, pc, #472	; (adr r3, de9b8 <__ieee754_pow+0xb60>)
   de7de:	e9d3 2300 	ldrd	r2, r3, [r3]
   de7e2:	4682      	mov	sl, r0
   de7e4:	468b      	mov	fp, r1
   de7e6:	4620      	mov	r0, r4
   de7e8:	4629      	mov	r1, r5
   de7ea:	f000 fcdb 	bl	df1a4 <__aeabi_dmul>
   de7ee:	4b85      	ldr	r3, [pc, #532]	; (dea04 <__ieee754_pow+0xbac>)
   de7f0:	4680      	mov	r8, r0
   de7f2:	4689      	mov	r9, r1
   de7f4:	2200      	movs	r2, #0
   de7f6:	4620      	mov	r0, r4
   de7f8:	4629      	mov	r1, r5
   de7fa:	f000 fcd3 	bl	df1a4 <__aeabi_dmul>
   de7fe:	4602      	mov	r2, r0
   de800:	460b      	mov	r3, r1
   de802:	a16f      	add	r1, pc, #444	; (adr r1, de9c0 <__ieee754_pow+0xb68>)
   de804:	e9d1 0100 	ldrd	r0, r1, [r1]
   de808:	f000 fb14 	bl	dee34 <__aeabi_dsub>
   de80c:	4622      	mov	r2, r4
   de80e:	462b      	mov	r3, r5
   de810:	f000 fcc8 	bl	df1a4 <__aeabi_dmul>
   de814:	4602      	mov	r2, r0
   de816:	460b      	mov	r3, r1
   de818:	2000      	movs	r0, #0
   de81a:	497b      	ldr	r1, [pc, #492]	; (dea08 <__ieee754_pow+0xbb0>)
   de81c:	f000 fb0a 	bl	dee34 <__aeabi_dsub>
   de820:	4622      	mov	r2, r4
   de822:	462b      	mov	r3, r5
   de824:	4604      	mov	r4, r0
   de826:	460d      	mov	r5, r1
   de828:	4610      	mov	r0, r2
   de82a:	4619      	mov	r1, r3
   de82c:	f000 fcba 	bl	df1a4 <__aeabi_dmul>
   de830:	4602      	mov	r2, r0
   de832:	460b      	mov	r3, r1
   de834:	4620      	mov	r0, r4
   de836:	4629      	mov	r1, r5
   de838:	f000 fcb4 	bl	df1a4 <__aeabi_dmul>
   de83c:	a362      	add	r3, pc, #392	; (adr r3, de9c8 <__ieee754_pow+0xb70>)
   de83e:	e9d3 2300 	ldrd	r2, r3, [r3]
   de842:	f000 fcaf 	bl	df1a4 <__aeabi_dmul>
   de846:	4602      	mov	r2, r0
   de848:	460b      	mov	r3, r1
   de84a:	4640      	mov	r0, r8
   de84c:	4649      	mov	r1, r9
   de84e:	f000 faf1 	bl	dee34 <__aeabi_dsub>
   de852:	4680      	mov	r8, r0
   de854:	4689      	mov	r9, r1
   de856:	4650      	mov	r0, sl
   de858:	4659      	mov	r1, fp
   de85a:	4642      	mov	r2, r8
   de85c:	464b      	mov	r3, r9
   de85e:	f000 faeb 	bl	dee38 <__adddf3>
   de862:	2400      	movs	r4, #0
   de864:	4652      	mov	r2, sl
   de866:	465b      	mov	r3, fp
   de868:	4620      	mov	r0, r4
   de86a:	460d      	mov	r5, r1
   de86c:	f000 fae2 	bl	dee34 <__aeabi_dsub>
   de870:	4602      	mov	r2, r0
   de872:	460b      	mov	r3, r1
   de874:	4640      	mov	r0, r8
   de876:	4649      	mov	r1, r9
   de878:	f000 fadc 	bl	dee34 <__aeabi_dsub>
   de87c:	4682      	mov	sl, r0
   de87e:	468b      	mov	fp, r1
   de880:	e5ca      	b.n	de418 <__ieee754_pow+0x5c0>
   de882:	ed9f 7b53 	vldr	d7, [pc, #332]	; de9d0 <__ieee754_pow+0xb78>
   de886:	eeb0 ba47 	vmov.f32	s22, s14
   de88a:	eef0 ba67 	vmov.f32	s23, s15
   de88e:	eeb0 ca47 	vmov.f32	s24, s14
   de892:	eef0 ca67 	vmov.f32	s25, s15
   de896:	ed9f 7b50 	vldr	d7, [pc, #320]	; de9d8 <__ieee754_pow+0xb80>
   de89a:	f04f 0900 	mov.w	r9, #0
   de89e:	ec54 3b17 	vmov	r3, r4, d7
   de8a2:	e41d      	b.n	de0e0 <__ieee754_pow+0x288>
   de8a4:	2000      	movs	r0, #0
   de8a6:	f7ff bbf3 	b.w	de090 <__ieee754_pow+0x238>
   de8aa:	4955      	ldr	r1, [pc, #340]	; (dea00 <__ieee754_pow+0xba8>)
   de8ac:	4622      	mov	r2, r4
   de8ae:	462b      	mov	r3, r5
   de8b0:	2000      	movs	r0, #0
   de8b2:	f000 fda1 	bl	df3f8 <__aeabi_ddiv>
   de8b6:	e9cd 0100 	strd	r0, r1, [sp]
   de8ba:	f7ff bb1b 	b.w	ddef4 <__ieee754_pow+0x9c>
   de8be:	4622      	mov	r2, r4
   de8c0:	462b      	mov	r3, r5
   de8c2:	4620      	mov	r0, r4
   de8c4:	4629      	mov	r1, r5
   de8c6:	f000 fc6d 	bl	df1a4 <__aeabi_dmul>
   de8ca:	e9cd 0100 	strd	r0, r1, [sp]
   de8ce:	f7ff bb11 	b.w	ddef4 <__ieee754_pow+0x9c>
   de8d2:	2b00      	cmp	r3, #0
   de8d4:	d142      	bne.n	de95c <__ieee754_pow+0xb04>
   de8d6:	f1c1 0114 	rsb	r1, r1, #20
   de8da:	fa4a f001 	asr.w	r0, sl, r1
   de8de:	fa00 f101 	lsl.w	r1, r0, r1
   de8e2:	4551      	cmp	r1, sl
   de8e4:	d05a      	beq.n	de99c <__ieee754_pow+0xb44>
   de8e6:	9303      	str	r3, [sp, #12]
   de8e8:	f7ff bae0 	b.w	ddeac <__ieee754_pow+0x54>
   de8ec:	4a46      	ldr	r2, [pc, #280]	; (dea08 <__ieee754_pow+0xbb0>)
   de8ee:	4293      	cmp	r3, r2
   de8f0:	dc5b      	bgt.n	de9aa <__ieee754_pow+0xb52>
   de8f2:	e9dd 1200 	ldrd	r1, r2, [sp]
   de8f6:	9100      	str	r1, [sp, #0]
   de8f8:	9103      	str	r1, [sp, #12]
   de8fa:	e622      	b.n	de542 <__ieee754_pow+0x6ea>
   de8fc:	a338      	add	r3, pc, #224	; (adr r3, de9e0 <__ieee754_pow+0xb88>)
   de8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   de902:	ec51 0b19 	vmov	r0, r1, d9
   de906:	f000 fc4d 	bl	df1a4 <__aeabi_dmul>
   de90a:	a335      	add	r3, pc, #212	; (adr r3, de9e0 <__ieee754_pow+0xb88>)
   de90c:	e9d3 2300 	ldrd	r2, r3, [r3]
   de910:	f000 fc48 	bl	df1a4 <__aeabi_dmul>
   de914:	e9cd 0100 	strd	r0, r1, [sp]
   de918:	f7ff baec 	b.w	ddef4 <__ieee754_pow+0x9c>
   de91c:	9b03      	ldr	r3, [sp, #12]
   de91e:	2b01      	cmp	r3, #1
   de920:	f47f aae8 	bne.w	ddef4 <__ieee754_pow+0x9c>
   de924:	e9dd 2100 	ldrd	r2, r1, [sp]
   de928:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   de92c:	e9cd 2300 	strd	r2, r3, [sp]
   de930:	f7ff bae0 	b.w	ddef4 <__ieee754_pow+0x9c>
   de934:	ed9f 7b2c 	vldr	d7, [pc, #176]	; de9e8 <__ieee754_pow+0xb90>
   de938:	eeb0 ba47 	vmov.f32	s22, s14
   de93c:	eef0 ba67 	vmov.f32	s23, s15
   de940:	ed9f 7b2b 	vldr	d7, [pc, #172]	; de9f0 <__ieee754_pow+0xb98>
   de944:	eeb0 ca47 	vmov.f32	s24, s14
   de948:	eef0 ca67 	vmov.f32	s25, s15
   de94c:	ed9f 7b2a 	vldr	d7, [pc, #168]	; de9f8 <__ieee754_pow+0xba0>
   de950:	f44f 2980 	mov.w	r9, #262144	; 0x40000
   de954:	ec54 3b17 	vmov	r3, r4, d7
   de958:	f7ff bbc2 	b.w	de0e0 <__ieee754_pow+0x288>
   de95c:	ec45 4b10 	vmov	d0, r4, r5
   de960:	9203      	str	r2, [sp, #12]
   de962:	f000 f91b 	bl	deb9c <fabs>
   de966:	9a03      	ldr	r2, [sp, #12]
   de968:	ed8d 0b00 	vstr	d0, [sp]
   de96c:	2a00      	cmp	r2, #0
   de96e:	f47f ab61 	bne.w	de034 <__ieee754_pow+0x1dc>
   de972:	9203      	str	r2, [sp, #12]
   de974:	f7ff baf5 	b.w	ddf62 <__ieee754_pow+0x10a>
   de978:	9803      	ldr	r0, [sp, #12]
   de97a:	ec43 2b10 	vmov	d0, r2, r3
   de97e:	f000 f9c3 	bl	ded08 <scalbn>
   de982:	ec51 0b10 	vmov	r0, r1, d0
   de986:	e68f      	b.n	de6a8 <__ieee754_pow+0x850>
   de988:	f000 0001 	and.w	r0, r0, #1
   de98c:	f1c0 0102 	rsb	r1, r0, #2
   de990:	9103      	str	r1, [sp, #12]
   de992:	2b00      	cmp	r3, #0
   de994:	f43f aa8a 	beq.w	ddeac <__ieee754_pow+0x54>
   de998:	f7ff bada 	b.w	ddf50 <__ieee754_pow+0xf8>
   de99c:	f000 0001 	and.w	r0, r0, #1
   de9a0:	f1c0 0302 	rsb	r3, r0, #2
   de9a4:	9303      	str	r3, [sp, #12]
   de9a6:	f7ff ba81 	b.w	ddeac <__ieee754_pow+0x54>
   de9aa:	151b      	asrs	r3, r3, #20
   de9ac:	e596      	b.n	de4dc <__ieee754_pow+0x684>
   de9ae:	bf00      	nop
   de9b0:	60000000 	.word	0x60000000
   de9b4:	3ff71547 	.word	0x3ff71547
   de9b8:	f85ddf44 	.word	0xf85ddf44
   de9bc:	3e54ae0b 	.word	0x3e54ae0b
   de9c0:	55555555 	.word	0x55555555
   de9c4:	3fd55555 	.word	0x3fd55555
   de9c8:	652b82fe 	.word	0x652b82fe
   de9cc:	3ff71547 	.word	0x3ff71547
	...
   de9dc:	3ff00000 	.word	0x3ff00000
   de9e0:	8800759c 	.word	0x8800759c
   de9e4:	7e37e43c 	.word	0x7e37e43c
   de9e8:	40000000 	.word	0x40000000
   de9ec:	3fe2b803 	.word	0x3fe2b803
   de9f0:	43cfd006 	.word	0x43cfd006
   de9f4:	3e4cfdeb 	.word	0x3e4cfdeb
   de9f8:	00000000 	.word	0x00000000
   de9fc:	3ff80000 	.word	0x3ff80000
   dea00:	3ff00000 	.word	0x3ff00000
   dea04:	3fd00000 	.word	0x3fd00000
   dea08:	3fe00000 	.word	0x3fe00000

000dea0c <__ieee754_sqrt>:
   dea0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dea10:	4a5f      	ldr	r2, [pc, #380]	; (deb90 <__ieee754_sqrt+0x184>)
   dea12:	ec57 6b10 	vmov	r6, r7, d0
   dea16:	43ba      	bics	r2, r7
   dea18:	f000 8098 	beq.w	deb4c <__ieee754_sqrt+0x140>
   dea1c:	2f00      	cmp	r7, #0
   dea1e:	ee10 4a10 	vmov	r4, s0
   dea22:	463b      	mov	r3, r7
   dea24:	dd4e      	ble.n	deac4 <__ieee754_sqrt+0xb8>
   dea26:	1539      	asrs	r1, r7, #20
   dea28:	d05b      	beq.n	deae2 <__ieee754_sqrt+0xd6>
   dea2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   dea2e:	07ca      	lsls	r2, r1, #31
   dea30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dea34:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   dea38:	d403      	bmi.n	dea42 <__ieee754_sqrt+0x36>
   dea3a:	005b      	lsls	r3, r3, #1
   dea3c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   dea40:	0064      	lsls	r4, r4, #1
   dea42:	0fe2      	lsrs	r2, r4, #31
   dea44:	f04f 0c00 	mov.w	ip, #0
   dea48:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   dea4c:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   dea50:	0064      	lsls	r4, r4, #1
   dea52:	4666      	mov	r6, ip
   dea54:	2516      	movs	r5, #22
   dea56:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   dea5a:	18b1      	adds	r1, r6, r2
   dea5c:	4299      	cmp	r1, r3
   dea5e:	dc02      	bgt.n	dea66 <__ieee754_sqrt+0x5a>
   dea60:	1a5b      	subs	r3, r3, r1
   dea62:	188e      	adds	r6, r1, r2
   dea64:	4494      	add	ip, r2
   dea66:	005b      	lsls	r3, r3, #1
   dea68:	3d01      	subs	r5, #1
   dea6a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   dea6e:	ea4f 0252 	mov.w	r2, r2, lsr #1
   dea72:	ea4f 0444 	mov.w	r4, r4, lsl #1
   dea76:	d1f0      	bne.n	dea5a <__ieee754_sqrt+0x4e>
   dea78:	462f      	mov	r7, r5
   dea7a:	2020      	movs	r0, #32
   dea7c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   dea80:	e009      	b.n	dea96 <__ieee754_sqrt+0x8a>
   dea82:	d03e      	beq.n	deb02 <__ieee754_sqrt+0xf6>
   dea84:	0fe1      	lsrs	r1, r4, #31
   dea86:	3801      	subs	r0, #1
   dea88:	ea4f 0252 	mov.w	r2, r2, lsr #1
   dea8c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   dea90:	ea4f 0444 	mov.w	r4, r4, lsl #1
   dea94:	d03e      	beq.n	deb14 <__ieee754_sqrt+0x108>
   dea96:	42b3      	cmp	r3, r6
   dea98:	eb02 0105 	add.w	r1, r2, r5
   dea9c:	ddf1      	ble.n	dea82 <__ieee754_sqrt+0x76>
   dea9e:	2900      	cmp	r1, #0
   deaa0:	eb01 0502 	add.w	r5, r1, r2
   deaa4:	db09      	blt.n	deaba <__ieee754_sqrt+0xae>
   deaa6:	46b0      	mov	r8, r6
   deaa8:	1b9b      	subs	r3, r3, r6
   deaaa:	42a1      	cmp	r1, r4
   deaac:	bf88      	it	hi
   deaae:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   deab2:	1a64      	subs	r4, r4, r1
   deab4:	4417      	add	r7, r2
   deab6:	4646      	mov	r6, r8
   deab8:	e7e4      	b.n	dea84 <__ieee754_sqrt+0x78>
   deaba:	2d00      	cmp	r5, #0
   deabc:	dbf3      	blt.n	deaa6 <__ieee754_sqrt+0x9a>
   deabe:	f106 0801 	add.w	r8, r6, #1
   deac2:	e7f1      	b.n	deaa8 <__ieee754_sqrt+0x9c>
   deac4:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   deac8:	4332      	orrs	r2, r6
   deaca:	d036      	beq.n	deb3a <__ieee754_sqrt+0x12e>
   deacc:	2f00      	cmp	r7, #0
   deace:	d14d      	bne.n	deb6c <__ieee754_sqrt+0x160>
   dead0:	4639      	mov	r1, r7
   dead2:	0ae2      	lsrs	r2, r4, #11
   dead4:	3915      	subs	r1, #21
   dead6:	0564      	lsls	r4, r4, #21
   dead8:	4613      	mov	r3, r2
   deada:	2a00      	cmp	r2, #0
   deadc:	d0f9      	beq.n	dead2 <__ieee754_sqrt+0xc6>
   deade:	02d7      	lsls	r7, r2, #11
   deae0:	d451      	bmi.n	deb86 <__ieee754_sqrt+0x17a>
   deae2:	2000      	movs	r0, #0
   deae4:	005b      	lsls	r3, r3, #1
   deae6:	02de      	lsls	r6, r3, #11
   deae8:	4605      	mov	r5, r0
   deaea:	f100 0001 	add.w	r0, r0, #1
   deaee:	d5f9      	bpl.n	deae4 <__ieee754_sqrt+0xd8>
   deaf0:	461a      	mov	r2, r3
   deaf2:	4623      	mov	r3, r4
   deaf4:	4084      	lsls	r4, r0
   deaf6:	f1c0 0020 	rsb	r0, r0, #32
   deafa:	40c3      	lsrs	r3, r0
   deafc:	4313      	orrs	r3, r2
   deafe:	1b49      	subs	r1, r1, r5
   deb00:	e793      	b.n	dea2a <__ieee754_sqrt+0x1e>
   deb02:	42a1      	cmp	r1, r4
   deb04:	d8be      	bhi.n	dea84 <__ieee754_sqrt+0x78>
   deb06:	2900      	cmp	r1, #0
   deb08:	eb01 0502 	add.w	r5, r1, r2
   deb0c:	dbd5      	blt.n	deaba <__ieee754_sqrt+0xae>
   deb0e:	4698      	mov	r8, r3
   deb10:	2300      	movs	r3, #0
   deb12:	e7ce      	b.n	deab2 <__ieee754_sqrt+0xa6>
   deb14:	4323      	orrs	r3, r4
   deb16:	d112      	bne.n	deb3e <__ieee754_sqrt+0x132>
   deb18:	0878      	lsrs	r0, r7, #1
   deb1a:	ea4f 016c 	mov.w	r1, ip, asr #1
   deb1e:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   deb22:	f01c 0f01 	tst.w	ip, #1
   deb26:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   deb2a:	bf18      	it	ne
   deb2c:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   deb30:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   deb34:	4602      	mov	r2, r0
   deb36:	ec43 2b10 	vmov	d0, r2, r3
   deb3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   deb3e:	1c7b      	adds	r3, r7, #1
   deb40:	bf16      	itet	ne
   deb42:	1c78      	addne	r0, r7, #1
   deb44:	f10c 0c01 	addeq.w	ip, ip, #1
   deb48:	0840      	lsrne	r0, r0, #1
   deb4a:	e7e6      	b.n	deb1a <__ieee754_sqrt+0x10e>
   deb4c:	ee10 2a10 	vmov	r2, s0
   deb50:	ee10 0a10 	vmov	r0, s0
   deb54:	463b      	mov	r3, r7
   deb56:	4639      	mov	r1, r7
   deb58:	f000 fb24 	bl	df1a4 <__aeabi_dmul>
   deb5c:	4632      	mov	r2, r6
   deb5e:	463b      	mov	r3, r7
   deb60:	f000 f96a 	bl	dee38 <__adddf3>
   deb64:	ec41 0b10 	vmov	d0, r0, r1
   deb68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   deb6c:	ee10 2a10 	vmov	r2, s0
   deb70:	4630      	mov	r0, r6
   deb72:	4639      	mov	r1, r7
   deb74:	f000 f95e 	bl	dee34 <__aeabi_dsub>
   deb78:	4602      	mov	r2, r0
   deb7a:	460b      	mov	r3, r1
   deb7c:	f000 fc3c 	bl	df3f8 <__aeabi_ddiv>
   deb80:	ec41 0b10 	vmov	d0, r0, r1
   deb84:	e7d9      	b.n	deb3a <__ieee754_sqrt+0x12e>
   deb86:	4623      	mov	r3, r4
   deb88:	2020      	movs	r0, #32
   deb8a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   deb8e:	e7b4      	b.n	deafa <__ieee754_sqrt+0xee>
   deb90:	7ff00000 	.word	0x7ff00000

000deb94 <__ieee754_sqrtf>:
   deb94:	eeb1 0ac0 	vsqrt.f32	s0, s0
   deb98:	4770      	bx	lr
   deb9a:	bf00      	nop

000deb9c <fabs>:
   deb9c:	ec51 0b10 	vmov	r0, r1, d0
   deba0:	ee10 2a10 	vmov	r2, s0
   deba4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   deba8:	ec43 2b10 	vmov	d0, r2, r3
   debac:	4770      	bx	lr
   debae:	bf00      	nop

000debb0 <finite>:
   debb0:	b082      	sub	sp, #8
   debb2:	ed8d 0b00 	vstr	d0, [sp]
   debb6:	9801      	ldr	r0, [sp, #4]
   debb8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   debbc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   debc0:	0fc0      	lsrs	r0, r0, #31
   debc2:	b002      	add	sp, #8
   debc4:	4770      	bx	lr
   debc6:	bf00      	nop

000debc8 <matherr>:
   debc8:	2000      	movs	r0, #0
   debca:	4770      	bx	lr
   debcc:	0000      	movs	r0, r0
	...

000debd0 <nan>:
   debd0:	ed9f 0b01 	vldr	d0, [pc, #4]	; debd8 <nan+0x8>
   debd4:	4770      	bx	lr
   debd6:	bf00      	nop
   debd8:	00000000 	.word	0x00000000
   debdc:	7ff80000 	.word	0x7ff80000

000debe0 <rint>:
   debe0:	b5f0      	push	{r4, r5, r6, r7, lr}
   debe2:	ec53 2b10 	vmov	r2, r3, d0
   debe6:	f3c3 560a 	ubfx	r6, r3, #20, #11
   debea:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   debee:	2813      	cmp	r0, #19
   debf0:	ee10 5a10 	vmov	r5, s0
   debf4:	b083      	sub	sp, #12
   debf6:	4619      	mov	r1, r3
   debf8:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   debfc:	dc31      	bgt.n	dec62 <rint+0x82>
   debfe:	2800      	cmp	r0, #0
   dec00:	db4c      	blt.n	dec9c <rint+0xbc>
   dec02:	4e3e      	ldr	r6, [pc, #248]	; (decfc <rint+0x11c>)
   dec04:	4106      	asrs	r6, r0
   dec06:	ea03 0706 	and.w	r7, r3, r6
   dec0a:	4317      	orrs	r7, r2
   dec0c:	d02e      	beq.n	dec6c <rint+0x8c>
   dec0e:	ea03 0356 	and.w	r3, r3, r6, lsr #1
   dec12:	431d      	orrs	r5, r3
   dec14:	ea4f 0656 	mov.w	r6, r6, lsr #1
   dec18:	d00c      	beq.n	dec34 <rint+0x54>
   dec1a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   dec1e:	2813      	cmp	r0, #19
   dec20:	ea21 0606 	bic.w	r6, r1, r6
   dec24:	fa43 f100 	asr.w	r1, r3, r0
   dec28:	ea41 0106 	orr.w	r1, r1, r6
   dec2c:	bf0c      	ite	eq
   dec2e:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   dec32:	2500      	movne	r5, #0
   dec34:	4832      	ldr	r0, [pc, #200]	; (ded00 <rint+0x120>)
   dec36:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   dec3a:	462a      	mov	r2, r5
   dec3c:	e9d4 4500 	ldrd	r4, r5, [r4]
   dec40:	460b      	mov	r3, r1
   dec42:	4620      	mov	r0, r4
   dec44:	4629      	mov	r1, r5
   dec46:	f000 f8f7 	bl	dee38 <__adddf3>
   dec4a:	e9cd 0100 	strd	r0, r1, [sp]
   dec4e:	e9dd 0100 	ldrd	r0, r1, [sp]
   dec52:	4622      	mov	r2, r4
   dec54:	462b      	mov	r3, r5
   dec56:	f000 f8ed 	bl	dee34 <__aeabi_dsub>
   dec5a:	ec41 0b10 	vmov	d0, r0, r1
   dec5e:	b003      	add	sp, #12
   dec60:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dec62:	2833      	cmp	r0, #51	; 0x33
   dec64:	dd06      	ble.n	dec74 <rint+0x94>
   dec66:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   dec6a:	d040      	beq.n	decee <rint+0x10e>
   dec6c:	ec43 2b10 	vmov	d0, r2, r3
   dec70:	b003      	add	sp, #12
   dec72:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dec74:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   dec78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dec7c:	40f0      	lsrs	r0, r6
   dec7e:	4202      	tst	r2, r0
   dec80:	d0f4      	beq.n	dec6c <rint+0x8c>
   dec82:	ea15 0250 	ands.w	r2, r5, r0, lsr #1
   dec86:	ea4f 0350 	mov.w	r3, r0, lsr #1
   dec8a:	d0d3      	beq.n	dec34 <rint+0x54>
   dec8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   dec90:	ea25 0503 	bic.w	r5, r5, r3
   dec94:	fa42 f606 	asr.w	r6, r2, r6
   dec98:	4335      	orrs	r5, r6
   dec9a:	e7cb      	b.n	dec34 <rint+0x54>
   dec9c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   deca0:	4310      	orrs	r0, r2
   deca2:	d0e3      	beq.n	dec6c <rint+0x8c>
   deca4:	f3c3 0013 	ubfx	r0, r3, #0, #20
   deca8:	4310      	orrs	r0, r2
   decaa:	4245      	negs	r5, r0
   decac:	4305      	orrs	r5, r0
   decae:	4814      	ldr	r0, [pc, #80]	; (ded00 <rint+0x120>)
   decb0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   decb4:	e9d0 6700 	ldrd	r6, r7, [r0]
   decb8:	0c59      	lsrs	r1, r3, #17
   decba:	0b2d      	lsrs	r5, r5, #12
   decbc:	0449      	lsls	r1, r1, #17
   decbe:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
   decc2:	ea45 0301 	orr.w	r3, r5, r1
   decc6:	4630      	mov	r0, r6
   decc8:	4639      	mov	r1, r7
   decca:	f000 f8b5 	bl	dee38 <__adddf3>
   decce:	e9cd 0100 	strd	r0, r1, [sp]
   decd2:	463b      	mov	r3, r7
   decd4:	e9dd 0100 	ldrd	r0, r1, [sp]
   decd8:	4632      	mov	r2, r6
   decda:	f000 f8ab 	bl	dee34 <__aeabi_dsub>
   decde:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dece2:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   dece6:	ec41 0b10 	vmov	d0, r0, r1
   decea:	b003      	add	sp, #12
   decec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   decee:	ee10 0a10 	vmov	r0, s0
   decf2:	f000 f8a1 	bl	dee38 <__adddf3>
   decf6:	ec41 0b10 	vmov	d0, r0, r1
   decfa:	e7b9      	b.n	dec70 <rint+0x90>
   decfc:	000fffff 	.word	0x000fffff
   ded00:	000e1380 	.word	0x000e1380
   ded04:	00000000 	.word	0x00000000

000ded08 <scalbn>:
   ded08:	b538      	push	{r3, r4, r5, lr}
   ded0a:	ec53 2b10 	vmov	r2, r3, d0
   ded0e:	f3c3 510a 	ubfx	r1, r3, #20, #11
   ded12:	461c      	mov	r4, r3
   ded14:	4605      	mov	r5, r0
   ded16:	bb81      	cbnz	r1, ded7a <scalbn+0x72>
   ded18:	ee10 1a10 	vmov	r1, s0
   ded1c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   ded20:	4321      	orrs	r1, r4
   ded22:	d029      	beq.n	ded78 <scalbn+0x70>
   ded24:	4619      	mov	r1, r3
   ded26:	2200      	movs	r2, #0
   ded28:	4b3d      	ldr	r3, [pc, #244]	; (dee20 <scalbn+0x118>)
   ded2a:	4c3e      	ldr	r4, [pc, #248]	; (dee24 <scalbn+0x11c>)
   ded2c:	ee10 0a10 	vmov	r0, s0
   ded30:	f000 fa38 	bl	df1a4 <__aeabi_dmul>
   ded34:	42a5      	cmp	r5, r4
   ded36:	4602      	mov	r2, r0
   ded38:	460b      	mov	r3, r1
   ded3a:	db16      	blt.n	ded6a <scalbn+0x62>
   ded3c:	460c      	mov	r4, r1
   ded3e:	f3c1 510a 	ubfx	r1, r1, #20, #11
   ded42:	3936      	subs	r1, #54	; 0x36
   ded44:	4429      	add	r1, r5
   ded46:	f240 70fe 	movw	r0, #2046	; 0x7fe
   ded4a:	4281      	cmp	r1, r0
   ded4c:	dc21      	bgt.n	ded92 <scalbn+0x8a>
   ded4e:	2900      	cmp	r1, #0
   ded50:	dc47      	bgt.n	dede2 <scalbn+0xda>
   ded52:	f111 0f35 	cmn.w	r1, #53	; 0x35
   ded56:	da34      	bge.n	dedc2 <scalbn+0xba>
   ded58:	f24c 3150 	movw	r1, #50000	; 0xc350
   ded5c:	428d      	cmp	r5, r1
   ded5e:	dc18      	bgt.n	ded92 <scalbn+0x8a>
   ded60:	2b00      	cmp	r3, #0
   ded62:	a127      	add	r1, pc, #156	; (adr r1, dee00 <scalbn+0xf8>)
   ded64:	e9d1 0100 	ldrd	r0, r1, [r1]
   ded68:	db44      	blt.n	dedf4 <scalbn+0xec>
   ded6a:	a325      	add	r3, pc, #148	; (adr r3, dee00 <scalbn+0xf8>)
   ded6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   ded70:	f000 fa18 	bl	df1a4 <__aeabi_dmul>
   ded74:	ec41 0b10 	vmov	d0, r0, r1
   ded78:	bd38      	pop	{r3, r4, r5, pc}
   ded7a:	f240 70ff 	movw	r0, #2047	; 0x7ff
   ded7e:	4281      	cmp	r1, r0
   ded80:	d1e0      	bne.n	ded44 <scalbn+0x3c>
   ded82:	ee10 0a10 	vmov	r0, s0
   ded86:	4619      	mov	r1, r3
   ded88:	f000 f856 	bl	dee38 <__adddf3>
   ded8c:	ec41 0b10 	vmov	d0, r0, r1
   ded90:	bd38      	pop	{r3, r4, r5, pc}
   ded92:	2b00      	cmp	r3, #0
   ded94:	a11c      	add	r1, pc, #112	; (adr r1, dee08 <scalbn+0x100>)
   ded96:	e9d1 0100 	ldrd	r0, r1, [r1]
   ded9a:	db07      	blt.n	dedac <scalbn+0xa4>
   ded9c:	a31a      	add	r3, pc, #104	; (adr r3, dee08 <scalbn+0x100>)
   ded9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   deda2:	f000 f9ff 	bl	df1a4 <__aeabi_dmul>
   deda6:	ec41 0b10 	vmov	d0, r0, r1
   dedaa:	bd38      	pop	{r3, r4, r5, pc}
   dedac:	a118      	add	r1, pc, #96	; (adr r1, dee10 <scalbn+0x108>)
   dedae:	e9d1 0100 	ldrd	r0, r1, [r1]
   dedb2:	a315      	add	r3, pc, #84	; (adr r3, dee08 <scalbn+0x100>)
   dedb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   dedb8:	f000 f9f4 	bl	df1a4 <__aeabi_dmul>
   dedbc:	ec41 0b10 	vmov	d0, r0, r1
   dedc0:	e7f3      	b.n	dedaa <scalbn+0xa2>
   dedc2:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   dedc6:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   dedca:	3136      	adds	r1, #54	; 0x36
   dedcc:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   dedd0:	4610      	mov	r0, r2
   dedd2:	4619      	mov	r1, r3
   dedd4:	2200      	movs	r2, #0
   dedd6:	4b14      	ldr	r3, [pc, #80]	; (dee28 <scalbn+0x120>)
   dedd8:	f000 f9e4 	bl	df1a4 <__aeabi_dmul>
   deddc:	ec41 0b10 	vmov	d0, r0, r1
   dede0:	bd38      	pop	{r3, r4, r5, pc}
   dede2:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   dede6:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   dedea:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   dedee:	ec43 2b10 	vmov	d0, r2, r3
   dedf2:	bd38      	pop	{r3, r4, r5, pc}
   dedf4:	a108      	add	r1, pc, #32	; (adr r1, dee18 <scalbn+0x110>)
   dedf6:	e9d1 0100 	ldrd	r0, r1, [r1]
   dedfa:	e7b6      	b.n	ded6a <scalbn+0x62>
   dedfc:	f3af 8000 	nop.w
   dee00:	c2f8f359 	.word	0xc2f8f359
   dee04:	01a56e1f 	.word	0x01a56e1f
   dee08:	8800759c 	.word	0x8800759c
   dee0c:	7e37e43c 	.word	0x7e37e43c
   dee10:	8800759c 	.word	0x8800759c
   dee14:	fe37e43c 	.word	0xfe37e43c
   dee18:	c2f8f359 	.word	0xc2f8f359
   dee1c:	81a56e1f 	.word	0x81a56e1f
   dee20:	43500000 	.word	0x43500000
   dee24:	ffff3cb0 	.word	0xffff3cb0
   dee28:	3c900000 	.word	0x3c900000

000dee2c <__aeabi_drsub>:
   dee2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   dee30:	e002      	b.n	dee38 <__adddf3>
   dee32:	bf00      	nop

000dee34 <__aeabi_dsub>:
   dee34:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000dee38 <__adddf3>:
   dee38:	b530      	push	{r4, r5, lr}
   dee3a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   dee3e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   dee42:	ea94 0f05 	teq	r4, r5
   dee46:	bf08      	it	eq
   dee48:	ea90 0f02 	teqeq	r0, r2
   dee4c:	bf1f      	itttt	ne
   dee4e:	ea54 0c00 	orrsne.w	ip, r4, r0
   dee52:	ea55 0c02 	orrsne.w	ip, r5, r2
   dee56:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   dee5a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dee5e:	f000 80e2 	beq.w	df026 <__adddf3+0x1ee>
   dee62:	ea4f 5454 	mov.w	r4, r4, lsr #21
   dee66:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   dee6a:	bfb8      	it	lt
   dee6c:	426d      	neglt	r5, r5
   dee6e:	dd0c      	ble.n	dee8a <__adddf3+0x52>
   dee70:	442c      	add	r4, r5
   dee72:	ea80 0202 	eor.w	r2, r0, r2
   dee76:	ea81 0303 	eor.w	r3, r1, r3
   dee7a:	ea82 0000 	eor.w	r0, r2, r0
   dee7e:	ea83 0101 	eor.w	r1, r3, r1
   dee82:	ea80 0202 	eor.w	r2, r0, r2
   dee86:	ea81 0303 	eor.w	r3, r1, r3
   dee8a:	2d36      	cmp	r5, #54	; 0x36
   dee8c:	bf88      	it	hi
   dee8e:	bd30      	pophi	{r4, r5, pc}
   dee90:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dee94:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dee98:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   dee9c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   deea0:	d002      	beq.n	deea8 <__adddf3+0x70>
   deea2:	4240      	negs	r0, r0
   deea4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   deea8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   deeac:	ea4f 3303 	mov.w	r3, r3, lsl #12
   deeb0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   deeb4:	d002      	beq.n	deebc <__adddf3+0x84>
   deeb6:	4252      	negs	r2, r2
   deeb8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   deebc:	ea94 0f05 	teq	r4, r5
   deec0:	f000 80a7 	beq.w	df012 <__adddf3+0x1da>
   deec4:	f1a4 0401 	sub.w	r4, r4, #1
   deec8:	f1d5 0e20 	rsbs	lr, r5, #32
   deecc:	db0d      	blt.n	deeea <__adddf3+0xb2>
   deece:	fa02 fc0e 	lsl.w	ip, r2, lr
   deed2:	fa22 f205 	lsr.w	r2, r2, r5
   deed6:	1880      	adds	r0, r0, r2
   deed8:	f141 0100 	adc.w	r1, r1, #0
   deedc:	fa03 f20e 	lsl.w	r2, r3, lr
   deee0:	1880      	adds	r0, r0, r2
   deee2:	fa43 f305 	asr.w	r3, r3, r5
   deee6:	4159      	adcs	r1, r3
   deee8:	e00e      	b.n	def08 <__adddf3+0xd0>
   deeea:	f1a5 0520 	sub.w	r5, r5, #32
   deeee:	f10e 0e20 	add.w	lr, lr, #32
   deef2:	2a01      	cmp	r2, #1
   deef4:	fa03 fc0e 	lsl.w	ip, r3, lr
   deef8:	bf28      	it	cs
   deefa:	f04c 0c02 	orrcs.w	ip, ip, #2
   deefe:	fa43 f305 	asr.w	r3, r3, r5
   def02:	18c0      	adds	r0, r0, r3
   def04:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   def08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   def0c:	d507      	bpl.n	def1e <__adddf3+0xe6>
   def0e:	f04f 0e00 	mov.w	lr, #0
   def12:	f1dc 0c00 	rsbs	ip, ip, #0
   def16:	eb7e 0000 	sbcs.w	r0, lr, r0
   def1a:	eb6e 0101 	sbc.w	r1, lr, r1
   def1e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   def22:	d31b      	bcc.n	def5c <__adddf3+0x124>
   def24:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   def28:	d30c      	bcc.n	def44 <__adddf3+0x10c>
   def2a:	0849      	lsrs	r1, r1, #1
   def2c:	ea5f 0030 	movs.w	r0, r0, rrx
   def30:	ea4f 0c3c 	mov.w	ip, ip, rrx
   def34:	f104 0401 	add.w	r4, r4, #1
   def38:	ea4f 5244 	mov.w	r2, r4, lsl #21
   def3c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   def40:	f080 809a 	bcs.w	df078 <__adddf3+0x240>
   def44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   def48:	bf08      	it	eq
   def4a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   def4e:	f150 0000 	adcs.w	r0, r0, #0
   def52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   def56:	ea41 0105 	orr.w	r1, r1, r5
   def5a:	bd30      	pop	{r4, r5, pc}
   def5c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   def60:	4140      	adcs	r0, r0
   def62:	eb41 0101 	adc.w	r1, r1, r1
   def66:	3c01      	subs	r4, #1
   def68:	bf28      	it	cs
   def6a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   def6e:	d2e9      	bcs.n	def44 <__adddf3+0x10c>
   def70:	f091 0f00 	teq	r1, #0
   def74:	bf04      	itt	eq
   def76:	4601      	moveq	r1, r0
   def78:	2000      	moveq	r0, #0
   def7a:	fab1 f381 	clz	r3, r1
   def7e:	bf08      	it	eq
   def80:	3320      	addeq	r3, #32
   def82:	f1a3 030b 	sub.w	r3, r3, #11
   def86:	f1b3 0220 	subs.w	r2, r3, #32
   def8a:	da0c      	bge.n	defa6 <__adddf3+0x16e>
   def8c:	320c      	adds	r2, #12
   def8e:	dd08      	ble.n	defa2 <__adddf3+0x16a>
   def90:	f102 0c14 	add.w	ip, r2, #20
   def94:	f1c2 020c 	rsb	r2, r2, #12
   def98:	fa01 f00c 	lsl.w	r0, r1, ip
   def9c:	fa21 f102 	lsr.w	r1, r1, r2
   defa0:	e00c      	b.n	defbc <__adddf3+0x184>
   defa2:	f102 0214 	add.w	r2, r2, #20
   defa6:	bfd8      	it	le
   defa8:	f1c2 0c20 	rsble	ip, r2, #32
   defac:	fa01 f102 	lsl.w	r1, r1, r2
   defb0:	fa20 fc0c 	lsr.w	ip, r0, ip
   defb4:	bfdc      	itt	le
   defb6:	ea41 010c 	orrle.w	r1, r1, ip
   defba:	4090      	lslle	r0, r2
   defbc:	1ae4      	subs	r4, r4, r3
   defbe:	bfa2      	ittt	ge
   defc0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   defc4:	4329      	orrge	r1, r5
   defc6:	bd30      	popge	{r4, r5, pc}
   defc8:	ea6f 0404 	mvn.w	r4, r4
   defcc:	3c1f      	subs	r4, #31
   defce:	da1c      	bge.n	df00a <__adddf3+0x1d2>
   defd0:	340c      	adds	r4, #12
   defd2:	dc0e      	bgt.n	deff2 <__adddf3+0x1ba>
   defd4:	f104 0414 	add.w	r4, r4, #20
   defd8:	f1c4 0220 	rsb	r2, r4, #32
   defdc:	fa20 f004 	lsr.w	r0, r0, r4
   defe0:	fa01 f302 	lsl.w	r3, r1, r2
   defe4:	ea40 0003 	orr.w	r0, r0, r3
   defe8:	fa21 f304 	lsr.w	r3, r1, r4
   defec:	ea45 0103 	orr.w	r1, r5, r3
   deff0:	bd30      	pop	{r4, r5, pc}
   deff2:	f1c4 040c 	rsb	r4, r4, #12
   deff6:	f1c4 0220 	rsb	r2, r4, #32
   deffa:	fa20 f002 	lsr.w	r0, r0, r2
   deffe:	fa01 f304 	lsl.w	r3, r1, r4
   df002:	ea40 0003 	orr.w	r0, r0, r3
   df006:	4629      	mov	r1, r5
   df008:	bd30      	pop	{r4, r5, pc}
   df00a:	fa21 f004 	lsr.w	r0, r1, r4
   df00e:	4629      	mov	r1, r5
   df010:	bd30      	pop	{r4, r5, pc}
   df012:	f094 0f00 	teq	r4, #0
   df016:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   df01a:	bf06      	itte	eq
   df01c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   df020:	3401      	addeq	r4, #1
   df022:	3d01      	subne	r5, #1
   df024:	e74e      	b.n	deec4 <__adddf3+0x8c>
   df026:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   df02a:	bf18      	it	ne
   df02c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   df030:	d029      	beq.n	df086 <__adddf3+0x24e>
   df032:	ea94 0f05 	teq	r4, r5
   df036:	bf08      	it	eq
   df038:	ea90 0f02 	teqeq	r0, r2
   df03c:	d005      	beq.n	df04a <__adddf3+0x212>
   df03e:	ea54 0c00 	orrs.w	ip, r4, r0
   df042:	bf04      	itt	eq
   df044:	4619      	moveq	r1, r3
   df046:	4610      	moveq	r0, r2
   df048:	bd30      	pop	{r4, r5, pc}
   df04a:	ea91 0f03 	teq	r1, r3
   df04e:	bf1e      	ittt	ne
   df050:	2100      	movne	r1, #0
   df052:	2000      	movne	r0, #0
   df054:	bd30      	popne	{r4, r5, pc}
   df056:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   df05a:	d105      	bne.n	df068 <__adddf3+0x230>
   df05c:	0040      	lsls	r0, r0, #1
   df05e:	4149      	adcs	r1, r1
   df060:	bf28      	it	cs
   df062:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   df066:	bd30      	pop	{r4, r5, pc}
   df068:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   df06c:	bf3c      	itt	cc
   df06e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   df072:	bd30      	popcc	{r4, r5, pc}
   df074:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   df078:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   df07c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   df080:	f04f 0000 	mov.w	r0, #0
   df084:	bd30      	pop	{r4, r5, pc}
   df086:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   df08a:	bf1a      	itte	ne
   df08c:	4619      	movne	r1, r3
   df08e:	4610      	movne	r0, r2
   df090:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   df094:	bf1c      	itt	ne
   df096:	460b      	movne	r3, r1
   df098:	4602      	movne	r2, r0
   df09a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   df09e:	bf06      	itte	eq
   df0a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   df0a4:	ea91 0f03 	teqeq	r1, r3
   df0a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   df0ac:	bd30      	pop	{r4, r5, pc}
   df0ae:	bf00      	nop

000df0b0 <__aeabi_ui2d>:
   df0b0:	f090 0f00 	teq	r0, #0
   df0b4:	bf04      	itt	eq
   df0b6:	2100      	moveq	r1, #0
   df0b8:	4770      	bxeq	lr
   df0ba:	b530      	push	{r4, r5, lr}
   df0bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   df0c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   df0c4:	f04f 0500 	mov.w	r5, #0
   df0c8:	f04f 0100 	mov.w	r1, #0
   df0cc:	e750      	b.n	def70 <__adddf3+0x138>
   df0ce:	bf00      	nop

000df0d0 <__aeabi_i2d>:
   df0d0:	f090 0f00 	teq	r0, #0
   df0d4:	bf04      	itt	eq
   df0d6:	2100      	moveq	r1, #0
   df0d8:	4770      	bxeq	lr
   df0da:	b530      	push	{r4, r5, lr}
   df0dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   df0e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   df0e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   df0e8:	bf48      	it	mi
   df0ea:	4240      	negmi	r0, r0
   df0ec:	f04f 0100 	mov.w	r1, #0
   df0f0:	e73e      	b.n	def70 <__adddf3+0x138>
   df0f2:	bf00      	nop

000df0f4 <__aeabi_f2d>:
   df0f4:	0042      	lsls	r2, r0, #1
   df0f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   df0fa:	ea4f 0131 	mov.w	r1, r1, rrx
   df0fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
   df102:	bf1f      	itttt	ne
   df104:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   df108:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   df10c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   df110:	4770      	bxne	lr
   df112:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   df116:	bf08      	it	eq
   df118:	4770      	bxeq	lr
   df11a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   df11e:	bf04      	itt	eq
   df120:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   df124:	4770      	bxeq	lr
   df126:	b530      	push	{r4, r5, lr}
   df128:	f44f 7460 	mov.w	r4, #896	; 0x380
   df12c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   df130:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   df134:	e71c      	b.n	def70 <__adddf3+0x138>
   df136:	bf00      	nop

000df138 <__aeabi_ul2d>:
   df138:	ea50 0201 	orrs.w	r2, r0, r1
   df13c:	bf08      	it	eq
   df13e:	4770      	bxeq	lr
   df140:	b530      	push	{r4, r5, lr}
   df142:	f04f 0500 	mov.w	r5, #0
   df146:	e00a      	b.n	df15e <__aeabi_l2d+0x16>

000df148 <__aeabi_l2d>:
   df148:	ea50 0201 	orrs.w	r2, r0, r1
   df14c:	bf08      	it	eq
   df14e:	4770      	bxeq	lr
   df150:	b530      	push	{r4, r5, lr}
   df152:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   df156:	d502      	bpl.n	df15e <__aeabi_l2d+0x16>
   df158:	4240      	negs	r0, r0
   df15a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   df15e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   df162:	f104 0432 	add.w	r4, r4, #50	; 0x32
   df166:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   df16a:	f43f aed8 	beq.w	def1e <__adddf3+0xe6>
   df16e:	f04f 0203 	mov.w	r2, #3
   df172:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   df176:	bf18      	it	ne
   df178:	3203      	addne	r2, #3
   df17a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   df17e:	bf18      	it	ne
   df180:	3203      	addne	r2, #3
   df182:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   df186:	f1c2 0320 	rsb	r3, r2, #32
   df18a:	fa00 fc03 	lsl.w	ip, r0, r3
   df18e:	fa20 f002 	lsr.w	r0, r0, r2
   df192:	fa01 fe03 	lsl.w	lr, r1, r3
   df196:	ea40 000e 	orr.w	r0, r0, lr
   df19a:	fa21 f102 	lsr.w	r1, r1, r2
   df19e:	4414      	add	r4, r2
   df1a0:	e6bd      	b.n	def1e <__adddf3+0xe6>
   df1a2:	bf00      	nop

000df1a4 <__aeabi_dmul>:
   df1a4:	b570      	push	{r4, r5, r6, lr}
   df1a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   df1aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   df1ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   df1b2:	bf1d      	ittte	ne
   df1b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   df1b8:	ea94 0f0c 	teqne	r4, ip
   df1bc:	ea95 0f0c 	teqne	r5, ip
   df1c0:	f000 f8de 	bleq	df380 <__aeabi_dmul+0x1dc>
   df1c4:	442c      	add	r4, r5
   df1c6:	ea81 0603 	eor.w	r6, r1, r3
   df1ca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   df1ce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   df1d2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   df1d6:	bf18      	it	ne
   df1d8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   df1dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   df1e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   df1e4:	d038      	beq.n	df258 <__aeabi_dmul+0xb4>
   df1e6:	fba0 ce02 	umull	ip, lr, r0, r2
   df1ea:	f04f 0500 	mov.w	r5, #0
   df1ee:	fbe1 e502 	umlal	lr, r5, r1, r2
   df1f2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   df1f6:	fbe0 e503 	umlal	lr, r5, r0, r3
   df1fa:	f04f 0600 	mov.w	r6, #0
   df1fe:	fbe1 5603 	umlal	r5, r6, r1, r3
   df202:	f09c 0f00 	teq	ip, #0
   df206:	bf18      	it	ne
   df208:	f04e 0e01 	orrne.w	lr, lr, #1
   df20c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   df210:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   df214:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   df218:	d204      	bcs.n	df224 <__aeabi_dmul+0x80>
   df21a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   df21e:	416d      	adcs	r5, r5
   df220:	eb46 0606 	adc.w	r6, r6, r6
   df224:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   df228:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   df22c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   df230:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   df234:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   df238:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   df23c:	bf88      	it	hi
   df23e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   df242:	d81e      	bhi.n	df282 <__aeabi_dmul+0xde>
   df244:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   df248:	bf08      	it	eq
   df24a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   df24e:	f150 0000 	adcs.w	r0, r0, #0
   df252:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   df256:	bd70      	pop	{r4, r5, r6, pc}
   df258:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   df25c:	ea46 0101 	orr.w	r1, r6, r1
   df260:	ea40 0002 	orr.w	r0, r0, r2
   df264:	ea81 0103 	eor.w	r1, r1, r3
   df268:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   df26c:	bfc2      	ittt	gt
   df26e:	ebd4 050c 	rsbsgt	r5, r4, ip
   df272:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   df276:	bd70      	popgt	{r4, r5, r6, pc}
   df278:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   df27c:	f04f 0e00 	mov.w	lr, #0
   df280:	3c01      	subs	r4, #1
   df282:	f300 80ab 	bgt.w	df3dc <__aeabi_dmul+0x238>
   df286:	f114 0f36 	cmn.w	r4, #54	; 0x36
   df28a:	bfde      	ittt	le
   df28c:	2000      	movle	r0, #0
   df28e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   df292:	bd70      	pople	{r4, r5, r6, pc}
   df294:	f1c4 0400 	rsb	r4, r4, #0
   df298:	3c20      	subs	r4, #32
   df29a:	da35      	bge.n	df308 <__aeabi_dmul+0x164>
   df29c:	340c      	adds	r4, #12
   df29e:	dc1b      	bgt.n	df2d8 <__aeabi_dmul+0x134>
   df2a0:	f104 0414 	add.w	r4, r4, #20
   df2a4:	f1c4 0520 	rsb	r5, r4, #32
   df2a8:	fa00 f305 	lsl.w	r3, r0, r5
   df2ac:	fa20 f004 	lsr.w	r0, r0, r4
   df2b0:	fa01 f205 	lsl.w	r2, r1, r5
   df2b4:	ea40 0002 	orr.w	r0, r0, r2
   df2b8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   df2bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   df2c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   df2c4:	fa21 f604 	lsr.w	r6, r1, r4
   df2c8:	eb42 0106 	adc.w	r1, r2, r6
   df2cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   df2d0:	bf08      	it	eq
   df2d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   df2d6:	bd70      	pop	{r4, r5, r6, pc}
   df2d8:	f1c4 040c 	rsb	r4, r4, #12
   df2dc:	f1c4 0520 	rsb	r5, r4, #32
   df2e0:	fa00 f304 	lsl.w	r3, r0, r4
   df2e4:	fa20 f005 	lsr.w	r0, r0, r5
   df2e8:	fa01 f204 	lsl.w	r2, r1, r4
   df2ec:	ea40 0002 	orr.w	r0, r0, r2
   df2f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   df2f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   df2f8:	f141 0100 	adc.w	r1, r1, #0
   df2fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   df300:	bf08      	it	eq
   df302:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   df306:	bd70      	pop	{r4, r5, r6, pc}
   df308:	f1c4 0520 	rsb	r5, r4, #32
   df30c:	fa00 f205 	lsl.w	r2, r0, r5
   df310:	ea4e 0e02 	orr.w	lr, lr, r2
   df314:	fa20 f304 	lsr.w	r3, r0, r4
   df318:	fa01 f205 	lsl.w	r2, r1, r5
   df31c:	ea43 0302 	orr.w	r3, r3, r2
   df320:	fa21 f004 	lsr.w	r0, r1, r4
   df324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   df328:	fa21 f204 	lsr.w	r2, r1, r4
   df32c:	ea20 0002 	bic.w	r0, r0, r2
   df330:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   df334:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   df338:	bf08      	it	eq
   df33a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   df33e:	bd70      	pop	{r4, r5, r6, pc}
   df340:	f094 0f00 	teq	r4, #0
   df344:	d10f      	bne.n	df366 <__aeabi_dmul+0x1c2>
   df346:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   df34a:	0040      	lsls	r0, r0, #1
   df34c:	eb41 0101 	adc.w	r1, r1, r1
   df350:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   df354:	bf08      	it	eq
   df356:	3c01      	subeq	r4, #1
   df358:	d0f7      	beq.n	df34a <__aeabi_dmul+0x1a6>
   df35a:	ea41 0106 	orr.w	r1, r1, r6
   df35e:	f095 0f00 	teq	r5, #0
   df362:	bf18      	it	ne
   df364:	4770      	bxne	lr
   df366:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   df36a:	0052      	lsls	r2, r2, #1
   df36c:	eb43 0303 	adc.w	r3, r3, r3
   df370:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   df374:	bf08      	it	eq
   df376:	3d01      	subeq	r5, #1
   df378:	d0f7      	beq.n	df36a <__aeabi_dmul+0x1c6>
   df37a:	ea43 0306 	orr.w	r3, r3, r6
   df37e:	4770      	bx	lr
   df380:	ea94 0f0c 	teq	r4, ip
   df384:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   df388:	bf18      	it	ne
   df38a:	ea95 0f0c 	teqne	r5, ip
   df38e:	d00c      	beq.n	df3aa <__aeabi_dmul+0x206>
   df390:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   df394:	bf18      	it	ne
   df396:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   df39a:	d1d1      	bne.n	df340 <__aeabi_dmul+0x19c>
   df39c:	ea81 0103 	eor.w	r1, r1, r3
   df3a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   df3a4:	f04f 0000 	mov.w	r0, #0
   df3a8:	bd70      	pop	{r4, r5, r6, pc}
   df3aa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   df3ae:	bf06      	itte	eq
   df3b0:	4610      	moveq	r0, r2
   df3b2:	4619      	moveq	r1, r3
   df3b4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   df3b8:	d019      	beq.n	df3ee <__aeabi_dmul+0x24a>
   df3ba:	ea94 0f0c 	teq	r4, ip
   df3be:	d102      	bne.n	df3c6 <__aeabi_dmul+0x222>
   df3c0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   df3c4:	d113      	bne.n	df3ee <__aeabi_dmul+0x24a>
   df3c6:	ea95 0f0c 	teq	r5, ip
   df3ca:	d105      	bne.n	df3d8 <__aeabi_dmul+0x234>
   df3cc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   df3d0:	bf1c      	itt	ne
   df3d2:	4610      	movne	r0, r2
   df3d4:	4619      	movne	r1, r3
   df3d6:	d10a      	bne.n	df3ee <__aeabi_dmul+0x24a>
   df3d8:	ea81 0103 	eor.w	r1, r1, r3
   df3dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   df3e0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   df3e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   df3e8:	f04f 0000 	mov.w	r0, #0
   df3ec:	bd70      	pop	{r4, r5, r6, pc}
   df3ee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   df3f2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   df3f6:	bd70      	pop	{r4, r5, r6, pc}

000df3f8 <__aeabi_ddiv>:
   df3f8:	b570      	push	{r4, r5, r6, lr}
   df3fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   df3fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   df402:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   df406:	bf1d      	ittte	ne
   df408:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   df40c:	ea94 0f0c 	teqne	r4, ip
   df410:	ea95 0f0c 	teqne	r5, ip
   df414:	f000 f8a7 	bleq	df566 <__aeabi_ddiv+0x16e>
   df418:	eba4 0405 	sub.w	r4, r4, r5
   df41c:	ea81 0e03 	eor.w	lr, r1, r3
   df420:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   df424:	ea4f 3101 	mov.w	r1, r1, lsl #12
   df428:	f000 8088 	beq.w	df53c <__aeabi_ddiv+0x144>
   df42c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   df430:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   df434:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   df438:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   df43c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   df440:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   df444:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   df448:	ea4f 2600 	mov.w	r6, r0, lsl #8
   df44c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   df450:	429d      	cmp	r5, r3
   df452:	bf08      	it	eq
   df454:	4296      	cmpeq	r6, r2
   df456:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   df45a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   df45e:	d202      	bcs.n	df466 <__aeabi_ddiv+0x6e>
   df460:	085b      	lsrs	r3, r3, #1
   df462:	ea4f 0232 	mov.w	r2, r2, rrx
   df466:	1ab6      	subs	r6, r6, r2
   df468:	eb65 0503 	sbc.w	r5, r5, r3
   df46c:	085b      	lsrs	r3, r3, #1
   df46e:	ea4f 0232 	mov.w	r2, r2, rrx
   df472:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   df476:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   df47a:	ebb6 0e02 	subs.w	lr, r6, r2
   df47e:	eb75 0e03 	sbcs.w	lr, r5, r3
   df482:	bf22      	ittt	cs
   df484:	1ab6      	subcs	r6, r6, r2
   df486:	4675      	movcs	r5, lr
   df488:	ea40 000c 	orrcs.w	r0, r0, ip
   df48c:	085b      	lsrs	r3, r3, #1
   df48e:	ea4f 0232 	mov.w	r2, r2, rrx
   df492:	ebb6 0e02 	subs.w	lr, r6, r2
   df496:	eb75 0e03 	sbcs.w	lr, r5, r3
   df49a:	bf22      	ittt	cs
   df49c:	1ab6      	subcs	r6, r6, r2
   df49e:	4675      	movcs	r5, lr
   df4a0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   df4a4:	085b      	lsrs	r3, r3, #1
   df4a6:	ea4f 0232 	mov.w	r2, r2, rrx
   df4aa:	ebb6 0e02 	subs.w	lr, r6, r2
   df4ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   df4b2:	bf22      	ittt	cs
   df4b4:	1ab6      	subcs	r6, r6, r2
   df4b6:	4675      	movcs	r5, lr
   df4b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   df4bc:	085b      	lsrs	r3, r3, #1
   df4be:	ea4f 0232 	mov.w	r2, r2, rrx
   df4c2:	ebb6 0e02 	subs.w	lr, r6, r2
   df4c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   df4ca:	bf22      	ittt	cs
   df4cc:	1ab6      	subcs	r6, r6, r2
   df4ce:	4675      	movcs	r5, lr
   df4d0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   df4d4:	ea55 0e06 	orrs.w	lr, r5, r6
   df4d8:	d018      	beq.n	df50c <__aeabi_ddiv+0x114>
   df4da:	ea4f 1505 	mov.w	r5, r5, lsl #4
   df4de:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   df4e2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   df4e6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   df4ea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   df4ee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   df4f2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   df4f6:	d1c0      	bne.n	df47a <__aeabi_ddiv+0x82>
   df4f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   df4fc:	d10b      	bne.n	df516 <__aeabi_ddiv+0x11e>
   df4fe:	ea41 0100 	orr.w	r1, r1, r0
   df502:	f04f 0000 	mov.w	r0, #0
   df506:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   df50a:	e7b6      	b.n	df47a <__aeabi_ddiv+0x82>
   df50c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   df510:	bf04      	itt	eq
   df512:	4301      	orreq	r1, r0
   df514:	2000      	moveq	r0, #0
   df516:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   df51a:	bf88      	it	hi
   df51c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   df520:	f63f aeaf 	bhi.w	df282 <__aeabi_dmul+0xde>
   df524:	ebb5 0c03 	subs.w	ip, r5, r3
   df528:	bf04      	itt	eq
   df52a:	ebb6 0c02 	subseq.w	ip, r6, r2
   df52e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   df532:	f150 0000 	adcs.w	r0, r0, #0
   df536:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   df53a:	bd70      	pop	{r4, r5, r6, pc}
   df53c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   df540:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   df544:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   df548:	bfc2      	ittt	gt
   df54a:	ebd4 050c 	rsbsgt	r5, r4, ip
   df54e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   df552:	bd70      	popgt	{r4, r5, r6, pc}
   df554:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   df558:	f04f 0e00 	mov.w	lr, #0
   df55c:	3c01      	subs	r4, #1
   df55e:	e690      	b.n	df282 <__aeabi_dmul+0xde>
   df560:	ea45 0e06 	orr.w	lr, r5, r6
   df564:	e68d      	b.n	df282 <__aeabi_dmul+0xde>
   df566:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   df56a:	ea94 0f0c 	teq	r4, ip
   df56e:	bf08      	it	eq
   df570:	ea95 0f0c 	teqeq	r5, ip
   df574:	f43f af3b 	beq.w	df3ee <__aeabi_dmul+0x24a>
   df578:	ea94 0f0c 	teq	r4, ip
   df57c:	d10a      	bne.n	df594 <__aeabi_ddiv+0x19c>
   df57e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   df582:	f47f af34 	bne.w	df3ee <__aeabi_dmul+0x24a>
   df586:	ea95 0f0c 	teq	r5, ip
   df58a:	f47f af25 	bne.w	df3d8 <__aeabi_dmul+0x234>
   df58e:	4610      	mov	r0, r2
   df590:	4619      	mov	r1, r3
   df592:	e72c      	b.n	df3ee <__aeabi_dmul+0x24a>
   df594:	ea95 0f0c 	teq	r5, ip
   df598:	d106      	bne.n	df5a8 <__aeabi_ddiv+0x1b0>
   df59a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   df59e:	f43f aefd 	beq.w	df39c <__aeabi_dmul+0x1f8>
   df5a2:	4610      	mov	r0, r2
   df5a4:	4619      	mov	r1, r3
   df5a6:	e722      	b.n	df3ee <__aeabi_dmul+0x24a>
   df5a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   df5ac:	bf18      	it	ne
   df5ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   df5b2:	f47f aec5 	bne.w	df340 <__aeabi_dmul+0x19c>
   df5b6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   df5ba:	f47f af0d 	bne.w	df3d8 <__aeabi_dmul+0x234>
   df5be:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   df5c2:	f47f aeeb 	bne.w	df39c <__aeabi_dmul+0x1f8>
   df5c6:	e712      	b.n	df3ee <__aeabi_dmul+0x24a>

000df5c8 <__gedf2>:
   df5c8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   df5cc:	e006      	b.n	df5dc <__cmpdf2+0x4>
   df5ce:	bf00      	nop

000df5d0 <__ledf2>:
   df5d0:	f04f 0c01 	mov.w	ip, #1
   df5d4:	e002      	b.n	df5dc <__cmpdf2+0x4>
   df5d6:	bf00      	nop

000df5d8 <__cmpdf2>:
   df5d8:	f04f 0c01 	mov.w	ip, #1
   df5dc:	f84d cd04 	str.w	ip, [sp, #-4]!
   df5e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   df5e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   df5e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   df5ec:	bf18      	it	ne
   df5ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   df5f2:	d01b      	beq.n	df62c <__cmpdf2+0x54>
   df5f4:	b001      	add	sp, #4
   df5f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   df5fa:	bf0c      	ite	eq
   df5fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   df600:	ea91 0f03 	teqne	r1, r3
   df604:	bf02      	ittt	eq
   df606:	ea90 0f02 	teqeq	r0, r2
   df60a:	2000      	moveq	r0, #0
   df60c:	4770      	bxeq	lr
   df60e:	f110 0f00 	cmn.w	r0, #0
   df612:	ea91 0f03 	teq	r1, r3
   df616:	bf58      	it	pl
   df618:	4299      	cmppl	r1, r3
   df61a:	bf08      	it	eq
   df61c:	4290      	cmpeq	r0, r2
   df61e:	bf2c      	ite	cs
   df620:	17d8      	asrcs	r0, r3, #31
   df622:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   df626:	f040 0001 	orr.w	r0, r0, #1
   df62a:	4770      	bx	lr
   df62c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   df630:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   df634:	d102      	bne.n	df63c <__cmpdf2+0x64>
   df636:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   df63a:	d107      	bne.n	df64c <__cmpdf2+0x74>
   df63c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   df640:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   df644:	d1d6      	bne.n	df5f4 <__cmpdf2+0x1c>
   df646:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   df64a:	d0d3      	beq.n	df5f4 <__cmpdf2+0x1c>
   df64c:	f85d 0b04 	ldr.w	r0, [sp], #4
   df650:	4770      	bx	lr
   df652:	bf00      	nop

000df654 <__aeabi_cdrcmple>:
   df654:	4684      	mov	ip, r0
   df656:	4610      	mov	r0, r2
   df658:	4662      	mov	r2, ip
   df65a:	468c      	mov	ip, r1
   df65c:	4619      	mov	r1, r3
   df65e:	4663      	mov	r3, ip
   df660:	e000      	b.n	df664 <__aeabi_cdcmpeq>
   df662:	bf00      	nop

000df664 <__aeabi_cdcmpeq>:
   df664:	b501      	push	{r0, lr}
   df666:	f7ff ffb7 	bl	df5d8 <__cmpdf2>
   df66a:	2800      	cmp	r0, #0
   df66c:	bf48      	it	mi
   df66e:	f110 0f00 	cmnmi.w	r0, #0
   df672:	bd01      	pop	{r0, pc}

000df674 <__aeabi_dcmpeq>:
   df674:	f84d ed08 	str.w	lr, [sp, #-8]!
   df678:	f7ff fff4 	bl	df664 <__aeabi_cdcmpeq>
   df67c:	bf0c      	ite	eq
   df67e:	2001      	moveq	r0, #1
   df680:	2000      	movne	r0, #0
   df682:	f85d fb08 	ldr.w	pc, [sp], #8
   df686:	bf00      	nop

000df688 <__aeabi_dcmplt>:
   df688:	f84d ed08 	str.w	lr, [sp, #-8]!
   df68c:	f7ff ffea 	bl	df664 <__aeabi_cdcmpeq>
   df690:	bf34      	ite	cc
   df692:	2001      	movcc	r0, #1
   df694:	2000      	movcs	r0, #0
   df696:	f85d fb08 	ldr.w	pc, [sp], #8
   df69a:	bf00      	nop

000df69c <__aeabi_dcmple>:
   df69c:	f84d ed08 	str.w	lr, [sp, #-8]!
   df6a0:	f7ff ffe0 	bl	df664 <__aeabi_cdcmpeq>
   df6a4:	bf94      	ite	ls
   df6a6:	2001      	movls	r0, #1
   df6a8:	2000      	movhi	r0, #0
   df6aa:	f85d fb08 	ldr.w	pc, [sp], #8
   df6ae:	bf00      	nop

000df6b0 <__aeabi_dcmpge>:
   df6b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   df6b4:	f7ff ffce 	bl	df654 <__aeabi_cdrcmple>
   df6b8:	bf94      	ite	ls
   df6ba:	2001      	movls	r0, #1
   df6bc:	2000      	movhi	r0, #0
   df6be:	f85d fb08 	ldr.w	pc, [sp], #8
   df6c2:	bf00      	nop

000df6c4 <__aeabi_dcmpgt>:
   df6c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   df6c8:	f7ff ffc4 	bl	df654 <__aeabi_cdrcmple>
   df6cc:	bf34      	ite	cc
   df6ce:	2001      	movcc	r0, #1
   df6d0:	2000      	movcs	r0, #0
   df6d2:	f85d fb08 	ldr.w	pc, [sp], #8
   df6d6:	bf00      	nop

000df6d8 <__aeabi_dcmpun>:
   df6d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   df6dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   df6e0:	d102      	bne.n	df6e8 <__aeabi_dcmpun+0x10>
   df6e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   df6e6:	d10a      	bne.n	df6fe <__aeabi_dcmpun+0x26>
   df6e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   df6ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   df6f0:	d102      	bne.n	df6f8 <__aeabi_dcmpun+0x20>
   df6f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   df6f6:	d102      	bne.n	df6fe <__aeabi_dcmpun+0x26>
   df6f8:	f04f 0000 	mov.w	r0, #0
   df6fc:	4770      	bx	lr
   df6fe:	f04f 0001 	mov.w	r0, #1
   df702:	4770      	bx	lr

000df704 <__aeabi_d2iz>:
   df704:	ea4f 0241 	mov.w	r2, r1, lsl #1
   df708:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   df70c:	d215      	bcs.n	df73a <__aeabi_d2iz+0x36>
   df70e:	d511      	bpl.n	df734 <__aeabi_d2iz+0x30>
   df710:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   df714:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   df718:	d912      	bls.n	df740 <__aeabi_d2iz+0x3c>
   df71a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   df71e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   df722:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   df726:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   df72a:	fa23 f002 	lsr.w	r0, r3, r2
   df72e:	bf18      	it	ne
   df730:	4240      	negne	r0, r0
   df732:	4770      	bx	lr
   df734:	f04f 0000 	mov.w	r0, #0
   df738:	4770      	bx	lr
   df73a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   df73e:	d105      	bne.n	df74c <__aeabi_d2iz+0x48>
   df740:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   df744:	bf08      	it	eq
   df746:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   df74a:	4770      	bx	lr
   df74c:	f04f 0000 	mov.w	r0, #0
   df750:	4770      	bx	lr
   df752:	bf00      	nop

000df754 <__aeabi_d2uiz>:
   df754:	004a      	lsls	r2, r1, #1
   df756:	d211      	bcs.n	df77c <__aeabi_d2uiz+0x28>
   df758:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   df75c:	d211      	bcs.n	df782 <__aeabi_d2uiz+0x2e>
   df75e:	d50d      	bpl.n	df77c <__aeabi_d2uiz+0x28>
   df760:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   df764:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   df768:	d40e      	bmi.n	df788 <__aeabi_d2uiz+0x34>
   df76a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   df76e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   df772:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   df776:	fa23 f002 	lsr.w	r0, r3, r2
   df77a:	4770      	bx	lr
   df77c:	f04f 0000 	mov.w	r0, #0
   df780:	4770      	bx	lr
   df782:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   df786:	d102      	bne.n	df78e <__aeabi_d2uiz+0x3a>
   df788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   df78c:	4770      	bx	lr
   df78e:	f04f 0000 	mov.w	r0, #0
   df792:	4770      	bx	lr

000df794 <__aeabi_d2f>:
   df794:	ea4f 0241 	mov.w	r2, r1, lsl #1
   df798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   df79c:	bf24      	itt	cs
   df79e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   df7a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   df7a6:	d90d      	bls.n	df7c4 <__aeabi_d2f+0x30>
   df7a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   df7ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   df7b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   df7b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   df7b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   df7bc:	bf08      	it	eq
   df7be:	f020 0001 	biceq.w	r0, r0, #1
   df7c2:	4770      	bx	lr
   df7c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   df7c8:	d121      	bne.n	df80e <__aeabi_d2f+0x7a>
   df7ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   df7ce:	bfbc      	itt	lt
   df7d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   df7d4:	4770      	bxlt	lr
   df7d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   df7da:	ea4f 5252 	mov.w	r2, r2, lsr #21
   df7de:	f1c2 0218 	rsb	r2, r2, #24
   df7e2:	f1c2 0c20 	rsb	ip, r2, #32
   df7e6:	fa10 f30c 	lsls.w	r3, r0, ip
   df7ea:	fa20 f002 	lsr.w	r0, r0, r2
   df7ee:	bf18      	it	ne
   df7f0:	f040 0001 	orrne.w	r0, r0, #1
   df7f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   df7f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   df7fc:	fa03 fc0c 	lsl.w	ip, r3, ip
   df800:	ea40 000c 	orr.w	r0, r0, ip
   df804:	fa23 f302 	lsr.w	r3, r3, r2
   df808:	ea4f 0343 	mov.w	r3, r3, lsl #1
   df80c:	e7cc      	b.n	df7a8 <__aeabi_d2f+0x14>
   df80e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   df812:	d107      	bne.n	df824 <__aeabi_d2f+0x90>
   df814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   df818:	bf1e      	ittt	ne
   df81a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   df81e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   df822:	4770      	bxne	lr
   df824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   df828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   df82c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   df830:	4770      	bx	lr
   df832:	bf00      	nop

000df834 <__aeabi_ldivmod>:
   df834:	b97b      	cbnz	r3, df856 <__aeabi_ldivmod+0x22>
   df836:	b972      	cbnz	r2, df856 <__aeabi_ldivmod+0x22>
   df838:	2900      	cmp	r1, #0
   df83a:	bfbe      	ittt	lt
   df83c:	2000      	movlt	r0, #0
   df83e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   df842:	e006      	blt.n	df852 <__aeabi_ldivmod+0x1e>
   df844:	bf08      	it	eq
   df846:	2800      	cmpeq	r0, #0
   df848:	bf1c      	itt	ne
   df84a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   df84e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   df852:	f000 b9d5 	b.w	dfc00 <__aeabi_idiv0>
   df856:	f1ad 0c08 	sub.w	ip, sp, #8
   df85a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   df85e:	2900      	cmp	r1, #0
   df860:	db09      	blt.n	df876 <__aeabi_ldivmod+0x42>
   df862:	2b00      	cmp	r3, #0
   df864:	db1a      	blt.n	df89c <__aeabi_ldivmod+0x68>
   df866:	f000 f869 	bl	df93c <__udivmoddi4>
   df86a:	f8dd e004 	ldr.w	lr, [sp, #4]
   df86e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   df872:	b004      	add	sp, #16
   df874:	4770      	bx	lr
   df876:	4240      	negs	r0, r0
   df878:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   df87c:	2b00      	cmp	r3, #0
   df87e:	db1b      	blt.n	df8b8 <__aeabi_ldivmod+0x84>
   df880:	f000 f85c 	bl	df93c <__udivmoddi4>
   df884:	f8dd e004 	ldr.w	lr, [sp, #4]
   df888:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   df88c:	b004      	add	sp, #16
   df88e:	4240      	negs	r0, r0
   df890:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   df894:	4252      	negs	r2, r2
   df896:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   df89a:	4770      	bx	lr
   df89c:	4252      	negs	r2, r2
   df89e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   df8a2:	f000 f84b 	bl	df93c <__udivmoddi4>
   df8a6:	f8dd e004 	ldr.w	lr, [sp, #4]
   df8aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   df8ae:	b004      	add	sp, #16
   df8b0:	4240      	negs	r0, r0
   df8b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   df8b6:	4770      	bx	lr
   df8b8:	4252      	negs	r2, r2
   df8ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   df8be:	f000 f83d 	bl	df93c <__udivmoddi4>
   df8c2:	f8dd e004 	ldr.w	lr, [sp, #4]
   df8c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   df8ca:	b004      	add	sp, #16
   df8cc:	4252      	negs	r2, r2
   df8ce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   df8d2:	4770      	bx	lr

000df8d4 <__aeabi_f2lz>:
   df8d4:	ee07 0a90 	vmov	s15, r0
   df8d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   df8dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   df8e0:	d401      	bmi.n	df8e6 <__aeabi_f2lz+0x12>
   df8e2:	f000 b80b 	b.w	df8fc <__aeabi_f2ulz>
   df8e6:	eef1 7a67 	vneg.f32	s15, s15
   df8ea:	b508      	push	{r3, lr}
   df8ec:	ee17 0a90 	vmov	r0, s15
   df8f0:	f000 f804 	bl	df8fc <__aeabi_f2ulz>
   df8f4:	4240      	negs	r0, r0
   df8f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   df8fa:	bd08      	pop	{r3, pc}

000df8fc <__aeabi_f2ulz>:
   df8fc:	b5d0      	push	{r4, r6, r7, lr}
   df8fe:	f7ff fbf9 	bl	df0f4 <__aeabi_f2d>
   df902:	4b0c      	ldr	r3, [pc, #48]	; (df934 <__aeabi_f2ulz+0x38>)
   df904:	2200      	movs	r2, #0
   df906:	4606      	mov	r6, r0
   df908:	460f      	mov	r7, r1
   df90a:	f7ff fc4b 	bl	df1a4 <__aeabi_dmul>
   df90e:	f7ff ff21 	bl	df754 <__aeabi_d2uiz>
   df912:	4604      	mov	r4, r0
   df914:	f7ff fbcc 	bl	df0b0 <__aeabi_ui2d>
   df918:	4b07      	ldr	r3, [pc, #28]	; (df938 <__aeabi_f2ulz+0x3c>)
   df91a:	2200      	movs	r2, #0
   df91c:	f7ff fc42 	bl	df1a4 <__aeabi_dmul>
   df920:	4602      	mov	r2, r0
   df922:	460b      	mov	r3, r1
   df924:	4630      	mov	r0, r6
   df926:	4639      	mov	r1, r7
   df928:	f7ff fa84 	bl	dee34 <__aeabi_dsub>
   df92c:	f7ff ff12 	bl	df754 <__aeabi_d2uiz>
   df930:	4621      	mov	r1, r4
   df932:	bdd0      	pop	{r4, r6, r7, pc}
   df934:	3df00000 	.word	0x3df00000
   df938:	41f00000 	.word	0x41f00000

000df93c <__udivmoddi4>:
   df93c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   df940:	9d08      	ldr	r5, [sp, #32]
   df942:	4604      	mov	r4, r0
   df944:	468c      	mov	ip, r1
   df946:	2b00      	cmp	r3, #0
   df948:	f040 8083 	bne.w	dfa52 <__udivmoddi4+0x116>
   df94c:	428a      	cmp	r2, r1
   df94e:	4617      	mov	r7, r2
   df950:	d947      	bls.n	df9e2 <__udivmoddi4+0xa6>
   df952:	fab2 f282 	clz	r2, r2
   df956:	b142      	cbz	r2, df96a <__udivmoddi4+0x2e>
   df958:	f1c2 0020 	rsb	r0, r2, #32
   df95c:	fa24 f000 	lsr.w	r0, r4, r0
   df960:	4091      	lsls	r1, r2
   df962:	4097      	lsls	r7, r2
   df964:	ea40 0c01 	orr.w	ip, r0, r1
   df968:	4094      	lsls	r4, r2
   df96a:	ea4f 4817 	mov.w	r8, r7, lsr #16
   df96e:	0c23      	lsrs	r3, r4, #16
   df970:	fbbc f6f8 	udiv	r6, ip, r8
   df974:	fa1f fe87 	uxth.w	lr, r7
   df978:	fb08 c116 	mls	r1, r8, r6, ip
   df97c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   df980:	fb06 f10e 	mul.w	r1, r6, lr
   df984:	4299      	cmp	r1, r3
   df986:	d909      	bls.n	df99c <__udivmoddi4+0x60>
   df988:	18fb      	adds	r3, r7, r3
   df98a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   df98e:	f080 8119 	bcs.w	dfbc4 <__udivmoddi4+0x288>
   df992:	4299      	cmp	r1, r3
   df994:	f240 8116 	bls.w	dfbc4 <__udivmoddi4+0x288>
   df998:	3e02      	subs	r6, #2
   df99a:	443b      	add	r3, r7
   df99c:	1a5b      	subs	r3, r3, r1
   df99e:	b2a4      	uxth	r4, r4
   df9a0:	fbb3 f0f8 	udiv	r0, r3, r8
   df9a4:	fb08 3310 	mls	r3, r8, r0, r3
   df9a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   df9ac:	fb00 fe0e 	mul.w	lr, r0, lr
   df9b0:	45a6      	cmp	lr, r4
   df9b2:	d909      	bls.n	df9c8 <__udivmoddi4+0x8c>
   df9b4:	193c      	adds	r4, r7, r4
   df9b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   df9ba:	f080 8105 	bcs.w	dfbc8 <__udivmoddi4+0x28c>
   df9be:	45a6      	cmp	lr, r4
   df9c0:	f240 8102 	bls.w	dfbc8 <__udivmoddi4+0x28c>
   df9c4:	3802      	subs	r0, #2
   df9c6:	443c      	add	r4, r7
   df9c8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   df9cc:	eba4 040e 	sub.w	r4, r4, lr
   df9d0:	2600      	movs	r6, #0
   df9d2:	b11d      	cbz	r5, df9dc <__udivmoddi4+0xa0>
   df9d4:	40d4      	lsrs	r4, r2
   df9d6:	2300      	movs	r3, #0
   df9d8:	e9c5 4300 	strd	r4, r3, [r5]
   df9dc:	4631      	mov	r1, r6
   df9de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df9e2:	b902      	cbnz	r2, df9e6 <__udivmoddi4+0xaa>
   df9e4:	deff      	udf	#255	; 0xff
   df9e6:	fab2 f282 	clz	r2, r2
   df9ea:	2a00      	cmp	r2, #0
   df9ec:	d150      	bne.n	dfa90 <__udivmoddi4+0x154>
   df9ee:	1bcb      	subs	r3, r1, r7
   df9f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   df9f4:	fa1f f887 	uxth.w	r8, r7
   df9f8:	2601      	movs	r6, #1
   df9fa:	fbb3 fcfe 	udiv	ip, r3, lr
   df9fe:	0c21      	lsrs	r1, r4, #16
   dfa00:	fb0e 331c 	mls	r3, lr, ip, r3
   dfa04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   dfa08:	fb08 f30c 	mul.w	r3, r8, ip
   dfa0c:	428b      	cmp	r3, r1
   dfa0e:	d907      	bls.n	dfa20 <__udivmoddi4+0xe4>
   dfa10:	1879      	adds	r1, r7, r1
   dfa12:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   dfa16:	d202      	bcs.n	dfa1e <__udivmoddi4+0xe2>
   dfa18:	428b      	cmp	r3, r1
   dfa1a:	f200 80e9 	bhi.w	dfbf0 <__udivmoddi4+0x2b4>
   dfa1e:	4684      	mov	ip, r0
   dfa20:	1ac9      	subs	r1, r1, r3
   dfa22:	b2a3      	uxth	r3, r4
   dfa24:	fbb1 f0fe 	udiv	r0, r1, lr
   dfa28:	fb0e 1110 	mls	r1, lr, r0, r1
   dfa2c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   dfa30:	fb08 f800 	mul.w	r8, r8, r0
   dfa34:	45a0      	cmp	r8, r4
   dfa36:	d907      	bls.n	dfa48 <__udivmoddi4+0x10c>
   dfa38:	193c      	adds	r4, r7, r4
   dfa3a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dfa3e:	d202      	bcs.n	dfa46 <__udivmoddi4+0x10a>
   dfa40:	45a0      	cmp	r8, r4
   dfa42:	f200 80d9 	bhi.w	dfbf8 <__udivmoddi4+0x2bc>
   dfa46:	4618      	mov	r0, r3
   dfa48:	eba4 0408 	sub.w	r4, r4, r8
   dfa4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   dfa50:	e7bf      	b.n	df9d2 <__udivmoddi4+0x96>
   dfa52:	428b      	cmp	r3, r1
   dfa54:	d909      	bls.n	dfa6a <__udivmoddi4+0x12e>
   dfa56:	2d00      	cmp	r5, #0
   dfa58:	f000 80b1 	beq.w	dfbbe <__udivmoddi4+0x282>
   dfa5c:	2600      	movs	r6, #0
   dfa5e:	e9c5 0100 	strd	r0, r1, [r5]
   dfa62:	4630      	mov	r0, r6
   dfa64:	4631      	mov	r1, r6
   dfa66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dfa6a:	fab3 f683 	clz	r6, r3
   dfa6e:	2e00      	cmp	r6, #0
   dfa70:	d14a      	bne.n	dfb08 <__udivmoddi4+0x1cc>
   dfa72:	428b      	cmp	r3, r1
   dfa74:	d302      	bcc.n	dfa7c <__udivmoddi4+0x140>
   dfa76:	4282      	cmp	r2, r0
   dfa78:	f200 80b8 	bhi.w	dfbec <__udivmoddi4+0x2b0>
   dfa7c:	1a84      	subs	r4, r0, r2
   dfa7e:	eb61 0103 	sbc.w	r1, r1, r3
   dfa82:	2001      	movs	r0, #1
   dfa84:	468c      	mov	ip, r1
   dfa86:	2d00      	cmp	r5, #0
   dfa88:	d0a8      	beq.n	df9dc <__udivmoddi4+0xa0>
   dfa8a:	e9c5 4c00 	strd	r4, ip, [r5]
   dfa8e:	e7a5      	b.n	df9dc <__udivmoddi4+0xa0>
   dfa90:	f1c2 0320 	rsb	r3, r2, #32
   dfa94:	fa20 f603 	lsr.w	r6, r0, r3
   dfa98:	4097      	lsls	r7, r2
   dfa9a:	fa01 f002 	lsl.w	r0, r1, r2
   dfa9e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   dfaa2:	40d9      	lsrs	r1, r3
   dfaa4:	4330      	orrs	r0, r6
   dfaa6:	0c03      	lsrs	r3, r0, #16
   dfaa8:	fbb1 f6fe 	udiv	r6, r1, lr
   dfaac:	fa1f f887 	uxth.w	r8, r7
   dfab0:	fb0e 1116 	mls	r1, lr, r6, r1
   dfab4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   dfab8:	fb06 f108 	mul.w	r1, r6, r8
   dfabc:	4299      	cmp	r1, r3
   dfabe:	fa04 f402 	lsl.w	r4, r4, r2
   dfac2:	d909      	bls.n	dfad8 <__udivmoddi4+0x19c>
   dfac4:	18fb      	adds	r3, r7, r3
   dfac6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   dfaca:	f080 808d 	bcs.w	dfbe8 <__udivmoddi4+0x2ac>
   dface:	4299      	cmp	r1, r3
   dfad0:	f240 808a 	bls.w	dfbe8 <__udivmoddi4+0x2ac>
   dfad4:	3e02      	subs	r6, #2
   dfad6:	443b      	add	r3, r7
   dfad8:	1a5b      	subs	r3, r3, r1
   dfada:	b281      	uxth	r1, r0
   dfadc:	fbb3 f0fe 	udiv	r0, r3, lr
   dfae0:	fb0e 3310 	mls	r3, lr, r0, r3
   dfae4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   dfae8:	fb00 f308 	mul.w	r3, r0, r8
   dfaec:	428b      	cmp	r3, r1
   dfaee:	d907      	bls.n	dfb00 <__udivmoddi4+0x1c4>
   dfaf0:	1879      	adds	r1, r7, r1
   dfaf2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   dfaf6:	d273      	bcs.n	dfbe0 <__udivmoddi4+0x2a4>
   dfaf8:	428b      	cmp	r3, r1
   dfafa:	d971      	bls.n	dfbe0 <__udivmoddi4+0x2a4>
   dfafc:	3802      	subs	r0, #2
   dfafe:	4439      	add	r1, r7
   dfb00:	1acb      	subs	r3, r1, r3
   dfb02:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   dfb06:	e778      	b.n	df9fa <__udivmoddi4+0xbe>
   dfb08:	f1c6 0c20 	rsb	ip, r6, #32
   dfb0c:	fa03 f406 	lsl.w	r4, r3, r6
   dfb10:	fa22 f30c 	lsr.w	r3, r2, ip
   dfb14:	431c      	orrs	r4, r3
   dfb16:	fa20 f70c 	lsr.w	r7, r0, ip
   dfb1a:	fa01 f306 	lsl.w	r3, r1, r6
   dfb1e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   dfb22:	fa21 f10c 	lsr.w	r1, r1, ip
   dfb26:	431f      	orrs	r7, r3
   dfb28:	0c3b      	lsrs	r3, r7, #16
   dfb2a:	fbb1 f9fe 	udiv	r9, r1, lr
   dfb2e:	fa1f f884 	uxth.w	r8, r4
   dfb32:	fb0e 1119 	mls	r1, lr, r9, r1
   dfb36:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   dfb3a:	fb09 fa08 	mul.w	sl, r9, r8
   dfb3e:	458a      	cmp	sl, r1
   dfb40:	fa02 f206 	lsl.w	r2, r2, r6
   dfb44:	fa00 f306 	lsl.w	r3, r0, r6
   dfb48:	d908      	bls.n	dfb5c <__udivmoddi4+0x220>
   dfb4a:	1861      	adds	r1, r4, r1
   dfb4c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   dfb50:	d248      	bcs.n	dfbe4 <__udivmoddi4+0x2a8>
   dfb52:	458a      	cmp	sl, r1
   dfb54:	d946      	bls.n	dfbe4 <__udivmoddi4+0x2a8>
   dfb56:	f1a9 0902 	sub.w	r9, r9, #2
   dfb5a:	4421      	add	r1, r4
   dfb5c:	eba1 010a 	sub.w	r1, r1, sl
   dfb60:	b2bf      	uxth	r7, r7
   dfb62:	fbb1 f0fe 	udiv	r0, r1, lr
   dfb66:	fb0e 1110 	mls	r1, lr, r0, r1
   dfb6a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   dfb6e:	fb00 f808 	mul.w	r8, r0, r8
   dfb72:	45b8      	cmp	r8, r7
   dfb74:	d907      	bls.n	dfb86 <__udivmoddi4+0x24a>
   dfb76:	19e7      	adds	r7, r4, r7
   dfb78:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   dfb7c:	d22e      	bcs.n	dfbdc <__udivmoddi4+0x2a0>
   dfb7e:	45b8      	cmp	r8, r7
   dfb80:	d92c      	bls.n	dfbdc <__udivmoddi4+0x2a0>
   dfb82:	3802      	subs	r0, #2
   dfb84:	4427      	add	r7, r4
   dfb86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   dfb8a:	eba7 0708 	sub.w	r7, r7, r8
   dfb8e:	fba0 8902 	umull	r8, r9, r0, r2
   dfb92:	454f      	cmp	r7, r9
   dfb94:	46c6      	mov	lr, r8
   dfb96:	4649      	mov	r1, r9
   dfb98:	d31a      	bcc.n	dfbd0 <__udivmoddi4+0x294>
   dfb9a:	d017      	beq.n	dfbcc <__udivmoddi4+0x290>
   dfb9c:	b15d      	cbz	r5, dfbb6 <__udivmoddi4+0x27a>
   dfb9e:	ebb3 020e 	subs.w	r2, r3, lr
   dfba2:	eb67 0701 	sbc.w	r7, r7, r1
   dfba6:	fa07 fc0c 	lsl.w	ip, r7, ip
   dfbaa:	40f2      	lsrs	r2, r6
   dfbac:	ea4c 0202 	orr.w	r2, ip, r2
   dfbb0:	40f7      	lsrs	r7, r6
   dfbb2:	e9c5 2700 	strd	r2, r7, [r5]
   dfbb6:	2600      	movs	r6, #0
   dfbb8:	4631      	mov	r1, r6
   dfbba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dfbbe:	462e      	mov	r6, r5
   dfbc0:	4628      	mov	r0, r5
   dfbc2:	e70b      	b.n	df9dc <__udivmoddi4+0xa0>
   dfbc4:	4606      	mov	r6, r0
   dfbc6:	e6e9      	b.n	df99c <__udivmoddi4+0x60>
   dfbc8:	4618      	mov	r0, r3
   dfbca:	e6fd      	b.n	df9c8 <__udivmoddi4+0x8c>
   dfbcc:	4543      	cmp	r3, r8
   dfbce:	d2e5      	bcs.n	dfb9c <__udivmoddi4+0x260>
   dfbd0:	ebb8 0e02 	subs.w	lr, r8, r2
   dfbd4:	eb69 0104 	sbc.w	r1, r9, r4
   dfbd8:	3801      	subs	r0, #1
   dfbda:	e7df      	b.n	dfb9c <__udivmoddi4+0x260>
   dfbdc:	4608      	mov	r0, r1
   dfbde:	e7d2      	b.n	dfb86 <__udivmoddi4+0x24a>
   dfbe0:	4660      	mov	r0, ip
   dfbe2:	e78d      	b.n	dfb00 <__udivmoddi4+0x1c4>
   dfbe4:	4681      	mov	r9, r0
   dfbe6:	e7b9      	b.n	dfb5c <__udivmoddi4+0x220>
   dfbe8:	4666      	mov	r6, ip
   dfbea:	e775      	b.n	dfad8 <__udivmoddi4+0x19c>
   dfbec:	4630      	mov	r0, r6
   dfbee:	e74a      	b.n	dfa86 <__udivmoddi4+0x14a>
   dfbf0:	f1ac 0c02 	sub.w	ip, ip, #2
   dfbf4:	4439      	add	r1, r7
   dfbf6:	e713      	b.n	dfa20 <__udivmoddi4+0xe4>
   dfbf8:	3802      	subs	r0, #2
   dfbfa:	443c      	add	r4, r7
   dfbfc:	e724      	b.n	dfa48 <__udivmoddi4+0x10c>
   dfbfe:	bf00      	nop

000dfc00 <__aeabi_idiv0>:
   dfc00:	4770      	bx	lr
   dfc02:	bf00      	nop

000dfc04 <asctime_r>:
   dfc04:	b510      	push	{r4, lr}
   dfc06:	460c      	mov	r4, r1
   dfc08:	6941      	ldr	r1, [r0, #20]
   dfc0a:	6903      	ldr	r3, [r0, #16]
   dfc0c:	6982      	ldr	r2, [r0, #24]
   dfc0e:	b086      	sub	sp, #24
   dfc10:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   dfc14:	9104      	str	r1, [sp, #16]
   dfc16:	6801      	ldr	r1, [r0, #0]
   dfc18:	9103      	str	r1, [sp, #12]
   dfc1a:	6841      	ldr	r1, [r0, #4]
   dfc1c:	9102      	str	r1, [sp, #8]
   dfc1e:	6881      	ldr	r1, [r0, #8]
   dfc20:	9101      	str	r1, [sp, #4]
   dfc22:	68c1      	ldr	r1, [r0, #12]
   dfc24:	9100      	str	r1, [sp, #0]
   dfc26:	4907      	ldr	r1, [pc, #28]	; (dfc44 <asctime_r+0x40>)
   dfc28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   dfc2c:	440b      	add	r3, r1
   dfc2e:	4906      	ldr	r1, [pc, #24]	; (dfc48 <asctime_r+0x44>)
   dfc30:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   dfc34:	440a      	add	r2, r1
   dfc36:	4620      	mov	r0, r4
   dfc38:	4904      	ldr	r1, [pc, #16]	; (dfc4c <asctime_r+0x48>)
   dfc3a:	f7fa fbfb 	bl	da434 <siprintf>
   dfc3e:	4620      	mov	r0, r4
   dfc40:	b006      	add	sp, #24
   dfc42:	bd10      	pop	{r4, pc}
   dfc44:	000e13c5 	.word	0x000e13c5
   dfc48:	000e13b0 	.word	0x000e13b0
   dfc4c:	000e1390 	.word	0x000e1390

000dfc50 <atexit>:
   dfc50:	2300      	movs	r3, #0
   dfc52:	4601      	mov	r1, r0
   dfc54:	461a      	mov	r2, r3
   dfc56:	4618      	mov	r0, r3
   dfc58:	f000 b9e2 	b.w	e0020 <__register_exitproc>

000dfc5c <atoi>:
   dfc5c:	220a      	movs	r2, #10
   dfc5e:	2100      	movs	r1, #0
   dfc60:	f000 b968 	b.w	dff34 <strtol>

000dfc64 <gmtime>:
   dfc64:	b538      	push	{r3, r4, r5, lr}
   dfc66:	4b07      	ldr	r3, [pc, #28]	; (dfc84 <gmtime+0x20>)
   dfc68:	681d      	ldr	r5, [r3, #0]
   dfc6a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   dfc6c:	4604      	mov	r4, r0
   dfc6e:	b91b      	cbnz	r3, dfc78 <gmtime+0x14>
   dfc70:	2024      	movs	r0, #36	; 0x24
   dfc72:	f7fa fbc7 	bl	da404 <malloc>
   dfc76:	63e8      	str	r0, [r5, #60]	; 0x3c
   dfc78:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   dfc7a:	4620      	mov	r0, r4
   dfc7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dfc80:	f7fa bc28 	b.w	da4d4 <gmtime_r>
   dfc84:	2003e12c 	.word	0x2003e12c

000dfc88 <memcpy>:
   dfc88:	440a      	add	r2, r1
   dfc8a:	4291      	cmp	r1, r2
   dfc8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dfc90:	d100      	bne.n	dfc94 <memcpy+0xc>
   dfc92:	4770      	bx	lr
   dfc94:	b510      	push	{r4, lr}
   dfc96:	f811 4b01 	ldrb.w	r4, [r1], #1
   dfc9a:	f803 4f01 	strb.w	r4, [r3, #1]!
   dfc9e:	4291      	cmp	r1, r2
   dfca0:	d1f9      	bne.n	dfc96 <memcpy+0xe>
   dfca2:	bd10      	pop	{r4, pc}

000dfca4 <memmove>:
   dfca4:	4288      	cmp	r0, r1
   dfca6:	b510      	push	{r4, lr}
   dfca8:	eb01 0402 	add.w	r4, r1, r2
   dfcac:	d902      	bls.n	dfcb4 <memmove+0x10>
   dfcae:	4284      	cmp	r4, r0
   dfcb0:	4623      	mov	r3, r4
   dfcb2:	d807      	bhi.n	dfcc4 <memmove+0x20>
   dfcb4:	1e43      	subs	r3, r0, #1
   dfcb6:	42a1      	cmp	r1, r4
   dfcb8:	d008      	beq.n	dfccc <memmove+0x28>
   dfcba:	f811 2b01 	ldrb.w	r2, [r1], #1
   dfcbe:	f803 2f01 	strb.w	r2, [r3, #1]!
   dfcc2:	e7f8      	b.n	dfcb6 <memmove+0x12>
   dfcc4:	4402      	add	r2, r0
   dfcc6:	4601      	mov	r1, r0
   dfcc8:	428a      	cmp	r2, r1
   dfcca:	d100      	bne.n	dfcce <memmove+0x2a>
   dfccc:	bd10      	pop	{r4, pc}
   dfcce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   dfcd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   dfcd6:	e7f7      	b.n	dfcc8 <memmove+0x24>

000dfcd8 <memset>:
   dfcd8:	4402      	add	r2, r0
   dfcda:	4603      	mov	r3, r0
   dfcdc:	4293      	cmp	r3, r2
   dfcde:	d100      	bne.n	dfce2 <memset+0xa>
   dfce0:	4770      	bx	lr
   dfce2:	f803 1b01 	strb.w	r1, [r3], #1
   dfce6:	e7f9      	b.n	dfcdc <memset+0x4>

000dfce8 <srand>:
   dfce8:	b538      	push	{r3, r4, r5, lr}
   dfcea:	4b0d      	ldr	r3, [pc, #52]	; (dfd20 <srand+0x38>)
   dfcec:	681d      	ldr	r5, [r3, #0]
   dfcee:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dfcf0:	4604      	mov	r4, r0
   dfcf2:	b97b      	cbnz	r3, dfd14 <srand+0x2c>
   dfcf4:	2018      	movs	r0, #24
   dfcf6:	f7fa fb85 	bl	da404 <malloc>
   dfcfa:	4a0a      	ldr	r2, [pc, #40]	; (dfd24 <srand+0x3c>)
   dfcfc:	4b0a      	ldr	r3, [pc, #40]	; (dfd28 <srand+0x40>)
   dfcfe:	63a8      	str	r0, [r5, #56]	; 0x38
   dfd00:	e9c0 2300 	strd	r2, r3, [r0]
   dfd04:	4b09      	ldr	r3, [pc, #36]	; (dfd2c <srand+0x44>)
   dfd06:	6083      	str	r3, [r0, #8]
   dfd08:	230b      	movs	r3, #11
   dfd0a:	8183      	strh	r3, [r0, #12]
   dfd0c:	2201      	movs	r2, #1
   dfd0e:	2300      	movs	r3, #0
   dfd10:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dfd14:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dfd16:	2200      	movs	r2, #0
   dfd18:	611c      	str	r4, [r3, #16]
   dfd1a:	615a      	str	r2, [r3, #20]
   dfd1c:	bd38      	pop	{r3, r4, r5, pc}
   dfd1e:	bf00      	nop
   dfd20:	2003e12c 	.word	0x2003e12c
   dfd24:	abcd330e 	.word	0xabcd330e
   dfd28:	e66d1234 	.word	0xe66d1234
   dfd2c:	0005deec 	.word	0x0005deec

000dfd30 <strchr>:
   dfd30:	b2c9      	uxtb	r1, r1
   dfd32:	4603      	mov	r3, r0
   dfd34:	f810 2b01 	ldrb.w	r2, [r0], #1
   dfd38:	b11a      	cbz	r2, dfd42 <strchr+0x12>
   dfd3a:	428a      	cmp	r2, r1
   dfd3c:	d1f9      	bne.n	dfd32 <strchr+0x2>
   dfd3e:	4618      	mov	r0, r3
   dfd40:	4770      	bx	lr
   dfd42:	2900      	cmp	r1, #0
   dfd44:	bf18      	it	ne
   dfd46:	2300      	movne	r3, #0
   dfd48:	e7f9      	b.n	dfd3e <strchr+0xe>

000dfd4a <strchrnul>:
   dfd4a:	b510      	push	{r4, lr}
   dfd4c:	4604      	mov	r4, r0
   dfd4e:	f7ff ffef 	bl	dfd30 <strchr>
   dfd52:	b918      	cbnz	r0, dfd5c <strchrnul+0x12>
   dfd54:	4620      	mov	r0, r4
   dfd56:	f000 f832 	bl	dfdbe <strlen>
   dfd5a:	4420      	add	r0, r4
   dfd5c:	bd10      	pop	{r4, pc}

000dfd5e <strcmp>:
   dfd5e:	f810 2b01 	ldrb.w	r2, [r0], #1
   dfd62:	f811 3b01 	ldrb.w	r3, [r1], #1
   dfd66:	2a01      	cmp	r2, #1
   dfd68:	bf28      	it	cs
   dfd6a:	429a      	cmpcs	r2, r3
   dfd6c:	d0f7      	beq.n	dfd5e <strcmp>
   dfd6e:	1ad0      	subs	r0, r2, r3
   dfd70:	4770      	bx	lr

000dfd72 <strcpy>:
   dfd72:	4603      	mov	r3, r0
   dfd74:	f811 2b01 	ldrb.w	r2, [r1], #1
   dfd78:	f803 2b01 	strb.w	r2, [r3], #1
   dfd7c:	2a00      	cmp	r2, #0
   dfd7e:	d1f9      	bne.n	dfd74 <strcpy+0x2>
   dfd80:	4770      	bx	lr
	...

000dfd84 <strdup>:
   dfd84:	4b02      	ldr	r3, [pc, #8]	; (dfd90 <strdup+0xc>)
   dfd86:	4601      	mov	r1, r0
   dfd88:	6818      	ldr	r0, [r3, #0]
   dfd8a:	f000 b803 	b.w	dfd94 <_strdup_r>
   dfd8e:	bf00      	nop
   dfd90:	2003e12c 	.word	0x2003e12c

000dfd94 <_strdup_r>:
   dfd94:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dfd96:	4604      	mov	r4, r0
   dfd98:	4608      	mov	r0, r1
   dfd9a:	460d      	mov	r5, r1
   dfd9c:	f000 f80f 	bl	dfdbe <strlen>
   dfda0:	1c42      	adds	r2, r0, #1
   dfda2:	4611      	mov	r1, r2
   dfda4:	4620      	mov	r0, r4
   dfda6:	9201      	str	r2, [sp, #4]
   dfda8:	f7fa fb6c 	bl	da484 <_malloc_r>
   dfdac:	4604      	mov	r4, r0
   dfdae:	b118      	cbz	r0, dfdb8 <_strdup_r+0x24>
   dfdb0:	9a01      	ldr	r2, [sp, #4]
   dfdb2:	4629      	mov	r1, r5
   dfdb4:	f7ff ff68 	bl	dfc88 <memcpy>
   dfdb8:	4620      	mov	r0, r4
   dfdba:	b003      	add	sp, #12
   dfdbc:	bd30      	pop	{r4, r5, pc}

000dfdbe <strlen>:
   dfdbe:	4603      	mov	r3, r0
   dfdc0:	f813 2b01 	ldrb.w	r2, [r3], #1
   dfdc4:	2a00      	cmp	r2, #0
   dfdc6:	d1fb      	bne.n	dfdc0 <strlen+0x2>
   dfdc8:	1a18      	subs	r0, r3, r0
   dfdca:	3801      	subs	r0, #1
   dfdcc:	4770      	bx	lr

000dfdce <strncmp>:
   dfdce:	b510      	push	{r4, lr}
   dfdd0:	b16a      	cbz	r2, dfdee <strncmp+0x20>
   dfdd2:	3901      	subs	r1, #1
   dfdd4:	1884      	adds	r4, r0, r2
   dfdd6:	f810 3b01 	ldrb.w	r3, [r0], #1
   dfdda:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   dfdde:	4293      	cmp	r3, r2
   dfde0:	d103      	bne.n	dfdea <strncmp+0x1c>
   dfde2:	42a0      	cmp	r0, r4
   dfde4:	d001      	beq.n	dfdea <strncmp+0x1c>
   dfde6:	2b00      	cmp	r3, #0
   dfde8:	d1f5      	bne.n	dfdd6 <strncmp+0x8>
   dfdea:	1a98      	subs	r0, r3, r2
   dfdec:	bd10      	pop	{r4, pc}
   dfdee:	4610      	mov	r0, r2
   dfdf0:	e7fc      	b.n	dfdec <strncmp+0x1e>

000dfdf2 <strncpy>:
   dfdf2:	b510      	push	{r4, lr}
   dfdf4:	3901      	subs	r1, #1
   dfdf6:	4603      	mov	r3, r0
   dfdf8:	b132      	cbz	r2, dfe08 <strncpy+0x16>
   dfdfa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dfdfe:	f803 4b01 	strb.w	r4, [r3], #1
   dfe02:	3a01      	subs	r2, #1
   dfe04:	2c00      	cmp	r4, #0
   dfe06:	d1f7      	bne.n	dfdf8 <strncpy+0x6>
   dfe08:	441a      	add	r2, r3
   dfe0a:	2100      	movs	r1, #0
   dfe0c:	4293      	cmp	r3, r2
   dfe0e:	d100      	bne.n	dfe12 <strncpy+0x20>
   dfe10:	bd10      	pop	{r4, pc}
   dfe12:	f803 1b01 	strb.w	r1, [r3], #1
   dfe16:	e7f9      	b.n	dfe0c <strncpy+0x1a>

000dfe18 <strrchr>:
   dfe18:	b538      	push	{r3, r4, r5, lr}
   dfe1a:	4603      	mov	r3, r0
   dfe1c:	460c      	mov	r4, r1
   dfe1e:	b969      	cbnz	r1, dfe3c <strrchr+0x24>
   dfe20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dfe24:	f7ff bf84 	b.w	dfd30 <strchr>
   dfe28:	1c43      	adds	r3, r0, #1
   dfe2a:	4605      	mov	r5, r0
   dfe2c:	4621      	mov	r1, r4
   dfe2e:	4618      	mov	r0, r3
   dfe30:	f7ff ff7e 	bl	dfd30 <strchr>
   dfe34:	2800      	cmp	r0, #0
   dfe36:	d1f7      	bne.n	dfe28 <strrchr+0x10>
   dfe38:	4628      	mov	r0, r5
   dfe3a:	bd38      	pop	{r3, r4, r5, pc}
   dfe3c:	2500      	movs	r5, #0
   dfe3e:	e7f5      	b.n	dfe2c <strrchr+0x14>

000dfe40 <_strtol_l.isra.0>:
   dfe40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dfe44:	4e3a      	ldr	r6, [pc, #232]	; (dff30 <_strtol_l.isra.0+0xf0>)
   dfe46:	4686      	mov	lr, r0
   dfe48:	468c      	mov	ip, r1
   dfe4a:	4660      	mov	r0, ip
   dfe4c:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dfe50:	5da5      	ldrb	r5, [r4, r6]
   dfe52:	f015 0508 	ands.w	r5, r5, #8
   dfe56:	d1f8      	bne.n	dfe4a <_strtol_l.isra.0+0xa>
   dfe58:	2c2d      	cmp	r4, #45	; 0x2d
   dfe5a:	d133      	bne.n	dfec4 <_strtol_l.isra.0+0x84>
   dfe5c:	f89c 4000 	ldrb.w	r4, [ip]
   dfe60:	f04f 0801 	mov.w	r8, #1
   dfe64:	f100 0c02 	add.w	ip, r0, #2
   dfe68:	2b00      	cmp	r3, #0
   dfe6a:	d05c      	beq.n	dff26 <_strtol_l.isra.0+0xe6>
   dfe6c:	2b10      	cmp	r3, #16
   dfe6e:	d10c      	bne.n	dfe8a <_strtol_l.isra.0+0x4a>
   dfe70:	2c30      	cmp	r4, #48	; 0x30
   dfe72:	d10a      	bne.n	dfe8a <_strtol_l.isra.0+0x4a>
   dfe74:	f89c 0000 	ldrb.w	r0, [ip]
   dfe78:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dfe7c:	2858      	cmp	r0, #88	; 0x58
   dfe7e:	d14d      	bne.n	dff1c <_strtol_l.isra.0+0xdc>
   dfe80:	f89c 4001 	ldrb.w	r4, [ip, #1]
   dfe84:	2310      	movs	r3, #16
   dfe86:	f10c 0c02 	add.w	ip, ip, #2
   dfe8a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   dfe8e:	3f01      	subs	r7, #1
   dfe90:	2600      	movs	r6, #0
   dfe92:	fbb7 f9f3 	udiv	r9, r7, r3
   dfe96:	4630      	mov	r0, r6
   dfe98:	fb03 7a19 	mls	sl, r3, r9, r7
   dfe9c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   dfea0:	2d09      	cmp	r5, #9
   dfea2:	d818      	bhi.n	dfed6 <_strtol_l.isra.0+0x96>
   dfea4:	462c      	mov	r4, r5
   dfea6:	42a3      	cmp	r3, r4
   dfea8:	dd24      	ble.n	dfef4 <_strtol_l.isra.0+0xb4>
   dfeaa:	1c75      	adds	r5, r6, #1
   dfeac:	d007      	beq.n	dfebe <_strtol_l.isra.0+0x7e>
   dfeae:	4581      	cmp	r9, r0
   dfeb0:	d31d      	bcc.n	dfeee <_strtol_l.isra.0+0xae>
   dfeb2:	d101      	bne.n	dfeb8 <_strtol_l.isra.0+0x78>
   dfeb4:	45a2      	cmp	sl, r4
   dfeb6:	db1a      	blt.n	dfeee <_strtol_l.isra.0+0xae>
   dfeb8:	fb00 4003 	mla	r0, r0, r3, r4
   dfebc:	2601      	movs	r6, #1
   dfebe:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dfec2:	e7eb      	b.n	dfe9c <_strtol_l.isra.0+0x5c>
   dfec4:	2c2b      	cmp	r4, #43	; 0x2b
   dfec6:	bf08      	it	eq
   dfec8:	f89c 4000 	ldrbeq.w	r4, [ip]
   dfecc:	46a8      	mov	r8, r5
   dfece:	bf08      	it	eq
   dfed0:	f100 0c02 	addeq.w	ip, r0, #2
   dfed4:	e7c8      	b.n	dfe68 <_strtol_l.isra.0+0x28>
   dfed6:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   dfeda:	2d19      	cmp	r5, #25
   dfedc:	d801      	bhi.n	dfee2 <_strtol_l.isra.0+0xa2>
   dfede:	3c37      	subs	r4, #55	; 0x37
   dfee0:	e7e1      	b.n	dfea6 <_strtol_l.isra.0+0x66>
   dfee2:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   dfee6:	2d19      	cmp	r5, #25
   dfee8:	d804      	bhi.n	dfef4 <_strtol_l.isra.0+0xb4>
   dfeea:	3c57      	subs	r4, #87	; 0x57
   dfeec:	e7db      	b.n	dfea6 <_strtol_l.isra.0+0x66>
   dfeee:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dfef2:	e7e4      	b.n	dfebe <_strtol_l.isra.0+0x7e>
   dfef4:	1c73      	adds	r3, r6, #1
   dfef6:	d106      	bne.n	dff06 <_strtol_l.isra.0+0xc6>
   dfef8:	2322      	movs	r3, #34	; 0x22
   dfefa:	f8ce 3000 	str.w	r3, [lr]
   dfefe:	4638      	mov	r0, r7
   dff00:	b942      	cbnz	r2, dff14 <_strtol_l.isra.0+0xd4>
   dff02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dff06:	f1b8 0f00 	cmp.w	r8, #0
   dff0a:	d000      	beq.n	dff0e <_strtol_l.isra.0+0xce>
   dff0c:	4240      	negs	r0, r0
   dff0e:	2a00      	cmp	r2, #0
   dff10:	d0f7      	beq.n	dff02 <_strtol_l.isra.0+0xc2>
   dff12:	b10e      	cbz	r6, dff18 <_strtol_l.isra.0+0xd8>
   dff14:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   dff18:	6011      	str	r1, [r2, #0]
   dff1a:	e7f2      	b.n	dff02 <_strtol_l.isra.0+0xc2>
   dff1c:	2430      	movs	r4, #48	; 0x30
   dff1e:	2b00      	cmp	r3, #0
   dff20:	d1b3      	bne.n	dfe8a <_strtol_l.isra.0+0x4a>
   dff22:	2308      	movs	r3, #8
   dff24:	e7b1      	b.n	dfe8a <_strtol_l.isra.0+0x4a>
   dff26:	2c30      	cmp	r4, #48	; 0x30
   dff28:	d0a4      	beq.n	dfe74 <_strtol_l.isra.0+0x34>
   dff2a:	230a      	movs	r3, #10
   dff2c:	e7ad      	b.n	dfe8a <_strtol_l.isra.0+0x4a>
   dff2e:	bf00      	nop
   dff30:	000e13ea 	.word	0x000e13ea

000dff34 <strtol>:
   dff34:	4613      	mov	r3, r2
   dff36:	460a      	mov	r2, r1
   dff38:	4601      	mov	r1, r0
   dff3a:	4802      	ldr	r0, [pc, #8]	; (dff44 <strtol+0x10>)
   dff3c:	6800      	ldr	r0, [r0, #0]
   dff3e:	f7ff bf7f 	b.w	dfe40 <_strtol_l.isra.0>
   dff42:	bf00      	nop
   dff44:	2003e12c 	.word	0x2003e12c

000dff48 <close>:
   dff48:	4b02      	ldr	r3, [pc, #8]	; (dff54 <close+0xc>)
   dff4a:	4601      	mov	r1, r0
   dff4c:	6818      	ldr	r0, [r3, #0]
   dff4e:	f000 b8c9 	b.w	e00e4 <_close_r>
   dff52:	bf00      	nop
   dff54:	2003e12c 	.word	0x2003e12c

000dff58 <fstat>:
   dff58:	4b02      	ldr	r3, [pc, #8]	; (dff64 <fstat+0xc>)
   dff5a:	460a      	mov	r2, r1
   dff5c:	4601      	mov	r1, r0
   dff5e:	6818      	ldr	r0, [r3, #0]
   dff60:	f000 b8d0 	b.w	e0104 <_fstat_r>
   dff64:	2003e12c 	.word	0x2003e12c

000dff68 <lseek>:
   dff68:	4613      	mov	r3, r2
   dff6a:	460a      	mov	r2, r1
   dff6c:	4601      	mov	r1, r0
   dff6e:	4802      	ldr	r0, [pc, #8]	; (dff78 <lseek+0x10>)
   dff70:	6800      	ldr	r0, [r0, #0]
   dff72:	f000 b8dd 	b.w	e0130 <_lseek_r>
   dff76:	bf00      	nop
   dff78:	2003e12c 	.word	0x2003e12c

000dff7c <open>:
   dff7c:	b40e      	push	{r1, r2, r3}
   dff7e:	b503      	push	{r0, r1, lr}
   dff80:	ab03      	add	r3, sp, #12
   dff82:	4601      	mov	r1, r0
   dff84:	4806      	ldr	r0, [pc, #24]	; (dffa0 <open+0x24>)
   dff86:	f853 2b04 	ldr.w	r2, [r3], #4
   dff8a:	9301      	str	r3, [sp, #4]
   dff8c:	6800      	ldr	r0, [r0, #0]
   dff8e:	9b04      	ldr	r3, [sp, #16]
   dff90:	f000 f8e0 	bl	e0154 <_open_r>
   dff94:	b002      	add	sp, #8
   dff96:	f85d eb04 	ldr.w	lr, [sp], #4
   dff9a:	b003      	add	sp, #12
   dff9c:	4770      	bx	lr
   dff9e:	bf00      	nop
   dffa0:	2003e12c 	.word	0x2003e12c

000dffa4 <read>:
   dffa4:	4613      	mov	r3, r2
   dffa6:	460a      	mov	r2, r1
   dffa8:	4601      	mov	r1, r0
   dffaa:	4802      	ldr	r0, [pc, #8]	; (dffb4 <read+0x10>)
   dffac:	6800      	ldr	r0, [r0, #0]
   dffae:	f000 b8e3 	b.w	e0178 <_read_r>
   dffb2:	bf00      	nop
   dffb4:	2003e12c 	.word	0x2003e12c

000dffb8 <unlink>:
   dffb8:	4b02      	ldr	r3, [pc, #8]	; (dffc4 <unlink+0xc>)
   dffba:	4601      	mov	r1, r0
   dffbc:	6818      	ldr	r0, [r3, #0]
   dffbe:	f000 b80d 	b.w	dffdc <_unlink_r>
   dffc2:	bf00      	nop
   dffc4:	2003e12c 	.word	0x2003e12c

000dffc8 <write>:
   dffc8:	4613      	mov	r3, r2
   dffca:	460a      	mov	r2, r1
   dffcc:	4601      	mov	r1, r0
   dffce:	4802      	ldr	r0, [pc, #8]	; (dffd8 <write+0x10>)
   dffd0:	6800      	ldr	r0, [r0, #0]
   dffd2:	f000 b813 	b.w	dfffc <_write_r>
   dffd6:	bf00      	nop
   dffd8:	2003e12c 	.word	0x2003e12c

000dffdc <_unlink_r>:
   dffdc:	b538      	push	{r3, r4, r5, lr}
   dffde:	4d06      	ldr	r5, [pc, #24]	; (dfff8 <_unlink_r+0x1c>)
   dffe0:	2300      	movs	r3, #0
   dffe2:	4604      	mov	r4, r0
   dffe4:	4608      	mov	r0, r1
   dffe6:	602b      	str	r3, [r5, #0]
   dffe8:	f7f9 ffa8 	bl	d9f3c <_unlink>
   dffec:	1c43      	adds	r3, r0, #1
   dffee:	d102      	bne.n	dfff6 <_unlink_r+0x1a>
   dfff0:	682b      	ldr	r3, [r5, #0]
   dfff2:	b103      	cbz	r3, dfff6 <_unlink_r+0x1a>
   dfff4:	6023      	str	r3, [r4, #0]
   dfff6:	bd38      	pop	{r3, r4, r5, pc}
   dfff8:	2003e7f0 	.word	0x2003e7f0

000dfffc <_write_r>:
   dfffc:	b538      	push	{r3, r4, r5, lr}
   dfffe:	4d07      	ldr	r5, [pc, #28]	; (e001c <_write_r+0x20>)
   e0000:	4604      	mov	r4, r0
   e0002:	4608      	mov	r0, r1
   e0004:	4611      	mov	r1, r2
   e0006:	2200      	movs	r2, #0
   e0008:	602a      	str	r2, [r5, #0]
   e000a:	461a      	mov	r2, r3
   e000c:	f7f9 ff5e 	bl	d9ecc <_write>
   e0010:	1c43      	adds	r3, r0, #1
   e0012:	d102      	bne.n	e001a <_write_r+0x1e>
   e0014:	682b      	ldr	r3, [r5, #0]
   e0016:	b103      	cbz	r3, e001a <_write_r+0x1e>
   e0018:	6023      	str	r3, [r4, #0]
   e001a:	bd38      	pop	{r3, r4, r5, pc}
   e001c:	2003e7f0 	.word	0x2003e7f0

000e0020 <__register_exitproc>:
   e0020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e0024:	f8df 80b8 	ldr.w	r8, [pc, #184]	; e00e0 <__register_exitproc+0xc0>
   e0028:	4606      	mov	r6, r0
   e002a:	f8d8 0000 	ldr.w	r0, [r8]
   e002e:	461f      	mov	r7, r3
   e0030:	460d      	mov	r5, r1
   e0032:	4691      	mov	r9, r2
   e0034:	f000 f878 	bl	e0128 <__retarget_lock_acquire_recursive>
   e0038:	4b25      	ldr	r3, [pc, #148]	; (e00d0 <__register_exitproc+0xb0>)
   e003a:	681c      	ldr	r4, [r3, #0]
   e003c:	b934      	cbnz	r4, e004c <__register_exitproc+0x2c>
   e003e:	4c25      	ldr	r4, [pc, #148]	; (e00d4 <__register_exitproc+0xb4>)
   e0040:	601c      	str	r4, [r3, #0]
   e0042:	4b25      	ldr	r3, [pc, #148]	; (e00d8 <__register_exitproc+0xb8>)
   e0044:	b113      	cbz	r3, e004c <__register_exitproc+0x2c>
   e0046:	681b      	ldr	r3, [r3, #0]
   e0048:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   e004c:	6863      	ldr	r3, [r4, #4]
   e004e:	2b1f      	cmp	r3, #31
   e0050:	dd07      	ble.n	e0062 <__register_exitproc+0x42>
   e0052:	f8d8 0000 	ldr.w	r0, [r8]
   e0056:	f000 f869 	bl	e012c <__retarget_lock_release_recursive>
   e005a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   e005e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e0062:	b34e      	cbz	r6, e00b8 <__register_exitproc+0x98>
   e0064:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   e0068:	b988      	cbnz	r0, e008e <__register_exitproc+0x6e>
   e006a:	4b1c      	ldr	r3, [pc, #112]	; (e00dc <__register_exitproc+0xbc>)
   e006c:	b923      	cbnz	r3, e0078 <__register_exitproc+0x58>
   e006e:	f8d8 0000 	ldr.w	r0, [r8]
   e0072:	f000 f85a 	bl	e012a <__retarget_lock_release>
   e0076:	e7f0      	b.n	e005a <__register_exitproc+0x3a>
   e0078:	f44f 7084 	mov.w	r0, #264	; 0x108
   e007c:	f7fa f9c2 	bl	da404 <malloc>
   e0080:	2800      	cmp	r0, #0
   e0082:	d0f4      	beq.n	e006e <__register_exitproc+0x4e>
   e0084:	2300      	movs	r3, #0
   e0086:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   e008a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   e008e:	6863      	ldr	r3, [r4, #4]
   e0090:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   e0094:	2201      	movs	r2, #1
   e0096:	409a      	lsls	r2, r3
   e0098:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   e009c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   e00a0:	4313      	orrs	r3, r2
   e00a2:	2e02      	cmp	r6, #2
   e00a4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   e00a8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   e00ac:	bf02      	ittt	eq
   e00ae:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   e00b2:	431a      	orreq	r2, r3
   e00b4:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   e00b8:	6863      	ldr	r3, [r4, #4]
   e00ba:	f8d8 0000 	ldr.w	r0, [r8]
   e00be:	1c5a      	adds	r2, r3, #1
   e00c0:	3302      	adds	r3, #2
   e00c2:	6062      	str	r2, [r4, #4]
   e00c4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   e00c8:	f000 f830 	bl	e012c <__retarget_lock_release_recursive>
   e00cc:	2000      	movs	r0, #0
   e00ce:	e7c6      	b.n	e005e <__register_exitproc+0x3e>
   e00d0:	2003e7e0 	.word	0x2003e7e0
   e00d4:	2003e754 	.word	0x2003e754
   e00d8:	00000000 	.word	0x00000000
   e00dc:	000da405 	.word	0x000da405
   e00e0:	2003e190 	.word	0x2003e190

000e00e4 <_close_r>:
   e00e4:	b538      	push	{r3, r4, r5, lr}
   e00e6:	4d06      	ldr	r5, [pc, #24]	; (e0100 <_close_r+0x1c>)
   e00e8:	2300      	movs	r3, #0
   e00ea:	4604      	mov	r4, r0
   e00ec:	4608      	mov	r0, r1
   e00ee:	602b      	str	r3, [r5, #0]
   e00f0:	f7f9 fefc 	bl	d9eec <_close>
   e00f4:	1c43      	adds	r3, r0, #1
   e00f6:	d102      	bne.n	e00fe <_close_r+0x1a>
   e00f8:	682b      	ldr	r3, [r5, #0]
   e00fa:	b103      	cbz	r3, e00fe <_close_r+0x1a>
   e00fc:	6023      	str	r3, [r4, #0]
   e00fe:	bd38      	pop	{r3, r4, r5, pc}
   e0100:	2003e7f0 	.word	0x2003e7f0

000e0104 <_fstat_r>:
   e0104:	b538      	push	{r3, r4, r5, lr}
   e0106:	4d07      	ldr	r5, [pc, #28]	; (e0124 <_fstat_r+0x20>)
   e0108:	2300      	movs	r3, #0
   e010a:	4604      	mov	r4, r0
   e010c:	4608      	mov	r0, r1
   e010e:	4611      	mov	r1, r2
   e0110:	602b      	str	r3, [r5, #0]
   e0112:	f7f9 fef3 	bl	d9efc <_fstat>
   e0116:	1c43      	adds	r3, r0, #1
   e0118:	d102      	bne.n	e0120 <_fstat_r+0x1c>
   e011a:	682b      	ldr	r3, [r5, #0]
   e011c:	b103      	cbz	r3, e0120 <_fstat_r+0x1c>
   e011e:	6023      	str	r3, [r4, #0]
   e0120:	bd38      	pop	{r3, r4, r5, pc}
   e0122:	bf00      	nop
   e0124:	2003e7f0 	.word	0x2003e7f0

000e0128 <__retarget_lock_acquire_recursive>:
   e0128:	4770      	bx	lr

000e012a <__retarget_lock_release>:
   e012a:	4770      	bx	lr

000e012c <__retarget_lock_release_recursive>:
   e012c:	4770      	bx	lr
	...

000e0130 <_lseek_r>:
   e0130:	b538      	push	{r3, r4, r5, lr}
   e0132:	4d07      	ldr	r5, [pc, #28]	; (e0150 <_lseek_r+0x20>)
   e0134:	4604      	mov	r4, r0
   e0136:	4608      	mov	r0, r1
   e0138:	4611      	mov	r1, r2
   e013a:	2200      	movs	r2, #0
   e013c:	602a      	str	r2, [r5, #0]
   e013e:	461a      	mov	r2, r3
   e0140:	f7f9 fee4 	bl	d9f0c <_lseek>
   e0144:	1c43      	adds	r3, r0, #1
   e0146:	d102      	bne.n	e014e <_lseek_r+0x1e>
   e0148:	682b      	ldr	r3, [r5, #0]
   e014a:	b103      	cbz	r3, e014e <_lseek_r+0x1e>
   e014c:	6023      	str	r3, [r4, #0]
   e014e:	bd38      	pop	{r3, r4, r5, pc}
   e0150:	2003e7f0 	.word	0x2003e7f0

000e0154 <_open_r>:
   e0154:	b538      	push	{r3, r4, r5, lr}
   e0156:	4d07      	ldr	r5, [pc, #28]	; (e0174 <_open_r+0x20>)
   e0158:	4604      	mov	r4, r0
   e015a:	4608      	mov	r0, r1
   e015c:	4611      	mov	r1, r2
   e015e:	2200      	movs	r2, #0
   e0160:	602a      	str	r2, [r5, #0]
   e0162:	461a      	mov	r2, r3
   e0164:	f7f9 feaa 	bl	d9ebc <_open>
   e0168:	1c43      	adds	r3, r0, #1
   e016a:	d102      	bne.n	e0172 <_open_r+0x1e>
   e016c:	682b      	ldr	r3, [r5, #0]
   e016e:	b103      	cbz	r3, e0172 <_open_r+0x1e>
   e0170:	6023      	str	r3, [r4, #0]
   e0172:	bd38      	pop	{r3, r4, r5, pc}
   e0174:	2003e7f0 	.word	0x2003e7f0

000e0178 <_read_r>:
   e0178:	b538      	push	{r3, r4, r5, lr}
   e017a:	4d07      	ldr	r5, [pc, #28]	; (e0198 <_read_r+0x20>)
   e017c:	4604      	mov	r4, r0
   e017e:	4608      	mov	r0, r1
   e0180:	4611      	mov	r1, r2
   e0182:	2200      	movs	r2, #0
   e0184:	602a      	str	r2, [r5, #0]
   e0186:	461a      	mov	r2, r3
   e0188:	f7f9 fea8 	bl	d9edc <_read>
   e018c:	1c43      	adds	r3, r0, #1
   e018e:	d102      	bne.n	e0196 <_read_r+0x1e>
   e0190:	682b      	ldr	r3, [r5, #0]
   e0192:	b103      	cbz	r3, e0196 <_read_r+0x1e>
   e0194:	6023      	str	r3, [r4, #0]
   e0196:	bd38      	pop	{r3, r4, r5, pc}
   e0198:	2003e7f0 	.word	0x2003e7f0

000e019c <dynalib_user>:
   e019c:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   e01ac:	00000000 04020100 6e551008 776f6e6b     ..........Unknow
   e01bc:	6f4e006e 5700656e 00694669 004d5347     n.None.WiFi.GSM.
   e01cc:	53544d55 4d444300 544c0041 45490045     UMTS.CDMA.LTE.IE
   e01dc:	30384545 34353132 45544c00 5441435f     EE802154.LTE_CAT
   e01ec:	00314d5f 5f45544c 5f544143 0031424e     _M1.LTE_CAT_NB1.
   e01fc:	20746f4e 72616843 676e6967 61684300     Not Charging.Cha
   e020c:	64656772 73694400 72616863 676e6967     rged.Discharging
   e021c:	75614600 4400746c 6e6f6369 7463656e     .Fault.Diconnect
   e022c:	7b006465 656c6122 22737472 2c69253a     ed.{"alerts":%i,
   e023c:	6d697422 61747365 3a22706d 30756c25     "timestamp":%lu0
   e024c:	7d203030 69625500 73746f64 656c415f     00 }.Ubidots_Ale
   e025c:	485f7472 006b6f6f 6554227b 7265706d     rt_Hook.{"Temper
   e026c:	72757461 253a2265 66312e34 4822202c     ature":%4.1f, "H
   e027c:	64696d75 22797469 2e34253a 202c6631     umidity":%4.1f, 
   e028c:	65725022 72757373 253a2265 66312e34     "Pressure":%4.1f
   e029c:	4822202c 49746165 7865646e 34253a22     , "HeatIndex":%4
   e02ac:	2c66312e 56542220 656c434f 226c6576     .1f, "TVOClevel"
   e02bc:	2e35253a 202c6631 746c4122 64757469     :%5.1f, "Altitud
   e02cc:	253a2265 66312e34 4222202c 65747461     e":%4.1f, "Batte
   e02dc:	3a227972 202c6925 73655222 22737465     ry":%i, "Resets"
   e02ec:	2c69253a 6c412220 73747265 69253a22     :%i, "Alerts":%i
   e02fc:	6322202c 656e6e6f 69747463 3a22656d     , "connecttime":
   e030c:	222c6925 656d6974 6d617473 253a2270     %i,"timestamp":%
   e031c:	3030756c 45007d30 7269766e 656d6e6f     lu000}.Environme
   e032c:	6c61746e 6f6f485f 6f53006b 0072616c     ntal_Hook.Solar.
   e033c:	6c697455 00797469 20746f4e 62726556     Utility.Not Verb
   e034c:	0065736f 7325225b 25222c22 222c2273     ose.["%s","%s","
   e035c:	2c227325 303a3022 222c2230 303a3432     %s","0:00","24:0
   e036c:	222c2230 69766e45 6d6e6f72 22746e65     0","Environment"
   e037c:	7325222c 25222c22 65732069 222c2263     ,"%s","%i sec","
   e038c:	25256925 47005d22 6c676f6f 65685365     %i%%"].GoogleShe
   e039c:	45737465 726f7078 75700074 73696c62     etsExport.publis
   e03ac:	3a646568 00732520 53207325 2e32253a     hed: %s.%s S:%2.
   e03bc:	25256630 3a51202c 302e3225 20252566     0f%%, Q:%2.0f%% 
   e03cc:	65725000 72757373 65532065 726f736e     .Pressure Sensor
   e03dc:	746f4e00 776f4c20 776f5020 43007265     .Not Low Power.C
   e03ec:	656e6e6f 64657463 206e6920 73206925     onnected in %i s
   e03fc:	00736365 6c6c6543 72616c75 206f4e00     ecs.Cellular.No 
   e040c:	61746144 73655200 736e6f70 65522065     Data.Response Re
   e041c:	76696563 55006465 6f6e6b6e 72206e77     ceived.Unknown r
   e042c:	6f707365 2065736e 65636572 64656976     esponse recevied
   e043c:	00692520 64696255 2073746f 6b6f6f48      %i.Ubidots Hook
   e044c:	72614800 65522064 20746573 32206e69     .Hard Reset in 2
   e045c:	63657320 73646e6f 74655300 6c6f5320      seconds.Set Sol
   e046c:	50207261 7265776f 4d206465 0065646f     ar Powered Mode.
   e047c:	6c430030 65726165 6f532064 2072616c     0.Cleared Solar 
   e048c:	65776f50 20646572 65646f4d 74655300     Powered Mode.Set
   e049c:	72655620 65736f62 646f4d20 6c430065      Verbose Mode.Cl
   e04ac:	65726165 65562064 736f6272 6f4d2065     eared Verbose Mo
   e04bc:	25006564 66312e34 2500432a 66312e34     de.%4.1f*C.%4.1f
   e04cc:	25002525 66312e34 00615048 312e3425     %%.%4.1fHPa.%4.1
   e04dc:	684f6b66 3425006d 6d66312e 6f724600     fkOhm.%4.1fm.Fro
   e04ec:	7325206d 206f7420 53007325 65746174     m %s to %s.State
   e04fc:	61725420 7469736e 006e6f69 6e6e7552      Transition.Runn
   e050c:	00676e69 6c696144 6c432079 756e6165     ing.Daily Cleanu
   e051c:	6f4c0070 6e696461 79532067 6d657473     p.Loading System
   e052c:	66654420 746c7561 6f4c0073 6e696461      Defaults.Loadin
   e053c:	79732067 6d657473 66656420 746c7561     g system default
   e054c:	65740073 7265706d 72757461 75680065     s.temperature.hu
   e055c:	6964696d 70007974 73736572 00657275     midity.pressure.
   e056c:	00736167 69746c61 65647574 61654800     gas.altitude.Hea
   e057c:	6e492d74 00786564 6e676953 52006c61     t-Index.Signal.R
   e058c:	74657365 6e756f43 65540074 7265706d     esetCount.Temper
   e059c:	72757461 65520065 7361656c 74730065     ature.Release.st
   e05ac:	4f657461 67684366 776f6c00 65776f50     ateOfChg.lowPowe
   e05bc:	646f4d72 6c410065 73747265 6d695400     rMode.Alerts.Tim
   e05cc:	66664f65 00746573 74746142 43797265     eOffset.BatteryC
   e05dc:	65746e6f 72007478 74657365 6e756f43     ontext.resetCoun
   e05ec:	48007374 52647261 74657365 6e655300     ts.HardReset.Sen
   e05fc:	776f4e64 776f4c00 65776f50 646f4d72     dNow.LowPowerMod
   e060c:	6f530065 2d72616c 65646f4d 72655600     e.Solar-Mode.Ver
   e061c:	65736f62 646f4d2d 65530065 69542d74     bose-Mode.Set-Ti
   e062c:	6f7a656d 5300656e 442d7465 664f5453     mezone.Set-DSTOf
   e063c:	74657366 72724500 2d20726f 454d4220     fset.Error - BME
   e064c:	30303836 696e4920 6c616974 74617a69     6800 Initializat
   e065c:	006e6f69 6f727245 202d2072 36454d42     ion.Error - BME6
   e066c:	49203038 6974696e 7a696c61 6f697461     80 Initializatio
   e067c:	7553006e 73656363 202d2073 36454d42     n.Success - BME6
   e068c:	20303038 74696e49 696c6169 6974617a     800 Initializati
   e069c:	25006e6f 66312e32 43545520 61745300     on.%2.1f UTC.Sta
   e06ac:	70757472 6d6f6320 74656c70 6e490065     rtup complete.In
   e06bc:	65687420 73696420 6e6e6f63 20746365      the disconnect 
   e06cc:	6d6f7266 72615020 6c636974 75662065     from Particle fu
   e06dc:	6974636e 43006e6f 656e6e6f 6e697463     nction.Connectin
   e06ec:	74732067 20657461 20747562 65726c61     g state but alre
   e06fc:	20796461 6e6e6f63 65746365 6f430064     ady connected.Co
   e070c:	63656e6e 676e6974 61747320 62206574     nnecting state b
   e071c:	6c207475 6220776f 65747461 6d207972     ut low battery m
   e072c:	0065646f 6e6e6f43 69746365 6220676e     ode.Connecting b
   e073c:	3c207475 25253035 61686320 20656772     ut <50%% charge 
   e074c:	6f66202d 68207275 2072756f 65686373     - four hour sche
   e075c:	656c7564 6e6f4300 7463656e 20676e69     dule.Connecting 
   e076c:	20747562 362d3035 20252535 72616863     but 50-65%% char
   e077c:	2d206567 6f777420 756f6820 63732072     ge - two hour sc
   e078c:	75646568 4300656c 64756f6c 6e6f6320     hedule.Cloud con
   e079c:	7463656e 206e6f69 63637573 66737365     nection successf
   e07ac:	63006c75 64756f6c 6e6f6320 7463656e     ul.cloud connect
   e07bc:	206e6f69 75736e75 73656363 6c756673     ion unsuccessful
   e07cc:	69616600 2064656c 63206f74 656e6e6f     .failed to conne
   e07dc:	74207463 6c63206f 2c64756f 696f6420     ct to cloud, doi
   e07ec:	6420676e 20706565 65736572 72450074     ng deep reset.Er
   e07fc:	20726f72 74617453 202d2065 74737953     ror State - Syst
   e080c:	52206d65 74657365 61745300 45006574     em Reset.State.E
   e081c:	726f7272 61745320 2d206574 6c754620     rror State - Ful
   e082c:	6f4d206c 206d6564 65736552 6e490074     l Modem Reset.In
   e083c:	65687420 72696620 7261776d 70752065      the firmware up
   e084c:	65746164 61747320 66006574 776d7269     date state.firmw
   e085c:	20657261 61647075 63206574 6c706d6f     are update compl
   e086c:	64657465 72696600 7261776d 70752065     eted.firmware up
   e087c:	65746164 6d697420 6f206465 4f007475     date timed out.O
   e088c:	6f207475 656d2066 79726f6d 63636f20     ut of memory occ
   e089c:	65727275 69732064 253d657a 654d0064     urred size=%d.Me
   e08ac:	79726f6d 72615000 6c636974 6f632065     mory.Particle co
   e08bc:	63656e6e 6e6f6974 69616620 2c64656c     nnection failed,
   e08cc:	76657220 69747265 7420676e 6874206f      reverting to th
   e08dc:	6f632065 63656e6e 676e6974 61747320     e connecting sta
   e08ec:	00006574                                te..

000e08f0 <_ZTV5Timer>:
	...
   e08f8:	000d4ea9 000d4ef1 000d4bf5              .N...N...K..

000e0904 <_ZTVN5spark10LogHandlerE>:
	...
   e0914:	000d40a5 000d4b65                       .@..eK..

000e091c <_ZTVN5spark16SerialLogHandlerE>:
	...
   e0924:	000d4cfd 000d4d31 000dc2d5 000d4b67     .L..1M......gK..

000e0934 <_ZTV8MB85RC64>:
	...
   e093c:	000d4bcd 000d4be1 000d8761 000d87f7     .K...K..a.......
   e094c:	000d8879 000e01b6 000e01be 000e01c3     y...............
   e095c:	000e01c8 000e01cc 000e01d1 000e01d6     ................
   e096c:	000e01da 000e01e5 000e01f0 72617453     ............Star
   e097c:	20707574 63637573 66737365 00006c75     tup successful..
	...

000e09b8 <_ZL17FRAMversionNumber>:
   e09b8:	00000001 656d6954 6e6f7a20 666f2065     ....Time zone of
   e09c8:	74657366 00692520 656d6954 54534400     fset %i.Time.DST
   e09d8:	66666f20 20746573 312e3225 61660066      offset %2.1f.fa
   e09e8:	64656c69 206f7420 64616572 67657220     iled to read reg
   e09f8:	72646441 3230253d 6f632078 3d746e75     Addr=%02x count=
   e0a08:	66007525 656c6961 6f742064 61657220     %u.failed to rea
   e0a18:	65722064 64644167 30253d72 73207832     d regAddr=%02x s
   e0a28:	3d746174 46006425 2054554f 20646964     tat=%d.FOUT did 
   e0a38:	20746f6e 48206f67 00484749 20746f6e     not go HIGH.not 
   e0a48:	65746564 64657463 69616600 2064656c     detected.failed 
   e0a58:	77206f74 65746972 67657220 72646441     to write regAddr
   e0a68:	3230253d 74732078 253d7461 65730064     =%02x stat=%d.se
   e0a78:	54445774 00642520 63746177 676f6468     tWDT %d.watchdog
   e0a88:	656c6320 64657261 65526220 746c7573      cleared bResult
   e0a98:	0064253d 63746177 676f6468 74657320     =%d.watchdog set
   e0aa8:	756f6620 63655372 64253d73 65526220      fourSecs=%d bRe
   e0ab8:	746c7573 0064253d 43544157 474f4448     sult=%d.WATCHDOG
   e0ac8:	45454400 4f505f50 5f524557 4e574f44     .DEEP_POWER_DOWN
   e0ad8:	554f4300 4f44544e 545f4e57 52454d49     .COUNTDOWN_TIMER
   e0ae8:	414c4100 66004d52 756c6961 69206572     .ALARM.failure i
   e0af8:	7075206e 65746164 656b6157 73616552     n updateWakeReas
   e0b08:	25206e6f 61770064 7220656b 6f736165     on %d.wake reaso
   e0b18:	203d206e 66007325 756c6961 69206572     n = %s.failure i
   e0b28:	6573206e 756f4374 6f64746e 69546e77     n setCountdownTi
   e0b38:	2072656d 66006425 756c6961 69206572     mer %d.failure i
   e0b48:	6564206e 6f507065 44726577 206e776f     n deepPowerDown 
   e0b58:	52006425 535f4745 5045454c 5254435f     %d.REG_SLEEP_CTR
   e0b68:	78303d4c 00783225 6e646964 70207427     L=0x%2x.didn't p
   e0b78:	7265776f 776f6420 3025006e 252d6434     ower down.%04d-%
   e0b88:	2d643230 64323025 32302520 30253a64     02d-%02d %02d:%0
   e0b98:	253a6432 00643230 52746567 73416374     2d:%02d.getRtcAs
   e0ba8:	25206d54 65730073 79732074 6d657473     Tm %s.set system
   e0bb8:	6f6c6320 66206b63 206d6f72 20435452      clock from RTC 
   e0bc8:	66007325 656c6961 6f742064 74656420     %s.failed to det
   e0bd8:	20746365 38314241 73003530 74527465     ect AB1805.setRt
   e0be8:	54734163 7325206d 69616600 6572756c     cAsTm %s.failure
   e0bf8:	206e6920 52746573 72466374 6d546d6f      in setRtcFromTm
   e0c08:	00642520 20746573 20435452 6d6f7266      %d.set RTC from
   e0c18:	6f6c6320 25206475 70610073 62612e70      cloud %s.app.ab
   e0c28:	35303831 00000000                       1805....

000e0c30 <_ZTV6AB1805>:
	...
   e0c38:	000d7289 000d728b 000d78d5 000d795b     .r...r...x..[y..
   e0c48:	6b636142 756f7267 7550646e 73696c62     BackgroundPublis
   e0c58:	00000068                                h...

000e0c5c <_ZTV17BackgroundPublish>:
	...
   e0c64:	000d83b5 000d83d1 74697277 74614465     ........writeDat
   e0c74:	61662061 64656c69 72756420 20676e69     a failed during 
   e0c84:	73617265 72662065 64416d61 253d7264     erase framAddr=%
   e0c94:	00000075                                u...

000e0c98 <_ZTV6MB85RC>:
	...
   e0ca0:	000d86af 000d86b1 000d8761 000d87f7     ........a.......
   e0cb0:	000d8879 656c6966 3d6d754e 73206425     y...fileNum=%d s
   e0cc0:	3d657a69 00646c25 64616572 75657551     ize=%ld.readQueu
   e0cd0:	6c694665 64252065 65766520 253d746e     eFile %d event=%
   e0ce0:	61642073 253d6174 65720073 75516461     s data=%s.readQu
   e0cf0:	46657565 20656c69 63206425 7572726f     eueFile %d corru
   e0d00:	64657470 65766520 6e20746e 20656d61     pted event name 
   e0d10:	6420726f 00617461 64616572 75657551     or data.readQueu
   e0d20:	6c694665 64252065 64616220 67616d20     eFile %d bad mag
   e0d30:	253d6369 786c3830 72657620 6e6f6973     ic=%08lx version
   e0d40:	2075253d 64616568 69537265 253d657a     =%u headerSize=%
   e0d50:	616e2075 654c656d 75253d6e 73752f00     u nameLen=%u./us
   e0d60:	75702f72 65757162 77006575 65746972     r/pubqueue.write
   e0d70:	75657551 466f5465 73656c69 6c696620     QueueToFiles fil
   e0d80:	6d754e65 0064253d 65736572 726f2074     eNum=%d.reset or
   e0d90:	73696420 6e6e6f63 20746365 6e657665      disconnect even
   e0da0:	73202c74 20657661 656c6966 6f742073     t, save files to
   e0db0:	65757120 72006575 64006d61 61637369      queue.ram.disca
   e0dc0:	6e696472 6f632067 70757272 20646574     rding corrupted 
   e0dd0:	656c6966 00642520 6c627570 69687369     file %d.publishi
   e0de0:	2520676e 76652073 3d746e65 64207325     ng %s event=%s d
   e0df0:	3d617461 64007325 61637369 64656472     ata=%s.discarded
   e0e00:	65766520 2520746e 69770064 61526874      event %d.withRa
   e0e10:	6575516d 69536575 2528657a 77002975     mQueueSize(%u).w
   e0e20:	46687469 51656c69 65756575 657a6953     ithFileQueueSize
   e0e30:	29752528 53595300 5f4d4554 45524854     (%u).SYSTEM_THRE
   e0e40:	45284441 4c42414e 20294445 72207369     AD(ENABLED) is r
   e0e50:	69757165 00646572 6c627570 43687369     equired.publishC
   e0e60:	6f6d6d6f 7665206e 4e746e65 3d656d61     ommon eventName=
   e0e70:	65207325 746e6576 61746144 0073253d     %s eventData=%s.
   e0e80:	6e6e6163 6320746f 74616572 74732065     cannot create st
   e0e90:	643a3a64 65757165 72616c20 20726567     d::deque larger 
   e0ea0:	6e616874 78616d20 7a69735f 00292865     than max_size().
   e0eb0:	656c6966 75657551 6e654c65 2075253d     fileQueueLen=%u 
   e0ec0:	516d6172 65756575 3d6e654c 63207525     ramQueueLen=%u c
   e0ed0:	656e6e6f 64657463 0064253d 75657571     onnected=%d.queu
   e0ee0:	74206465 6172206f 6575516d 70006575     ed to ramQueue.p
   e0ef0:	696c6275 73206873 65636375 25207373     ublish success %
   e0f00:	65720064 65766f6d 69662064 2520656c     d.removed file %
   e0f10:	75700064 73696c62 61662068 64656c69     d.publish failed
   e0f20:	00642520 74697277 20676e69 66206f74      %d.writing to f
   e0f30:	73656c69 74666120 70207265 696c6275     iles after publi
   e0f40:	66206873 756c6961 61006572 702e7070     sh failure.app.p
   e0f50:	00716275                                ubq.

000e0f54 <_ZTV17PublishQueuePosix>:
	...
   e0f5c:	000d90fd 000d93d5 000d93f9 64383025     ............%08d
   e0f6c:	72002f00 766f6d65 25206465 73250073     ./.removed %s.%s
   e0f7c:	69786520 20737473 20646e61 61207369      exists and is a
   e0f8c:	72696420 6f746365 66007972 20656c69      directory.file 
   e0f9c:	74206e69 77206568 202c7961 656c6564     in the way, dele
   e0fac:	676e6974 00732520 74617473 6c696620     ting %s.stat fil
   e0fbc:	65206465 6f6e7272 0064253d 61657263     ed errno=%d.crea
   e0fcc:	20646574 20726964 6d007325 7269646b     ted dir %s.mkdir
   e0fdc:	69616620 2064656c 6e727265 64253d6f      failed errno=%d
   e0fec:	636e7500 69666e6f 65727567 69642064     .unconfigured di
   e0ffc:	74615072 63730068 696e6e61 2520676e     rPath.scanning %
   e100c:	69772073 70206874 65747461 25206e72     s with pattern %
   e101c:	64610073 676e6964 206f7420 75657571     s.adding to queu
   e102c:	64252065 00732520 46746567 46656c69     e %d %s.getFileF
   e103c:	516d6f72 65756575 74657220 656e7275     romQueue returne
   e104c:	64252064 70706100 7165732e 656c6966     d %d.app.seqfile
   e105c:	00000000                                ....

000e1060 <_ZTV14SequentialFile>:
	...
   e1068:	000d9755 000d9781 000d940d              U...........

000e1074 <_ZTVN5spark13CellularClassE>:
	...
   e107c:	000da59f 000da595 000da58b 000da541     ............A...
   e108c:	000da57f 000da573 000dc62d 000dc635     ....s...-...5...
   e109c:	000da567 000da55f 000da555 000da54b     g..._...U...K...
   e10ac:	000dc665                                e...

000e10b0 <_ZTV14CellularSignal>:
	...
   e10b8:	000da64d 000da675 000da64f 000da685     M...u...O.......
   e10c8:	000da6b9 000da6e5 000da719 000da769     ............i...
   e10d8:	000da653 000da66f fffffffc 00000000     S...o...........
   e10e8:	000da78f                                ....

000e10ec <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   e10f4:	000da7af 000da7b5 000da7f3 000da7c3     ................
   e1104:	000da7b1                                ....

000e1108 <_ZTVN5spark13EthernetClassE>:
	...
   e1110:	000dadff 000dadf5 000dadeb 000dade1     ................
   e1120:	000dadd5 000dadc9 000dc62d 000dc635     ........-...5...
   e1130:	000dadbd 000dadb5 000dadab 000dada1     ................
   e1140:	000dc665                                e...

000e1144 <_ZTV7TwoWire>:
	...
   e114c:	000daff5 000db03f 000db017 000daff7     ....?...........
   e115c:	000db01f 000db027 000db02f 000db037     ....'.../...7...

000e116c <_ZTV9IPAddress>:
	...
   e1174:	000db1e1 000db1d1 000db1d3 34302575     ............u%04
   e1184:	61620078 53006475 61697265 6553006c     x.baud.Serial.Se
   e1194:	6c616972 534a0031 74534e4f 6d616572     rial1.JSONStream
   e11a4:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   e11b4:	75303130 205d0020 00202c00 203a2928     010u .] ., .(): 
   e11c4:	005b2000 65646f63 00203d20 61746564     . [.code = .deta
   e11d4:	20736c69 0d00203d 0063000a 66006e6c     ils = ....c.ln.f
   e11e4:	6f63006e 64006564 69617465 0000006c     n.code.detail...

000e11f4 <_ZTVN5spark16JSONStreamWriterE>:
	...
   e11fc:	000db69d 000db6c3 000db681 000db2e1     ................

000e120c <_ZTVN5spark16StreamLogHandlerE>:
	...
   e1214:	000dbaf1 000dbb09 000dc2d5 000d4b67     ............gK..

000e1224 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   e122c:	000dbb1d 000dbb31 000dc479 000db689     ....1...y.......

000e123c <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   e1244:	000db69b 000db6d1 000dc211 000db68b     ................

000e1254 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   e125c:	000db699 000db6df 000dba39 000db6fd     ........9.......

000e126c <_ZTVN5spark12NetworkClassE>:
	...
   e1274:	000dc5ed 000dc5f7 000dc601 000dc60b     ................
   e1284:	000dc615 000dc621 000dc62d 000dc635     ....!...-...5...
   e1294:	000dc63d 000dc649 000dc651 000dc65b     =...I...Q...[...
   e12a4:	000dc665                                e...

000e12a8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   e12a8:	18100800 38302820 69726977 5300676e     .... (08wiring.S
   e12b8:	65747379 6c73206d 20706565 666e6f63     ystem sleep conf
   e12c8:	72756769 6f697461 7369206e 766e6920     iguration is inv
   e12d8:	64696c61 005a002e 33302b25 30253a64     alid..Z.%+03d:%0
   e12e8:	25007532 6d252d59 5464252d 253a4825     2u.%Y-%m-%dT%H:%
   e12f8:	53253a4d 61007a25 69746373 0000656d     M:%S%z.asctime..

000e1308 <_ZTV11USARTSerial>:
	...
   e1310:	000dd47d 000dd4eb 000dd4c3 000dc8ab     }...............
   e1320:	000dd493 000dd4af 000dd4a1 000dd4bd     ................
   e1330:	000dd47f 000dd485                       ........

000e1338 <_ZTV9USBSerial>:
	...
   e1340:	000dd58b 000dd5f3 000dd5c9 000dc8ab     ................
   e1350:	000dd5bb 000dd58d 000dd59d 000dd5ed     ................
   e1360:	000dd5ad 000dd585                       ........

000e1368 <_ZSt7nothrow>:
   e1368:	00000000 00776f70 74727173 00000066     ....pow.sqrtf...
	...

000e1380 <TWO52>:
   e1380:	00000000 43300000 00000000 c3300000     ......0C......0.
   e1390:	73332e25 332e2520 64332573 322e2520     %.3s %.3s%3d %.2
   e13a0:	2e253a64 253a6432 2064322e 000a6425     d:%.2d:%.2d %d..

000e13b0 <day_name.6145>:
   e13b0:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   e13c0:	61536972                                 riSat

000e13c5 <mon_name.6146>:
   e13c5:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   e13d5:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   e13e5:	63654476                                vDec

000e13e9 <_ctype_>:
   e13e9:	20202000 20202020 28282020 20282828     .         ((((( 
   e13f9:	20202020 20202020 20202020 20202020                     
   e1409:	10108820 10101010 10101010 10101010      ...............
   e1419:	04040410 04040404 10040404 10101010     ................
   e1429:	41411010 41414141 01010101 01010101     ..AAAAAA........
   e1439:	01010101 01010101 01010101 10101010     ................
   e1449:	42421010 42424242 02020202 02020202     ..BBBBBB........
   e1459:	02020202 02020202 02020202 10101010     ................
   e1469:	00000020 00000000 00000000 00000000      ...............
	...

000e14ea <link_const_variable_data_end>:
	...

000e14ec <link_constructors_location>:
   e14ec:	000d65b1 	.word	0x000d65b1
   e14f0:	000d727d 	.word	0x000d727d
   e14f4:	000d7d55 	.word	0x000d7d55
   e14f8:	000d93c5 	.word	0x000d93c5
   e14fc:	000d9a9d 	.word	0x000d9a9d
   e1500:	000da531 	.word	0x000da531
   e1504:	000da61d 	.word	0x000da61d
   e1508:	000dae09 	.word	0x000dae09
   e150c:	000dc2c5 	.word	0x000dc2c5
   e1510:	000dc739 	.word	0x000dc739
   e1514:	000dca19 	.word	0x000dca19
   e1518:	000dd015 	.word	0x000dd015
   e151c:	000dd469 	.word	0x000dd469
