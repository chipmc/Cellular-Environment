
/Users/chipmc/Documents/Maker/Particle/Projects/Cellular-Environment/target/1.4.2/electron/Cellular-Environment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008470  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  08088490  08088490  00018490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  08088498  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000154  20000000  0808849c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000007ec  20000158  20000158  00040158  2**3
                  ALLOC
  7 .module_info_suffix 00000028  080885f0  080885f0  000385f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  08088618  08088618  00038618  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000bf62e  00000000  00000000  0003861c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00012091  00000000  00000000  000f7c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00018ed9  00000000  00000000  00109cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002458  00000000  00000000  00122bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000039e8  00000000  00000000  0012500c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000282a9  00000000  00000000  001289f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00029f70  00000000  00000000  00150c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000a9bae  00000000  00000000  0017ac0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000ce2c  00000000  00000000  002247bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f007 f893 	bl	808715c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f007 f898 	bl	8087172 <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	0808849c 	.word	0x0808849c
 8080050:	20000154 	.word	0x20000154
 8080054:	20000158 	.word	0x20000158
 8080058:	20000944 	.word	0x20000944
 808005c:	20000944 	.word	0x20000944

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f004 fa0b 	bl	808447c <module_user_init_hook>
 8080066:	4b07      	ldr	r3, [pc, #28]	; (8080084 <module_user_init+0x24>)
 8080068:	4c07      	ldr	r4, [pc, #28]	; (8080088 <module_user_init+0x28>)
 808006a:	461e      	mov	r6, r3
 808006c:	1ae4      	subs	r4, r4, r3
 808006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080070:	2500      	movs	r5, #0
 8080072:	42a5      	cmp	r5, r4
 8080074:	d004      	beq.n	8080080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 808007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f8      	b.n	8080072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080080:	bd70      	pop	{r4, r5, r6, pc}
 8080082:	bf00      	nop
 8080084:	08088450 	.word	0x08088450
 8080088:	08088488 	.word	0x08088488

0808008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 808008c:	f001 bd78 	b.w	8081b80 <setup>

08080090 <module_user_loop>:
}

void module_user_loop() {
 8080090:	b508      	push	{r3, lr}
    loop();
 8080092:	f001 fb41 	bl	8081718 <loop>
    _post_loop();
}
 8080096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 808009a:	f004 b9b1 	b.w	8084400 <_post_loop>

0808009e <_Znwj>:
 808009e:	f002 bd29 	b.w	8082af4 <malloc>

080800a2 <_ZdlPv>:
 80800a2:	f002 bd2f 	b.w	8082b04 <free>

080800a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a6:	7800      	ldrb	r0, [r0, #0]
 80800a8:	fab0 f080 	clz	r0, r0
 80800ac:	0940      	lsrs	r0, r0, #5
 80800ae:	4770      	bx	lr

080800b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800b0:	2301      	movs	r3, #1
 80800b2:	7003      	strb	r3, [r0, #0]
 80800b4:	4770      	bx	lr

080800b6 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80800b6:	b148      	cbz	r0, 80800cc <null_ptr_check+0x16>
 80800b8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80800ba:	b13b      	cbz	r3, 80800cc <null_ptr_check+0x16>
 80800bc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80800be:	b12b      	cbz	r3, 80800cc <null_ptr_check+0x16>
 80800c0:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80800c2:	fab0 f080 	clz	r0, r0
 80800c6:	0940      	lsrs	r0, r0, #5
 80800c8:	4240      	negs	r0, r0
 80800ca:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 80800cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		/* Device structure is fine */
		rslt = BME680_OK;
	}

	return rslt;
}
 80800d0:	4770      	bx	lr

080800d2 <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 80800d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80800d4:	4602      	mov	r2, r0
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 80800d6:	4608      	mov	r0, r1

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 80800d8:	460c      	mov	r4, r1
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 80800da:	f7ff ffec 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80800de:	4605      	mov	r5, r0
 80800e0:	bb50      	cbnz	r0, 8080138 <set_mem_page+0x66>
		if (reg_addr > 0x7f)
			mem_page = BME680_MEM_PAGE1;
		else
			mem_page = BME680_MEM_PAGE0;
 80800e2:	f012 0f80 	tst.w	r2, #128	; 0x80

		if (mem_page != dev->mem_page) {
 80800e6:	78ca      	ldrb	r2, [r1, #3]
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (reg_addr > 0x7f)
			mem_page = BME680_MEM_PAGE1;
		else
			mem_page = BME680_MEM_PAGE0;
 80800e8:	bf14      	ite	ne
 80800ea:	2300      	movne	r3, #0
 80800ec:	2310      	moveq	r3, #16

		if (mem_page != dev->mem_page) {
 80800ee:	429a      	cmp	r2, r3
 80800f0:	d022      	beq.n	8080138 <set_mem_page+0x66>
			dev->mem_page = mem_page;
 80800f2:	70cb      	strb	r3, [r1, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 80800f4:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 80800f6:	2301      	movs	r3, #1
 80800f8:	f10d 0207 	add.w	r2, sp, #7
 80800fc:	21f3      	movs	r1, #243	; 0xf3
 80800fe:	7860      	ldrb	r0, [r4, #1]
 8080100:	47b0      	blx	r6
 8080102:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
 8080106:	b110      	cbz	r0, 808010e <set_mem_page+0x3c>
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
					&reg, 1);
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 8080108:	f06f 0501 	mvn.w	r5, #1
 808010c:	e014      	b.n	8080138 <set_mem_page+0x66>
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 808010e:	78e3      	ldrb	r3, [r4, #3]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8080110:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8080112:	f003 0210 	and.w	r2, r3, #16
 8080116:	f89d 3007 	ldrb.w	r3, [sp, #7]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 808011a:	2173      	movs	r1, #115	; 0x73
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 808011c:	f023 0310 	bic.w	r3, r3, #16
 8080120:	4313      	orrs	r3, r2
 8080122:	f88d 3007 	strb.w	r3, [sp, #7]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8080126:	f10d 0207 	add.w	r2, sp, #7
 808012a:	2301      	movs	r3, #1
 808012c:	7860      	ldrb	r0, [r4, #1]
 808012e:	47b0      	blx	r6
 8080130:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
					&reg, 1);
				if (dev->com_rslt != 0)
 8080134:	2800      	cmp	r0, #0
 8080136:	d1e7      	bne.n	8080108 <set_mem_page+0x36>
			}
		}
	}

	return rslt;
}
 8080138:	4628      	mov	r0, r5
 808013a:	b002      	add	sp, #8
 808013c:	bd70      	pop	{r4, r5, r6, pc}

0808013e <get_mem_page>:

/*!
 * @brief This internal API is used to get the memory page based on register address.
 */
static int8_t get_mem_page(struct bme680_dev *dev)
{
 808013e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8080140:	4604      	mov	r4, r0
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080142:	f7ff ffb8 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080146:	4605      	mov	r5, r0
 8080148:	b988      	cbnz	r0, 808016e <get_mem_page+0x30>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 808014a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 808014c:	2301      	movs	r3, #1
 808014e:	f10d 0207 	add.w	r2, sp, #7
 8080152:	21f3      	movs	r1, #243	; 0xf3
 8080154:	7860      	ldrb	r0, [r4, #1]
 8080156:	47b0      	blx	r6
 8080158:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
		if (dev->com_rslt != 0)
 808015c:	b928      	cbnz	r0, 808016a <get_mem_page+0x2c>
			rslt = BME680_E_COM_FAIL;
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 808015e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8080162:	f003 0310 	and.w	r3, r3, #16
 8080166:	70e3      	strb	r3, [r4, #3]
 8080168:	e001      	b.n	808016e <get_mem_page+0x30>
	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
		if (dev->com_rslt != 0)
			rslt = BME680_E_COM_FAIL;
 808016a:	f06f 0501 	mvn.w	r5, #1
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
	}

	return rslt;
}
 808016e:	4628      	mov	r0, r5
 8080170:	b002      	add	sp, #8
 8080172:	bd70      	pop	{r4, r5, r6, pc}

08080174 <boundary_check.isra.1.constprop.2>:
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;

	if (value != NULL) {
 8080174:	b140      	cbz	r0, 8080188 <boundary_check.isra.1.constprop.2+0x14>
			/* Auto correct the invalid value to minimum value */
			*value = min;
			dev->info_msg |= BME680_I_MIN_CORRECTION;
		}
		/* Check if value is above maximum value */
		if (*value > max) {
 8080176:	7803      	ldrb	r3, [r0, #0]
 8080178:	428b      	cmp	r3, r1
 808017a:	d908      	bls.n	808018e <boundary_check.isra.1.constprop.2+0x1a>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 808017c:	7001      	strb	r1, [r0, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 808017e:	7813      	ldrb	r3, [r2, #0]
 8080180:	f043 0302 	orr.w	r3, r3, #2
 8080184:	7013      	strb	r3, [r2, #0]
 8080186:	e002      	b.n	808018e <boundary_check.isra.1.constprop.2+0x1a>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
 8080188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 808018c:	4770      	bx	lr
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;
 808018e:	2000      	movs	r0, #0
	} else {
		rslt = BME680_E_NULL_PTR;
	}

	return rslt;
}
 8080190:	4770      	bx	lr

08080192 <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 8080192:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8080196:	4606      	mov	r6, r0
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080198:	4618      	mov	r0, r3

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 808019a:	4688      	mov	r8, r1
 808019c:	4691      	mov	r9, r2
 808019e:	461d      	mov	r5, r3
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80801a0:	f7ff ff89 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80801a4:	4604      	mov	r4, r0
 80801a6:	b9a8      	cbnz	r0, 80801d4 <bme680_get_regs+0x42>
		if (dev->intf == BME680_SPI_INTF) {
 80801a8:	78ab      	ldrb	r3, [r5, #2]
 80801aa:	b93b      	cbnz	r3, 80801bc <bme680_get_regs+0x2a>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
 80801ac:	4629      	mov	r1, r5
 80801ae:	4630      	mov	r0, r6
 80801b0:	f7ff ff8f 	bl	80800d2 <set_mem_page>
			if (rslt == BME680_OK)
 80801b4:	4604      	mov	r4, r0
 80801b6:	b908      	cbnz	r0, 80801bc <bme680_get_regs+0x2a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 80801b8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80801bc:	6caf      	ldr	r7, [r5, #72]	; 0x48
 80801be:	464b      	mov	r3, r9
 80801c0:	4642      	mov	r2, r8
 80801c2:	4631      	mov	r1, r6
 80801c4:	7868      	ldrb	r0, [r5, #1]
 80801c6:	47b8      	blx	r7
		if (dev->com_rslt != 0)
 80801c8:	2800      	cmp	r0, #0
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
			if (rslt == BME680_OK)
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80801ca:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
		if (dev->com_rslt != 0)
			rslt = BME680_E_COM_FAIL;
 80801ce:	bf18      	it	ne
 80801d0:	f06f 0401 	mvnne.w	r4, #1
	}

	return rslt;
}
 80801d4:	4620      	mov	r0, r4
 80801d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080801da <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
 80801da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80801de:	461e      	mov	r6, r3
 80801e0:	b08b      	sub	sp, #44	; 0x2c
 80801e2:	4683      	mov	fp, r0
 80801e4:	468a      	mov	sl, r1
 80801e6:	4614      	mov	r4, r2
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 80801e8:	2100      	movs	r1, #0
 80801ea:	2228      	movs	r2, #40	; 0x28
 80801ec:	4668      	mov	r0, sp
 80801ee:	f006 ffc0 	bl	8087172 <memset>
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80801f2:	4630      	mov	r0, r6
 80801f4:	f7ff ff5f 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80801f8:	4605      	mov	r5, r0
 80801fa:	bba8      	cbnz	r0, 8080268 <bme680_set_regs+0x8e>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 80801fc:	1e63      	subs	r3, r4, #1
 80801fe:	2b12      	cmp	r3, #18
 8080200:	d830      	bhi.n	8080264 <bme680_set_regs+0x8a>
 8080202:	f10d 0801 	add.w	r8, sp, #1
 8080206:	465f      	mov	r7, fp
 8080208:	46c1      	mov	r9, r8
 808020a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
 808020e:	b2a4      	uxth	r4, r4
 8080210:	ebcb 0307 	rsb	r3, fp, r7
 8080214:	b29b      	uxth	r3, r3
 8080216:	429c      	cmp	r4, r3
 8080218:	d913      	bls.n	8080242 <bme680_set_regs+0x68>
				if (dev->intf == BME680_SPI_INTF) {
 808021a:	78b3      	ldrb	r3, [r6, #2]
 808021c:	b943      	cbnz	r3, 8080230 <bme680_set_regs+0x56>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 808021e:	4631      	mov	r1, r6
 8080220:	7838      	ldrb	r0, [r7, #0]
 8080222:	f7ff ff56 	bl	80800d2 <set_mem_page>
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 8080226:	783b      	ldrb	r3, [r7, #0]
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
				if (dev->intf == BME680_SPI_INTF) {
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 8080228:	4605      	mov	r5, r0
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 808022a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 808022e:	e000      	b.n	8080232 <bme680_set_regs+0x58>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
 8080230:	783b      	ldrb	r3, [r7, #0]
 8080232:	f808 3c01 	strb.w	r3, [r8, #-1]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8080236:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 808023a:	3701      	adds	r7, #1
 808023c:	f808 3b02 	strb.w	r3, [r8], #2
 8080240:	e7e6      	b.n	8080210 <bme680_set_regs+0x36>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
 8080242:	b98d      	cbnz	r5, 8080268 <bme680_set_regs+0x8e>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8080244:	0063      	lsls	r3, r4, #1
 8080246:	3b01      	subs	r3, #1
 8080248:	6cf4      	ldr	r4, [r6, #76]	; 0x4c
 808024a:	b29b      	uxth	r3, r3
 808024c:	464a      	mov	r2, r9
 808024e:	f89d 1000 	ldrb.w	r1, [sp]
 8080252:	7870      	ldrb	r0, [r6, #1]
 8080254:	47a0      	blx	r4
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 8080256:	2800      	cmp	r0, #0
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8080258:	f886 0054 	strb.w	r0, [r6, #84]	; 0x54
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 808025c:	bf18      	it	ne
 808025e:	f06f 0501 	mvnne.w	r5, #1
 8080262:	e001      	b.n	8080268 <bme680_set_regs+0x8e>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
 8080264:	f06f 0503 	mvn.w	r5, #3
		}
	}

	return rslt;
}
 8080268:	4628      	mov	r0, r5
 808026a:	b00b      	add	sp, #44	; 0x2c
 808026c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08080270 <bme680_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
 8080270:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 8080272:	23e0      	movs	r3, #224	; 0xe0
 8080274:	f88d 3006 	strb.w	r3, [sp, #6]
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 8080278:	23b6      	movs	r3, #182	; 0xb6

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
 808027a:	4605      	mov	r5, r0
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 808027c:	f88d 3007 	strb.w	r3, [sp, #7]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080280:	f7ff ff19 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080284:	4604      	mov	r4, r0
 8080286:	b9d8      	cbnz	r0, 80802c0 <bme680_soft_reset+0x50>
		if (dev->intf == BME680_SPI_INTF)
 8080288:	78ab      	ldrb	r3, [r5, #2]
 808028a:	b16b      	cbz	r3, 80802a8 <bme680_soft_reset+0x38>
			rslt = get_mem_page(dev);

		/* Reset the device */
		if (rslt == BME680_OK) {
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 808028c:	462b      	mov	r3, r5
 808028e:	2201      	movs	r2, #1
 8080290:	f10d 0107 	add.w	r1, sp, #7
 8080294:	f10d 0006 	add.w	r0, sp, #6
 8080298:	f7ff ff9f 	bl	80801da <bme680_set_regs>
 808029c:	4604      	mov	r4, r0
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);
 808029e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80802a0:	200a      	movs	r0, #10
 80802a2:	4798      	blx	r3

			if (rslt == BME680_OK) {
 80802a4:	b134      	cbz	r4, 80802b4 <bme680_soft_reset+0x44>
 80802a6:	e00b      	b.n	80802c0 <bme680_soft_reset+0x50>

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (dev->intf == BME680_SPI_INTF)
			rslt = get_mem_page(dev);
 80802a8:	4628      	mov	r0, r5
 80802aa:	f7ff ff48 	bl	808013e <get_mem_page>

		/* Reset the device */
		if (rslt == BME680_OK) {
 80802ae:	4604      	mov	r4, r0
 80802b0:	b930      	cbnz	r0, 80802c0 <bme680_soft_reset+0x50>
 80802b2:	e7eb      	b.n	808028c <bme680_soft_reset+0x1c>
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);

			if (rslt == BME680_OK) {
				/* After reset get the memory page */
				if (dev->intf == BME680_SPI_INTF)
 80802b4:	78ab      	ldrb	r3, [r5, #2]
 80802b6:	b91b      	cbnz	r3, 80802c0 <bme680_soft_reset+0x50>
					rslt = get_mem_page(dev);
 80802b8:	4628      	mov	r0, r5
 80802ba:	f7ff ff40 	bl	808013e <get_mem_page>
 80802be:	4604      	mov	r4, r0
			}
		}
	}

	return rslt;
}
 80802c0:	4620      	mov	r0, r4
 80802c2:	b003      	add	sp, #12
 80802c4:	bd30      	pop	{r4, r5, pc}

080802c6 <bme680_init>:
/*!
 *@brief This API is the entry point.
 *It reads the chip-id and calibration data from the sensor.
 */
int8_t bme680_init(struct bme680_dev *dev)
{
 80802c6:	b530      	push	{r4, r5, lr}
 80802c8:	b08d      	sub	sp, #52	; 0x34
 80802ca:	4604      	mov	r4, r0
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80802cc:	f7ff fef3 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80802d0:	4605      	mov	r5, r0
 80802d2:	2800      	cmp	r0, #0
 80802d4:	f040 80d5 	bne.w	8080482 <bme680_init+0x1bc>
		/* Soft reset to restore it to default values*/
		rslt = bme680_soft_reset(dev);
 80802d8:	4620      	mov	r0, r4
 80802da:	f7ff ffc9 	bl	8080270 <bme680_soft_reset>
		if (rslt == BME680_OK) {
 80802de:	4605      	mov	r5, r0
 80802e0:	2800      	cmp	r0, #0
 80802e2:	f040 80ce 	bne.w	8080482 <bme680_init+0x1bc>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 80802e6:	4623      	mov	r3, r4
 80802e8:	2201      	movs	r2, #1
 80802ea:	4621      	mov	r1, r4
 80802ec:	20d0      	movs	r0, #208	; 0xd0
 80802ee:	f7ff ff50 	bl	8080192 <bme680_get_regs>
			if (rslt == BME680_OK) {
 80802f2:	4605      	mov	r5, r0
 80802f4:	2800      	cmp	r0, #0
 80802f6:	f040 80c4 	bne.w	8080482 <bme680_init+0x1bc>
				if (dev->chip_id == BME680_CHIP_ID) {
 80802fa:	7823      	ldrb	r3, [r4, #0]
 80802fc:	2b61      	cmp	r3, #97	; 0x61
 80802fe:	f040 80be 	bne.w	808047e <bme680_init+0x1b8>
 * @brief This internal API is used to read the calibrated data from the sensor.
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 8080302:	4601      	mov	r1, r0
 8080304:	2229      	movs	r2, #41	; 0x29
 8080306:	a801      	add	r0, sp, #4
 8080308:	f006 ff33 	bl	8087172 <memset>
	uint8_t temp_var = 0; /* Temporary variable */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 808030c:	4620      	mov	r0, r4
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
	uint8_t temp_var = 0; /* Temporary variable */
 808030e:	f88d 5003 	strb.w	r5, [sp, #3]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080312:	f7ff fed0 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080316:	4605      	mov	r5, r0
 8080318:	2800      	cmp	r0, #0
 808031a:	f040 80b2 	bne.w	8080482 <bme680_init+0x1bc>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 808031e:	4623      	mov	r3, r4
 8080320:	2219      	movs	r2, #25
 8080322:	a901      	add	r1, sp, #4
 8080324:	2089      	movs	r0, #137	; 0x89
 8080326:	f7ff ff34 	bl	8080192 <bme680_get_regs>
		/* Append the second half in the same array */
		if (rslt == BME680_OK)
 808032a:	4605      	mov	r5, r0
 808032c:	b938      	cbnz	r0, 808033e <bme680_init+0x78>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 808032e:	4623      	mov	r3, r4
 8080330:	2210      	movs	r2, #16
 8080332:	f10d 011d 	add.w	r1, sp, #29
 8080336:	20e1      	movs	r0, #225	; 0xe1
 8080338:	f7ff ff2b 	bl	8080192 <bme680_get_regs>
 808033c:	4605      	mov	r5, r0
			, BME680_COEFF_ADDR2_LEN, dev);

		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 808033e:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8080342:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8080346:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808034a:	82e3      	strh	r3, [r4, #22]
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 808034c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8080350:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8080354:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080358:	8323      	strh	r3, [r4, #24]
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 808035a:	f89d 3007 	ldrb.w	r3, [sp, #7]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 808035e:	f89d 200a 	ldrb.w	r2, [sp, #10]
		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 8080362:	76a3      	strb	r3, [r4, #26]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 8080364:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8080368:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808036c:	83a3      	strh	r3, [r4, #28]
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 808036e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8080372:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8080376:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808037a:	83e3      	strh	r3, [r4, #30]
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 808037c:	f89d 300d 	ldrb.w	r3, [sp, #13]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 8080380:	f89d 2010 	ldrb.w	r2, [sp, #16]
		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 8080384:	f884 3020 	strb.w	r3, [r4, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 8080388:	f89d 300f 	ldrb.w	r3, [sp, #15]
 808038c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080390:	8463      	strh	r3, [r4, #34]	; 0x22
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 8080392:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8080396:	f89d 3011 	ldrb.w	r3, [sp, #17]
 808039a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808039e:	84a3      	strh	r3, [r4, #36]	; 0x24
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 80803a0:	f89d 3014 	ldrb.w	r3, [sp, #20]
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 80803a4:	f89d 2018 	ldrb.w	r2, [sp, #24]
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 80803a8:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 80803ac:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80803b0:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 80803b4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80803b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80803bc:	8523      	strh	r3, [r4, #40]	; 0x28
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 80803be:	f89d 201a 	ldrb.w	r2, [sp, #26]
 80803c2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80803c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80803ca:	8563      	strh	r3, [r4, #42]	; 0x2a
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 80803cc:	f89d 301b 	ldrb.w	r3, [sp, #27]

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80803d0:	f89d 101f 	ldrb.w	r1, [sp, #31]
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 80803d4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 80803d8:	f89d 301e 	ldrb.w	r3, [sp, #30]
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80803dc:	f003 020f 	and.w	r2, r3, #15
 80803e0:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 80803e4:	8122      	strh	r2, [r4, #8]
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80803e6:	f89d 201d 	ldrb.w	r2, [sp, #29]
 80803ea:	091b      	lsrs	r3, r3, #4
 80803ec:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80803f0:	8163      	strh	r3, [r4, #10]
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 80803f2:	f89d 3020 	ldrb.w	r3, [sp, #32]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 80803f6:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 80803fa:	7323      	strb	r3, [r4, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
 80803fc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8080400:	7363      	strb	r3, [r4, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
 8080402:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8080406:	73a3      	strb	r3, [r4, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
 8080408:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 808040c:	73e3      	strb	r3, [r4, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 808040e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8080412:	7423      	strb	r3, [r4, #16]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 8080414:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8080418:	7463      	strb	r3, [r4, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 808041a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 808041e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080422:	8263      	strh	r3, [r4, #18]
			coeff_array[BME680_GH2_LSB_REG]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 8080424:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 8080428:	7523      	strb	r3, [r4, #20]

		/* Other coefficients */
		if (rslt == BME680_OK) {
 808042a:	bb15      	cbnz	r5, 8080472 <bme680_init+0x1ac>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 808042c:	4623      	mov	r3, r4
 808042e:	2201      	movs	r2, #1
 8080430:	f10d 0103 	add.w	r1, sp, #3
 8080434:	2002      	movs	r0, #2
 8080436:	f7ff feac 	bl	8080192 <bme680_get_regs>

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 808043a:	f89d 3003 	ldrb.w	r3, [sp, #3]
			if (rslt == BME680_OK) {
 808043e:	4605      	mov	r5, r0

		/* Other coefficients */
		if (rslt == BME680_OK) {
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 8080440:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8080444:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if (rslt == BME680_OK) {
 8080448:	b998      	cbnz	r0, 8080472 <bme680_init+0x1ac>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 808044a:	4623      	mov	r3, r4
 808044c:	2201      	movs	r2, #1
 808044e:	f10d 0103 	add.w	r1, sp, #3
 8080452:	f7ff fe9e 	bl	8080192 <bme680_get_regs>

				dev->calib.res_heat_val = (int8_t) temp_var;
 8080456:	f89d 3003 	ldrb.w	r3, [sp, #3]
				if (rslt == BME680_OK)
 808045a:	4605      	mov	r5, r0

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
			if (rslt == BME680_OK) {
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);

				dev->calib.res_heat_val = (int8_t) temp_var;
 808045c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
				if (rslt == BME680_OK)
 8080460:	b938      	cbnz	r0, 8080472 <bme680_init+0x1ac>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 8080462:	4623      	mov	r3, r4
 8080464:	2201      	movs	r2, #1
 8080466:	f10d 0103 	add.w	r1, sp, #3
 808046a:	2004      	movs	r0, #4
 808046c:	f7ff fe91 	bl	8080192 <bme680_get_regs>
 8080470:	4605      	mov	r5, r0
			}
		}
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 8080472:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 8080476:	111b      	asrs	r3, r3, #4
 8080478:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 808047c:	e001      	b.n	8080482 <bme680_init+0x1bc>
			if (rslt == BME680_OK) {
				if (dev->chip_id == BME680_CHIP_ID) {
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
				} else {
					rslt = BME680_E_DEV_NOT_FOUND;
 808047e:	f06f 0502 	mvn.w	r5, #2
			}
		}
	}

	return rslt;
}
 8080482:	4628      	mov	r0, r5
 8080484:	b00d      	add	sp, #52	; 0x34
 8080486:	bd30      	pop	{r4, r5, pc}

08080488 <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 8080488:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 808048a:	2374      	movs	r3, #116	; 0x74

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 808048c:	4604      	mov	r4, r0
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 808048e:	f88d 3007 	strb.w	r3, [sp, #7]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080492:	f7ff fe10 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080496:	bba0      	cbnz	r0, 8080502 <bme680_set_sensor_mode+0x7a>
 8080498:	4605      	mov	r5, r0
		/* Call repeatedly until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 808049a:	4623      	mov	r3, r4
 808049c:	2201      	movs	r2, #1
 808049e:	f10d 0106 	add.w	r1, sp, #6
 80804a2:	2074      	movs	r0, #116	; 0x74
 80804a4:	f7ff fe75 	bl	8080192 <bme680_get_regs>
			if (rslt == BME680_OK) {
 80804a8:	b9a0      	cbnz	r0, 80804d4 <bme680_set_sensor_mode+0x4c>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 80804aa:	f89d 3006 	ldrb.w	r3, [sp, #6]

				if (pow_mode != BME680_SLEEP_MODE) {
 80804ae:	f013 0503 	ands.w	r5, r3, #3
 80804b2:	d011      	beq.n	80804d8 <bme680_set_sensor_mode+0x50>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 80804b4:	f023 0303 	bic.w	r3, r3, #3
 80804b8:	f88d 3006 	strb.w	r3, [sp, #6]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80804bc:	2201      	movs	r2, #1
 80804be:	4623      	mov	r3, r4
 80804c0:	f10d 0106 	add.w	r1, sp, #6
 80804c4:	f10d 0007 	add.w	r0, sp, #7
 80804c8:	f7ff fe87 	bl	80801da <bme680_set_regs>
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 80804cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80804ce:	200a      	movs	r0, #10
 80804d0:	4798      	blx	r3
 80804d2:	e7e2      	b.n	808049a <bme680_set_sensor_mode+0x12>
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
 80804d4:	2d00      	cmp	r5, #0
 80804d6:	d1e0      	bne.n	808049a <bme680_set_sensor_mode+0x12>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
 80804d8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80804dc:	b18b      	cbz	r3, 8080502 <bme680_set_sensor_mode+0x7a>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 80804de:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80804e2:	f003 0303 	and.w	r3, r3, #3
 80804e6:	f022 0203 	bic.w	r2, r2, #3
 80804ea:	4313      	orrs	r3, r2
 80804ec:	f88d 3006 	strb.w	r3, [sp, #6]
			if (rslt == BME680_OK)
 80804f0:	b938      	cbnz	r0, 8080502 <bme680_set_sensor_mode+0x7a>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80804f2:	4623      	mov	r3, r4
 80804f4:	2201      	movs	r2, #1
 80804f6:	f10d 0106 	add.w	r1, sp, #6
 80804fa:	f10d 0007 	add.w	r0, sp, #7
 80804fe:	f7ff fe6c 	bl	80801da <bme680_set_regs>
		}
	}

	return rslt;
}
 8080502:	b003      	add	sp, #12
 8080504:	bd30      	pop	{r4, r5, pc}

08080506 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 8080506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 808050a:	2300      	movs	r3, #0
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 808050c:	b088      	sub	sp, #32
 808050e:	4606      	mov	r6, r0
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080510:	4608      	mov	r0, r1
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 8080512:	460c      	mov	r4, r1
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 8080514:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t count = 0;
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8080518:	9304      	str	r3, [sp, #16]
 808051a:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 808051e:	9306      	str	r3, [sp, #24]
 8080520:	f8ad 301c 	strh.w	r3, [sp, #28]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080524:	f7ff fdc7 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080528:	2800      	cmp	r0, #0
 808052a:	f040 815f 	bne.w	80807ec <bme680_set_sensor_settings+0x2e6>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 808052e:	0732      	lsls	r2, r6, #28
	uint8_t reg_addr;
	uint8_t data = 0;
	uint8_t count = 0;
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 8080530:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (desired_settings & BME680_GAS_MEAS_SEL)
 8080534:	d565      	bpl.n	8080602 <bme680_set_sensor_settings+0xfc>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
 8080536:	2f01      	cmp	r7, #1

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
 8080538:	f8ad 0008 	strh.w	r0, [sp, #8]
		uint8_t reg_data[2] = {0};
 808053c:	f8ad 000c 	strh.w	r0, [sp, #12]

		if (dev->power_mode == BME680_FORCED_MODE) {
 8080540:	d15e      	bne.n	8080600 <bme680_set_sensor_settings+0xfa>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 8080542:	235a      	movs	r3, #90	; 0x5a
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 8080544:	f8b1 5040 	ldrh.w	r5, [r1, #64]	; 0x40

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 8080548:	f88d 3008 	strb.w	r3, [sp, #8]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 808054c:	f9b1 3012 	ldrsh.w	r3, [r1, #18]
 8080550:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
 8080554:	f503 3316 	add.w	r3, r3, #153600	; 0x25800
 8080558:	f203 1399 	addw	r3, r3, #409	; 0x199
 808055c:	bf28      	it	cs
 808055e:	f44f 75c8 	movcs.w	r5, #400	; 0x190
 8080562:	435d      	muls	r5, r3
 8080564:	2314      	movs	r3, #20
 8080566:	fb95 f5f3 	sdiv	r5, r5, r3
 808056a:	f505 1348 	add.w	r3, r5, #3276800	; 0x320000
 808056e:	250a      	movs	r5, #10
 8080570:	fb93 f5f5 	sdiv	r5, r3, r5
 8080574:	f991 2011 	ldrsb.w	r2, [r1, #17]
 8080578:	f991 3004 	ldrsb.w	r3, [r1, #4]
 808057c:	f502 7244 	add.w	r2, r2, #784	; 0x310
 8080580:	436a      	muls	r2, r5
 8080582:	f991 5014 	ldrsb.w	r5, [r1, #20]
 8080586:	435d      	muls	r5, r3
 8080588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808058c:	fb95 f3f3 	sdiv	r3, r5, r3
 8080590:	021b      	lsls	r3, r3, #8
 8080592:	eb03 0162 	add.w	r1, r3, r2, asr #1
 8080596:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 808059a:	3304      	adds	r3, #4
 808059c:	fb91 f2f3 	sdiv	r2, r1, r3
 80805a0:	f994 1035 	ldrsb.w	r1, [r4, #53]	; 0x35
 80805a4:	2383      	movs	r3, #131	; 0x83
 80805a6:	434b      	muls	r3, r1
 80805a8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80805ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80805b0:	2222      	movs	r2, #34	; 0x22
 80805b2:	3bfa      	subs	r3, #250	; 0xfa
 80805b4:	4353      	muls	r3, r2
 80805b6:	2264      	movs	r2, #100	; 0x64
 80805b8:	3332      	adds	r3, #50	; 0x32
 80805ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80805be:	f88d 300c 	strb.w	r3, [sp, #12]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80805c2:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 80805c6:	f88d 2009 	strb.w	r2, [sp, #9]
static uint8_t calc_heater_dur(uint16_t dur)
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
 80805ca:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 80805ce:	d20a      	bcs.n	80805e6 <bme680_set_sensor_settings+0xe0>
		durval = 0xff; /* Max duration*/
	} else {
		while (dur > 0x3F) {
 80805d0:	2b3f      	cmp	r3, #63	; 0x3f
 80805d2:	b2c2      	uxtb	r2, r0
 80805d4:	f100 0001 	add.w	r0, r0, #1
 80805d8:	d901      	bls.n	80805de <bme680_set_sensor_settings+0xd8>
			dur = dur / 4;
 80805da:	089b      	lsrs	r3, r3, #2
 80805dc:	e7f8      	b.n	80805d0 <bme680_set_sensor_settings+0xca>
			factor += 1;
		}
		durval = (uint8_t) (dur + (factor * 64));
 80805de:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 80805e2:	b2db      	uxtb	r3, r3
 80805e4:	e000      	b.n	80805e8 <bme680_set_sensor_settings+0xe2>
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
		durval = 0xff; /* Max duration*/
 80805e6:	23ff      	movs	r3, #255	; 0xff

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80805e8:	f88d 300d 	strb.w	r3, [sp, #13]
			dev->gas_sett.nb_conv = 0;
 80805ec:	2300      	movs	r3, #0
 80805ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
		}
		if (rslt == BME680_OK)
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80805f2:	2202      	movs	r2, #2
 80805f4:	4623      	mov	r3, r4
 80805f6:	a903      	add	r1, sp, #12
 80805f8:	a802      	add	r0, sp, #8
 80805fa:	f7ff fdee 	bl	80801da <bme680_set_regs>
 80805fe:	e000      	b.n	8080602 <bme680_set_sensor_settings+0xfc>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
 8080600:	2001      	movs	r0, #1
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (desired_settings & BME680_GAS_MEAS_SEL)
			rslt = set_gas_config(dev);

		dev->power_mode = BME680_SLEEP_MODE;
 8080602:	2300      	movs	r3, #0
 8080604:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
 8080608:	b910      	cbnz	r0, 8080610 <bme680_set_sensor_settings+0x10a>
			rslt = bme680_set_sensor_mode(dev);
 808060a:	4620      	mov	r0, r4
 808060c:	f7ff ff3c 	bl	8080488 <bme680_set_sensor_mode>

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
 8080610:	f006 0510 	and.w	r5, r6, #16
 8080614:	b2ad      	uxth	r5, r5
 8080616:	b305      	cbz	r5, 808065a <bme680_set_sensor_settings+0x154>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 8080618:	f104 0246 	add.w	r2, r4, #70	; 0x46
 808061c:	2107      	movs	r1, #7
 808061e:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 8080622:	f7ff fda7 	bl	8080174 <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_ODR_FILT_ADDR;

			if (rslt == BME680_OK)
 8080626:	b930      	cbnz	r0, 8080636 <bme680_set_sensor_settings+0x130>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080628:	4623      	mov	r3, r4
 808062a:	2201      	movs	r2, #1
 808062c:	f10d 0107 	add.w	r1, sp, #7
 8080630:	2075      	movs	r0, #117	; 0x75
 8080632:	f7ff fdae 	bl	8080192 <bme680_get_regs>

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8080636:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b

			reg_array[count] = reg_addr; /* Append configuration */
			data_array[count] = data;
			count++;
 808063a:	2501      	movs	r5, #1

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 808063c:	009b      	lsls	r3, r3, #2
 808063e:	f003 021c 	and.w	r2, r3, #28
 8080642:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8080646:	f023 031c 	bic.w	r3, r3, #28
 808064a:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 808064c:	2275      	movs	r2, #117	; 0x75

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 808064e:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 8080652:	f88d 2010 	strb.w	r2, [sp, #16]
			data_array[count] = data;
 8080656:	f88d 3018 	strb.w	r3, [sp, #24]
			count++;
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
 808065a:	06b3      	lsls	r3, r6, #26
 808065c:	d522      	bpl.n	80806a4 <bme680_set_sensor_settings+0x19e>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 808065e:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080662:	2108      	movs	r1, #8
 8080664:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 8080668:	f7ff fd84 	bl	8080174 <boundary_check.isra.1.constprop.2>
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
 808066c:	b930      	cbnz	r0, 808067c <bme680_set_sensor_settings+0x176>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 808066e:	4623      	mov	r3, r4
 8080670:	2201      	movs	r2, #1
 8080672:	f10d 0107 	add.w	r1, sp, #7
 8080676:	2070      	movs	r0, #112	; 0x70
 8080678:	f7ff fd8b 	bl	8080192 <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 808067c:	f89d 3007 	ldrb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 8080680:	2170      	movs	r1, #112	; 0x70
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8080682:	f023 0208 	bic.w	r2, r3, #8
 8080686:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 808068a:	f003 0308 	and.w	r3, r3, #8
 808068e:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 8080690:	aa08      	add	r2, sp, #32
 8080692:	442a      	add	r2, r5
			data_array[count] = data;
			count++;
 8080694:	3501      	adds	r5, #1
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8080696:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 808069a:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 808069e:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 80806a2:	b2ed      	uxtb	r5, r5
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 80806a4:	07b1      	lsls	r1, r6, #30
 80806a6:	d033      	beq.n	8080710 <bme680_set_sensor_settings+0x20a>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 80806a8:	f104 0246 	add.w	r2, r4, #70	; 0x46
 80806ac:	2105      	movs	r1, #5
 80806ae:	f104 0039 	add.w	r0, r4, #57	; 0x39
 80806b2:	f7ff fd5f 	bl	8080174 <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_T_P_MODE_ADDR;

			if (rslt == BME680_OK)
 80806b6:	b930      	cbnz	r0, 80806c6 <bme680_set_sensor_settings+0x1c0>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80806b8:	4623      	mov	r3, r4
 80806ba:	2201      	movs	r2, #1
 80806bc:	f10d 0107 	add.w	r1, sp, #7
 80806c0:	2074      	movs	r0, #116	; 0x74
 80806c2:	f7ff fd66 	bl	8080192 <bme680_get_regs>

			if (desired_settings & BME680_OST_SEL)
 80806c6:	07f2      	lsls	r2, r6, #31
 80806c8:	d509      	bpl.n	80806de <bme680_set_sensor_settings+0x1d8>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 80806ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80806ce:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80806d2:	f003 031f 	and.w	r3, r3, #31
 80806d6:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80806da:	f88d 3007 	strb.w	r3, [sp, #7]

			if (desired_settings & BME680_OSP_SEL)
 80806de:	07b3      	lsls	r3, r6, #30
 80806e0:	d50b      	bpl.n	80806fa <bme680_set_sensor_settings+0x1f4>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 80806e2:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 80806e6:	009b      	lsls	r3, r3, #2
 80806e8:	f003 021c 	and.w	r2, r3, #28
 80806ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80806f0:	f023 031c 	bic.w	r3, r3, #28
 80806f4:	4313      	orrs	r3, r2
 80806f6:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr;
 80806fa:	ab08      	add	r3, sp, #32
 80806fc:	442b      	add	r3, r5
 80806fe:	2274      	movs	r2, #116	; 0x74
 8080700:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 8080704:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 8080708:	3501      	adds	r5, #1

			if (desired_settings & BME680_OSP_SEL)
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);

			reg_array[count] = reg_addr;
			data_array[count] = data;
 808070a:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 808070e:	b2ed      	uxtb	r5, r5
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
 8080710:	0771      	lsls	r1, r6, #29
 8080712:	d522      	bpl.n	808075a <bme680_set_sensor_settings+0x254>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 8080714:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080718:	2105      	movs	r1, #5
 808071a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 808071e:	f7ff fd29 	bl	8080174 <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
 8080722:	b930      	cbnz	r0, 8080732 <bme680_set_sensor_settings+0x22c>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080724:	4623      	mov	r3, r4
 8080726:	2201      	movs	r2, #1
 8080728:	f10d 0107 	add.w	r1, sp, #7
 808072c:	2072      	movs	r0, #114	; 0x72
 808072e:	f7ff fd30 	bl	8080192 <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8080732:	f89d 3007 	ldrb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 8080736:	2172      	movs	r1, #114	; 0x72
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8080738:	f023 0207 	bic.w	r2, r3, #7
 808073c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8080740:	f003 0307 	and.w	r3, r3, #7
 8080744:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 8080746:	aa08      	add	r2, sp, #32
 8080748:	442a      	add	r2, r5
			data_array[count] = data;
			count++;
 808074a:	3501      	adds	r5, #1
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 808074c:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 8080750:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 8080754:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 8080758:	b2ed      	uxtb	r5, r5
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 808075a:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 808075e:	d03c      	beq.n	80807da <bme680_set_sensor_settings+0x2d4>
 8080760:	f104 0846 	add.w	r8, r4, #70	; 0x46
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 8080764:	4642      	mov	r2, r8
 8080766:	2101      	movs	r1, #1
 8080768:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 808076c:	f7ff fd02 	bl	8080174 <boundary_check.isra.1.constprop.2>
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
 8080770:	b968      	cbnz	r0, 808078e <bme680_set_sensor_settings+0x288>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 8080772:	4642      	mov	r2, r8
 8080774:	210a      	movs	r1, #10
 8080776:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 808077a:	f7ff fcfb 	bl	8080174 <boundary_check.isra.1.constprop.2>
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;

			if (rslt == BME680_OK)
 808077e:	b930      	cbnz	r0, 808078e <bme680_set_sensor_settings+0x288>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080780:	4623      	mov	r3, r4
 8080782:	2201      	movs	r2, #1
 8080784:	f10d 0107 	add.w	r1, sp, #7
 8080788:	2071      	movs	r0, #113	; 0x71
 808078a:	f7ff fd02 	bl	8080192 <bme680_get_regs>

			if (desired_settings & BME680_RUN_GAS_SEL)
 808078e:	0672      	lsls	r2, r6, #25
 8080790:	d50b      	bpl.n	80807aa <bme680_set_sensor_settings+0x2a4>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 8080792:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8080796:	011b      	lsls	r3, r3, #4
 8080798:	f003 0210 	and.w	r2, r3, #16
 808079c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80807a0:	f023 0310 	bic.w	r3, r3, #16
 80807a4:	4313      	orrs	r3, r2
 80807a6:	f88d 3007 	strb.w	r3, [sp, #7]

			if (desired_settings & BME680_NBCONV_SEL)
 80807aa:	0633      	lsls	r3, r6, #24
 80807ac:	d50a      	bpl.n	80807c4 <bme680_set_sensor_settings+0x2be>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 80807ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80807b2:	f023 020f 	bic.w	r2, r3, #15
 80807b6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80807ba:	f003 030f 	and.w	r3, r3, #15
 80807be:	4313      	orrs	r3, r2
 80807c0:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 80807c4:	ab08      	add	r3, sp, #32
 80807c6:	442b      	add	r3, r5
 80807c8:	2271      	movs	r2, #113	; 0x71
 80807ca:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 80807ce:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 80807d2:	3501      	adds	r5, #1

			if (desired_settings & BME680_NBCONV_SEL)
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);

			reg_array[count] = reg_addr; /* Append configuration */
			data_array[count] = data;
 80807d4:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 80807d8:	b2ed      	uxtb	r5, r5
		}

		if (rslt == BME680_OK)
 80807da:	b928      	cbnz	r0, 80807e8 <bme680_set_sensor_settings+0x2e2>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 80807dc:	4623      	mov	r3, r4
 80807de:	462a      	mov	r2, r5
 80807e0:	a906      	add	r1, sp, #24
 80807e2:	a804      	add	r0, sp, #16
 80807e4:	f7ff fcf9 	bl	80801da <bme680_set_regs>

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
 80807e8:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
	}

	return rslt;
}
 80807ec:	b008      	add	sp, #32
 80807ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080807f4 <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 80807f4:	b513      	push	{r0, r1, r4, lr}
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80807f6:	4b18      	ldr	r3, [pc, #96]	; (8080858 <bme680_get_profile_dur+0x64>)

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 80807f8:	4604      	mov	r4, r0
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80807fa:	6818      	ldr	r0, [r3, #0]
 80807fc:	889b      	ldrh	r3, [r3, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80807fe:	aa02      	add	r2, sp, #8
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8080800:	f8ad 3004 	strh.w	r3, [sp, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8080804:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8080808:	9000      	str	r0, [sp, #0]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 808080a:	4413      	add	r3, r2
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 808080c:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8080810:	a802      	add	r0, sp, #8
 8080812:	4402      	add	r2, r0
 8080814:	f812 2c08 	ldrb.w	r2, [r2, #-8]
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8080818:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 808081c:	4413      	add	r3, r2
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 808081e:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
 8080822:	4402      	add	r2, r0

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
 8080824:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8080828:	4413      	add	r3, r2
 808082a:	f240 72ab 	movw	r2, #1963	; 0x7ab
 808082e:	4353      	muls	r3, r2
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8080830:	f503 5395 	add.w	r3, r3, #4768	; 0x12a0
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 8080834:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8080838:	3319      	adds	r3, #25
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 808083a:	fbb3 f3f2 	udiv	r3, r3, r2

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */

	*duration = (uint16_t) tph_dur;
 808083e:	3301      	adds	r3, #1
 8080840:	b29b      	uxth	r3, r3
 8080842:	8023      	strh	r3, [r4, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
 8080844:	f891 203e 	ldrb.w	r2, [r1, #62]	; 0x3e
 8080848:	b11a      	cbz	r2, 8080852 <bme680_get_profile_dur+0x5e>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
 808084a:	f8b1 2042 	ldrh.w	r2, [r1, #66]	; 0x42
 808084e:	4413      	add	r3, r2
 8080850:	8023      	strh	r3, [r4, #0]
	}
}
 8080852:	b002      	add	sp, #8
 8080854:	bd10      	pop	{r4, pc}
 8080856:	bf00      	nop
 8080858:	08087af4 	.word	0x08087af4

0808085c <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 808085c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080860:	4680      	mov	r8, r0
 8080862:	b0a9      	sub	sp, #164	; 0xa4
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080864:	4608      	mov	r0, r1
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8080866:	460c      	mov	r4, r1
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080868:	f7ff fc25 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 808086c:	4605      	mov	r5, r0
 808086e:	2800      	cmp	r0, #0
 8080870:	f040 8185 	bne.w	8080b7e <bme680_get_sensor_data+0x322>
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 8080874:	af04      	add	r7, sp, #16
 8080876:	4601      	mov	r1, r0
 8080878:	220f      	movs	r2, #15
 808087a:	4638      	mov	r0, r7
 808087c:	f006 fc79 	bl	8087172 <memset>
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080880:	4620      	mov	r0, r4
 8080882:	f7ff fc18 	bl	80800b6 <null_ptr_check>
 8080886:	4605      	mov	r5, r0
 8080888:	260a      	movs	r6, #10
	do {
		if (rslt == BME680_OK) {
 808088a:	2d00      	cmp	r5, #0
 808088c:	f040 8171 	bne.w	8080b72 <bme680_get_sensor_data+0x316>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 8080890:	4623      	mov	r3, r4
 8080892:	220f      	movs	r2, #15
 8080894:	4639      	mov	r1, r7
 8080896:	201d      	movs	r0, #29
 8080898:	f7ff fc7b 	bl	8080192 <bme680_get_regs>
 808089c:	4605      	mov	r5, r0
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
 808089e:	f89d 0010 	ldrb.w	r0, [sp, #16]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80808a2:	f89d e01e 	ldrb.w	lr, [sp, #30]
		if (rslt == BME680_OK) {
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 80808a6:	f000 030f 	and.w	r3, r0, #15
 80808aa:	f888 3001 	strb.w	r3, [r8, #1]
			data->meas_index = buff[1];
 80808ae:	f89d 3011 	ldrb.w	r3, [sp, #17]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80808b2:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
			data->meas_index = buff[1];
 80808b6:	f888 3002 	strb.w	r3, [r8, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80808ba:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80808be:	f89d 9013 	ldrb.w	r9, [sp, #19]
 80808c2:	9300      	str	r3, [sp, #0]
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80808c4:	f89d 3018 	ldrb.w	r3, [sp, #24]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
 80808c8:	f89d c014 	ldrb.w	ip, [sp, #20]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80808cc:	9301      	str	r3, [sp, #4]
 80808ce:	f89d 3019 	ldrb.w	r3, [sp, #25]
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80808d2:	f89d b015 	ldrb.w	fp, [sp, #21]
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80808d6:	9302      	str	r3, [sp, #8]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80808d8:	f89d 301d 	ldrb.w	r3, [sp, #29]
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80808dc:	f89d 1016 	ldrb.w	r1, [sp, #22]
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80808e0:	9303      	str	r3, [sp, #12]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 80808e2:	fa4f f38e 	sxtb.w	r3, lr
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80808e6:	f003 0a20 	and.w	sl, r3, #32
 80808ea:	ea40 000a 	orr.w	r0, r0, sl
 80808ee:	f003 0310 	and.w	r3, r3, #16
 80808f2:	4318      	orrs	r0, r3
 80808f4:	b240      	sxtb	r0, r0

			if (data->status & BME680_NEW_DATA_MSK) {
 80808f6:	2800      	cmp	r0, #0

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
 80808f8:	f89d 2017 	ldrb.w	r2, [sp, #23]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80808fc:	f888 0000 	strb.w	r0, [r8]

			if (data->status & BME680_NEW_DATA_MSK) {
 8080900:	f280 8134 	bge.w	8080b6c <bme680_get_sensor_data+0x310>
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 8080904:	0912      	lsrs	r2, r2, #4
 8080906:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
 808090a:	ea41 3b0b 	orr.w	fp, r1, fp, lsl #12
 808090e:	8ae1      	ldrh	r1, [r4, #22]
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8080910:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 8080914:	0049      	lsls	r1, r1, #1
 8080916:	ebc1 01db 	rsb	r1, r1, fp, lsr #3
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 808091a:	460a      	mov	r2, r1
 808091c:	17cb      	asrs	r3, r1, #31
 808091e:	105b      	asrs	r3, r3, #1
 8080920:	ea4f 0232 	mov.w	r2, r2, rrx
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080924:	fb02 f603 	mul.w	r6, r2, r3
 8080928:	fba2 2302 	umull	r2, r3, r2, r2
 808092c:	ea4f 3a12 	mov.w	sl, r2, lsr #12
 8080930:	f994 201a 	ldrsb.w	r2, [r4, #26]
 8080934:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8080938:	ea4a 5a03 	orr.w	sl, sl, r3, lsl #20
 808093c:	ea4f 3b23 	mov.w	fp, r3, asr #12
 8080940:	0113      	lsls	r3, r2, #4
 8080942:	17df      	asrs	r7, r3, #31
 8080944:	fb0a f607 	mul.w	r6, sl, r7
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080948:	fb80 0101 	smull	r0, r1, r0, r1
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 808094c:	fb03 660b 	mla	r6, r3, fp, r6
 8080950:	fbaa 2303 	umull	r2, r3, sl, r3
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080954:	0ac0      	lsrs	r0, r0, #11
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080956:	4433      	add	r3, r6
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080958:	0b92      	lsrs	r2, r2, #14
 808095a:	ea40 5041 	orr.w	r0, r0, r1, lsl #21
 808095e:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 8080962:	1883      	adds	r3, r0, r2
 8080964:	6323      	str	r3, [r4, #48]	; 0x30

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
 8080966:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 808096a:	3380      	adds	r3, #128	; 0x80
 808096c:	121b      	asrs	r3, r3, #8
 808096e:	f8a8 3004 	strh.w	r3, [r8, #4]
	int32_t var1;
	int32_t var2;
	int32_t var3;
	int32_t pressure_comp;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8080972:	6b23      	ldr	r3, [r4, #48]	; 0x30
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8080974:	f994 1026 	ldrsb.w	r1, [r4, #38]	; 0x26
	int32_t var1;
	int32_t var2;
	int32_t var3;
	int32_t pressure_comp;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8080978:	105b      	asrs	r3, r3, #1
 808097a:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 808097e:	1098      	asrs	r0, r3, #2
 8080980:	4340      	muls	r0, r0
 8080982:	12c2      	asrs	r2, r0, #11
 8080984:	4351      	muls	r1, r2
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8080986:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 808098a:	1340      	asrs	r0, r0, #13

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 808098c:	435a      	muls	r2, r3
 808098e:	0052      	lsls	r2, r2, #1
 8080990:	eb02 02a1 	add.w	r2, r2, r1, asr #2
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8080994:	f9b4 101e 	ldrsh.w	r1, [r4, #30]
	var1 = var1 >> 18;
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 8080998:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 808099c:	434b      	muls	r3, r1
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 808099e:	f994 1020 	ldrsb.w	r1, [r4, #32]
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
	var1 = var1 >> 18;
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 80809a2:	ea4c 1909 	orr.w	r9, ip, r9, lsl #4
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 80809a6:	0149      	lsls	r1, r1, #5
 80809a8:	4341      	muls	r1, r0
 80809aa:	10c9      	asrs	r1, r1, #3
 80809ac:	eb01 0363 	add.w	r3, r1, r3, asr #1
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
	var1 = var1 >> 18;
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80809b0:	149b      	asrs	r3, r3, #18
 80809b2:	8ba1      	ldrh	r1, [r4, #28]
 80809b4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80809b8:	434b      	muls	r3, r1
 80809ba:	13d9      	asrs	r1, r3, #15
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 80809bc:	9b00      	ldr	r3, [sp, #0]
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 80809be:	f9b4 0028 	ldrsh.w	r0, [r4, #40]	; 0x28
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
	var1 = var1 >> 18;
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 80809c2:	ea49 3903 	orr.w	r9, r9, r3, lsl #12
 80809c6:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 80809ca:	f5c9 1980 	rsb	r9, r9, #1048576	; 0x100000
 80809ce:	041b      	lsls	r3, r3, #16
 80809d0:	eb03 02a2 	add.w	r2, r3, r2, asr #2
 80809d4:	f640 4335 	movw	r3, #3125	; 0xc35
 80809d8:	eba9 3222 	sub.w	r2, r9, r2, asr #12
 80809dc:	435a      	muls	r2, r3
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
 80809de:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
		pressure_comp = ((pressure_comp / var1) << 1);
 80809e2:	bfad      	iteet	ge
 80809e4:	fb92 f3f1 	sdivge	r3, r2, r1
	else
		pressure_comp = ((pressure_comp << 1) / var1);
 80809e8:	0052      	lsllt	r2, r2, #1
 80809ea:	fb92 f3f1 	sdivlt	r3, r2, r1
	var1 = var1 >> 18;
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
		pressure_comp = ((pressure_comp / var1) << 1);
 80809ee:	005b      	lslge	r3, r3, #1
	else
		pressure_comp = ((pressure_comp << 1) / var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
		(pressure_comp >> 3)) >> 13)) >> 12;
 80809f0:	10d9      	asrs	r1, r3, #3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 80809f2:	4349      	muls	r1, r1
 80809f4:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
 80809f8:	1349      	asrs	r1, r1, #13
 80809fa:	434a      	muls	r2, r1
 80809fc:	1099      	asrs	r1, r3, #2
 80809fe:	4341      	muls	r1, r0
		pressure_comp = ((pressure_comp << 1) / var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
		(pressure_comp >> 3)) >> 13)) >> 12;
	var2 = ((int32_t)(pressure_comp >> 2) *
		(int32_t)dev->calib.par_p8) >> 13;
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8080a00:	121e      	asrs	r6, r3, #8
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8080a02:	1349      	asrs	r1, r1, #13
 8080a04:	eb01 3122 	add.w	r1, r1, r2, asr #12
 8080a08:	fb06 f206 	mul.w	r2, r6, r6
 8080a0c:	4356      	muls	r6, r2
 8080a0e:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8080a12:	af08      	add	r7, sp, #32
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8080a14:	4372      	muls	r2, r6
 8080a16:	eb01 4262 	add.w	r2, r1, r2, asr #17
 8080a1a:	f994 1027 	ldrsb.w	r1, [r4, #39]	; 0x27
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
 8080a1e:	9e01      	ldr	r6, [sp, #4]
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8080a20:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
 8080a24:	eb03 1322 	add.w	r3, r3, r2, asr #4
 8080a28:	f8c8 3008 	str.w	r3, [r8, #8]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8080a2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
 8080a2e:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8080a32:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8080a36:	3380      	adds	r3, #128	; 0x80
 8080a38:	121b      	asrs	r3, r3, #8
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
 8080a3a:	4359      	muls	r1, r3
 8080a3c:	2264      	movs	r2, #100	; 0x64
 8080a3e:	fb91 f1f2 	sdiv	r1, r1, r2
 8080a42:	f994 000d 	ldrsb.w	r0, [r4, #13]
 8080a46:	4359      	muls	r1, r3
 8080a48:	4358      	muls	r0, r3
 8080a4a:	1189      	asrs	r1, r1, #6
 8080a4c:	fb90 f0f2 	sdiv	r0, r0, r2
 8080a50:	fb91 f1f2 	sdiv	r1, r1, r2
 8080a54:	4401      	add	r1, r0
 8080a56:	8960      	ldrh	r0, [r4, #10]
 8080a58:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8080a5c:	4341      	muls	r1, r0
 8080a5e:	9802      	ldr	r0, [sp, #8]
 8080a60:	1289      	asrs	r1, r1, #10
 8080a62:	ea40 2606 	orr.w	r6, r0, r6, lsl #8
 8080a66:	8920      	ldrh	r0, [r4, #8]
 8080a68:	eba6 1600 	sub.w	r6, r6, r0, lsl #4
 8080a6c:	f994 000c 	ldrsb.w	r0, [r4, #12]
 8080a70:	4358      	muls	r0, r3
 8080a72:	fb90 f0f2 	sdiv	r0, r0, r2
 8080a76:	eba6 0060 	sub.w	r0, r6, r0, asr #1
 8080a7a:	4348      	muls	r0, r1
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a7c:	f994 1010 	ldrsb.w	r1, [r4, #16]
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8080a80:	4e41      	ldr	r6, [pc, #260]	; (8080b88 <bme680_get_sensor_data+0x32c>)
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a82:	434b      	muls	r3, r1
 8080a84:	fb93 f2f2 	sdiv	r2, r3, r2
 8080a88:	7be3      	ldrb	r3, [r4, #15]
 8080a8a:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8080a8e:	1383      	asrs	r3, r0, #14
	var6 = (var4 * var5) >> 1;
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8080a90:	435b      	muls	r3, r3
 8080a92:	1112      	asrs	r2, r2, #4
 8080a94:	129b      	asrs	r3, r3, #10
 8080a96:	4353      	muls	r3, r2
 8080a98:	eb00 0363 	add.w	r3, r0, r3, asr #1
 8080a9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8080aa0:	129b      	asrs	r3, r3, #10
 8080aa2:	4353      	muls	r3, r2
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
 8080aa4:	4a39      	ldr	r2, [pc, #228]	; (8080b8c <bme680_get_sensor_data+0x330>)
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
	var6 = (var4 * var5) >> 1;
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8080aa6:	131b      	asrs	r3, r3, #12
 8080aa8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
 8080aac:	4293      	cmp	r3, r2
 8080aae:	bfd4      	ite	le
 8080ab0:	f8c8 300c 	strle.w	r3, [r8, #12]
 8080ab4:	f8c8 200c 	strgt.w	r2, [r8, #12]
 8080ab8:	f994 c036 	ldrsb.w	ip, [r4, #54]	; 0x36
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8080abc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8080abe:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8080ac0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8080ac2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8080ac4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8080ac6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8080ac8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2130303777),
		UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2143188679), UINT32_C(2136746228),
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2147483647) };
	/**Look up table 2 for the possible gas range values */
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 8080acc:	3610      	adds	r6, #16
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8080ace:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2130303777),
		UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2143188679), UINT32_C(2136746228),
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2147483647) };
	/**Look up table 2 for the possible gas range values */
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 8080ad2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8080ad4:	af18      	add	r7, sp, #96	; 0x60
 8080ad6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8080ad8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8080ada:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8080adc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8080ade:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8080ae0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8080ae4:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
		UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080ae8:	f240 503c 	movw	r0, #1340	; 0x53c
 8080aec:	2305      	movs	r3, #5
 8080aee:	2100      	movs	r1, #0
 8080af0:	fbcc 0103 	smlal	r0, r1, ip, r3
		((int64_t) lookupTable1[gas_range])) >> 16;
 8080af4:	f00e 060f 	and.w	r6, lr, #15
 8080af8:	ab28      	add	r3, sp, #160	; 0xa0
 8080afa:	eb03 0686 	add.w	r6, r3, r6, lsl #2
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
		UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080afe:	f856 7c80 	ldr.w	r7, [r6, #-128]
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080b02:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
		UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080b06:	fba0 2307 	umull	r2, r3, r0, r7
 8080b0a:	fb07 3301 	mla	r3, r7, r1, r3
 8080b0e:	0c10      	lsrs	r0, r2, #16
 8080b10:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8080b14:	1419      	asrs	r1, r3, #16
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080b16:	9b03      	ldr	r3, [sp, #12]
 8080b18:	ea4e 0e83 	orr.w	lr, lr, r3, lsl #2
 8080b1c:	ea4f 32ce 	mov.w	r2, lr, lsl #15
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8080b20:	f856 ec40 	ldr.w	lr, [r6, #-64]
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080b24:	f112 427f 	adds.w	r2, r2, #4278190080	; 0xff000000
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8080b28:	fbae 6700 	umull	r6, r7, lr, r0
 8080b2c:	fb0e 7701 	mla	r7, lr, r1, r7
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080b30:	f04f 0300 	mov.w	r3, #0
 8080b34:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 8080b38:	1812      	adds	r2, r2, r0
 8080b3a:	414b      	adcs	r3, r1
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8080b3c:	0a70      	lsrs	r0, r6, #9
 8080b3e:	ea40 50c7 	orr.w	r0, r0, r7, lsl #23
 8080b42:	1279      	asrs	r1, r7, #9
 8080b44:	105f      	asrs	r7, r3, #1
 8080b46:	ea4f 0632 	mov.w	r6, r2, rrx
 8080b4a:	1980      	adds	r0, r0, r6
 8080b4c:	4179      	adcs	r1, r7
 8080b4e:	f005 fff7 	bl	8086b40 <__aeabi_ldivmod>

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8080b52:	f8c8 0010 	str.w	r0, [r8, #16]
	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
		if (rslt == BME680_OK) {
 8080b56:	b995      	cbnz	r5, 8080b7e <bme680_get_sensor_data+0x322>
			if (data->status & BME680_NEW_DATA_MSK)
 8080b58:	f998 3000 	ldrsb.w	r3, [r8]
 8080b5c:	2b00      	cmp	r3, #0
				dev->new_fields = 1;
 8080b5e:	bfba      	itte	lt
 8080b60:	2301      	movlt	r3, #1
 8080b62:	f884 3045 	strblt.w	r3, [r4, #69]	; 0x45
			else
				dev->new_fields = 0;
 8080b66:	f884 5045 	strbge.w	r5, [r4, #69]	; 0x45
 8080b6a:	e008      	b.n	8080b7e <bme680_get_sensor_data+0x322>
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
				break;
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 8080b6c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8080b6e:	200a      	movs	r0, #10
 8080b70:	4798      	blx	r3
 8080b72:	3e01      	subs	r6, #1
		}
		tries--;
	} while (tries);
 8080b74:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8080b78:	f47f ae87 	bne.w	808088a <bme680_get_sensor_data+0x2e>

	if (!tries)
		rslt = BME680_W_NO_NEW_DATA;
 8080b7c:	2502      	movs	r5, #2
				dev->new_fields = 0;
		}
	}

	return rslt;
}
 8080b7e:	4628      	mov	r0, r5
 8080b80:	b029      	add	sp, #164	; 0xa4
 8080b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080b86:	bf00      	nop
 8080b88:	08087afc 	.word	0x08087afc
 8080b8c:	000186a0 	.word	0x000186a0

08080b90 <_Z11watchdogISRv>:
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}

void watchdogISR() {
  watchDogFlag = true;
 8080b90:	4b01      	ldr	r3, [pc, #4]	; (8080b98 <_Z11watchdogISRv+0x8>)
 8080b92:	2201      	movs	r2, #1
 8080b94:	701a      	strb	r2, [r3, #0]
 8080b96:	4770      	bx	lr
 8080b98:	200002e4 	.word	0x200002e4

08080b9c <_Z10measureNow6String>:
// They are intended to allow for customization and control during installations
// and to allow for management.


int measureNow(String command) // Function to force sending data in current hour
{
 8080b9c:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8080b9e:	4904      	ldr	r1, [pc, #16]	; (8080bb0 <_Z10measureNow6String+0x14>)
 8080ba0:	f003 f97b 	bl	8083e9a <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080ba4:	b118      	cbz	r0, 8080bae <_Z10measureNow6String+0x12>
  {
    state = MEASURING_STATE;
 8080ba6:	4b03      	ldr	r3, [pc, #12]	; (8080bb4 <_Z10measureNow6String+0x18>)
 8080ba8:	2203      	movs	r2, #3
 8080baa:	701a      	strb	r2, [r3, #0]
    return 1;
 8080bac:	2001      	movs	r0, #1
  }
  else return 0;
}
 8080bae:	bd08      	pop	{r3, pc}
 8080bb0:	08088039 	.word	0x08088039
 8080bb4:	20000208 	.word	0x20000208

08080bb8 <_ZN11EEPROMClass4readEi.isra.14>:

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
 8080bb8:	f001 bd20 	b.w	80825fc <HAL_EEPROM_Read>

08080bbc <_ZN11EEPROMClass5writeEih.isra.15>:
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
 8080bbc:	f001 bd26 	b.w	808260c <HAL_EEPROM_Write>

08080bc0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.42>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 8080bc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080bc2:	4605      	mov	r5, r0
 8080bc4:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8080bc8:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8080bca:	f88d 3000 	strb.w	r3, [sp]
 8080bce:	233c      	movs	r3, #60	; 0x3c
 8080bd0:	f002 faaa 	bl	8083128 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
 8080bd4:	4628      	mov	r0, r5
 8080bd6:	b003      	add	sp, #12
 8080bd8:	bd30      	pop	{r4, r5, pc}
	...

08080bdc <_Z17getSignalStrengthv>:

  return 1;
}

void getSignalStrength()
{
 8080bdc:	b530      	push	{r4, r5, lr}
 8080bde:	b08f      	sub	sp, #60	; 0x3c
  // New Boron capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
 8080be0:	4910      	ldr	r1, [pc, #64]	; (8080c24 <_Z17getSignalStrengthv+0x48>)
 8080be2:	a804      	add	r0, sp, #16
 8080be4:	f002 f83c 	bl	8082c60 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
 8080be8:	a804      	add	r0, sp, #16
 8080bea:	f002 f88c 	bl	8082d06 <_ZNK14CellularSignal19getAccessTechnologyEv>
 8080bee:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
 8080bf0:	a804      	add	r0, sp, #16
 8080bf2:	f002 f8e7 	bl	8082dc4 <_ZNK14CellularSignal11getStrengthEv>
 8080bf6:	4605      	mov	r5, r0

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
 8080bf8:	a804      	add	r0, sp, #16
 8080bfa:	f002 f8cb 	bl	8082d94 <_ZNK14CellularSignal10getQualityEv>

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
 8080bfe:	f005 f951 	bl	8085ea4 <__aeabi_f2d>
 8080c02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8080c06:	4628      	mov	r0, r5
 8080c08:	f005 f94c 	bl	8085ea4 <__aeabi_f2d>
 8080c0c:	e9cd 0100 	strd	r0, r1, [sp]
 8080c10:	4b05      	ldr	r3, [pc, #20]	; (8080c28 <_Z17getSignalStrengthv+0x4c>)
 8080c12:	4a06      	ldr	r2, [pc, #24]	; (8080c2c <_Z17getSignalStrengthv+0x50>)
 8080c14:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8080c18:	2140      	movs	r1, #64	; 0x40
 8080c1a:	4805      	ldr	r0, [pc, #20]	; (8080c30 <_Z17getSignalStrengthv+0x54>)
 8080c1c:	f001 ff92 	bl	8082b44 <snprintf>
}
 8080c20:	b00f      	add	sp, #60	; 0x3c
 8080c22:	bd30      	pop	{r4, r5, pc}
 8080c24:	2000031c 	.word	0x2000031c
 8080c28:	20000078 	.word	0x20000078
 8080c2c:	08087bbc 	.word	0x08087bbc
 8080c30:	20000240 	.word	0x20000240

08080c34 <_Z17connectToParticlev>:


// These functions control the connection and disconnection from Particle
bool connectToParticle() {
 8080c34:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8080c38:	481a      	ldr	r0, [pc, #104]	; (8080ca4 <_Z17connectToParticlev+0x70>)
 8080c3a:	2300      	movs	r3, #0
 8080c3c:	461a      	mov	r2, r3
 8080c3e:	4619      	mov	r1, r3
 8080c40:	6840      	ldr	r0, [r0, #4]
 8080c42:	f001 ff27 	bl	8082a94 <network_on>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080c46:	f240 36e7 	movw	r6, #999	; 0x3e7
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 8080c4a:	f001 febb 	bl	80829c4 <spark_cloud_flag_connect>
 8080c4e:	f44f 7496 	mov.w	r4, #300	; 0x12c
 8080c52:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080c54:	2000      	movs	r0, #0
 8080c56:	f001 fcf1 	bl	808263c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080c5a:	4680      	mov	r8, r0
 8080c5c:	f04f 0900 	mov.w	r9, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080c60:	2000      	movs	r0, #0
 8080c62:	f001 fceb 	bl	808263c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080c66:	ebb0 0008 	subs.w	r0, r0, r8
 8080c6a:	eb61 0109 	sbc.w	r1, r1, r9
 8080c6e:	428f      	cmp	r7, r1
 8080c70:	bf08      	it	eq
 8080c72:	4286      	cmpeq	r6, r0
 8080c74:	d305      	bcc.n	8080c82 <_Z17connectToParticlev+0x4e>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080c76:	f001 feb5 	bl	80829e4 <spark_cloud_flag_connected>
 8080c7a:	b910      	cbnz	r0, 8080c82 <_Z17connectToParticlev+0x4e>
            spark_process();
 8080c7c:	f001 fe9a 	bl	80829b4 <spark_process>
 8080c80:	e7ee      	b.n	8080c60 <_Z17connectToParticlev+0x2c>
 8080c82:	f001 feaf 	bl	80829e4 <spark_cloud_flag_connected>
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 8080c86:	b118      	cbz	r0, 8080c90 <_Z17connectToParticlev+0x5c>
    Particle.process();
  }
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}
 8080c88:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
 8080c8c:	f001 beaa 	b.w	80829e4 <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8080c90:	f001 fc9c 	bl	80825cc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080c94:	4b04      	ldr	r3, [pc, #16]	; (8080ca8 <_Z17connectToParticlev+0x74>)
 8080c96:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8080c98:	f001 fe8c 	bl	80829b4 <spark_process>
// These functions control the connection and disconnection from Particle
bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 8080c9c:	3c01      	subs	r4, #1
 8080c9e:	d0f3      	beq.n	8080c88 <_Z17connectToParticlev+0x54>
 8080ca0:	e7d8      	b.n	8080c54 <_Z17connectToParticlev+0x20>
 8080ca2:	bf00      	nop
 8080ca4:	2000031c 	.word	0x2000031c
 8080ca8:	20000808 	.word	0x20000808

08080cac <_Z22disconnectFromParticlev>:
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}

bool disconnectFromParticle()
{
 8080cac:	b508      	push	{r3, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
 8080cae:	f001 fe91 	bl	80829d4 <spark_cloud_flag_disconnect>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8080cb2:	4806      	ldr	r0, [pc, #24]	; (8080ccc <_Z22disconnectFromParticlev+0x20>)
 8080cb4:	2300      	movs	r3, #0
 8080cb6:	461a      	mov	r2, r3
 8080cb8:	4619      	mov	r1, r3
 8080cba:	6840      	ldr	r0, [r0, #4]
 8080cbc:	f001 fef2 	bl	8082aa4 <network_off>
  Particle.disconnect();                                          // Otherwise Electron will attempt to reconnect on wake
  Cellular.off();
  delay(1000);                                                    // Bummer but only should happen once an hour
 8080cc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080cc4:	f001 ff5e 	bl	8082b84 <delay>
  return true;
}
 8080cc8:	2001      	movs	r0, #1
 8080cca:	bd08      	pop	{r3, pc}
 8080ccc:	2000031c 	.word	0x2000031c

08080cd0 <_Z9PMICresetv>:
bool notConnected() {
  return !Particle.connected();                             // This is a requirement to use waitFor
}

// Power Management function
void PMICreset() {
 8080cd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  power.begin();                                            // Settings for Solar powered power management
 8080cd2:	481f      	ldr	r0, [pc, #124]	; (8080d50 <_Z9PMICresetv+0x80>)
 8080cd4:	f002 fd78 	bl	80837c8 <_ZN4PMIC5beginEv>
  power.disableWatchdog();
 8080cd8:	481d      	ldr	r0, [pc, #116]	; (8080d50 <_Z9PMICresetv+0x80>)
 8080cda:	f002 ff22 	bl	8083b22 <_ZN4PMIC15disableWatchdogEv>
  if (solarPowerMode) {
 8080cde:	4b1d      	ldr	r3, [pc, #116]	; (8080d54 <_Z9PMICresetv+0x84>)
 8080ce0:	781c      	ldrb	r4, [r3, #0]
 8080ce2:	4b1d      	ldr	r3, [pc, #116]	; (8080d58 <_Z9PMICresetv+0x88>)
 8080ce4:	b1bc      	cbz	r4, 8080d16 <_Z9PMICresetv+0x46>
    lowBattLimit = 20;                                      // Trigger for Low Batt State
 8080ce6:	2214      	movs	r2, #20
    power.setInputVoltageLimit(4840);                       // Set the lowest input voltage to 4.84 volts best setting for 6V solar panels
 8080ce8:	f241 21e8 	movw	r1, #4840	; 0x12e8
 8080cec:	4818      	ldr	r0, [pc, #96]	; (8080d50 <_Z9PMICresetv+0x80>)
// Power Management function
void PMICreset() {
  power.begin();                                            // Settings for Solar powered power management
  power.disableWatchdog();
  if (solarPowerMode) {
    lowBattLimit = 20;                                      // Trigger for Low Batt State
 8080cee:	601a      	str	r2, [r3, #0]
    power.setInputVoltageLimit(4840);                       // Set the lowest input voltage to 4.84 volts best setting for 6V solar panels
 8080cf0:	f002 fdec 	bl	80838cc <_ZN4PMIC20setInputVoltageLimitEt>
    power.setInputCurrentLimit(900);                        // default is 900mA
 8080cf4:	f44f 7161 	mov.w	r1, #900	; 0x384
 8080cf8:	4815      	ldr	r0, [pc, #84]	; (8080d50 <_Z9PMICresetv+0x80>)
 8080cfa:	f002 fe71 	bl	80839e0 <_ZN4PMIC20setInputCurrentLimitEt>
    power.setChargeCurrent(0,0,1,0,0,0);                    // default is 512mA matches my 3W panel
 8080cfe:	2200      	movs	r2, #0
 8080d00:	4611      	mov	r1, r2
 8080d02:	9202      	str	r2, [sp, #8]
 8080d04:	9201      	str	r2, [sp, #4]
 8080d06:	9200      	str	r2, [sp, #0]
 8080d08:	2301      	movs	r3, #1
 8080d0a:	4811      	ldr	r0, [pc, #68]	; (8080d50 <_Z9PMICresetv+0x80>)
 8080d0c:	f002 feb0 	bl	8083a70 <_ZN4PMIC16setChargeCurrentEbbbbbb>
    power.setChargeVoltage(4208);                           // Allows us to charge cloe to 100% - battery can't go over 45 celcius
 8080d10:	f241 0170 	movw	r1, #4208	; 0x1070
 8080d14:	e016      	b.n	8080d44 <_Z9PMICresetv+0x74>
  }
  else  {
    lowBattLimit = 30;                                      // Trigger for Low Batt State
 8080d16:	221e      	movs	r2, #30
    power.setInputVoltageLimit(4208);                       // This is the default value for the Electron
 8080d18:	f241 0170 	movw	r1, #4208	; 0x1070
 8080d1c:	480c      	ldr	r0, [pc, #48]	; (8080d50 <_Z9PMICresetv+0x80>)
    power.setInputCurrentLimit(900);                        // default is 900mA
    power.setChargeCurrent(0,0,1,0,0,0);                    // default is 512mA matches my 3W panel
    power.setChargeVoltage(4208);                           // Allows us to charge cloe to 100% - battery can't go over 45 celcius
  }
  else  {
    lowBattLimit = 30;                                      // Trigger for Low Batt State
 8080d1e:	601a      	str	r2, [r3, #0]
    power.setInputVoltageLimit(4208);                       // This is the default value for the Electron
 8080d20:	f002 fdd4 	bl	80838cc <_ZN4PMIC20setInputVoltageLimitEt>
    power.setInputCurrentLimit(1500);                       // default is 900mA this let's me charge faster
 8080d24:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8080d28:	4809      	ldr	r0, [pc, #36]	; (8080d50 <_Z9PMICresetv+0x80>)
 8080d2a:	f002 fe59 	bl	80839e0 <_ZN4PMIC20setInputCurrentLimitEt>
    power.setChargeCurrent(0,1,1,0,0,0);                    // default is 2048mA (011000) = 512mA+1024mA+512mA)
 8080d2e:	2301      	movs	r3, #1
 8080d30:	4621      	mov	r1, r4
 8080d32:	9402      	str	r4, [sp, #8]
 8080d34:	9401      	str	r4, [sp, #4]
 8080d36:	9400      	str	r4, [sp, #0]
 8080d38:	461a      	mov	r2, r3
 8080d3a:	4805      	ldr	r0, [pc, #20]	; (8080d50 <_Z9PMICresetv+0x80>)
 8080d3c:	f002 fe98 	bl	8083a70 <_ZN4PMIC16setChargeCurrentEbbbbbb>
    power.setChargeVoltage(4112);                           // default is 4.112V termination voltage
 8080d40:	f241 0110 	movw	r1, #4112	; 0x1010
 8080d44:	4802      	ldr	r0, [pc, #8]	; (8080d50 <_Z9PMICresetv+0x80>)
  }
}
 8080d46:	b004      	add	sp, #16
 8080d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  else  {
    lowBattLimit = 30;                                      // Trigger for Low Batt State
    power.setInputVoltageLimit(4208);                       // This is the default value for the Electron
    power.setInputCurrentLimit(1500);                       // default is 900mA this let's me charge faster
    power.setChargeCurrent(0,1,1,0,0,0);                    // default is 2048mA (011000) = 512mA+1024mA+512mA)
    power.setChargeVoltage(4112);                           // default is 4.112V termination voltage
 8080d4c:	f002 bec3 	b.w	8083ad6 <_ZN4PMIC16setChargeVoltageEt>
 8080d50:	20000209 	.word	0x20000209
 8080d54:	200002f5 	.word	0x200002f5
 8080d58:	2000016c 	.word	0x2000016c
 8080d5c:	00000000 	.word	0x00000000

08080d60 <_Z9heatIndexff>:
// I have tested the results against this table and found this to be within 1%
// https://www.weather.gov/safety/heat-index
// TF = temp in F  -  R = humidity in %
// My starting point was: https://github.com/RobTillaart/Arduino/blob/master/libraries/Temperature/temperature.h
float heatIndex(float TC, float R)
{
 8080d60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080d64:	460d      	mov	r5, r1
    float TF = (TC * 1.8) + 32.0;                // Need to convert to Farenheit for the calculations
 8080d66:	f005 f89d 	bl	8085ea4 <__aeabi_f2d>
 8080d6a:	a37f      	add	r3, pc, #508	; (adr r3, 8080f68 <_Z9heatIndexff+0x208>)
 8080d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080d70:	f005 f8ec 	bl	8085f4c <__aeabi_dmul>
 8080d74:	2200      	movs	r2, #0
 8080d76:	4b7e      	ldr	r3, [pc, #504]	; (8080f70 <_Z9heatIndexff+0x210>)
 8080d78:	f004 ff36 	bl	8085be8 <__adddf3>
 8080d7c:	f005 fb96 	bl	80864ac <__aeabi_d2f>
    const float c11 = 61.0;
    const float c12 = 68.0;
    const float c13 = 1.2;
    const float c14 = 0.094;

    float simpleHeatIndex = ((c10 * ((TF+c11+(TF-c12)*c13) + (R*c14))) -32.0) / 1.8;
 8080d80:	497c      	ldr	r1, [pc, #496]	; (8080f74 <_Z9heatIndexff+0x214>)
// https://www.weather.gov/safety/heat-index
// TF = temp in F  -  R = humidity in %
// My starting point was: https://github.com/RobTillaart/Arduino/blob/master/libraries/Temperature/temperature.h
float heatIndex(float TC, float R)
{
    float TF = (TC * 1.8) + 32.0;                // Need to convert to Farenheit for the calculations
 8080d82:	4604      	mov	r4, r0
    const float c11 = 61.0;
    const float c12 = 68.0;
    const float c13 = 1.2;
    const float c14 = 0.094;

    float simpleHeatIndex = ((c10 * ((TF+c11+(TF-c12)*c13) + (R*c14))) -32.0) / 1.8;
 8080d84:	f005 fbe6 	bl	8086554 <__aeabi_fsub>
 8080d88:	497b      	ldr	r1, [pc, #492]	; (8080f78 <_Z9heatIndexff+0x218>)
 8080d8a:	f005 fced 	bl	8086768 <__aeabi_fmul>
 8080d8e:	497b      	ldr	r1, [pc, #492]	; (8080f7c <_Z9heatIndexff+0x21c>)
 8080d90:	4606      	mov	r6, r0
 8080d92:	4620      	mov	r0, r4
 8080d94:	f005 fbe0 	bl	8086558 <__addsf3>
 8080d98:	4601      	mov	r1, r0
 8080d9a:	4630      	mov	r0, r6
 8080d9c:	f005 fbdc 	bl	8086558 <__addsf3>
 8080da0:	4977      	ldr	r1, [pc, #476]	; (8080f80 <_Z9heatIndexff+0x220>)
 8080da2:	4606      	mov	r6, r0
 8080da4:	4628      	mov	r0, r5
 8080da6:	f005 fcdf 	bl	8086768 <__aeabi_fmul>
 8080daa:	4601      	mov	r1, r0
 8080dac:	4630      	mov	r0, r6
 8080dae:	f005 fbd3 	bl	8086558 <__addsf3>
 8080db2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8080db6:	f005 fcd7 	bl	8086768 <__aeabi_fmul>
 8080dba:	f005 f873 	bl	8085ea4 <__aeabi_f2d>
 8080dbe:	2200      	movs	r2, #0
 8080dc0:	4b6b      	ldr	r3, [pc, #428]	; (8080f70 <_Z9heatIndexff+0x210>)
 8080dc2:	f004 ff0f 	bl	8085be4 <__aeabi_dsub>
 8080dc6:	a368      	add	r3, pc, #416	; (adr r3, 8080f68 <_Z9heatIndexff+0x208>)
 8080dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080dcc:	f005 f9e8 	bl	80861a0 <__aeabi_ddiv>
 8080dd0:	f005 fb6c 	bl	80864ac <__aeabi_d2f>

    if (((TF+simpleHeatIndex)/2) > 80.0) {
 8080dd4:	4601      	mov	r1, r0
    const float c11 = 61.0;
    const float c12 = 68.0;
    const float c13 = 1.2;
    const float c14 = 0.094;

    float simpleHeatIndex = ((c10 * ((TF+c11+(TF-c12)*c13) + (R*c14))) -32.0) / 1.8;
 8080dd6:	4606      	mov	r6, r0

    if (((TF+simpleHeatIndex)/2) > 80.0) {
 8080dd8:	4620      	mov	r0, r4
 8080dda:	f005 fbbd 	bl	8086558 <__addsf3>
 8080dde:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8080de2:	f005 fcc1 	bl	8086768 <__aeabi_fmul>
 8080de6:	4967      	ldr	r1, [pc, #412]	; (8080f84 <_Z9heatIndexff+0x224>)
 8080de8:	f005 fe7a 	bl	8086ae0 <__aeabi_fcmpgt>
 8080dec:	2800      	cmp	r0, #0
 8080dee:	f000 80b3 	beq.w	8080f58 <_Z9heatIndexff+0x1f8>
      float A = (( c5 * TF) + c2) * TF + c1;
 8080df2:	4965      	ldr	r1, [pc, #404]	; (8080f88 <_Z9heatIndexff+0x228>)
 8080df4:	4620      	mov	r0, r4
 8080df6:	f005 fcb7 	bl	8086768 <__aeabi_fmul>
 8080dfa:	4964      	ldr	r1, [pc, #400]	; (8080f8c <_Z9heatIndexff+0x22c>)
 8080dfc:	f005 fbac 	bl	8086558 <__addsf3>
 8080e00:	4621      	mov	r1, r4
 8080e02:	f005 fcb1 	bl	8086768 <__aeabi_fmul>
 8080e06:	4962      	ldr	r1, [pc, #392]	; (8080f90 <_Z9heatIndexff+0x230>)
 8080e08:	f005 fba4 	bl	8086554 <__aeabi_fsub>
      float B = (((c7 * TF) + c4) * TF + c3) * R;
 8080e0c:	4961      	ldr	r1, [pc, #388]	; (8080f94 <_Z9heatIndexff+0x234>)
    const float c14 = 0.094;

    float simpleHeatIndex = ((c10 * ((TF+c11+(TF-c12)*c13) + (R*c14))) -32.0) / 1.8;

    if (((TF+simpleHeatIndex)/2) > 80.0) {
      float A = (( c5 * TF) + c2) * TF + c1;
 8080e0e:	4607      	mov	r7, r0
      float B = (((c7 * TF) + c4) * TF + c3) * R;
 8080e10:	4620      	mov	r0, r4
 8080e12:	f005 fca9 	bl	8086768 <__aeabi_fmul>
 8080e16:	4960      	ldr	r1, [pc, #384]	; (8080f98 <_Z9heatIndexff+0x238>)
 8080e18:	f005 fb9c 	bl	8086554 <__aeabi_fsub>
 8080e1c:	4621      	mov	r1, r4
 8080e1e:	f005 fca3 	bl	8086768 <__aeabi_fmul>
 8080e22:	495e      	ldr	r1, [pc, #376]	; (8080f9c <_Z9heatIndexff+0x23c>)
 8080e24:	f005 fb98 	bl	8086558 <__addsf3>
 8080e28:	4629      	mov	r1, r5
 8080e2a:	f005 fc9d 	bl	8086768 <__aeabi_fmul>
      float C = (((c9 * TF) + c8) * TF + c6) * R * R;
 8080e2e:	495c      	ldr	r1, [pc, #368]	; (8080fa0 <_Z9heatIndexff+0x240>)

    float simpleHeatIndex = ((c10 * ((TF+c11+(TF-c12)*c13) + (R*c14))) -32.0) / 1.8;

    if (((TF+simpleHeatIndex)/2) > 80.0) {
      float A = (( c5 * TF) + c2) * TF + c1;
      float B = (((c7 * TF) + c4) * TF + c3) * R;
 8080e30:	4682      	mov	sl, r0
      float C = (((c9 * TF) + c8) * TF + c6) * R * R;
 8080e32:	4620      	mov	r0, r4
 8080e34:	f005 fc98 	bl	8086768 <__aeabi_fmul>
 8080e38:	495a      	ldr	r1, [pc, #360]	; (8080fa4 <_Z9heatIndexff+0x244>)
 8080e3a:	f005 fb8d 	bl	8086558 <__addsf3>
 8080e3e:	4621      	mov	r1, r4
 8080e40:	f005 fc92 	bl	8086768 <__aeabi_fmul>
 8080e44:	4958      	ldr	r1, [pc, #352]	; (8080fa8 <_Z9heatIndexff+0x248>)
 8080e46:	f005 fb85 	bl	8086554 <__aeabi_fsub>
 8080e4a:	4629      	mov	r1, r5
 8080e4c:	f005 fc8c 	bl	8086768 <__aeabi_fmul>
 8080e50:	4629      	mov	r1, r5
 8080e52:	f005 fc89 	bl	8086768 <__aeabi_fmul>
      if (TF > 80 && TF < 112 && R < 13) {   // Low humidity adjustment
 8080e56:	494b      	ldr	r1, [pc, #300]	; (8080f84 <_Z9heatIndexff+0x224>)
    float simpleHeatIndex = ((c10 * ((TF+c11+(TF-c12)*c13) + (R*c14))) -32.0) / 1.8;

    if (((TF+simpleHeatIndex)/2) > 80.0) {
      float A = (( c5 * TF) + c2) * TF + c1;
      float B = (((c7 * TF) + c4) * TF + c3) * R;
      float C = (((c9 * TF) + c8) * TF + c6) * R * R;
 8080e58:	4683      	mov	fp, r0
      if (TF > 80 && TF < 112 && R < 13) {   // Low humidity adjustment
 8080e5a:	4620      	mov	r0, r4
 8080e5c:	f005 fe40 	bl	8086ae0 <__aeabi_fcmpgt>
 8080e60:	2800      	cmp	r0, #0
 8080e62:	d035      	beq.n	8080ed0 <_Z9heatIndexff+0x170>
 8080e64:	4951      	ldr	r1, [pc, #324]	; (8080fac <_Z9heatIndexff+0x24c>)
 8080e66:	4620      	mov	r0, r4
 8080e68:	f005 fe1c 	bl	8086aa4 <__aeabi_fcmplt>
 8080e6c:	2800      	cmp	r0, #0
 8080e6e:	d076      	beq.n	8080f5e <_Z9heatIndexff+0x1fe>
 8080e70:	494f      	ldr	r1, [pc, #316]	; (8080fb0 <_Z9heatIndexff+0x250>)
 8080e72:	4628      	mov	r0, r5
 8080e74:	f005 fe16 	bl	8086aa4 <__aeabi_fcmplt>
 8080e78:	2800      	cmp	r0, #0
 8080e7a:	d070      	beq.n	8080f5e <_Z9heatIndexff+0x1fe>
        D = ((hl1-R)/hl2)*sqrt((hl3-abs(TF-hl4))/17);
 8080e7c:	494d      	ldr	r1, [pc, #308]	; (8080fb4 <_Z9heatIndexff+0x254>)
 8080e7e:	4620      	mov	r0, r4
 8080e80:	f005 fb68 	bl	8086554 <__aeabi_fsub>
 8080e84:	f005 fe36 	bl	8086af4 <__aeabi_f2iz>
 8080e88:	2800      	cmp	r0, #0
 8080e8a:	bfb8      	it	lt
 8080e8c:	4240      	neglt	r0, r0
 8080e8e:	f005 fc17 	bl	80866c0 <__aeabi_i2f>
 8080e92:	4601      	mov	r1, r0
 8080e94:	4848      	ldr	r0, [pc, #288]	; (8080fb8 <_Z9heatIndexff+0x258>)
 8080e96:	f005 fb5d 	bl	8086554 <__aeabi_fsub>
 8080e9a:	4947      	ldr	r1, [pc, #284]	; (8080fb8 <_Z9heatIndexff+0x258>)
 8080e9c:	f005 fd18 	bl	80868d0 <__aeabi_fdiv>
 8080ea0:	f005 f800 	bl	8085ea4 <__aeabi_f2d>
 8080ea4:	f003 fefc 	bl	8084ca0 <sqrt>
 8080ea8:	4680      	mov	r8, r0
 8080eaa:	4689      	mov	r9, r1
 8080eac:	4840      	ldr	r0, [pc, #256]	; (8080fb0 <_Z9heatIndexff+0x250>)
 8080eae:	4629      	mov	r1, r5
 8080eb0:	f005 fb50 	bl	8086554 <__aeabi_fsub>
 8080eb4:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8080eb8:	f005 fc56 	bl	8086768 <__aeabi_fmul>
 8080ebc:	f004 fff2 	bl	8085ea4 <__aeabi_f2d>
 8080ec0:	4642      	mov	r2, r8
 8080ec2:	464b      	mov	r3, r9
 8080ec4:	f005 f842 	bl	8085f4c <__aeabi_dmul>
 8080ec8:	f005 faf0 	bl	80864ac <__aeabi_d2f>
 8080ecc:	4606      	mov	r6, r0
 8080ece:	e005      	b.n	8080edc <_Z9heatIndexff+0x17c>
      }
      if (TF > 80 && TF < 87 && R > 85) {  // High humidity adjustment
 8080ed0:	492c      	ldr	r1, [pc, #176]	; (8080f84 <_Z9heatIndexff+0x224>)
 8080ed2:	4620      	mov	r0, r4
 8080ed4:	f005 fe04 	bl	8086ae0 <__aeabi_fcmpgt>
    // Constants for the high heat and low humidity adjustment (hl or high/low)
    const float hl1 = 13.0;
    const float hl2 = 4.0;
    const float hl3 = 17.0;
    const float hl4 = 95.0;
    float D = 0;
 8080ed8:	2600      	movs	r6, #0
      float B = (((c7 * TF) + c4) * TF + c3) * R;
      float C = (((c9 * TF) + c8) * TF + c6) * R * R;
      if (TF > 80 && TF < 112 && R < 13) {   // Low humidity adjustment
        D = ((hl1-R)/hl2)*sqrt((hl3-abs(TF-hl4))/17);
      }
      if (TF > 80 && TF < 87 && R > 85) {  // High humidity adjustment
 8080eda:	b1f0      	cbz	r0, 8080f1a <_Z9heatIndexff+0x1ba>
 8080edc:	4937      	ldr	r1, [pc, #220]	; (8080fbc <_Z9heatIndexff+0x25c>)
 8080ede:	4620      	mov	r0, r4
 8080ee0:	f005 fde0 	bl	8086aa4 <__aeabi_fcmplt>
 8080ee4:	b1d8      	cbz	r0, 8080f1e <_Z9heatIndexff+0x1be>
 8080ee6:	4936      	ldr	r1, [pc, #216]	; (8080fc0 <_Z9heatIndexff+0x260>)
 8080ee8:	4628      	mov	r0, r5
 8080eea:	f005 fdf9 	bl	8086ae0 <__aeabi_fcmpgt>
 8080eee:	b1b0      	cbz	r0, 8080f1e <_Z9heatIndexff+0x1be>
        E = ((R-hh1)/hh2)*((hh3-TF)/hh4);
 8080ef0:	4933      	ldr	r1, [pc, #204]	; (8080fc0 <_Z9heatIndexff+0x260>)
 8080ef2:	4628      	mov	r0, r5
 8080ef4:	f005 fb2e 	bl	8086554 <__aeabi_fsub>
 8080ef8:	4932      	ldr	r1, [pc, #200]	; (8080fc4 <_Z9heatIndexff+0x264>)
 8080efa:	f005 fce9 	bl	80868d0 <__aeabi_fdiv>
 8080efe:	4621      	mov	r1, r4
 8080f00:	4605      	mov	r5, r0
 8080f02:	482e      	ldr	r0, [pc, #184]	; (8080fbc <_Z9heatIndexff+0x25c>)
 8080f04:	f005 fb26 	bl	8086554 <__aeabi_fsub>
 8080f08:	492f      	ldr	r1, [pc, #188]	; (8080fc8 <_Z9heatIndexff+0x268>)
 8080f0a:	f005 fce1 	bl	80868d0 <__aeabi_fdiv>
 8080f0e:	4601      	mov	r1, r0
 8080f10:	4628      	mov	r0, r5
 8080f12:	f005 fc29 	bl	8086768 <__aeabi_fmul>
 8080f16:	4604      	mov	r4, r0
 8080f18:	e002      	b.n	8080f20 <_Z9heatIndexff+0x1c0>
    // Constants for the high heat and high humidity adjustment (hh or high/high)
    const float hh1 = 85.0;
    const float hh2 = 10.0;
    const float hh3 = 87.0;
    const float hh4 = 5.0;
    float E = 0;
 8080f1a:	4634      	mov	r4, r6
 8080f1c:	e000      	b.n	8080f20 <_Z9heatIndexff+0x1c0>
 8080f1e:	2400      	movs	r4, #0
        D = ((hl1-R)/hl2)*sqrt((hl3-abs(TF-hl4))/17);
      }
      if (TF > 80 && TF < 87 && R > 85) {  // High humidity adjustment
        E = ((R-hh1)/hh2)*((hh3-TF)/hh4);
      }
      return ((A + B + C - D + E) - 32.0) / 1.8;
 8080f20:	4651      	mov	r1, sl
 8080f22:	4638      	mov	r0, r7
 8080f24:	f005 fb18 	bl	8086558 <__addsf3>
 8080f28:	4659      	mov	r1, fp
 8080f2a:	f005 fb15 	bl	8086558 <__addsf3>
 8080f2e:	4631      	mov	r1, r6
 8080f30:	f005 fb10 	bl	8086554 <__aeabi_fsub>
 8080f34:	4621      	mov	r1, r4
 8080f36:	f005 fb0f 	bl	8086558 <__addsf3>
 8080f3a:	f004 ffb3 	bl	8085ea4 <__aeabi_f2d>
 8080f3e:	2200      	movs	r2, #0
 8080f40:	4b0b      	ldr	r3, [pc, #44]	; (8080f70 <_Z9heatIndexff+0x210>)
 8080f42:	f004 fe4f 	bl	8085be4 <__aeabi_dsub>
 8080f46:	a308      	add	r3, pc, #32	; (adr r3, 8080f68 <_Z9heatIndexff+0x208>)
 8080f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080f4c:	f005 f928 	bl	80861a0 <__aeabi_ddiv>
 8080f50:	f005 faac 	bl	80864ac <__aeabi_d2f>
 8080f54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
    else return simpleHeatIndex;
 8080f58:	4630      	mov	r0, r6
 8080f5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    // Constants for the high heat and low humidity adjustment (hl or high/low)
    const float hl1 = 13.0;
    const float hl2 = 4.0;
    const float hl3 = 17.0;
    const float hl4 = 95.0;
    float D = 0;
 8080f5e:	2600      	movs	r6, #0
 8080f60:	e7bc      	b.n	8080edc <_Z9heatIndexff+0x17c>
 8080f62:	bf00      	nop
 8080f64:	f3af 8000 	nop.w
 8080f68:	cccccccd 	.word	0xcccccccd
 8080f6c:	3ffccccc 	.word	0x3ffccccc
 8080f70:	40400000 	.word	0x40400000
 8080f74:	42880000 	.word	0x42880000
 8080f78:	3f99999a 	.word	0x3f99999a
 8080f7c:	42740000 	.word	0x42740000
 8080f80:	3dc08312 	.word	0x3dc08312
 8080f84:	42a00000 	.word	0x42a00000
 8080f88:	bbe00fe0 	.word	0xbbe00fe0
 8080f8c:	40032311 	.word	0x40032311
 8080f90:	42298419 	.word	0x42298419
 8080f94:	3aa10dac 	.word	0x3aa10dac
 8080f98:	3e662648 	.word	0x3e662648
 8080f9c:	41224b16 	.word	0x41224b16
 8080fa0:	b6058bf1 	.word	0xb6058bf1
 8080fa4:	3a5f8fc8 	.word	0x3a5f8fc8
 8080fa8:	3d6087f8 	.word	0x3d6087f8
 8080fac:	42e00000 	.word	0x42e00000
 8080fb0:	41500000 	.word	0x41500000
 8080fb4:	42be0000 	.word	0x42be0000
 8080fb8:	41880000 	.word	0x41880000
 8080fbc:	42ae0000 	.word	0x42ae0000
 8080fc0:	42aa0000 	.word	0x42aa0000
 8080fc4:	41200000 	.word	0x41200000
 8080fc8:	40a00000 	.word	0x40a00000

08080fcc <_Z16takeMeasurementsv>:
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
}

// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() {
 8080fcc:	b573      	push	{r0, r1, r4, r5, r6, lr}

  bme.setGasHeater(320, 150); // 320*C for 150 ms
 8080fce:	2296      	movs	r2, #150	; 0x96
 8080fd0:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8080fd4:	4841      	ldr	r0, [pc, #260]	; (80810dc <_Z16takeMeasurementsv+0x110>)
 8080fd6:	f001 fa67 	bl	80824a8 <_ZN15Adafruit_BME68012setGasHeaterEtt>
  bme.performReading();                                     // Take measurement from all the sensors
 8080fda:	4840      	ldr	r0, [pc, #256]	; (80810dc <_Z16takeMeasurementsv+0x110>)
 8080fdc:	f001 fa30 	bl	8082440 <_ZN15Adafruit_BME68014performReadingEv>
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8080fe0:	4b3f      	ldr	r3, [pc, #252]	; (80810e0 <_Z16takeMeasurementsv+0x114>)
 8080fe2:	2200      	movs	r2, #0
 8080fe4:	4611      	mov	r1, r2
 8080fe6:	6858      	ldr	r0, [r3, #4]
 8080fe8:	f001 fd4c 	bl	8082a84 <network_ready>

  if (Cellular.ready()) getSignalStrength();                // Test signal strength if the cellular modem is on and ready
 8080fec:	b108      	cbz	r0, 8080ff2 <_Z16takeMeasurementsv+0x26>
 8080fee:	f7ff fdf5 	bl	8080bdc <_Z17getSignalStrengthv>

  temperatureInC = bme.temperature;
 8080ff2:	4c3a      	ldr	r4, [pc, #232]	; (80810dc <_Z16takeMeasurementsv+0x110>)
 8080ff4:	4d3b      	ldr	r5, [pc, #236]	; (80810e4 <_Z16takeMeasurementsv+0x118>)
 8080ff6:	6820      	ldr	r0, [r4, #0]
 8080ff8:	f004 ff54 	bl	8085ea4 <__aeabi_f2d>
  snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", temperatureInC);
 8080ffc:	4a3a      	ldr	r2, [pc, #232]	; (80810e8 <_Z16takeMeasurementsv+0x11c>)
  bme.setGasHeater(320, 150); // 320*C for 150 ms
  bme.performReading();                                     // Take measurement from all the sensors

  if (Cellular.ready()) getSignalStrength();                // Test signal strength if the cellular modem is on and ready

  temperatureInC = bme.temperature;
 8080ffe:	e9c5 0100 	strd	r0, r1, [r5]
  snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", temperatureInC);
 8081002:	e9cd 0100 	strd	r0, r1, [sp]
 8081006:	2110      	movs	r1, #16
 8081008:	4838      	ldr	r0, [pc, #224]	; (80810ec <_Z16takeMeasurementsv+0x120>)
 808100a:	f001 fd9b 	bl	8082b44 <snprintf>

  relativeHumidity = bme.humidity;
 808100e:	68a0      	ldr	r0, [r4, #8]
 8081010:	f004 ff48 	bl	8085ea4 <__aeabi_f2d>
 8081014:	4e36      	ldr	r6, [pc, #216]	; (80810f0 <_Z16takeMeasurementsv+0x124>)
  snprintf(humidityString,sizeof(humidityString),"%4.1f%%", relativeHumidity);
 8081016:	e9cd 0100 	strd	r0, r1, [sp]
  if (Cellular.ready()) getSignalStrength();                // Test signal strength if the cellular modem is on and ready

  temperatureInC = bme.temperature;
  snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", temperatureInC);

  relativeHumidity = bme.humidity;
 808101a:	e9c6 0100 	strd	r0, r1, [r6]
  snprintf(humidityString,sizeof(humidityString),"%4.1f%%", relativeHumidity);
 808101e:	4a35      	ldr	r2, [pc, #212]	; (80810f4 <_Z16takeMeasurementsv+0x128>)
 8081020:	2110      	movs	r1, #16
 8081022:	4835      	ldr	r0, [pc, #212]	; (80810f8 <_Z16takeMeasurementsv+0x12c>)
 8081024:	f001 fd8e 	bl	8082b44 <snprintf>

  pressureHpa = bme.pressure / 100.0;
 8081028:	6860      	ldr	r0, [r4, #4]
 808102a:	f004 ff3b 	bl	8085ea4 <__aeabi_f2d>
 808102e:	2200      	movs	r2, #0
 8081030:	4b32      	ldr	r3, [pc, #200]	; (80810fc <_Z16takeMeasurementsv+0x130>)
 8081032:	f005 f8b5 	bl	80861a0 <__aeabi_ddiv>
 8081036:	4b32      	ldr	r3, [pc, #200]	; (8081100 <_Z16takeMeasurementsv+0x134>)
  snprintf(pressureString,sizeof(pressureString),"%4.1fHPa", pressureHpa);
 8081038:	4a32      	ldr	r2, [pc, #200]	; (8081104 <_Z16takeMeasurementsv+0x138>)
  snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", temperatureInC);

  relativeHumidity = bme.humidity;
  snprintf(humidityString,sizeof(humidityString),"%4.1f%%", relativeHumidity);

  pressureHpa = bme.pressure / 100.0;
 808103a:	e9c3 0100 	strd	r0, r1, [r3]
  snprintf(pressureString,sizeof(pressureString),"%4.1fHPa", pressureHpa);
 808103e:	e9cd 0100 	strd	r0, r1, [sp]
 8081042:	2110      	movs	r1, #16
 8081044:	4830      	ldr	r0, [pc, #192]	; (8081108 <_Z16takeMeasurementsv+0x13c>)
 8081046:	f001 fd7d 	bl	8082b44 <snprintf>

  gasResistanceKOhms = bme.gas_resistance / 1000.0;
 808104a:	68e0      	ldr	r0, [r4, #12]
 808104c:	f004 ff2a 	bl	8085ea4 <__aeabi_f2d>
 8081050:	2200      	movs	r2, #0
 8081052:	4b2e      	ldr	r3, [pc, #184]	; (808110c <_Z16takeMeasurementsv+0x140>)
 8081054:	f005 f8a4 	bl	80861a0 <__aeabi_ddiv>
 8081058:	4b2d      	ldr	r3, [pc, #180]	; (8081110 <_Z16takeMeasurementsv+0x144>)
  snprintf(TVOCString,sizeof(TVOCString),"%4.1fkOhm", gasResistanceKOhms);
 808105a:	4a2e      	ldr	r2, [pc, #184]	; (8081114 <_Z16takeMeasurementsv+0x148>)
  snprintf(humidityString,sizeof(humidityString),"%4.1f%%", relativeHumidity);

  pressureHpa = bme.pressure / 100.0;
  snprintf(pressureString,sizeof(pressureString),"%4.1fHPa", pressureHpa);

  gasResistanceKOhms = bme.gas_resistance / 1000.0;
 808105c:	e9c3 0100 	strd	r0, r1, [r3]
  snprintf(TVOCString,sizeof(TVOCString),"%4.1fkOhm", gasResistanceKOhms);
 8081060:	e9cd 0100 	strd	r0, r1, [sp]
 8081064:	2110      	movs	r1, #16
 8081066:	482c      	ldr	r0, [pc, #176]	; (8081118 <_Z16takeMeasurementsv+0x14c>)
 8081068:	f001 fd6c 	bl	8082b44 <snprintf>

  approxAltitudeInM = bme.readAltitude(SEALEVELPRESSURE_HPA);
 808106c:	492b      	ldr	r1, [pc, #172]	; (808111c <_Z16takeMeasurementsv+0x150>)
 808106e:	4620      	mov	r0, r4
 8081070:	f001 f9ea 	bl	8082448 <_ZN15Adafruit_BME68012readAltitudeEf>
 8081074:	f004 ff16 	bl	8085ea4 <__aeabi_f2d>
 8081078:	4b29      	ldr	r3, [pc, #164]	; (8081120 <_Z16takeMeasurementsv+0x154>)
  snprintf(altitudeString,sizeof(altitudeString),"%4.1fm", approxAltitudeInM);
 808107a:	4a2a      	ldr	r2, [pc, #168]	; (8081124 <_Z16takeMeasurementsv+0x158>)
  snprintf(pressureString,sizeof(pressureString),"%4.1fHPa", pressureHpa);

  gasResistanceKOhms = bme.gas_resistance / 1000.0;
  snprintf(TVOCString,sizeof(TVOCString),"%4.1fkOhm", gasResistanceKOhms);

  approxAltitudeInM = bme.readAltitude(SEALEVELPRESSURE_HPA);
 808107c:	e9c3 0100 	strd	r0, r1, [r3]
  snprintf(altitudeString,sizeof(altitudeString),"%4.1fm", approxAltitudeInM);
 8081080:	e9cd 0100 	strd	r0, r1, [sp]
 8081084:	2110      	movs	r1, #16
 8081086:	4828      	ldr	r0, [pc, #160]	; (8081128 <_Z16takeMeasurementsv+0x15c>)
 8081088:	f001 fd5c 	bl	8082b44 <snprintf>

  stateOfCharge = int(batteryMonitor.getSoC());             // Percentage of full charge
 808108c:	4827      	ldr	r0, [pc, #156]	; (808112c <_Z16takeMeasurementsv+0x160>)
 808108e:	f002 fa19 	bl	80834c4 <_ZN9FuelGauge6getSoCEv>
 8081092:	f005 fd2f 	bl	8086af4 <__aeabi_f2iz>
 8081096:	4a26      	ldr	r2, [pc, #152]	; (8081130 <_Z16takeMeasurementsv+0x164>)
 8081098:	4603      	mov	r3, r0
 808109a:	6010      	str	r0, [r2, #0]
  snprintf(batteryString,sizeof(batteryString),"%i%%", stateOfCharge);
 808109c:	2110      	movs	r1, #16
 808109e:	4a25      	ldr	r2, [pc, #148]	; (8081134 <_Z16takeMeasurementsv+0x168>)
 80810a0:	4825      	ldr	r0, [pc, #148]	; (8081138 <_Z16takeMeasurementsv+0x16c>)
 80810a2:	f001 fd4f 	bl	8082b44 <snprintf>

  heatIndexC = heatIndex(temperatureInC,relativeHumidity);    // Calcualte the heat index when it is hot AND humid
 80810a6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80810aa:	f005 f9ff 	bl	80864ac <__aeabi_d2f>
 80810ae:	4604      	mov	r4, r0
 80810b0:	e9d5 0100 	ldrd	r0, r1, [r5]
 80810b4:	f005 f9fa 	bl	80864ac <__aeabi_d2f>
 80810b8:	4621      	mov	r1, r4
 80810ba:	f7ff fe51 	bl	8080d60 <_Z9heatIndexff>
 80810be:	4b1f      	ldr	r3, [pc, #124]	; (808113c <_Z16takeMeasurementsv+0x170>)
 80810c0:	6018      	str	r0, [r3, #0]
  snprintf(heatIndexString,sizeof(heatIndexString),"%4.1f*C",heatIndexC);
 80810c2:	f004 feef 	bl	8085ea4 <__aeabi_f2d>
 80810c6:	4a08      	ldr	r2, [pc, #32]	; (80810e8 <_Z16takeMeasurementsv+0x11c>)
 80810c8:	e9cd 0100 	strd	r0, r1, [sp]
 80810cc:	2110      	movs	r1, #16
 80810ce:	481c      	ldr	r0, [pc, #112]	; (8081140 <_Z16takeMeasurementsv+0x174>)
 80810d0:	f001 fd38 	bl	8082b44 <snprintf>

  return 1;
}
 80810d4:	2001      	movs	r0, #1
 80810d6:	b002      	add	sp, #8
 80810d8:	bd70      	pop	{r4, r5, r6, pc}
 80810da:	bf00      	nop
 80810dc:	2000018c 	.word	0x2000018c
 80810e0:	2000031c 	.word	0x2000031c
 80810e4:	200002d8 	.word	0x200002d8
 80810e8:	08087bd5 	.word	0x08087bd5
 80810ec:	2000015c 	.word	0x2000015c
 80810f0:	20000238 	.word	0x20000238
 80810f4:	08087bdd 	.word	0x08087bdd
 80810f8:	200002e5 	.word	0x200002e5
 80810fc:	40590000 	.word	0x40590000
 8081100:	20000288 	.word	0x20000288
 8081104:	08087be5 	.word	0x08087be5
 8081108:	2000029c 	.word	0x2000029c
 808110c:	408f4000 	.word	0x408f4000
 8081110:	20000210 	.word	0x20000210
 8081114:	08087bee 	.word	0x08087bee
 8081118:	200002ac 	.word	0x200002ac
 808111c:	447d5000 	.word	0x447d5000
 8081120:	20000308 	.word	0x20000308
 8081124:	08087bf8 	.word	0x08087bf8
 8081128:	200002bd 	.word	0x200002bd
 808112c:	20000180 	.word	0x20000180
 8081130:	20000230 	.word	0x20000230
 8081134:	08087bff 	.word	0x08087bff
 8081138:	200002f6 	.word	0x200002f6
 808113c:	20000294 	.word	0x20000294
 8081140:	20000220 	.word	0x20000220

08081144 <_Z20meterParticlePublishv>:
  Serial.println(stateTransitionString);
}


bool meterParticlePublish(void)
{
 8081144:	b508      	push	{r3, lr}
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8081146:	f001 fa41 	bl	80825cc <HAL_Timer_Get_Milli_Seconds>
  if(millis() - lastPublish >= publishFrequency) return 1;
 808114a:	4b04      	ldr	r3, [pc, #16]	; (808115c <_Z20meterParticlePublishv+0x18>)
 808114c:	681b      	ldr	r3, [r3, #0]
 808114e:	1ac0      	subs	r0, r0, r3
  else return 0;
}
 8081150:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8081154:	bf34      	ite	cc
 8081156:	2000      	movcc	r0, #0
 8081158:	2001      	movcs	r0, #1
 808115a:	bd08      	pop	{r3, pc}
 808115c:	20000218 	.word	0x20000218

08081160 <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.28>:
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
 8081160:	b508      	push	{r3, lr}
{
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
  oldState = state;
  if(Particle.connected()) {
    waitUntil(meterParticlePublish);
 8081162:	f7ff ffef 	bl	8081144 <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8081166:	b118      	cbz	r0, 8081170 <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.28+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
 8081168:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 808116c:	f7ff bfea 	b.w	8081144 <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
 8081170:	f001 fc20 	bl	80829b4 <spark_process>
 8081174:	e7f5      	b.n	8081162 <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.28+0x2>
	...

08081178 <_Z14fullModemResetv>:
{
  if(millis() - lastPublish >= publishFrequency) return 1;
  else return 0;
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
 8081178:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808117a:	f001 fc2b 	bl	80829d4 <spark_cloud_flag_disconnect>
 808117e:	f001 fa25 	bl	80825cc <HAL_Timer_Get_Milli_Seconds>

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 8081182:	f643 2597 	movw	r5, #14999	; 0x3a97
 8081186:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8081188:	f001 fc2c 	bl	80829e4 <spark_cloud_flag_connected>
 808118c:	b140      	cbz	r0, 80811a0 <_Z14fullModemResetv+0x28>
 808118e:	f001 fa1d 	bl	80825cc <HAL_Timer_Get_Milli_Seconds>
 8081192:	1b00      	subs	r0, r0, r4
 8081194:	42a8      	cmp	r0, r5
 8081196:	d803      	bhi.n	80811a0 <_Z14fullModemResetv+0x28>
		delay(100);
 8081198:	2064      	movs	r0, #100	; 0x64
 808119a:	f001 fcf3 	bl	8082b84 <delay>

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 808119e:	e7f3      	b.n	8081188 <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 80811a0:	2100      	movs	r1, #0
 80811a2:	4b09      	ldr	r3, [pc, #36]	; (80811c8 <_Z14fullModemResetv+0x50>)
 80811a4:	f247 5230 	movw	r2, #30000	; 0x7530
 80811a8:	4608      	mov	r0, r1
 80811aa:	f001 f9d7 	bl	808255c <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
 80811ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80811b2:	f001 fce7 	bl	8082b84 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
 80811b6:	4b05      	ldr	r3, [pc, #20]	; (80811cc <_Z14fullModemResetv+0x54>)
 80811b8:	220a      	movs	r2, #10
 80811ba:	681b      	ldr	r3, [r3, #0]
 80811bc:	2101      	movs	r1, #1
 80811be:	4668      	mov	r0, sp
 80811c0:	f002 fe9e 	bl	8083f00 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
 80811c4:	b003      	add	sp, #12
 80811c6:	bd30      	pop	{r4, r5, pc}
 80811c8:	08087c04 	.word	0x08087c04
 80811cc:	20000314 	.word	0x20000314

080811d0 <_Z11petWatchdogv>:

void watchdogISR() {
  watchDogFlag = true;
}

void petWatchdog() {
 80811d0:	b508      	push	{r3, lr}
  digitalWrite(donePin,HIGH);
 80811d2:	2101      	movs	r1, #1
 80811d4:	2006      	movs	r0, #6
 80811d6:	f003 f9b2 	bl	808453e <digitalWrite>
  digitalWrite(donePin,LOW);
 80811da:	2100      	movs	r1, #0
 80811dc:	2006      	movs	r0, #6
 80811de:	f003 f9ae 	bl	808453e <digitalWrite>
  watchDogFlag = false;
 80811e2:	4b02      	ldr	r3, [pc, #8]	; (80811ec <_Z11petWatchdogv+0x1c>)
 80811e4:	2200      	movs	r2, #0
 80811e6:	701a      	strb	r2, [r3, #0]
 80811e8:	bd08      	pop	{r3, pc}
 80811ea:	bf00      	nop
 80811ec:	200002e4 	.word	0x200002e4

080811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80811f0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80811f2:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80811f4:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80811f6:	b17c      	cbz	r4, 8081218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80811f8:	6863      	ldr	r3, [r4, #4]
 80811fa:	3b01      	subs	r3, #1
 80811fc:	6063      	str	r3, [r4, #4]
 80811fe:	b95b      	cbnz	r3, 8081218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 8081200:	6823      	ldr	r3, [r4, #0]
 8081202:	4620      	mov	r0, r4
 8081204:	689b      	ldr	r3, [r3, #8]
 8081206:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8081208:	68a3      	ldr	r3, [r4, #8]
 808120a:	3b01      	subs	r3, #1
 808120c:	60a3      	str	r3, [r4, #8]
 808120e:	b91b      	cbnz	r3, 8081218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8081210:	6823      	ldr	r3, [r4, #0]
 8081212:	4620      	mov	r0, r4
 8081214:	68db      	ldr	r3, [r3, #12]
 8081216:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 8081218:	4628      	mov	r0, r5
 808121a:	bd38      	pop	{r3, r4, r5, pc}

0808121c <_Z9sendEventv>:
    break;
  }
}

void sendEvent()
{
 808121c:	b500      	push	{lr}
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"Pressure\":%4.1f, \"HeatIndex\":%4.1f, \"TVOClevel\":%5.1f, \"Altitude\":%4.1f, \"Battery\":%i, \"Resets\":%i, \"Alerts\":%i}", temperatureInC, relativeHumidity, pressureHpa, heatIndexC, gasResistanceKOhms,approxAltitudeInM, stateOfCharge,resetCount, alertCount);
 808121e:	4b27      	ldr	r3, [pc, #156]	; (80812bc <_Z9sendEventv+0xa0>)
    break;
  }
}

void sendEvent()
{
 8081220:	b0d3      	sub	sp, #332	; 0x14c
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"Pressure\":%4.1f, \"HeatIndex\":%4.1f, \"TVOClevel\":%5.1f, \"Altitude\":%4.1f, \"Battery\":%i, \"Resets\":%i, \"Alerts\":%i}", temperatureInC, relativeHumidity, pressureHpa, heatIndexC, gasResistanceKOhms,approxAltitudeInM, stateOfCharge,resetCount, alertCount);
 8081222:	681b      	ldr	r3, [r3, #0]
 8081224:	930e      	str	r3, [sp, #56]	; 0x38
 8081226:	4b26      	ldr	r3, [pc, #152]	; (80812c0 <_Z9sendEventv+0xa4>)
 8081228:	681b      	ldr	r3, [r3, #0]
 808122a:	930d      	str	r3, [sp, #52]	; 0x34
 808122c:	4b25      	ldr	r3, [pc, #148]	; (80812c4 <_Z9sendEventv+0xa8>)
 808122e:	681b      	ldr	r3, [r3, #0]
 8081230:	930c      	str	r3, [sp, #48]	; 0x30
 8081232:	4b25      	ldr	r3, [pc, #148]	; (80812c8 <_Z9sendEventv+0xac>)
 8081234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081238:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 808123c:	4b23      	ldr	r3, [pc, #140]	; (80812cc <_Z9sendEventv+0xb0>)
 808123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081242:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8081246:	4b22      	ldr	r3, [pc, #136]	; (80812d0 <_Z9sendEventv+0xb4>)
 8081248:	6818      	ldr	r0, [r3, #0]
 808124a:	f004 fe2b 	bl	8085ea4 <__aeabi_f2d>
 808124e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8081252:	4b20      	ldr	r3, [pc, #128]	; (80812d4 <_Z9sendEventv+0xb8>)
 8081254:	f44f 7180 	mov.w	r1, #256	; 0x100
 8081258:	e9d3 2300 	ldrd	r2, r3, [r3]
 808125c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8081260:	4b1d      	ldr	r3, [pc, #116]	; (80812d8 <_Z9sendEventv+0xbc>)
 8081262:	a812      	add	r0, sp, #72	; 0x48
 8081264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081268:	e9cd 2302 	strd	r2, r3, [sp, #8]
 808126c:	4b1b      	ldr	r3, [pc, #108]	; (80812dc <_Z9sendEventv+0xc0>)
 808126e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081272:	e9cd 2300 	strd	r2, r3, [sp]
 8081276:	4a1a      	ldr	r2, [pc, #104]	; (80812e0 <_Z9sendEventv+0xc4>)
 8081278:	f001 fc64 	bl	8082b44 <snprintf>
 808127c:	4b19      	ldr	r3, [pc, #100]	; (80812e4 <_Z9sendEventv+0xc8>)
  Particle.publish("Environmental_Hook", data, PRIVATE);
 808127e:	2200      	movs	r2, #0
 8081280:	4919      	ldr	r1, [pc, #100]	; (80812e8 <_Z9sendEventv+0xcc>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8081282:	781b      	ldrb	r3, [r3, #0]
 8081284:	a810      	add	r0, sp, #64	; 0x40
 8081286:	f88d 2000 	strb.w	r2, [sp]
 808128a:	aa12      	add	r2, sp, #72	; 0x48
 808128c:	f7ff fc98 	bl	8080bc0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.42>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081290:	a811      	add	r0, sp, #68	; 0x44
 8081292:	f7ff ffad 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  currentHourlyPeriod = Time.hour();                                      // Change the time period
 8081296:	f002 fefd 	bl	8084094 <_ZN9TimeClass4hourEv>
 808129a:	4b14      	ldr	r3, [pc, #80]	; (80812ec <_Z9sendEventv+0xd0>)
 808129c:	7018      	strb	r0, [r3, #0]
  currentDailyPeriod = Time.day();
 808129e:	f002 ff0d 	bl	80840bc <_ZN9TimeClass3dayEv>
 80812a2:	4b13      	ldr	r3, [pc, #76]	; (80812f0 <_Z9sendEventv+0xd4>)
  dataInFlight = true;                                                // set the data inflight flag
 80812a4:	2201      	movs	r2, #1
{
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"Pressure\":%4.1f, \"HeatIndex\":%4.1f, \"TVOClevel\":%5.1f, \"Altitude\":%4.1f, \"Battery\":%i, \"Resets\":%i, \"Alerts\":%i}", temperatureInC, relativeHumidity, pressureHpa, heatIndexC, gasResistanceKOhms,approxAltitudeInM, stateOfCharge,resetCount, alertCount);
  Particle.publish("Environmental_Hook", data, PRIVATE);
  currentHourlyPeriod = Time.hour();                                      // Change the time period
  currentDailyPeriod = Time.day();
 80812a6:	7018      	strb	r0, [r3, #0]
  dataInFlight = true;                                                // set the data inflight flag
 80812a8:	4b12      	ldr	r3, [pc, #72]	; (80812f4 <_Z9sendEventv+0xd8>)
 80812aa:	701a      	strb	r2, [r3, #0]
 80812ac:	f001 f98e 	bl	80825cc <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
 80812b0:	4b11      	ldr	r3, [pc, #68]	; (80812f8 <_Z9sendEventv+0xdc>)
 80812b2:	6018      	str	r0, [r3, #0]
}
 80812b4:	b053      	add	sp, #332	; 0x14c
 80812b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80812ba:	bf00      	nop
 80812bc:	2000021c 	.word	0x2000021c
 80812c0:	20000280 	.word	0x20000280
 80812c4:	20000230 	.word	0x20000230
 80812c8:	20000308 	.word	0x20000308
 80812cc:	20000210 	.word	0x20000210
 80812d0:	20000294 	.word	0x20000294
 80812d4:	20000288 	.word	0x20000288
 80812d8:	20000238 	.word	0x20000238
 80812dc:	200002d8 	.word	0x200002d8
 80812e0:	08087c11 	.word	0x08087c11
 80812e4:	20000174 	.word	0x20000174
 80812e8:	08087cab 	.word	0x08087cab
 80812ec:	20000290 	.word	0x20000290
 80812f0:	2000020a 	.word	0x2000020a
 80812f4:	20000074 	.word	0x20000074
 80812f8:	20000170 	.word	0x20000170

080812fc <_Z14UbidotsHandlerPKcS0_>:

void UbidotsHandler(const char *event, const char *data)              // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
 80812fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80812fe:	b085      	sub	sp, #20
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
 8081300:	4608      	mov	r0, r1
  dataInFlight = true;                                                // set the data inflight flag
  webhookTimeStamp = millis();
}

void UbidotsHandler(const char *event, const char *data)              // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
 8081302:	af02      	add	r7, sp, #8
 8081304:	460e      	mov	r6, r1
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
 8081306:	f005 ff92 	bl	808722e <strlen>
 808130a:	f100 0308 	add.w	r3, r0, #8
 808130e:	f023 0307 	bic.w	r3, r3, #7
    if (Particle.connected()) Particle.publish("State","Response Received", PRIVATE);
    lastPublish = millis();
    EEPROM.write(MEM_MAP::currentCountsTimeAddr,Time.now());          // Record the last successful Webhook Response
    dataInFlight = false;                                             // Data has been received
  }
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
 8081312:	466d      	mov	r5, sp
  webhookTimeStamp = millis();
}

void UbidotsHandler(const char *event, const char *data)              // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
 8081314:	ebad 0d03 	sub.w	sp, sp, r3
 8081318:	ac02      	add	r4, sp, #8
  strncpy(dataCopy, data, sizeof(dataCopy));                          // Copy - overflow safe
 808131a:	1c42      	adds	r2, r0, #1
 808131c:	4631      	mov	r1, r6
 808131e:	4620      	mov	r0, r4
 8081320:	f005 ffa2 	bl	8087268 <strncpy>
  if (!strlen(dataCopy)) {                                            // First check to see if there is any data
 8081324:	f89d 6008 	ldrb.w	r6, [sp, #8]
 8081328:	b94e      	cbnz	r6, 808133e <_Z14UbidotsHandlerPKcS0_+0x42>
 808132a:	f001 fb5b 	bl	80829e4 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Ubidots Hook", "No Data", PRIVATE);
 808132e:	2800      	cmp	r0, #0
 8081330:	d03b      	beq.n	80813aa <_Z14UbidotsHandlerPKcS0_+0xae>
 8081332:	4b20      	ldr	r3, [pc, #128]	; (80813b4 <_Z14UbidotsHandlerPKcS0_+0xb8>)
 8081334:	4a20      	ldr	r2, [pc, #128]	; (80813b8 <_Z14UbidotsHandlerPKcS0_+0xbc>)
 8081336:	781b      	ldrb	r3, [r3, #0]
 8081338:	f88d 6000 	strb.w	r6, [sp]
 808133c:	e02e      	b.n	808139c <_Z14UbidotsHandlerPKcS0_+0xa0>
    return;
  }
  int responseCode = atoi(dataCopy);                                  // Response is only a single number thanks to Template
 808133e:	4620      	mov	r0, r4
 8081340:	f005 fe02 	bl	8086f48 <atoi>
  if ((responseCode == 200) || (responseCode == 201))
 8081344:	38c8      	subs	r0, #200	; 0xc8
 8081346:	2801      	cmp	r0, #1
 8081348:	d81f      	bhi.n	808138a <_Z14UbidotsHandlerPKcS0_+0x8e>
 808134a:	f001 fb4b 	bl	80829e4 <spark_cloud_flag_connected>
  {
    if (Particle.connected()) Particle.publish("State","Response Received", PRIVATE);
 808134e:	b160      	cbz	r0, 808136a <_Z14UbidotsHandlerPKcS0_+0x6e>
 8081350:	4b18      	ldr	r3, [pc, #96]	; (80813b4 <_Z14UbidotsHandlerPKcS0_+0xb8>)
 8081352:	2200      	movs	r2, #0
 8081354:	781b      	ldrb	r3, [r3, #0]
 8081356:	4638      	mov	r0, r7
 8081358:	f88d 2000 	strb.w	r2, [sp]
 808135c:	4917      	ldr	r1, [pc, #92]	; (80813bc <_Z14UbidotsHandlerPKcS0_+0xc0>)
 808135e:	4a18      	ldr	r2, [pc, #96]	; (80813c0 <_Z14UbidotsHandlerPKcS0_+0xc4>)
 8081360:	f7ff fc2e 	bl	8080bc0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.42>
 8081364:	1d38      	adds	r0, r7, #4
 8081366:	f7ff ff43 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808136a:	f001 f92f 	bl	80825cc <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 808136e:	4b15      	ldr	r3, [pc, #84]	; (80813c4 <_Z14UbidotsHandlerPKcS0_+0xc8>)
 8081370:	6018      	str	r0, [r3, #0]
    EEPROM.write(MEM_MAP::currentCountsTimeAddr,Time.now());          // Record the last successful Webhook Response
 8081372:	f003 f911 	bl	8084598 <_Z21__fetch_global_EEPROMv>
 8081376:	f002 fe86 	bl	8084086 <_ZN9TimeClass3nowEv>
 808137a:	b2c1      	uxtb	r1, r0
 808137c:	2005      	movs	r0, #5
 808137e:	f7ff fc1d 	bl	8080bbc <_ZN11EEPROMClass5writeEih.isra.15>
    dataInFlight = false;                                             // Data has been received
 8081382:	4b11      	ldr	r3, [pc, #68]	; (80813c8 <_Z14UbidotsHandlerPKcS0_+0xcc>)
 8081384:	2200      	movs	r2, #0
 8081386:	701a      	strb	r2, [r3, #0]
 8081388:	e00f      	b.n	80813aa <_Z14UbidotsHandlerPKcS0_+0xae>
 808138a:	f001 fb2b 	bl	80829e4 <spark_cloud_flag_connected>
  }
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
 808138e:	b160      	cbz	r0, 80813aa <_Z14UbidotsHandlerPKcS0_+0xae>
 8081390:	4b08      	ldr	r3, [pc, #32]	; (80813b4 <_Z14UbidotsHandlerPKcS0_+0xb8>)
 8081392:	2200      	movs	r2, #0
 8081394:	781b      	ldrb	r3, [r3, #0]
 8081396:	f88d 2000 	strb.w	r2, [sp]
 808139a:	4622      	mov	r2, r4
 808139c:	4638      	mov	r0, r7
 808139e:	490b      	ldr	r1, [pc, #44]	; (80813cc <_Z14UbidotsHandlerPKcS0_+0xd0>)
 80813a0:	f7ff fc0e 	bl	8080bc0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.42>
 80813a4:	1d38      	adds	r0, r7, #4
 80813a6:	f7ff ff23 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
  strncpy(dataCopy, data, sizeof(dataCopy));                          // Copy - overflow safe
  if (!strlen(dataCopy)) {                                            // First check to see if there is any data
    if (Particle.connected()) Particle.publish("Ubidots Hook", "No Data", PRIVATE);
    return;
 80813aa:	46ad      	mov	sp, r5
    lastPublish = millis();
    EEPROM.write(MEM_MAP::currentCountsTimeAddr,Time.now());          // Record the last successful Webhook Response
    dataInFlight = false;                                             // Data has been received
  }
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
}
 80813ac:	370c      	adds	r7, #12
 80813ae:	46bd      	mov	sp, r7
 80813b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80813b2:	bf00      	nop
 80813b4:	20000174 	.word	0x20000174
 80813b8:	08087cbe 	.word	0x08087cbe
 80813bc:	08087ce5 	.word	0x08087ce5
 80813c0:	08087cd3 	.word	0x08087cd3
 80813c4:	20000218 	.word	0x20000218
 80813c8:	20000074 	.word	0x20000074
 80813cc:	08087cc6 	.word	0x08087cc6

080813d0 <_Z12setSolarMode6String>:
  }
  else return 0;
}

int setSolarMode(String command) // Function to force sending data in current hour
{
 80813d0:	b530      	push	{r4, r5, lr}
 80813d2:	4924      	ldr	r1, [pc, #144]	; (8081464 <_Z12setSolarMode6String+0x94>)
 80813d4:	b085      	sub	sp, #20
 80813d6:	4605      	mov	r5, r0
 80813d8:	f002 fd5f 	bl	8083e9a <_ZNK6String6equalsEPKc>
  if (command == "1")
 80813dc:	4604      	mov	r4, r0
 80813de:	b1d0      	cbz	r0, 8081416 <_Z12setSolarMode6String+0x46>
  {
    solarPowerMode = true;
 80813e0:	4b21      	ldr	r3, [pc, #132]	; (8081468 <_Z12setSolarMode6String+0x98>)
 80813e2:	2401      	movs	r4, #1
 80813e4:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 80813e6:	f003 f8d7 	bl	8084598 <_Z21__fetch_global_EEPROMv>
 80813ea:	2004      	movs	r0, #4
 80813ec:	f7ff fbe4 	bl	8080bb8 <_ZN11EEPROMClass4readEi.isra.14>
    controlRegister = (0b00000100 | controlRegister);          // Turn on solarPowerMode
 80813f0:	4d1e      	ldr	r5, [pc, #120]	; (808146c <_Z12setSolarMode6String+0x9c>)
 80813f2:	f040 0004 	orr.w	r0, r0, #4
 80813f6:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister);// Write it to the register
 80813f8:	f003 f8ce 	bl	8084598 <_Z21__fetch_global_EEPROMv>
 80813fc:	7829      	ldrb	r1, [r5, #0]
 80813fe:	2004      	movs	r0, #4
 8081400:	f7ff fbdc 	bl	8080bbc <_ZN11EEPROMClass5writeEih.isra.15>
    PMICreset();                                               // Change the power management Settings
 8081404:	f7ff fc64 	bl	8080cd0 <_Z9PMICresetv>
 8081408:	4b19      	ldr	r3, [pc, #100]	; (8081470 <_Z12setSolarMode6String+0xa0>)
    Particle.publish("Mode","Set Solar Powered Mode",PRIVATE);
 808140a:	2200      	movs	r2, #0
 808140c:	781b      	ldrb	r3, [r3, #0]
 808140e:	f88d 2000 	strb.w	r2, [sp]
 8081412:	4a18      	ldr	r2, [pc, #96]	; (8081474 <_Z12setSolarMode6String+0xa4>)
 8081414:	e01c      	b.n	8081450 <_Z12setSolarMode6String+0x80>
 8081416:	4918      	ldr	r1, [pc, #96]	; (8081478 <_Z12setSolarMode6String+0xa8>)
 8081418:	4628      	mov	r0, r5
 808141a:	f002 fd3e 	bl	8083e9a <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
 808141e:	b1f8      	cbz	r0, 8081460 <_Z12setSolarMode6String+0x90>
  {
    solarPowerMode = false;
 8081420:	4b11      	ldr	r3, [pc, #68]	; (8081468 <_Z12setSolarMode6String+0x98>)
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
    controlRegister = (0b11111011 & controlRegister);           // Turn off solarPowerMode
 8081422:	4d12      	ldr	r5, [pc, #72]	; (808146c <_Z12setSolarMode6String+0x9c>)
    Particle.publish("Mode","Set Solar Powered Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    solarPowerMode = false;
 8081424:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 8081426:	f003 f8b7 	bl	8084598 <_Z21__fetch_global_EEPROMv>
 808142a:	2004      	movs	r0, #4
 808142c:	f7ff fbc4 	bl	8080bb8 <_ZN11EEPROMClass4readEi.isra.14>
    controlRegister = (0b11111011 & controlRegister);           // Turn off solarPowerMode
 8081430:	f020 0004 	bic.w	r0, r0, #4
 8081434:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
 8081436:	f003 f8af 	bl	8084598 <_Z21__fetch_global_EEPROMv>
 808143a:	7829      	ldrb	r1, [r5, #0]
 808143c:	2004      	movs	r0, #4
 808143e:	f7ff fbbd 	bl	8080bbc <_ZN11EEPROMClass5writeEih.isra.15>
    PMICreset();                                                // Change the power management settings
 8081442:	f7ff fc45 	bl	8080cd0 <_Z9PMICresetv>
 8081446:	4b0a      	ldr	r3, [pc, #40]	; (8081470 <_Z12setSolarMode6String+0xa0>)
    Particle.publish("Mode","Cleared Solar Powered Mode",PRIVATE);
 8081448:	4a0c      	ldr	r2, [pc, #48]	; (808147c <_Z12setSolarMode6String+0xac>)
 808144a:	781b      	ldrb	r3, [r3, #0]
 808144c:	f88d 4000 	strb.w	r4, [sp]
 8081450:	490b      	ldr	r1, [pc, #44]	; (8081480 <_Z12setSolarMode6String+0xb0>)
 8081452:	a802      	add	r0, sp, #8
 8081454:	f7ff fbb4 	bl	8080bc0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.42>
 8081458:	a803      	add	r0, sp, #12
 808145a:	f7ff fec9 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
 808145e:	2001      	movs	r0, #1
  }
  else return 0;
}
 8081460:	b005      	add	sp, #20
 8081462:	bd30      	pop	{r4, r5, pc}
 8081464:	08088039 	.word	0x08088039
 8081468:	200002f5 	.word	0x200002f5
 808146c:	20000306 	.word	0x20000306
 8081470:	20000174 	.word	0x20000174
 8081474:	08087ceb 	.word	0x08087ceb
 8081478:	08087f61 	.word	0x08087f61
 808147c:	08087d02 	.word	0x08087d02
 8081480:	08087d18 	.word	0x08087d18

08081484 <_Z14setVerboseMode6String>:

int setVerboseMode(String command) // Function to force sending data in current hour
{
 8081484:	b530      	push	{r4, r5, lr}
 8081486:	4922      	ldr	r1, [pc, #136]	; (8081510 <_Z14setVerboseMode6String+0x8c>)
 8081488:	b085      	sub	sp, #20
 808148a:	4605      	mov	r5, r0
 808148c:	f002 fd05 	bl	8083e9a <_ZNK6String6equalsEPKc>
  if (command == "1")
 8081490:	4604      	mov	r4, r0
 8081492:	b1c0      	cbz	r0, 80814c6 <_Z14setVerboseMode6String+0x42>
  {
    verboseMode = true;
 8081494:	4b1f      	ldr	r3, [pc, #124]	; (8081514 <_Z14setVerboseMode6String+0x90>)
 8081496:	2401      	movs	r4, #1
 8081498:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 808149a:	f003 f87d 	bl	8084598 <_Z21__fetch_global_EEPROMv>
 808149e:	2004      	movs	r0, #4
 80814a0:	f7ff fb8a 	bl	8080bb8 <_ZN11EEPROMClass4readEi.isra.14>
    controlRegister = (0b00001000 | controlRegister);                    // Turn on verboseMode
 80814a4:	4d1c      	ldr	r5, [pc, #112]	; (8081518 <_Z14setVerboseMode6String+0x94>)
 80814a6:	f040 0008 	orr.w	r0, r0, #8
 80814aa:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
 80814ac:	f003 f874 	bl	8084598 <_Z21__fetch_global_EEPROMv>
 80814b0:	7829      	ldrb	r1, [r5, #0]
 80814b2:	2004      	movs	r0, #4
 80814b4:	f7ff fb82 	bl	8080bbc <_ZN11EEPROMClass5writeEih.isra.15>
 80814b8:	4b18      	ldr	r3, [pc, #96]	; (808151c <_Z14setVerboseMode6String+0x98>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
 80814ba:	2200      	movs	r2, #0
 80814bc:	781b      	ldrb	r3, [r3, #0]
 80814be:	f88d 2000 	strb.w	r2, [sp]
 80814c2:	4a17      	ldr	r2, [pc, #92]	; (8081520 <_Z14setVerboseMode6String+0x9c>)
 80814c4:	e01a      	b.n	80814fc <_Z14setVerboseMode6String+0x78>
 80814c6:	4917      	ldr	r1, [pc, #92]	; (8081524 <_Z14setVerboseMode6String+0xa0>)
 80814c8:	4628      	mov	r0, r5
 80814ca:	f002 fce6 	bl	8083e9a <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
 80814ce:	b1e8      	cbz	r0, 808150c <_Z14setVerboseMode6String+0x88>
  {
    verboseMode = false;
 80814d0:	4b10      	ldr	r3, [pc, #64]	; (8081514 <_Z14setVerboseMode6String+0x90>)
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
 80814d2:	4d11      	ldr	r5, [pc, #68]	; (8081518 <_Z14setVerboseMode6String+0x94>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    verboseMode = false;
 80814d4:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 80814d6:	f003 f85f 	bl	8084598 <_Z21__fetch_global_EEPROMv>
 80814da:	2004      	movs	r0, #4
 80814dc:	f7ff fb6c 	bl	8080bb8 <_ZN11EEPROMClass4readEi.isra.14>
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
 80814e0:	f020 0008 	bic.w	r0, r0, #8
 80814e4:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
 80814e6:	f003 f857 	bl	8084598 <_Z21__fetch_global_EEPROMv>
 80814ea:	7829      	ldrb	r1, [r5, #0]
 80814ec:	2004      	movs	r0, #4
 80814ee:	f7ff fb65 	bl	8080bbc <_ZN11EEPROMClass5writeEih.isra.15>
 80814f2:	4b0a      	ldr	r3, [pc, #40]	; (808151c <_Z14setVerboseMode6String+0x98>)
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
 80814f4:	4a0c      	ldr	r2, [pc, #48]	; (8081528 <_Z14setVerboseMode6String+0xa4>)
 80814f6:	781b      	ldrb	r3, [r3, #0]
 80814f8:	f88d 4000 	strb.w	r4, [sp]
 80814fc:	490b      	ldr	r1, [pc, #44]	; (808152c <_Z14setVerboseMode6String+0xa8>)
 80814fe:	a802      	add	r0, sp, #8
 8081500:	f7ff fb5e 	bl	8080bc0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.42>
 8081504:	a803      	add	r0, sp, #12
 8081506:	f7ff fe73 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
 808150a:	2001      	movs	r0, #1
  }
  else return 0;
}
 808150c:	b005      	add	sp, #20
 808150e:	bd30      	pop	{r4, r5, pc}
 8081510:	08088039 	.word	0x08088039
 8081514:	2000018a 	.word	0x2000018a
 8081518:	20000306 	.word	0x20000306
 808151c:	20000174 	.word	0x20000174
 8081520:	08087d1d 	.word	0x08087d1d
 8081524:	08087f61 	.word	0x08087f61
 8081528:	08087d2e 	.word	0x08087d2e
 808152c:	08087d18 	.word	0x08087d18

08081530 <_Z11setTimeZone6String>:

int setTimeZone(String command)
{
 8081530:	b570      	push	{r4, r5, r6, lr}
 8081532:	b0cc      	sub	sp, #304	; 0x130
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8081534:	220a      	movs	r2, #10
 8081536:	a905      	add	r1, sp, #20
 8081538:	6800      	ldr	r0, [r0, #0]
 808153a:	f005 ff2f 	bl	808739c <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 808153e:	b2c5      	uxtb	r5, r0
 8081540:	f105 030c 	add.w	r3, r5, #12
 8081544:	b2db      	uxtb	r3, r3
 8081546:	2b18      	cmp	r3, #24
 8081548:	d83d      	bhi.n	80815c6 <_Z11setTimeZone6String+0x96>

int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 808154a:	b244      	sxtb	r4, r0
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  Time.zone((float)tempTimeZoneOffset);
 808154c:	4620      	mov	r0, r4
 808154e:	f005 f8b7 	bl	80866c0 <__aeabi_i2f>
 8081552:	f002 fd39 	bl	8083fc8 <_ZN9TimeClass4zoneEf>
  EEPROM.write(MEM_MAP::timeZoneAddr,tempTimeZoneOffset);                             // Store the new value in FRAMwrite8
 8081556:	f003 f81f 	bl	8084598 <_Z21__fetch_global_EEPROMv>
 808155a:	4629      	mov	r1, r5
 808155c:	2003      	movs	r0, #3
 808155e:	f7ff fb2d 	bl	8080bbc <_ZN11EEPROMClass5writeEih.isra.15>
  t = Time.now();
 8081562:	f002 fd90 	bl	8084086 <_ZN9TimeClass3nowEv>
 8081566:	4e19      	ldr	r6, [pc, #100]	; (80815cc <_Z11setTimeZone6String+0x9c>)
 8081568:	4d19      	ldr	r5, [pc, #100]	; (80815d0 <_Z11setTimeZone6String+0xa0>)
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 808156a:	4623      	mov	r3, r4
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  Time.zone((float)tempTimeZoneOffset);
  EEPROM.write(MEM_MAP::timeZoneAddr,tempTimeZoneOffset);                             // Store the new value in FRAMwrite8
  t = Time.now();
 808156c:	6030      	str	r0, [r6, #0]
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 808156e:	4a19      	ldr	r2, [pc, #100]	; (80815d4 <_Z11setTimeZone6String+0xa4>)
 8081570:	f44f 7180 	mov.w	r1, #256	; 0x100
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8081574:	2400      	movs	r4, #0
 8081576:	a80c      	add	r0, sp, #48	; 0x30
 8081578:	f001 fae4 	bl	8082b44 <snprintf>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 808157c:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("Time",data,PRIVATE);
 808157e:	aa0c      	add	r2, sp, #48	; 0x30
 8081580:	4915      	ldr	r1, [pc, #84]	; (80815d8 <_Z11setTimeZone6String+0xa8>)
 8081582:	a808      	add	r0, sp, #32
 8081584:	f88d 4000 	strb.w	r4, [sp]
 8081588:	f7ff fb1a 	bl	8080bc0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.42>
 808158c:	a809      	add	r0, sp, #36	; 0x24
 808158e:	f7ff fe2f 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 8081592:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8081596:	f001 faf5 	bl	8082b84 <delay>
  Particle.publish("Time",Time.timeStr(t),PRIVATE);
 808159a:	6831      	ldr	r1, [r6, #0]
 808159c:	a808      	add	r0, sp, #32
 808159e:	f002 fd2f 	bl	8084000 <_ZN9TimeClass7timeStrEl>
 80815a2:	9b08      	ldr	r3, [sp, #32]
 80815a4:	490c      	ldr	r1, [pc, #48]	; (80815d8 <_Z11setTimeZone6String+0xa8>)
 80815a6:	9303      	str	r3, [sp, #12]
 80815a8:	9a03      	ldr	r2, [sp, #12]
 80815aa:	782b      	ldrb	r3, [r5, #0]
 80815ac:	a806      	add	r0, sp, #24
 80815ae:	f88d 4000 	strb.w	r4, [sp]
 80815b2:	f7ff fb05 	bl	8080bc0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.42>
 80815b6:	a807      	add	r0, sp, #28
 80815b8:	f7ff fe1a 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80815bc:	a808      	add	r0, sp, #32
 80815be:	f002 fbf8 	bl	8083db2 <_ZN6StringD1Ev>
  return 1;
 80815c2:	2001      	movs	r0, #1
 80815c4:	e000      	b.n	80815c8 <_Z11setTimeZone6String+0x98>
int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 80815c6:	2000      	movs	r0, #0
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
  Particle.publish("Time",data,PRIVATE);
  delay(1000);
  Particle.publish("Time",Time.timeStr(t),PRIVATE);
  return 1;
}
 80815c8:	b04c      	add	sp, #304	; 0x130
 80815ca:	bd70      	pop	{r4, r5, r6, pc}
 80815cc:	2000017c 	.word	0x2000017c
 80815d0:	20000174 	.word	0x20000174
 80815d4:	08087d43 	.word	0x08087d43
 80815d8:	08087d57 	.word	0x08087d57

080815dc <_Z15setLowPowerMode6String>:


int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
 80815dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 80815de:	4926      	ldr	r1, [pc, #152]	; (8081678 <_Z15setLowPowerMode6String+0x9c>)
 80815e0:	4605      	mov	r5, r0
 80815e2:	f002 fc5a 	bl	8083e9a <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
 80815e6:	b928      	cbnz	r0, 80815f4 <_Z15setLowPowerMode6String+0x18>
 80815e8:	4924      	ldr	r1, [pc, #144]	; (808167c <_Z15setLowPowerMode6String+0xa0>)
 80815ea:	4628      	mov	r0, r5
 80815ec:	f002 fc55 	bl	8083e9a <_ZNK6String6equalsEPKc>
 80815f0:	2800      	cmp	r0, #0
 80815f2:	d03f      	beq.n	8081674 <_Z15setLowPowerMode6String+0x98>
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 80815f4:	f002 ffd0 	bl	8084598 <_Z21__fetch_global_EEPROMv>
 80815f8:	2004      	movs	r0, #4
 80815fa:	f7ff fadd 	bl	8080bb8 <_ZN11EEPROMClass4readEi.isra.14>
 80815fe:	4c20      	ldr	r4, [pc, #128]	; (8081680 <_Z15setLowPowerMode6String+0xa4>)
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8081600:	491d      	ldr	r1, [pc, #116]	; (8081678 <_Z15setLowPowerMode6String+0x9c>)
 8081602:	7020      	strb	r0, [r4, #0]
 8081604:	4628      	mov	r0, r5
 8081606:	f002 fc48 	bl	8083e9a <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
 808160a:	4606      	mov	r6, r0
 808160c:	b1a0      	cbz	r0, 8081638 <_Z15setLowPowerMode6String+0x5c>
 808160e:	4b1d      	ldr	r3, [pc, #116]	; (8081684 <_Z15setLowPowerMode6String+0xa8>)
  {
    Particle.publish("Mode","Low Power",PRIVATE);
 8081610:	2200      	movs	r2, #0
 8081612:	781b      	ldrb	r3, [r3, #0]
 8081614:	491c      	ldr	r1, [pc, #112]	; (8081688 <_Z15setLowPowerMode6String+0xac>)
 8081616:	f88d 2000 	strb.w	r2, [sp]
 808161a:	a802      	add	r0, sp, #8
 808161c:	4a1b      	ldr	r2, [pc, #108]	; (808168c <_Z15setLowPowerMode6String+0xb0>)
 808161e:	f7ff facf 	bl	8080bc0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.42>
 8081622:	a803      	add	r0, sp, #12
 8081624:	f7ff fde4 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    controlRegister = (0b00000001 | controlRegister);                  // If so, flip the lowPowerMode bit
 8081628:	7823      	ldrb	r3, [r4, #0]
    lowPowerMode = true;
 808162a:	2201      	movs	r2, #1
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
  if (command == "1")                                                 // Command calls for setting lowPowerMode
  {
    Particle.publish("Mode","Low Power",PRIVATE);
    controlRegister = (0b00000001 | controlRegister);                  // If so, flip the lowPowerMode bit
 808162c:	f043 0301 	orr.w	r3, r3, #1
 8081630:	7023      	strb	r3, [r4, #0]
    lowPowerMode = true;
 8081632:	4b17      	ldr	r3, [pc, #92]	; (8081690 <_Z15setLowPowerMode6String+0xb4>)
 8081634:	701a      	strb	r2, [r3, #0]
 8081636:	e016      	b.n	8081666 <_Z15setLowPowerMode6String+0x8a>
 8081638:	4910      	ldr	r1, [pc, #64]	; (808167c <_Z15setLowPowerMode6String+0xa0>)
 808163a:	4628      	mov	r0, r5
 808163c:	f002 fc2d 	bl	8083e9a <_ZNK6String6equalsEPKc>
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
 8081640:	b188      	cbz	r0, 8081666 <_Z15setLowPowerMode6String+0x8a>
 8081642:	4b10      	ldr	r3, [pc, #64]	; (8081684 <_Z15setLowPowerMode6String+0xa8>)
  {
    Particle.publish("Mode","Normal Operations",PRIVATE);
 8081644:	4a13      	ldr	r2, [pc, #76]	; (8081694 <_Z15setLowPowerMode6String+0xb8>)
 8081646:	781b      	ldrb	r3, [r3, #0]
 8081648:	490f      	ldr	r1, [pc, #60]	; (8081688 <_Z15setLowPowerMode6String+0xac>)
 808164a:	a802      	add	r0, sp, #8
 808164c:	f88d 6000 	strb.w	r6, [sp]
 8081650:	f7ff fab6 	bl	8080bc0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.42>
 8081654:	a803      	add	r0, sp, #12
 8081656:	f7ff fdcb 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    controlRegister = (0b1111110 & controlRegister);                  // If so, flip the lowPowerMode bit
 808165a:	7823      	ldrb	r3, [r4, #0]
 808165c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8081660:	7023      	strb	r3, [r4, #0]
    lowPowerMode = false;
 8081662:	4b0b      	ldr	r3, [pc, #44]	; (8081690 <_Z15setLowPowerMode6String+0xb4>)
 8081664:	701e      	strb	r6, [r3, #0]
  }
  EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
 8081666:	f002 ff97 	bl	8084598 <_Z21__fetch_global_EEPROMv>
 808166a:	2004      	movs	r0, #4
 808166c:	7821      	ldrb	r1, [r4, #0]
 808166e:	f7ff faa5 	bl	8080bbc <_ZN11EEPROMClass5writeEih.isra.15>
 8081672:	2001      	movs	r0, #1
  return 1;
}
 8081674:	b004      	add	sp, #16
 8081676:	bd70      	pop	{r4, r5, r6, pc}
 8081678:	08088039 	.word	0x08088039
 808167c:	08087f61 	.word	0x08087f61
 8081680:	20000306 	.word	0x20000306
 8081684:	20000174 	.word	0x20000174
 8081688:	08087d18 	.word	0x08087d18
 808168c:	08087d5c 	.word	0x08087d5c
 8081690:	200002bc 	.word	0x200002bc
 8081694:	08087d66 	.word	0x08087d66

08081698 <_Z22publishStateTransitionv>:

void publishStateTransition(void)
{
 8081698:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 808169a:	4d18      	ldr	r5, [pc, #96]	; (80816fc <_Z22publishStateTransitionv+0x64>)
 808169c:	4918      	ldr	r1, [pc, #96]	; (8081700 <_Z22publishStateTransitionv+0x68>)
 808169e:	782a      	ldrb	r2, [r5, #0]
 80816a0:	230e      	movs	r3, #14
 80816a2:	fb03 1202 	mla	r2, r3, r2, r1
 80816a6:	4c17      	ldr	r4, [pc, #92]	; (8081704 <_Z22publishStateTransitionv+0x6c>)
  EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
  return 1;
}

void publishStateTransition(void)
{
 80816a8:	b08f      	sub	sp, #60	; 0x3c
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 80816aa:	7820      	ldrb	r0, [r4, #0]
 80816ac:	9200      	str	r2, [sp, #0]
 80816ae:	fb03 1300 	mla	r3, r3, r0, r1
 80816b2:	4a15      	ldr	r2, [pc, #84]	; (8081708 <_Z22publishStateTransitionv+0x70>)
 80816b4:	2128      	movs	r1, #40	; 0x28
 80816b6:	a804      	add	r0, sp, #16
 80816b8:	f001 fa44 	bl	8082b44 <snprintf>
  oldState = state;
 80816bc:	782b      	ldrb	r3, [r5, #0]
 80816be:	7023      	strb	r3, [r4, #0]
 80816c0:	f001 f990 	bl	80829e4 <spark_cloud_flag_connected>
  if(Particle.connected()) {
 80816c4:	b190      	cbz	r0, 80816ec <_Z22publishStateTransitionv+0x54>
    waitUntil(meterParticlePublish);
 80816c6:	f7ff fd4b 	bl	8081160 <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.28>
 80816ca:	4b10      	ldr	r3, [pc, #64]	; (808170c <_Z22publishStateTransitionv+0x74>)
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
 80816cc:	2200      	movs	r2, #0
 80816ce:	781b      	ldrb	r3, [r3, #0]
 80816d0:	490f      	ldr	r1, [pc, #60]	; (8081710 <_Z22publishStateTransitionv+0x78>)
 80816d2:	f88d 2000 	strb.w	r2, [sp]
 80816d6:	a802      	add	r0, sp, #8
 80816d8:	aa04      	add	r2, sp, #16
 80816da:	f7ff fa71 	bl	8080bc0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.42>
 80816de:	a803      	add	r0, sp, #12
 80816e0:	f7ff fd86 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80816e4:	f000 ff72 	bl	80825cc <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 80816e8:	4b0a      	ldr	r3, [pc, #40]	; (8081714 <_Z22publishStateTransitionv+0x7c>)
 80816ea:	6018      	str	r0, [r3, #0]
  }
  Serial.println(stateTransitionString);
 80816ec:	f002 fde8 	bl	80842c0 <_Z16_fetch_usbserialv>
 80816f0:	a904      	add	r1, sp, #16
 80816f2:	f002 fa62 	bl	8083bba <_ZN5Print7printlnEPKc>
}
 80816f6:	b00f      	add	sp, #60	; 0x3c
 80816f8:	bd30      	pop	{r4, r5, pc}
 80816fa:	bf00      	nop
 80816fc:	20000208 	.word	0x20000208
 8081700:	20000000 	.word	0x20000000
 8081704:	20000189 	.word	0x20000189
 8081708:	08087d78 	.word	0x08087d78
 808170c:	20000174 	.word	0x20000174
 8081710:	08087d86 	.word	0x08087d86
 8081714:	20000218 	.word	0x20000218

08081718 <loop>:
  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
  lastPublish = millis();
}

void loop()
{
 8081718:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  switch(state) {
 808171a:	4ca0      	ldr	r4, [pc, #640]	; (808199c <loop+0x284>)
 808171c:	7823      	ldrb	r3, [r4, #0]
 808171e:	3b01      	subs	r3, #1
 8081720:	2b06      	cmp	r3, #6
 8081722:	f200 81e8 	bhi.w	8081af6 <loop+0x3de>
 8081726:	e8df f013 	tbh	[pc, r3, lsl #1]
 808172a:	016d      	.short	0x016d
 808172c:	00330007 	.word	0x00330007
 8081730:	00810060 	.word	0x00810060
 8081734:	00fd00b7 	.word	0x00fd00b7
  case IDLE_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
 8081738:	4b99      	ldr	r3, [pc, #612]	; (80819a0 <loop+0x288>)
 808173a:	781b      	ldrb	r3, [r3, #0]
 808173c:	b12b      	cbz	r3, 808174a <loop+0x32>
 808173e:	4b99      	ldr	r3, [pc, #612]	; (80819a4 <loop+0x28c>)
 8081740:	781b      	ldrb	r3, [r3, #0]
 8081742:	2b02      	cmp	r3, #2
 8081744:	d001      	beq.n	808174a <loop+0x32>
 8081746:	f7ff ffa7 	bl	8081698 <_Z22publishStateTransitionv>
    if (watchDogFlag) petWatchdog();
 808174a:	4b97      	ldr	r3, [pc, #604]	; (80819a8 <loop+0x290>)
 808174c:	781b      	ldrb	r3, [r3, #0]
 808174e:	b10b      	cbz	r3, 8081754 <loop+0x3c>
 8081750:	f7ff fd3e 	bl	80811d0 <_Z11petWatchdogv>
    if (lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = SLEEPING_STATE;
 8081754:	4b95      	ldr	r3, [pc, #596]	; (80819ac <loop+0x294>)
 8081756:	781b      	ldrb	r3, [r3, #0]
 8081758:	b14b      	cbz	r3, 808176e <loop+0x56>
 808175a:	f000 ff37 	bl	80825cc <HAL_Timer_Get_Milli_Seconds>
 808175e:	4b94      	ldr	r3, [pc, #592]	; (80819b0 <loop+0x298>)
 8081760:	681b      	ldr	r3, [r3, #0]
 8081762:	1ac0      	subs	r0, r0, r3
 8081764:	4b93      	ldr	r3, [pc, #588]	; (80819b4 <loop+0x29c>)
 8081766:	681b      	ldr	r3, [r3, #0]
 8081768:	4298      	cmp	r0, r3
 808176a:	f200 81c1 	bhi.w	8081af0 <loop+0x3d8>
    if (Time.hour() != currentHourlyPeriod) state = MEASURING_STATE;    // We want to report on the hour but not after bedtime
 808176e:	f002 fc91 	bl	8084094 <_ZN9TimeClass4hourEv>
 8081772:	4b91      	ldr	r3, [pc, #580]	; (80819b8 <loop+0x2a0>)
 8081774:	781b      	ldrb	r3, [r3, #0]
 8081776:	4298      	cmp	r0, r3
 8081778:	bf1c      	itt	ne
 808177a:	2303      	movne	r3, #3
 808177c:	7023      	strbne	r3, [r4, #0]
    if (stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;               // The battery is low - sleep
 808177e:	4b8f      	ldr	r3, [pc, #572]	; (80819bc <loop+0x2a4>)
 8081780:	681a      	ldr	r2, [r3, #0]
 8081782:	4b8f      	ldr	r3, [pc, #572]	; (80819c0 <loop+0x2a8>)
 8081784:	681b      	ldr	r3, [r3, #0]
 8081786:	429a      	cmp	r2, r3
 8081788:	f300 81b5 	bgt.w	8081af6 <loop+0x3de>
 808178c:	2307      	movs	r3, #7
 808178e:	e02a      	b.n	80817e6 <loop+0xce>
    break;

  case MEASURING_STATE:                                                 // Take measurements prior to sending
    if (verboseMode && state != oldState) publishStateTransition();
 8081790:	4b83      	ldr	r3, [pc, #524]	; (80819a0 <loop+0x288>)
 8081792:	781a      	ldrb	r2, [r3, #0]
 8081794:	461d      	mov	r5, r3
 8081796:	b12a      	cbz	r2, 80817a4 <loop+0x8c>
 8081798:	4b82      	ldr	r3, [pc, #520]	; (80819a4 <loop+0x28c>)
 808179a:	781b      	ldrb	r3, [r3, #0]
 808179c:	2b03      	cmp	r3, #3
 808179e:	d001      	beq.n	80817a4 <loop+0x8c>
 80817a0:	f7ff ff7a 	bl	8081698 <_Z22publishStateTransitionv>
    if (!takeMeasurements())
 80817a4:	f7ff fc12 	bl	8080fcc <_Z16takeMeasurementsv>
 80817a8:	4606      	mov	r6, r0
 80817aa:	b9d8      	cbnz	r0, 80817e4 <loop+0xcc>
    {
      state = ERROR_STATE;
 80817ac:	2301      	movs	r3, #1
 80817ae:	7023      	strb	r3, [r4, #0]
 80817b0:	f000 ff0c 	bl	80825cc <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 80817b4:	4b83      	ldr	r3, [pc, #524]	; (80819c4 <loop+0x2ac>)
 80817b6:	6018      	str	r0, [r3, #0]
      if (verboseMode) {
 80817b8:	782b      	ldrb	r3, [r5, #0]
 80817ba:	2b00      	cmp	r3, #0
 80817bc:	f000 819b 	beq.w	8081af6 <loop+0x3de>
        waitUntil(meterParticlePublish);
 80817c0:	f7ff fcce 	bl	8081160 <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.28>
 80817c4:	4b80      	ldr	r3, [pc, #512]	; (80819c8 <loop+0x2b0>)
        Particle.publish("State","Error taking Measurements",PRIVATE);
 80817c6:	4a81      	ldr	r2, [pc, #516]	; (80819cc <loop+0x2b4>)
 80817c8:	781b      	ldrb	r3, [r3, #0]
 80817ca:	4981      	ldr	r1, [pc, #516]	; (80819d0 <loop+0x2b8>)
 80817cc:	a802      	add	r0, sp, #8
 80817ce:	f88d 6000 	strb.w	r6, [sp]
 80817d2:	f7ff f9f5 	bl	8080bc0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.42>
 80817d6:	a803      	add	r0, sp, #12
 80817d8:	f7ff fd0a 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80817dc:	f000 fef6 	bl	80825cc <HAL_Timer_Get_Milli_Seconds>
        lastPublish = millis();
 80817e0:	4b7c      	ldr	r3, [pc, #496]	; (80819d4 <loop+0x2bc>)
 80817e2:	e021      	b.n	8081828 <loop+0x110>
      }
    }
    else state = REPORTING_STATE;
 80817e4:	2304      	movs	r3, #4
 80817e6:	7023      	strb	r3, [r4, #0]
 80817e8:	e185      	b.n	8081af6 <loop+0x3de>
    break;

  case REPORTING_STATE:
    if (verboseMode && state != oldState) publishStateTransition();                                             // Reporting - hourly or on command
 80817ea:	4b6d      	ldr	r3, [pc, #436]	; (80819a0 <loop+0x288>)
 80817ec:	781b      	ldrb	r3, [r3, #0]
 80817ee:	b12b      	cbz	r3, 80817fc <loop+0xe4>
 80817f0:	4b6c      	ldr	r3, [pc, #432]	; (80819a4 <loop+0x28c>)
 80817f2:	781b      	ldrb	r3, [r3, #0]
 80817f4:	2b04      	cmp	r3, #4
 80817f6:	d001      	beq.n	80817fc <loop+0xe4>
 80817f8:	f7ff ff4e 	bl	8081698 <_Z22publishStateTransitionv>
 80817fc:	f001 f8f2 	bl	80829e4 <spark_cloud_flag_connected>
    if (Particle.connected()) {
 8081800:	b168      	cbz	r0, 808181e <loop+0x106>
      if (Time.hour() == 12) Particle.syncTime();                         // Set the clock each day at noon
 8081802:	f002 fc47 	bl	8084094 <_ZN9TimeClass4hourEv>
 8081806:	280c      	cmp	r0, #12
 8081808:	d105      	bne.n	8081816 <loop+0xfe>
 808180a:	f001 f8eb 	bl	80829e4 <spark_cloud_flag_connected>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        if (!connected()) {
 808180e:	b110      	cbz	r0, 8081816 <loop+0xfe>
            return false;
        }
        return CLOUD_FN(spark_sync_time(NULL), false);
 8081810:	2000      	movs	r0, #0
 8081812:	f001 f907 	bl	8082a24 <spark_sync_time>
      sendEvent();                                                        // Send data to Ubidots
 8081816:	f7ff fd01 	bl	808121c <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                            // Wait for Response
 808181a:	2305      	movs	r3, #5
 808181c:	e7e3      	b.n	80817e6 <loop+0xce>
    }
    else {
      state = ERROR_STATE;
 808181e:	2301      	movs	r3, #1
 8081820:	7023      	strb	r3, [r4, #0]
 8081822:	f000 fed3 	bl	80825cc <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 8081826:	4b67      	ldr	r3, [pc, #412]	; (80819c4 <loop+0x2ac>)
 8081828:	6018      	str	r0, [r3, #0]
 808182a:	e164      	b.n	8081af6 <loop+0x3de>
    }
    break;

  case RESP_WAIT_STATE:
  if (verboseMode && state != oldState) publishStateTransition();
 808182c:	4b5c      	ldr	r3, [pc, #368]	; (80819a0 <loop+0x288>)
 808182e:	781b      	ldrb	r3, [r3, #0]
 8081830:	b12b      	cbz	r3, 808183e <loop+0x126>
 8081832:	4b5c      	ldr	r3, [pc, #368]	; (80819a4 <loop+0x28c>)
 8081834:	781b      	ldrb	r3, [r3, #0]
 8081836:	2b05      	cmp	r3, #5
 8081838:	d001      	beq.n	808183e <loop+0x126>
 808183a:	f7ff ff2d 	bl	8081698 <_Z22publishStateTransitionv>
  if (!dataInFlight)                                                // Response received back to IDLE state
 808183e:	4b66      	ldr	r3, [pc, #408]	; (80819d8 <loop+0x2c0>)
 8081840:	781b      	ldrb	r3, [r3, #0]
 8081842:	b943      	cbnz	r3, 8081856 <loop+0x13e>
  {
    state = IDLE_STATE;
 8081844:	2302      	movs	r3, #2
 8081846:	7023      	strb	r3, [r4, #0]
    stayAwake = stayAwakeLong;                                      // Keeps Electron awake after reboot - helps with recovery
 8081848:	4a64      	ldr	r2, [pc, #400]	; (80819dc <loop+0x2c4>)
 808184a:	4b5a      	ldr	r3, [pc, #360]	; (80819b4 <loop+0x29c>)
 808184c:	601a      	str	r2, [r3, #0]
 808184e:	f000 febd 	bl	80825cc <HAL_Timer_Get_Milli_Seconds>
    stayAwakeTimeStamp = millis();
 8081852:	4b57      	ldr	r3, [pc, #348]	; (80819b0 <loop+0x298>)
 8081854:	e7e8      	b.n	8081828 <loop+0x110>
 8081856:	f000 feb9 	bl	80825cc <HAL_Timer_Get_Milli_Seconds>
  }
  else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
 808185a:	4b61      	ldr	r3, [pc, #388]	; (80819e0 <loop+0x2c8>)
 808185c:	681b      	ldr	r3, [r3, #0]
 808185e:	1ac0      	subs	r0, r0, r3
 8081860:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 8081864:	4298      	cmp	r0, r3
 8081866:	f240 8146 	bls.w	8081af6 <loop+0x3de>
 808186a:	f000 feaf 	bl	80825cc <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
 808186e:	4d55      	ldr	r5, [pc, #340]	; (80819c4 <loop+0x2ac>)
 8081870:	4b55      	ldr	r3, [pc, #340]	; (80819c8 <loop+0x2b0>)
    Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
 8081872:	2200      	movs	r2, #0
 8081874:	781b      	ldrb	r3, [r3, #0]
    state = IDLE_STATE;
    stayAwake = stayAwakeLong;                                      // Keeps Electron awake after reboot - helps with recovery
    stayAwakeTimeStamp = millis();
  }
  else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
    resetTimeStamp = millis();
 8081876:	6028      	str	r0, [r5, #0]
    Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
 8081878:	495a      	ldr	r1, [pc, #360]	; (80819e4 <loop+0x2cc>)
 808187a:	f88d 2000 	strb.w	r2, [sp]
 808187e:	a802      	add	r0, sp, #8
 8081880:	4a59      	ldr	r2, [pc, #356]	; (80819e8 <loop+0x2d0>)
 8081882:	f7ff f99d 	bl	8080bc0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.42>
 8081886:	a803      	add	r0, sp, #12
 8081888:	f7ff fcb2 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    state = ERROR_STATE;                                            // Response timed out
 808188c:	2301      	movs	r3, #1
 808188e:	7023      	strb	r3, [r4, #0]
 8081890:	f000 fe9c 	bl	80825cc <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
 8081894:	6028      	str	r0, [r5, #0]
 8081896:	e12e      	b.n	8081af6 <loop+0x3de>
  }
  break;

  case SLEEPING_STATE: {
    if (verboseMode && state != oldState) publishStateTransition();                                             // This state is triggered once the park closes and runs until it opens
 8081898:	4b41      	ldr	r3, [pc, #260]	; (80819a0 <loop+0x288>)
 808189a:	781a      	ldrb	r2, [r3, #0]
 808189c:	461c      	mov	r4, r3
 808189e:	b12a      	cbz	r2, 80818ac <loop+0x194>
 80818a0:	4b40      	ldr	r3, [pc, #256]	; (80819a4 <loop+0x28c>)
 80818a2:	781b      	ldrb	r3, [r3, #0]
 80818a4:	2b06      	cmp	r3, #6
 80818a6:	d001      	beq.n	80818ac <loop+0x194>
 80818a8:	f7ff fef6 	bl	8081698 <_Z22publishStateTransitionv>
    if (!readyForBed)                                                   // Only do these things once - at bedtime
 80818ac:	4b4f      	ldr	r3, [pc, #316]	; (80819ec <loop+0x2d4>)
 80818ae:	781d      	ldrb	r5, [r3, #0]
 80818b0:	461e      	mov	r6, r3
 80818b2:	bb5d      	cbnz	r5, 808190c <loop+0x1f4>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80818b4:	f001 f896 	bl	80829e4 <spark_cloud_flag_connected>
    {
      if (Particle.connected()) {
 80818b8:	b1c8      	cbz	r0, 80818ee <loop+0x1d6>
        if (verboseMode) {
 80818ba:	7823      	ldrb	r3, [r4, #0]
 80818bc:	b18b      	cbz	r3, 80818e2 <loop+0x1ca>
          waitUntil(meterParticlePublish);
 80818be:	f7ff fc4f 	bl	8081160 <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.28>
 80818c2:	4b41      	ldr	r3, [pc, #260]	; (80819c8 <loop+0x2b0>)
          Particle.publish("State","Going to Sleep",PRIVATE);
 80818c4:	4a4a      	ldr	r2, [pc, #296]	; (80819f0 <loop+0x2d8>)
 80818c6:	781b      	ldrb	r3, [r3, #0]
 80818c8:	4941      	ldr	r1, [pc, #260]	; (80819d0 <loop+0x2b8>)
 80818ca:	a802      	add	r0, sp, #8
 80818cc:	f88d 5000 	strb.w	r5, [sp]
 80818d0:	f7ff f976 	bl	8080bc0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.42>
 80818d4:	a803      	add	r0, sp, #12
 80818d6:	f7ff fc8b 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80818da:	f000 fe77 	bl	80825cc <HAL_Timer_Get_Milli_Seconds>
          lastPublish = millis();
 80818de:	4b3d      	ldr	r3, [pc, #244]	; (80819d4 <loop+0x2bc>)
 80818e0:	6018      	str	r0, [r3, #0]
        }
        delay(1000);                                                    // Time to send last update
 80818e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80818e6:	f001 f94d 	bl	8082b84 <delay>
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
 80818ea:	f7ff f9df 	bl	8080cac <_Z22disconnectFromParticlev>
      }
      EEPROM.write(MEM_MAP::resetCountAddr,resetCount);
 80818ee:	f002 fe53 	bl	8084598 <_Z21__fetch_global_EEPROMv>
 80818f2:	4b40      	ldr	r3, [pc, #256]	; (80819f4 <loop+0x2dc>)
 80818f4:	2002      	movs	r0, #2
 80818f6:	7819      	ldrb	r1, [r3, #0]
 80818f8:	f7ff f960 	bl	8080bbc <_ZN11EEPROMClass5writeEih.isra.15>
      ledState = false;
 80818fc:	4b3e      	ldr	r3, [pc, #248]	; (80819f8 <loop+0x2e0>)
 80818fe:	2100      	movs	r1, #0
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
 8081900:	2007      	movs	r0, #7
        }
        delay(1000);                                                    // Time to send last update
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
      }
      EEPROM.write(MEM_MAP::resetCountAddr,resetCount);
      ledState = false;
 8081902:	7019      	strb	r1, [r3, #0]
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
 8081904:	f002 fe1b 	bl	808453e <digitalWrite>
      readyForBed = true;                                               // Set the flag for the night
 8081908:	2301      	movs	r3, #1
 808190a:	7033      	strb	r3, [r6, #0]
    }
    petWatchdog();                                                      // Try to sync sleep and timer.
 808190c:	f7ff fc60 	bl	80811d0 <_Z11petWatchdogv>
    int secondsToHour = (60*(60 - Time.minute()));                      // Time till the top of the hour
 8081910:	f002 fbca 	bl	80840a8 <_ZN9TimeClass6minuteEv>
    System.sleep(SLEEP_MODE_SOFTPOWEROFF,secondsToHour);                // Very deep sleep till the next hour - then resets
 8081914:	4b39      	ldr	r3, [pc, #228]	; (80819fc <loop+0x2e4>)
 8081916:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 808191a:	223c      	movs	r2, #60	; 0x3c
 808191c:	681b      	ldr	r3, [r3, #0]
 808191e:	4342      	muls	r2, r0
 8081920:	2102      	movs	r1, #2
 8081922:	e036      	b.n	8081992 <loop+0x27a>
    } break;


  case LOW_BATTERY_STATE: {
    if (verboseMode && state != oldState) publishStateTransition();                                           // Sleep state but leaves the fuel gauge on
 8081924:	4b1e      	ldr	r3, [pc, #120]	; (80819a0 <loop+0x288>)
 8081926:	781a      	ldrb	r2, [r3, #0]
 8081928:	461c      	mov	r4, r3
 808192a:	b12a      	cbz	r2, 8081938 <loop+0x220>
 808192c:	4b1d      	ldr	r3, [pc, #116]	; (80819a4 <loop+0x28c>)
 808192e:	781b      	ldrb	r3, [r3, #0]
 8081930:	2b07      	cmp	r3, #7
 8081932:	d001      	beq.n	8081938 <loop+0x220>
 8081934:	f7ff feb0 	bl	8081698 <_Z22publishStateTransitionv>
 8081938:	f001 f854 	bl	80829e4 <spark_cloud_flag_connected>
      if (Particle.connected()) {
 808193c:	b1d0      	cbz	r0, 8081974 <loop+0x25c>
        if (verboseMode) {
 808193e:	7823      	ldrb	r3, [r4, #0]
 8081940:	b193      	cbz	r3, 8081968 <loop+0x250>
          waitUntil(meterParticlePublish);
 8081942:	f7ff fc0d 	bl	8081160 <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.28>
 8081946:	4b20      	ldr	r3, [pc, #128]	; (80819c8 <loop+0x2b0>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8081948:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 808194a:	781b      	ldrb	r3, [r3, #0]
          Particle.publish("State","Low Battery - Sleeping",PRIVATE);
 808194c:	4920      	ldr	r1, [pc, #128]	; (80819d0 <loop+0x2b8>)
 808194e:	f88d 2000 	strb.w	r2, [sp]
 8081952:	a802      	add	r0, sp, #8
 8081954:	4a2a      	ldr	r2, [pc, #168]	; (8081a00 <loop+0x2e8>)
 8081956:	f7ff f933 	bl	8080bc0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.42>
 808195a:	a803      	add	r0, sp, #12
 808195c:	f7ff fc48 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081960:	f000 fe34 	bl	80825cc <HAL_Timer_Get_Milli_Seconds>
          lastPublish = millis();
 8081964:	4b1b      	ldr	r3, [pc, #108]	; (80819d4 <loop+0x2bc>)
 8081966:	6018      	str	r0, [r3, #0]
        }
        delay(1000);                                                    // Time to send last update
 8081968:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808196c:	f001 f90a 	bl	8082b84 <delay>
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
 8081970:	f7ff f99c 	bl	8080cac <_Z22disconnectFromParticlev>
      }
      ledState = false;
 8081974:	4b20      	ldr	r3, [pc, #128]	; (80819f8 <loop+0x2e0>)
 8081976:	2100      	movs	r1, #0
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
 8081978:	2007      	movs	r0, #7
          lastPublish = millis();
        }
        delay(1000);                                                    // Time to send last update
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
      }
      ledState = false;
 808197a:	7019      	strb	r1, [r3, #0]
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
 808197c:	f002 fddf 	bl	808453e <digitalWrite>
      int secondsToHour = (60*(60 - Time.minute()));                    // Time till the top of the hour
 8081980:	f002 fb92 	bl	80840a8 <_ZN9TimeClass6minuteEv>
      System.sleep(SLEEP_MODE_DEEP,secondsToHour);                      // Very deep sleep till the next hour - then resets
 8081984:	223c      	movs	r2, #60	; 0x3c
 8081986:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 808198a:	4b1c      	ldr	r3, [pc, #112]	; (80819fc <loop+0x2e4>)
 808198c:	4342      	muls	r2, r0
 808198e:	681b      	ldr	r3, [r3, #0]
 8081990:	2101      	movs	r1, #1
 8081992:	a802      	add	r0, sp, #8
 8081994:	f002 fab4 	bl	8083f00 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
    } break;
 8081998:	e0ad      	b.n	8081af6 <loop+0x3de>
 808199a:	bf00      	nop
 808199c:	20000208 	.word	0x20000208
 80819a0:	2000018a 	.word	0x2000018a
 80819a4:	20000189 	.word	0x20000189
 80819a8:	200002e4 	.word	0x200002e4
 80819ac:	200002bc 	.word	0x200002bc
 80819b0:	200002d0 	.word	0x200002d0
 80819b4:	20000298 	.word	0x20000298
 80819b8:	20000290 	.word	0x20000290
 80819bc:	20000230 	.word	0x20000230
 80819c0:	2000016c 	.word	0x2000016c
 80819c4:	200002e0 	.word	0x200002e0
 80819c8:	20000174 	.word	0x20000174
 80819cc:	08087d97 	.word	0x08087d97
 80819d0:	08087ce5 	.word	0x08087ce5
 80819d4:	20000218 	.word	0x20000218
 80819d8:	20000074 	.word	0x20000074
 80819dc:	00015f90 	.word	0x00015f90
 80819e0:	20000170 	.word	0x20000170
 80819e4:	08087db1 	.word	0x08087db1
 80819e8:	08087c10 	.word	0x08087c10
 80819ec:	20000310 	.word	0x20000310
 80819f0:	08087dca 	.word	0x08087dca
 80819f4:	20000280 	.word	0x20000280
 80819f8:	20000188 	.word	0x20000188
 80819fc:	20000314 	.word	0x20000314
 8081a00:	08087dd9 	.word	0x08087dd9

  case ERROR_STATE:                                          // To be enhanced - where we deal with errors
    if (verboseMode && state != oldState) publishStateTransition();
 8081a04:	4b3d      	ldr	r3, [pc, #244]	; (8081afc <loop+0x3e4>)
 8081a06:	781b      	ldrb	r3, [r3, #0]
 8081a08:	b12b      	cbz	r3, 8081a16 <loop+0x2fe>
 8081a0a:	4b3d      	ldr	r3, [pc, #244]	; (8081b00 <loop+0x3e8>)
 8081a0c:	781b      	ldrb	r3, [r3, #0]
 8081a0e:	2b01      	cmp	r3, #1
 8081a10:	d001      	beq.n	8081a16 <loop+0x2fe>
 8081a12:	f7ff fe41 	bl	8081698 <_Z22publishStateTransitionv>
 8081a16:	f000 fdd9 	bl	80825cc <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
 8081a1a:	4b3a      	ldr	r3, [pc, #232]	; (8081b04 <loop+0x3ec>)
 8081a1c:	681b      	ldr	r3, [r3, #0]
 8081a1e:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8081a22:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8081a26:	4298      	cmp	r0, r3
 8081a28:	d965      	bls.n	8081af6 <loop+0x3de>
    {
      if (resetCount <= 3) {                                          // First try simple reset
 8081a2a:	4b37      	ldr	r3, [pc, #220]	; (8081b08 <loop+0x3f0>)
 8081a2c:	681b      	ldr	r3, [r3, #0]
 8081a2e:	2b03      	cmp	r3, #3
 8081a30:	dc16      	bgt.n	8081a60 <loop+0x348>
 8081a32:	f000 ffd7 	bl	80829e4 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
 8081a36:	b160      	cbz	r0, 8081a52 <loop+0x33a>
 8081a38:	4b34      	ldr	r3, [pc, #208]	; (8081b0c <loop+0x3f4>)
 8081a3a:	2200      	movs	r2, #0
 8081a3c:	781b      	ldrb	r3, [r3, #0]
 8081a3e:	a802      	add	r0, sp, #8
 8081a40:	f88d 2000 	strb.w	r2, [sp]
 8081a44:	4932      	ldr	r1, [pc, #200]	; (8081b10 <loop+0x3f8>)
 8081a46:	4a33      	ldr	r2, [pc, #204]	; (8081b14 <loop+0x3fc>)
 8081a48:	f7ff f8ba 	bl	8080bc0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.42>
 8081a4c:	a803      	add	r0, sp, #12
 8081a4e:	f7ff fbcf 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
 8081a52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8081a56:	f001 f895 	bl	8082b84 <delay>
        System.reset();
 8081a5a:	f002 fa4d 	bl	8083ef8 <_ZN11SystemClass5resetEv>
 8081a5e:	e04a      	b.n	8081af6 <loop+0x3de>
      }
      else if (Time.now() - EEPROM.read(MEM_MAP::currentCountsTimeAddr) > 7200L) { //It has been more than two hours since a sucessful hook response
 8081a60:	f002 fb11 	bl	8084086 <_ZN9TimeClass3nowEv>
 8081a64:	4604      	mov	r4, r0
 8081a66:	f002 fd97 	bl	8084598 <_Z21__fetch_global_EEPROMv>
 8081a6a:	2005      	movs	r0, #5
 8081a6c:	f7ff f8a4 	bl	8080bb8 <_ZN11EEPROMClass4readEi.isra.14>
 8081a70:	1a20      	subs	r0, r4, r0
 8081a72:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
 8081a76:	dd1e      	ble.n	8081ab6 <loop+0x39e>
 8081a78:	f000 ffb4 	bl	80829e4 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
 8081a7c:	b160      	cbz	r0, 8081a98 <loop+0x380>
 8081a7e:	4b23      	ldr	r3, [pc, #140]	; (8081b0c <loop+0x3f4>)
 8081a80:	2200      	movs	r2, #0
 8081a82:	781b      	ldrb	r3, [r3, #0]
 8081a84:	a802      	add	r0, sp, #8
 8081a86:	f88d 2000 	strb.w	r2, [sp]
 8081a8a:	4921      	ldr	r1, [pc, #132]	; (8081b10 <loop+0x3f8>)
 8081a8c:	4a22      	ldr	r2, [pc, #136]	; (8081b18 <loop+0x400>)
 8081a8e:	f7ff f897 	bl	8080bc0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.42>
 8081a92:	a803      	add	r0, sp, #12
 8081a94:	f7ff fbac 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
 8081a98:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8081a9c:	f001 f872 	bl	8082b84 <delay>
        EEPROM.write(MEM_MAP::resetCountAddr,0);                           // Zero the ResetCount
 8081aa0:	f002 fd7a 	bl	8084598 <_Z21__fetch_global_EEPROMv>
 8081aa4:	2100      	movs	r1, #0
 8081aa6:	2002      	movs	r0, #2
 8081aa8:	f7ff f888 	bl	8080bbc <_ZN11EEPROMClass5writeEih.isra.15>
        digitalWrite(hardResetPin,HIGH);                              // This will cut all power to the Electron AND the carrier board
 8081aac:	2101      	movs	r1, #1
 8081aae:	2004      	movs	r0, #4
 8081ab0:	f002 fd45 	bl	808453e <digitalWrite>
 8081ab4:	e01f      	b.n	8081af6 <loop+0x3de>
 8081ab6:	f000 ff95 	bl	80829e4 <spark_cloud_flag_connected>
      }
      else {                                                          // If we have had 3 resets - time to do something more
        if (Particle.connected()) Particle.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
 8081aba:	b160      	cbz	r0, 8081ad6 <loop+0x3be>
 8081abc:	4b13      	ldr	r3, [pc, #76]	; (8081b0c <loop+0x3f4>)
 8081abe:	2200      	movs	r2, #0
 8081ac0:	781b      	ldrb	r3, [r3, #0]
 8081ac2:	a802      	add	r0, sp, #8
 8081ac4:	f88d 2000 	strb.w	r2, [sp]
 8081ac8:	4911      	ldr	r1, [pc, #68]	; (8081b10 <loop+0x3f8>)
 8081aca:	4a14      	ldr	r2, [pc, #80]	; (8081b1c <loop+0x404>)
 8081acc:	f7ff f878 	bl	8080bc0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.42>
 8081ad0:	a803      	add	r0, sp, #12
 8081ad2:	f7ff fb8d 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
 8081ad6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8081ada:	f001 f853 	bl	8082b84 <delay>
        EEPROM.write(MEM_MAP::resetCountAddr,0);                           // Zero the ResetCount
 8081ade:	f002 fd5b 	bl	8084598 <_Z21__fetch_global_EEPROMv>
 8081ae2:	2100      	movs	r1, #0
 8081ae4:	2002      	movs	r0, #2
 8081ae6:	f7ff f869 	bl	8080bbc <_ZN11EEPROMClass5writeEih.isra.15>
        fullModemReset();                                             // Full Modem reset and reboots
 8081aea:	f7ff fb45 	bl	8081178 <_Z14fullModemResetv>
      }
    }
    break;
  }
}
 8081aee:	e002      	b.n	8081af6 <loop+0x3de>

  switch(state) {
  case IDLE_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
    if (watchDogFlag) petWatchdog();
    if (lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = SLEEPING_STATE;
 8081af0:	2306      	movs	r3, #6
 8081af2:	7023      	strb	r3, [r4, #0]
 8081af4:	e63b      	b.n	808176e <loop+0x56>
        fullModemReset();                                             // Full Modem reset and reboots
      }
    }
    break;
  }
}
 8081af6:	b004      	add	sp, #16
 8081af8:	bd70      	pop	{r4, r5, r6, pc}
 8081afa:	bf00      	nop
 8081afc:	2000018a 	.word	0x2000018a
 8081b00:	20000189 	.word	0x20000189
 8081b04:	200002e0 	.word	0x200002e0
 8081b08:	20000280 	.word	0x20000280
 8081b0c:	20000174 	.word	0x20000174
 8081b10:	08087ce5 	.word	0x08087ce5
 8081b14:	08087df0 	.word	0x08087df0
 8081b18:	08087e04 	.word	0x08087e04
 8081b1c:	08087e1e 	.word	0x08087e1e

08081b20 <_Z12hardResetNow6String>:
  digitalWrite(donePin,LOW);
  watchDogFlag = false;
}

int hardResetNow(String command)                                      // Will perform a hard reset on the Electron
{
 8081b20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8081b22:	490f      	ldr	r1, [pc, #60]	; (8081b60 <_Z12hardResetNow6String+0x40>)
 8081b24:	f002 f9b9 	bl	8083e9a <_ZNK6String6equalsEPKc>
  if (command == "1")
 8081b28:	b1b8      	cbz	r0, 8081b5a <_Z12hardResetNow6String+0x3a>
 8081b2a:	f000 ff5b 	bl	80829e4 <spark_cloud_flag_connected>
  {
    if (Particle.connected()) Particle.publish("Hard Reset",PRIVATE);
 8081b2e:	b158      	cbz	r0, 8081b48 <_Z12hardResetNow6String+0x28>
 8081b30:	4b0c      	ldr	r3, [pc, #48]	; (8081b64 <_Z12hardResetNow6String+0x44>)
 8081b32:	2200      	movs	r2, #0
 8081b34:	781b      	ldrb	r3, [r3, #0]
      return _function(funcKey, std::bind(func, instance, _1));
    }

    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
 8081b36:	a802      	add	r0, sp, #8
 8081b38:	f88d 2000 	strb.w	r2, [sp]
 8081b3c:	490a      	ldr	r1, [pc, #40]	; (8081b68 <_Z12hardResetNow6String+0x48>)
 8081b3e:	f7ff f83f 	bl	8080bc0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.42>
 8081b42:	a803      	add	r0, sp, #12
 8081b44:	f7ff fb54 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(1000);
 8081b48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8081b4c:	f001 f81a 	bl	8082b84 <delay>
    digitalWrite(hardResetPin,HIGH);                                  // This will cut all power to the Electron AND the carrir board
 8081b50:	2004      	movs	r0, #4
 8081b52:	2101      	movs	r1, #1
 8081b54:	f002 fcf3 	bl	808453e <digitalWrite>
 8081b58:	2001      	movs	r0, #1
    return 1;                                                         // Unfortunately, this will never be sent
  }
  else return 0;
 8081b5a:	b005      	add	sp, #20
 8081b5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8081b60:	08088039 	.word	0x08088039
 8081b64:	20000174 	.word	0x20000174
 8081b68:	08087e3d 	.word	0x08087e3d

08081b6c <_ZN10CloudClass8variableIA4_cIA16_cEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 8081b6c:	2300      	movs	r3, #0
 8081b6e:	2204      	movs	r2, #4
 8081b70:	f000 bf10 	b.w	8082994 <spark_variable>

08081b74 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 8081b74:	4602      	mov	r2, r0
 8081b76:	4801      	ldr	r0, [pc, #4]	; (8081b7c <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
 8081b78:	f001 b9af 	b.w	8082eda <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8081b7c:	08082eaf 	.word	0x08082eaf

08081b80 <setup>:
double approxAltitudeInM = 0;
float heatIndexC;                                                 // Will cacluate the heat index and report to Ubidots


void setup()                                                      // Note: Disconnected Setup()
{
 8081b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8081b84:	b0b9      	sub	sp, #228	; 0xe4
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
 8081b86:	aa08      	add	r2, sp, #32
 8081b88:	4616      	mov	r6, r2
 8081b8a:	4bb5      	ldr	r3, [pc, #724]	; (8081e60 <setup+0x2e0>)
 8081b8c:	f103 0510 	add.w	r5, r3, #16
 8081b90:	4614      	mov	r4, r2
 8081b92:	6818      	ldr	r0, [r3, #0]
 8081b94:	6859      	ldr	r1, [r3, #4]
 8081b96:	3308      	adds	r3, #8
 8081b98:	c403      	stmia	r4!, {r0, r1}
 8081b9a:	42ab      	cmp	r3, r5
 8081b9c:	4622      	mov	r2, r4
 8081b9e:	d1f7      	bne.n	8081b90 <setup+0x10>
 8081ba0:	8819      	ldrh	r1, [r3, #0]
 8081ba2:	789b      	ldrb	r3, [r3, #2]
 8081ba4:	222d      	movs	r2, #45	; 0x2d
 8081ba6:	70a3      	strb	r3, [r4, #2]
 8081ba8:	8021      	strh	r1, [r4, #0]
 8081baa:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 8081bae:	2100      	movs	r1, #0
  state = IDLE_STATE;
 8081bb0:	4fac      	ldr	r7, [pc, #688]	; (8081e64 <setup+0x2e4>)
float heatIndexC;                                                 // Will cacluate the heat index and report to Ubidots


void setup()                                                      // Note: Disconnected Setup()
{
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
 8081bb2:	f005 fade 	bl	8087172 <memset>
  state = IDLE_STATE;
 8081bb6:	2502      	movs	r5, #2

  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
 8081bb8:	2101      	movs	r1, #1
 8081bba:	2007      	movs	r0, #7


void setup()                                                      // Note: Disconnected Setup()
{
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
  state = IDLE_STATE;
 8081bbc:	703d      	strb	r5, [r7, #0]

  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
 8081bbe:	f002 fcad 	bl	808451c <pinMode>
  pinMode(userSwitch,INPUT);                                      // Momentary contact button on board for direct user input
 8081bc2:	2100      	movs	r1, #0
 8081bc4:	2005      	movs	r0, #5
 8081bc6:	f002 fca9 	bl	808451c <pinMode>
  pinMode(donePin,OUTPUT);                                        // To pet the watchdog
 8081bca:	2101      	movs	r1, #1
 8081bcc:	2006      	movs	r0, #6
 8081bce:	f002 fca5 	bl	808451c <pinMode>
  pinMode(wakeUpPin, INPUT);                                      // Watchdog interrrupt
 8081bd2:	2100      	movs	r1, #0
 8081bd4:	2011      	movs	r0, #17
 8081bd6:	f002 fca1 	bl	808451c <pinMode>
  pinMode(hardResetPin,OUTPUT);                                   // Pin used to power-cycle device
 8081bda:	2101      	movs	r1, #1
 8081bdc:	2004      	movs	r0, #4
 8081bde:	f002 fc9d 	bl	808451c <pinMode>

  petWatchdog();                                                        // Need to pet the watchdog as we are waking from sleep
 8081be2:	f7ff faf5 	bl	80811d0 <_Z11petWatchdogv>
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
 8081be6:	a804      	add	r0, sp, #16
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
 8081be8:	2400      	movs	r4, #0
 8081bea:	f000 ff03 	bl	80829f4 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
 8081bee:	2300      	movs	r3, #0
 8081bf0:	227d      	movs	r2, #125	; 0x7d
 8081bf2:	a918      	add	r1, sp, #96	; 0x60
 8081bf4:	a804      	add	r0, sp, #16
 8081bf6:	f002 f962 	bl	8083ebe <_ZNK6String8getBytesEPhjj>
 8081bfa:	4623      	mov	r3, r4
 8081bfc:	4622      	mov	r2, r4
 8081bfe:	499a      	ldr	r1, [pc, #616]	; (8081e68 <setup+0x2e8>)
 8081c00:	9401      	str	r4, [sp, #4]
 8081c02:	9400      	str	r4, [sp, #0]
 8081c04:	a818      	add	r0, sp, #96	; 0x60
 8081c06:	f000 ff05 	bl	8082a14 <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);  // Subscribe to the integration response event

  Particle.variable("Signal", SignalString);                      // Particle variables that enable monitoring using the mobile app
 8081c0a:	4998      	ldr	r1, [pc, #608]	; (8081e6c <setup+0x2ec>)
 8081c0c:	4898      	ldr	r0, [pc, #608]	; (8081e70 <setup+0x2f0>)
 8081c0e:	f7ff ffad 	bl	8081b6c <_ZN10CloudClass8variableIA4_cIA16_cEEEbRKT_DpRKT0_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 8081c12:	4623      	mov	r3, r4
 8081c14:	462a      	mov	r2, r5
 8081c16:	4997      	ldr	r1, [pc, #604]	; (8081e74 <setup+0x2f4>)
 8081c18:	4897      	ldr	r0, [pc, #604]	; (8081e78 <setup+0x2f8>)
 8081c1a:	f000 febb 	bl	8082994 <spark_variable>
 8081c1e:	4997      	ldr	r1, [pc, #604]	; (8081e7c <setup+0x2fc>)
 8081c20:	4623      	mov	r3, r4
 8081c22:	2204      	movs	r2, #4
 8081c24:	6809      	ldr	r1, [r1, #0]
 8081c26:	4896      	ldr	r0, [pc, #600]	; (8081e80 <setup+0x300>)
 8081c28:	f000 feb4 	bl	8082994 <spark_variable>
  Particle.variable("ResetCount", resetCount);
  Particle.variable("Release",releaseNumber);
  Particle.variable("stateOfChg", batteryString);
 8081c2c:	4995      	ldr	r1, [pc, #596]	; (8081e84 <setup+0x304>)
 8081c2e:	4896      	ldr	r0, [pc, #600]	; (8081e88 <setup+0x308>)
 8081c30:	f7ff ff9c 	bl	8081b6c <_ZN10CloudClass8variableIA4_cIA16_cEEEbRKT_DpRKT0_>
 8081c34:	4623      	mov	r3, r4
 8081c36:	2201      	movs	r2, #1
 8081c38:	4994      	ldr	r1, [pc, #592]	; (8081e8c <setup+0x30c>)
 8081c3a:	4895      	ldr	r0, [pc, #596]	; (8081e90 <setup+0x310>)
 8081c3c:	f000 feaa 	bl	8082994 <spark_variable>
  Particle.variable("lowPowerMode",lowPowerMode);
  Particle.variable("temperature", temperatureString);
 8081c40:	4994      	ldr	r1, [pc, #592]	; (8081e94 <setup+0x314>)
 8081c42:	4895      	ldr	r0, [pc, #596]	; (8081e98 <setup+0x318>)
 8081c44:	f7ff ff92 	bl	8081b6c <_ZN10CloudClass8variableIA4_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("humidity", humidityString);
 8081c48:	4994      	ldr	r1, [pc, #592]	; (8081e9c <setup+0x31c>)
 8081c4a:	4895      	ldr	r0, [pc, #596]	; (8081ea0 <setup+0x320>)
 8081c4c:	f7ff ff8e 	bl	8081b6c <_ZN10CloudClass8variableIA4_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("pressure", pressureString);
 8081c50:	4994      	ldr	r1, [pc, #592]	; (8081ea4 <setup+0x324>)
 8081c52:	4895      	ldr	r0, [pc, #596]	; (8081ea8 <setup+0x328>)
 8081c54:	f7ff ff8a 	bl	8081b6c <_ZN10CloudClass8variableIA4_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("gas", TVOCString);
 8081c58:	4994      	ldr	r1, [pc, #592]	; (8081eac <setup+0x32c>)
 8081c5a:	4895      	ldr	r0, [pc, #596]	; (8081eb0 <setup+0x330>)
 8081c5c:	f7ff ff86 	bl	8081b6c <_ZN10CloudClass8variableIA4_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("altitude", altitudeString);
 8081c60:	4994      	ldr	r1, [pc, #592]	; (8081eb4 <setup+0x334>)
 8081c62:	4895      	ldr	r0, [pc, #596]	; (8081eb8 <setup+0x338>)
 8081c64:	f7ff ff82 	bl	8081b6c <_ZN10CloudClass8variableIA4_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Heat-Index",heatIndexString);
 8081c68:	4994      	ldr	r1, [pc, #592]	; (8081ebc <setup+0x33c>)
 8081c6a:	4895      	ldr	r0, [pc, #596]	; (8081ec0 <setup+0x340>)
 8081c6c:	f7ff ff7e 	bl	8081b6c <_ZN10CloudClass8variableIA4_cIA16_cEEEbRKT_DpRKT0_>

  Particle.function("Measure-Now",measureNow);
 8081c70:	4994      	ldr	r1, [pc, #592]	; (8081ec4 <setup+0x344>)
 8081c72:	4895      	ldr	r0, [pc, #596]	; (8081ec8 <setup+0x348>)
 8081c74:	f7ff ff7e 	bl	8081b74 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("HardReset",hardResetNow);
 8081c78:	4994      	ldr	r1, [pc, #592]	; (8081ecc <setup+0x34c>)
 8081c7a:	4895      	ldr	r0, [pc, #596]	; (8081ed0 <setup+0x350>)
 8081c7c:	f7ff ff7a 	bl	8081b74 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("LowPowerMode",setLowPowerMode);
 8081c80:	4994      	ldr	r1, [pc, #592]	; (8081ed4 <setup+0x354>)
 8081c82:	4895      	ldr	r0, [pc, #596]	; (8081ed8 <setup+0x358>)
 8081c84:	f7ff ff76 	bl	8081b74 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Solar-Mode",setSolarMode);
 8081c88:	4994      	ldr	r1, [pc, #592]	; (8081edc <setup+0x35c>)
 8081c8a:	4895      	ldr	r0, [pc, #596]	; (8081ee0 <setup+0x360>)
 8081c8c:	f7ff ff72 	bl	8081b74 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setVerboseMode);
 8081c90:	4994      	ldr	r1, [pc, #592]	; (8081ee4 <setup+0x364>)
 8081c92:	4895      	ldr	r0, [pc, #596]	; (8081ee8 <setup+0x368>)
 8081c94:	f7ff ff6e 	bl	8081b74 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetTimeZone",setTimeZone);
 8081c98:	4994      	ldr	r1, [pc, #592]	; (8081eec <setup+0x36c>)
 8081c9a:	4895      	ldr	r0, [pc, #596]	; (8081ef0 <setup+0x370>)
 8081c9c:	f7ff ff6a 	bl	8081b74 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
 8081ca0:	f002 fc7a 	bl	8084598 <_Z21__fetch_global_EEPROMv>
 8081ca4:	4620      	mov	r0, r4
 8081ca6:	f7fe ff87 	bl	8080bb8 <_ZN11EEPROMClass4readEi.isra.14>
 8081caa:	2801      	cmp	r0, #1
 8081cac:	d119      	bne.n	8081ce2 <setup+0x162>
    for (int i=1; i < 10; i++) {
      EEPROM.put(i,0);                                                 // Zero out the memory - new map or new device
    }
  }

  resetCount = EEPROM.read(MEM_MAP::resetCountAddr);                    // Retrive system recount data from FRAM
 8081cae:	f002 fc73 	bl	8084598 <_Z21__fetch_global_EEPROMv>
 8081cb2:	2002      	movs	r0, #2
 8081cb4:	f7fe ff80 	bl	8080bb8 <_ZN11EEPROMClass4readEi.isra.14>
 8081cb8:	4c6e      	ldr	r4, [pc, #440]	; (8081e74 <setup+0x2f4>)
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 8081cba:	2200      	movs	r2, #0
 8081cbc:	6020      	str	r0, [r4, #0]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8081cbe:	4611      	mov	r1, r2
 8081cc0:	a802      	add	r0, sp, #8
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 8081cc2:	9202      	str	r2, [sp, #8]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8081cc4:	f000 fc72 	bl	80825ac <HAL_Core_Get_Last_Reset_Info>
        return reason;
 8081cc8:	9b02      	ldr	r3, [sp, #8]
  if (System.resetReason() == RESET_REASON_PIN_RESET)                   // Check to see if we are starting from a pin reset
 8081cca:	2b14      	cmp	r3, #20
 8081ccc:	d11e      	bne.n	8081d0c <setup+0x18c>
  {
    resetCount++;
 8081cce:	6823      	ldr	r3, [r4, #0]
 8081cd0:	3301      	adds	r3, #1
 8081cd2:	6023      	str	r3, [r4, #0]
    EEPROM.write(MEM_MAP::resetCountAddr, resetCount);                  // If so, store incremented number - watchdog must have done This
 8081cd4:	f002 fc60 	bl	8084598 <_Z21__fetch_global_EEPROMv>
 8081cd8:	7821      	ldrb	r1, [r4, #0]
 8081cda:	2002      	movs	r0, #2
 8081cdc:	f7fe ff6e 	bl	8080bbc <_ZN11EEPROMClass5writeEih.isra.15>
 8081ce0:	e014      	b.n	8081d0c <setup+0x18c>
  Particle.function("Solar-Mode",setSolarMode);
  Particle.function("Verbose-Mode",setVerboseMode);
  Particle.function("SetTimeZone",setTimeZone);

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
 8081ce2:	f002 fc59 	bl	8084598 <_Z21__fetch_global_EEPROMv>
 8081ce6:	2501      	movs	r5, #1
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 8081ce8:	2204      	movs	r2, #4
 8081cea:	a902      	add	r1, sp, #8
 8081cec:	4620      	mov	r0, r4
 8081cee:	9502      	str	r5, [sp, #8]
 8081cf0:	f000 fc94 	bl	808261c <HAL_EEPROM_Put>
    for (int i=1; i < 10; i++) {
      EEPROM.put(i,0);                                                 // Zero out the memory - new map or new device
 8081cf4:	f002 fc50 	bl	8084598 <_Z21__fetch_global_EEPROMv>
 8081cf8:	4628      	mov	r0, r5
 8081cfa:	2204      	movs	r2, #4
 8081cfc:	a902      	add	r1, sp, #8
  Particle.function("Verbose-Mode",setVerboseMode);
  Particle.function("SetTimeZone",setTimeZone);

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
    for (int i=1; i < 10; i++) {
 8081cfe:	3501      	adds	r5, #1
      EEPROM.put(i,0);                                                 // Zero out the memory - new map or new device
 8081d00:	9402      	str	r4, [sp, #8]
 8081d02:	f000 fc8b 	bl	808261c <HAL_EEPROM_Put>
  Particle.function("Verbose-Mode",setVerboseMode);
  Particle.function("SetTimeZone",setTimeZone);

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
    for (int i=1; i < 10; i++) {
 8081d06:	2d0a      	cmp	r5, #10
 8081d08:	d1f4      	bne.n	8081cf4 <setup+0x174>
 8081d0a:	e7d0      	b.n	8081cae <setup+0x12e>
  if (System.resetReason() == RESET_REASON_PIN_RESET)                   // Check to see if we are starting from a pin reset
  {
    resetCount++;
    EEPROM.write(MEM_MAP::resetCountAddr, resetCount);                  // If so, store incremented number - watchdog must have done This
  }
  if (resetCount >=6) {                                                 // If we get to resetCount 4, we are resetting without entering the main loop
 8081d0c:	6823      	ldr	r3, [r4, #0]
 8081d0e:	2b05      	cmp	r3, #5
 8081d10:	dd07      	ble.n	8081d22 <setup+0x1a2>
    EEPROM.write(MEM_MAP::resetCountAddr,4);                                           // The hope here is to get to the main loop and report a value of 4 which will indicate this issue is occuring
 8081d12:	f002 fc41 	bl	8084598 <_Z21__fetch_global_EEPROMv>
 8081d16:	2104      	movs	r1, #4
 8081d18:	2002      	movs	r0, #2
 8081d1a:	f7fe ff4f 	bl	8080bbc <_ZN11EEPROMClass5writeEih.isra.15>
    fullModemReset();                                                   // This will reset the modem and the device will reboot
 8081d1e:	f7ff fa2b 	bl	8081178 <_Z14fullModemResetv>
  }

  int8_t tempTimeZoneOffset = EEPROM.read(MEM_MAP::timeZoneAddr);                      // Load Time zone data from FRAM
 8081d22:	f002 fc39 	bl	8084598 <_Z21__fetch_global_EEPROMv>
 8081d26:	2003      	movs	r0, #3
 8081d28:	f7fe ff46 	bl	8080bb8 <_ZN11EEPROMClass4readEi.isra.14>
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
 8081d2c:	f100 030c 	add.w	r3, r0, #12
 8081d30:	b2db      	uxtb	r3, r3
 8081d32:	2b18      	cmp	r3, #24
 8081d34:	d803      	bhi.n	8081d3e <setup+0x1be>
 8081d36:	b240      	sxtb	r0, r0
 8081d38:	f004 fcc2 	bl	80866c0 <__aeabi_i2f>
 8081d3c:	e000      	b.n	8081d40 <setup+0x1c0>
  else Time.zone(0);                                                   // Default is GMT in case proper value not in EEPROM
 8081d3e:	2000      	movs	r0, #0
 8081d40:	f002 f942 	bl	8083fc8 <_ZN9TimeClass4zoneEf>

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
 8081d44:	f002 fc28 	bl	8084598 <_Z21__fetch_global_EEPROMv>
 8081d48:	2004      	movs	r0, #4
 8081d4a:	f7fe ff35 	bl	8080bb8 <_ZN11EEPROMClass4readEi.isra.14>
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
 8081d4e:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8081e8c <setup+0x30c>
 8081d52:	f000 0301 	and.w	r3, r0, #1
  int8_t tempTimeZoneOffset = EEPROM.read(MEM_MAP::timeZoneAddr);                      // Load Time zone data from FRAM
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
  else Time.zone(0);                                                   // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
 8081d56:	4c67      	ldr	r4, [pc, #412]	; (8081ef4 <setup+0x374>)
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
 8081d58:	f888 3000 	strb.w	r3, [r8]
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode
 8081d5c:	4d66      	ldr	r5, [pc, #408]	; (8081ef8 <setup+0x378>)
  else Time.zone(0);                                                   // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
 8081d5e:	4b67      	ldr	r3, [pc, #412]	; (8081efc <setup+0x37c>)
 8081d60:	f3c0 0280 	ubfx	r2, r0, #2, #1
  int8_t tempTimeZoneOffset = EEPROM.read(MEM_MAP::timeZoneAddr);                      // Load Time zone data from FRAM
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
  else Time.zone(0);                                                   // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
 8081d64:	7020      	strb	r0, [r4, #0]
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode
 8081d66:	f3c0 00c0 	ubfx	r0, r0, #3, #1
  else Time.zone(0);                                                   // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
 8081d6a:	701a      	strb	r2, [r3, #0]
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode
 8081d6c:	7028      	strb	r0, [r5, #0]

  PMICreset();                                                          // Executes commands that set up the PMIC for Solar charging - once we know the Solar Mode
 8081d6e:	f7fe ffaf 	bl	8080cd0 <_Z9PMICresetv>

  if (!bme.begin()) {                                                   // Start the BME680 Sensor
 8081d72:	2201      	movs	r2, #1
 8081d74:	2177      	movs	r1, #119	; 0x77
 8081d76:	4862      	ldr	r0, [pc, #392]	; (8081f00 <setup+0x380>)
 8081d78:	f000 fa4a 	bl	8082210 <_ZN15Adafruit_BME6805beginEhb>
 8081d7c:	46c1      	mov	r9, r8
 8081d7e:	b978      	cbnz	r0, 8081da0 <setup+0x220>
 8081d80:	f000 fc24 	bl	80825cc <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
 8081d84:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8081f10 <setup+0x390>
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - BME680 Initialization");
 8081d88:	495e      	ldr	r1, [pc, #376]	; (8081f04 <setup+0x384>)
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode

  PMICreset();                                                          // Executes commands that set up the PMIC for Solar charging - once we know the Solar Mode

  if (!bme.begin()) {                                                   // Start the BME680 Sensor
    resetTimeStamp = millis();
 8081d8a:	f8c8 0000 	str.w	r0, [r8]
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - BME680 Initialization");
 8081d8e:	4630      	mov	r0, r6
 8081d90:	f005 fa2a 	bl	80871e8 <strcpy>
    state = ERROR_STATE;
 8081d94:	2301      	movs	r3, #1
 8081d96:	703b      	strb	r3, [r7, #0]
 8081d98:	f000 fc18 	bl	80825cc <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
 8081d9c:	f8c8 0000 	str.w	r0, [r8]
  }

  // Set up the sampling paramatures
  bme.setTemperatureOversampling(BME680_OS_8X);
 8081da0:	2104      	movs	r1, #4
 8081da2:	4857      	ldr	r0, [pc, #348]	; (8081f00 <setup+0x380>)
 8081da4:	f000 fb94 	bl	80824d0 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>
  bme.setHumidityOversampling(BME680_OS_2X);
 8081da8:	2102      	movs	r1, #2
 8081daa:	4855      	ldr	r0, [pc, #340]	; (8081f00 <setup+0x380>)
 8081dac:	f000 fb9d 	bl	80824ea <_ZN15Adafruit_BME68023setHumidityOversamplingEh>
  bme.setPressureOversampling(BME680_OS_4X);
 8081db0:	2103      	movs	r1, #3
 8081db2:	4853      	ldr	r0, [pc, #332]	; (8081f00 <setup+0x380>)
 8081db4:	f000 fba6 	bl	8082504 <_ZN15Adafruit_BME68023setPressureOversamplingEh>
  bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
 8081db8:	2102      	movs	r1, #2
 8081dba:	4851      	ldr	r0, [pc, #324]	; (8081f00 <setup+0x380>)
 8081dbc:	f000 fbaf 	bl	808251e <_ZN15Adafruit_BME68016setIIRFilterSizeEh>
  bme.setGasHeater(320, 150); // 320*C for 150 ms
 8081dc0:	2296      	movs	r2, #150	; 0x96
 8081dc2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8081dc6:	484e      	ldr	r0, [pc, #312]	; (8081f00 <setup+0x380>)
 8081dc8:	f000 fb6e 	bl	80824a8 <_ZN15Adafruit_BME68012setGasHeaterEtt>

  takeMeasurements();                                                   // For the benefit of monitoring the device
 8081dcc:	f7ff f8fe 	bl	8080fcc <_Z16takeMeasurementsv>

  if (!digitalRead(userSwitch)) {                                       // Rescue mode to locally take lowPowerMode so you can connect to device
 8081dd0:	2005      	movs	r0, #5
 8081dd2:	f002 fbcd 	bl	8084570 <digitalRead>
 8081dd6:	b958      	cbnz	r0, 8081df0 <setup+0x270>
  lowPowerMode = false;                                                 // Press the user switch while resetting the device
    controlRegister = (0b11111110 & controlRegister);                   // Turn off Low power mode
 8081dd8:	7823      	ldrb	r3, [r4, #0]
  bme.setGasHeater(320, 150); // 320*C for 150 ms

  takeMeasurements();                                                   // For the benefit of monitoring the device

  if (!digitalRead(userSwitch)) {                                       // Rescue mode to locally take lowPowerMode so you can connect to device
  lowPowerMode = false;                                                 // Press the user switch while resetting the device
 8081dda:	f889 0000 	strb.w	r0, [r9]
    controlRegister = (0b11111110 & controlRegister);                   // Turn off Low power mode
 8081dde:	f023 0301 	bic.w	r3, r3, #1
 8081de2:	7023      	strb	r3, [r4, #0]
    EEPROM.write(controlRegister,MEM_MAP::controlRegisterAddr);         // Write to the EEMPROM
 8081de4:	f002 fbd8 	bl	8084598 <_Z21__fetch_global_EEPROMv>
 8081de8:	2104      	movs	r1, #4
 8081dea:	7820      	ldrb	r0, [r4, #0]
 8081dec:	f7fe fee6 	bl	8080bbc <_ZN11EEPROMClass5writeEih.isra.15>
  }

  if (stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;         // Only connect if we have battery
 8081df0:	4b45      	ldr	r3, [pc, #276]	; (8081f08 <setup+0x388>)
 8081df2:	681a      	ldr	r2, [r3, #0]
 8081df4:	4b45      	ldr	r3, [pc, #276]	; (8081f0c <setup+0x38c>)
 8081df6:	681b      	ldr	r3, [r3, #0]
 8081df8:	429a      	cmp	r2, r3
 8081dfa:	dc02      	bgt.n	8081e02 <setup+0x282>
 8081dfc:	2307      	movs	r3, #7
 8081dfe:	703b      	strb	r3, [r7, #0]
 8081e00:	e00c      	b.n	8081e1c <setup+0x29c>
  else if(!connectToParticle()) {
 8081e02:	f7fe ff17 	bl	8080c34 <_Z17connectToParticlev>
 8081e06:	b948      	cbnz	r0, 8081e1c <setup+0x29c>
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
 8081e08:	2301      	movs	r3, #1
 8081e0a:	703b      	strb	r3, [r7, #0]
 8081e0c:	f000 fbde 	bl	80825cc <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
 8081e10:	4b3f      	ldr	r3, [pc, #252]	; (8081f10 <setup+0x390>)
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
 8081e12:	4940      	ldr	r1, [pc, #256]	; (8081f14 <setup+0x394>)
  }

  if (stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;         // Only connect if we have battery
  else if(!connectToParticle()) {
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
    resetTimeStamp = millis();
 8081e14:	6018      	str	r0, [r3, #0]
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
 8081e16:	4630      	mov	r0, r6
 8081e18:	f005 f9e6 	bl	80871e8 <strcpy>
  }

  attachInterrupt(wakeUpPin,watchdogISR,RISING);                        // Attach watchdog interrupt - +1hr watchdog required
 8081e1c:	2400      	movs	r4, #0
 8081e1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8081e22:	9400      	str	r4, [sp, #0]
 8081e24:	2201      	movs	r2, #1
 8081e26:	493c      	ldr	r1, [pc, #240]	; (8081f18 <setup+0x398>)
 8081e28:	2011      	movs	r0, #17
 8081e2a:	f001 fbe9 	bl	8083600 <_Z15attachInterrupttPFvvE13InterruptModeah>

  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
 8081e2e:	782b      	ldrb	r3, [r5, #0]
 8081e30:	b15b      	cbz	r3, 8081e4a <setup+0x2ca>
 8081e32:	4b3a      	ldr	r3, [pc, #232]	; (8081f1c <setup+0x39c>)
 8081e34:	a802      	add	r0, sp, #8
 8081e36:	781b      	ldrb	r3, [r3, #0]
 8081e38:	4632      	mov	r2, r6
 8081e3a:	f88d 4000 	strb.w	r4, [sp]
 8081e3e:	4938      	ldr	r1, [pc, #224]	; (8081f20 <setup+0x3a0>)
 8081e40:	f7fe febe 	bl	8080bc0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.42>
 8081e44:	a803      	add	r0, sp, #12
 8081e46:	f7ff f9d3 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081e4a:	f000 fbbf 	bl	80825cc <HAL_Timer_Get_Milli_Seconds>
  lastPublish = millis();
 8081e4e:	4b35      	ldr	r3, [pc, #212]	; (8081f24 <setup+0x3a4>)
 8081e50:	6018      	str	r0, [r3, #0]
  pinMode(hardResetPin,OUTPUT);                                   // Pin used to power-cycle device

  petWatchdog();                                                        // Need to pet the watchdog as we are waking from sleep

  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
 8081e52:	a804      	add	r0, sp, #16
 8081e54:	f001 ffad 	bl	8083db2 <_ZN6StringD1Ev>

  attachInterrupt(wakeUpPin,watchdogISR,RISING);                        // Attach watchdog interrupt - +1hr watchdog required

  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
  lastPublish = millis();
}
 8081e58:	b039      	add	sp, #228	; 0xe4
 8081e5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8081e5e:	bf00      	nop
 8081e60:	08087b7c 	.word	0x08087b7c
 8081e64:	20000208 	.word	0x20000208
 8081e68:	080812fd 	.word	0x080812fd
 8081e6c:	20000240 	.word	0x20000240
 8081e70:	08087e48 	.word	0x08087e48
 8081e74:	20000280 	.word	0x20000280
 8081e78:	08087e4f 	.word	0x08087e4f
 8081e7c:	20000070 	.word	0x20000070
 8081e80:	08087e5a 	.word	0x08087e5a
 8081e84:	200002f6 	.word	0x200002f6
 8081e88:	08087e62 	.word	0x08087e62
 8081e8c:	200002bc 	.word	0x200002bc
 8081e90:	08087e6d 	.word	0x08087e6d
 8081e94:	2000015c 	.word	0x2000015c
 8081e98:	08087e7a 	.word	0x08087e7a
 8081e9c:	200002e5 	.word	0x200002e5
 8081ea0:	08087e86 	.word	0x08087e86
 8081ea4:	2000029c 	.word	0x2000029c
 8081ea8:	08087e8f 	.word	0x08087e8f
 8081eac:	200002ac 	.word	0x200002ac
 8081eb0:	08087e98 	.word	0x08087e98
 8081eb4:	200002bd 	.word	0x200002bd
 8081eb8:	08087e9c 	.word	0x08087e9c
 8081ebc:	20000220 	.word	0x20000220
 8081ec0:	08087ea5 	.word	0x08087ea5
 8081ec4:	08080b9d 	.word	0x08080b9d
 8081ec8:	08087eb0 	.word	0x08087eb0
 8081ecc:	08081b21 	.word	0x08081b21
 8081ed0:	08087ebc 	.word	0x08087ebc
 8081ed4:	080815dd 	.word	0x080815dd
 8081ed8:	08087ec6 	.word	0x08087ec6
 8081edc:	080813d1 	.word	0x080813d1
 8081ee0:	08087ed3 	.word	0x08087ed3
 8081ee4:	08081485 	.word	0x08081485
 8081ee8:	08087ede 	.word	0x08087ede
 8081eec:	08081531 	.word	0x08081531
 8081ef0:	08087eeb 	.word	0x08087eeb
 8081ef4:	20000306 	.word	0x20000306
 8081ef8:	2000018a 	.word	0x2000018a
 8081efc:	200002f5 	.word	0x200002f5
 8081f00:	2000018c 	.word	0x2000018c
 8081f04:	08087ef7 	.word	0x08087ef7
 8081f08:	20000230 	.word	0x20000230
 8081f0c:	2000016c 	.word	0x2000016c
 8081f10:	200002e0 	.word	0x200002e0
 8081f14:	08087f15 	.word	0x08087f15
 8081f18:	08080b91 	.word	0x08080b91
 8081f1c:	20000174 	.word	0x20000174
 8081f20:	08087f27 	.word	0x08087f27
 8081f24:	20000218 	.word	0x20000218

08081f28 <_GLOBAL__sub_I_bme>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8081f28:	4b1a      	ldr	r3, [pc, #104]	; (8081f94 <_GLOBAL__sub_I_bme+0x6c>)
    delay(1000);
    digitalWrite(hardResetPin,HIGH);                                  // This will cut all power to the Electron AND the carrir board
    return 1;                                                         // Unfortunately, this will never be sent
  }
  else return 0;
 8081f2a:	b570      	push	{r4, r5, r6, lr}
 8081f2c:	2400      	movs	r4, #0
 8081f2e:	601c      	str	r4, [r3, #0]
 8081f30:	4b19      	ldr	r3, [pc, #100]	; (8081f98 <_GLOBAL__sub_I_bme+0x70>)
 8081f32:	2501      	movs	r5, #1
 8081f34:	701d      	strb	r5, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 8081f36:	f000 fb89 	bl	808264c <HAL_Pin_Map>
};

#define SEALEVELPRESSURE_HPA (1013.25)              // Universal variables
#define MEMORYMAPVERSION 1                          // Lets us know if we need to reinitialize the memory map

Adafruit_BME680 bme;                                // Instantiate the I2C library
 8081f3a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8081f3e:	4817      	ldr	r0, [pc, #92]	; (8081f9c <_GLOBAL__sub_I_bme+0x74>)
 8081f40:	f000 f94e 	bl	80821e0 <_ZN15Adafruit_BME680C1Ea>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8081f44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8081f48:	4b15      	ldr	r3, [pc, #84]	; (8081fa0 <_GLOBAL__sub_I_bme+0x78>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8081f4a:	2002      	movs	r0, #2
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8081f4c:	701c      	strb	r4, [r3, #0]
 8081f4e:	805c      	strh	r4, [r3, #2]
 8081f50:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8081f52:	f000 fcd3 	bl	80828fc <set_system_mode>

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);          // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
 8081f56:	4621      	mov	r1, r4
 8081f58:	4628      	mov	r0, r5
 8081f5a:	f000 fce7 	bl	808292c <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
 8081f5e:	4629      	mov	r1, r5
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;             // Prototype for the fuel gauge (included in Particle core library)
 8081f60:	4d10      	ldr	r5, [pc, #64]	; (8081fa4 <_GLOBAL__sub_I_bme+0x7c>)
 8081f62:	2004      	movs	r0, #4
 8081f64:	f000 fb12 	bl	808258c <HAL_Feature_Set>
 8081f68:	4e0f      	ldr	r6, [pc, #60]	; (8081fa8 <_GLOBAL__sub_I_bme+0x80>)
 8081f6a:	4621      	mov	r1, r4
 8081f6c:	4628      	mov	r0, r5
 8081f6e:	f001 fa69 	bl	8083444 <_ZN9FuelGaugeC1Eb>
 8081f72:	4628      	mov	r0, r5
PMIC power;                           // Initalize the PMIC class so you can call the Power Management functions below.
 8081f74:	4d0d      	ldr	r5, [pc, #52]	; (8081fac <_GLOBAL__sub_I_bme+0x84>)

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);          // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;             // Prototype for the fuel gauge (included in Particle core library)
 8081f76:	4632      	mov	r2, r6
 8081f78:	490d      	ldr	r1, [pc, #52]	; (8081fb0 <_GLOBAL__sub_I_bme+0x88>)
 8081f7a:	f002 fba7 	bl	80846cc <__aeabi_atexit>
PMIC power;                           // Initalize the PMIC class so you can call the Power Management functions below.
 8081f7e:	4621      	mov	r1, r4
 8081f80:	4628      	mov	r0, r5
 8081f82:	f001 fc38 	bl	80837f6 <_ZN4PMICC1Eb>
 8081f86:	4632      	mov	r2, r6
 8081f88:	4628      	mov	r0, r5
    delay(1000);
    digitalWrite(hardResetPin,HIGH);                                  // This will cut all power to the Electron AND the carrir board
    return 1;                                                         // Unfortunately, this will never be sent
  }
  else return 0;
 8081f8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);          // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;             // Prototype for the fuel gauge (included in Particle core library)
PMIC power;                           // Initalize the PMIC class so you can call the Power Management functions below.
 8081f8e:	4909      	ldr	r1, [pc, #36]	; (8081fb4 <_GLOBAL__sub_I_bme+0x8c>)
 8081f90:	f002 bb9c 	b.w	80846cc <__aeabi_atexit>
 8081f94:	20000314 	.word	0x20000314
 8081f98:	20000174 	.word	0x20000174
 8081f9c:	2000018c 	.word	0x2000018c
 8081fa0:	20000176 	.word	0x20000176
 8081fa4:	20000180 	.word	0x20000180
 8081fa8:	20000158 	.word	0x20000158
 8081fac:	20000209 	.word	0x20000209
 8081fb0:	08083463 	.word	0x08083463
 8081fb4:	08083815 	.word	0x08083815

08081fb8 <_ZL10delay_msecm>:
  return reply;
}


static void delay_msec(uint32_t ms){
  delay(ms);
 8081fb8:	f000 bde4 	b.w	8082b84 <delay>

08081fbc <_ZL9i2c_writehhPht>:
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over I2C
*/
/**************************************************************************/
int8_t i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8081fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081fbe:	4607      	mov	r7, r0
 8081fc0:	4614      	mov	r4, r2
 8081fc2:	461d      	mov	r5, r3
 8081fc4:	460e      	mov	r6, r1
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif
  Wire.beginTransmission((uint8_t)dev_id);
 8081fc6:	f002 fafb 	bl	80845c0 <_Z19__fetch_global_Wirev>
 8081fca:	4639      	mov	r1, r7
 8081fcc:	f001 faf3 	bl	80835b6 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg_addr);
 8081fd0:	f002 faf6 	bl	80845c0 <_Z19__fetch_global_Wirev>
 8081fd4:	6803      	ldr	r3, [r0, #0]
 8081fd6:	4631      	mov	r1, r6
 8081fd8:	689b      	ldr	r3, [r3, #8]
 8081fda:	4798      	blx	r3
 8081fdc:	4425      	add	r5, r4
  while (len--) {
 8081fde:	42ac      	cmp	r4, r5
 8081fe0:	d007      	beq.n	8081ff2 <_ZL9i2c_writehhPht+0x36>
    Wire.write(*reg_data);
 8081fe2:	f002 faed 	bl	80845c0 <_Z19__fetch_global_Wirev>
 8081fe6:	6803      	ldr	r3, [r0, #0]
 8081fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8081fec:	689b      	ldr	r3, [r3, #8]
 8081fee:	4798      	blx	r3
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif
  Wire.beginTransmission((uint8_t)dev_id);
  Wire.write((uint8_t)reg_addr);
  while (len--) {
 8081ff0:	e7f5      	b.n	8081fde <_ZL9i2c_writehhPht+0x22>
#ifdef BME680_DEBUG
    Serial.print("0x"); Serial.print(*reg_data, HEX); Serial.print(", ");
#endif
    reg_data++;
  }
  Wire.endTransmission();
 8081ff2:	f002 fae5 	bl	80845c0 <_Z19__fetch_global_Wirev>
 8081ff6:	f001 fae9 	bl	80835cc <_ZN7TwoWire15endTransmissionEv>
#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
 8081ffa:	2000      	movs	r0, #0
 8081ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08082000 <_ZL12spi_transferh>:
#endif
  return 0;
}


static uint8_t spi_transfer(uint8_t x) {
 8082000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (_BME680_SoftwareSPI_SCK == -1)
 8082004:	4d1b      	ldr	r5, [pc, #108]	; (8082074 <_ZL12spi_transferh+0x74>)
#endif
  return 0;
}


static uint8_t spi_transfer(uint8_t x) {
 8082006:	4680      	mov	r8, r0
  if (_BME680_SoftwareSPI_SCK == -1)
 8082008:	f995 3000 	ldrsb.w	r3, [r5]
 808200c:	3301      	adds	r3, #1
 808200e:	d105      	bne.n	808201c <_ZL12spi_transferh+0x1c>
    return SPI.transfer(x);
 8082010:	4601      	mov	r1, r0
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
      reply |= 1;
  }
  return reply;
}
 8082012:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
}


static uint8_t spi_transfer(uint8_t x) {
  if (_BME680_SoftwareSPI_SCK == -1)
    return SPI.transfer(x);
 8082016:	4818      	ldr	r0, [pc, #96]	; (8082078 <_ZL12spi_transferh+0x78>)
 8082018:	f001 bec2 	b.w	8083da0 <_ZN8SPIClass8transferEh>
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
 808201c:	f8df 905c 	ldr.w	r9, [pc, #92]	; 808207c <_ZL12spi_transferh+0x7c>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 8082020:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8082080 <_ZL12spi_transferh+0x80>
 8082024:	2607      	movs	r6, #7
 8082026:	2400      	movs	r4, #0
  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
 8082028:	f995 0000 	ldrsb.w	r0, [r5]
 808202c:	2100      	movs	r1, #0
 808202e:	b280      	uxth	r0, r0
 8082030:	f002 fa85 	bl	808453e <digitalWrite>
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
 8082034:	2701      	movs	r7, #1
 8082036:	f999 0000 	ldrsb.w	r0, [r9]
 808203a:	fa07 f106 	lsl.w	r1, r7, r6
 808203e:	ea01 0108 	and.w	r1, r1, r8
 8082042:	b280      	uxth	r0, r0
 8082044:	f002 fa7b 	bl	808453e <digitalWrite>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
 8082048:	f995 0000 	ldrsb.w	r0, [r5]
 808204c:	4639      	mov	r1, r7
 808204e:	b280      	uxth	r0, r0
 8082050:	f002 fa75 	bl	808453e <digitalWrite>
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 8082054:	f99a 0000 	ldrsb.w	r0, [sl]

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
 8082058:	0064      	lsls	r4, r4, #1
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 808205a:	b280      	uxth	r0, r0

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
 808205c:	b2e4      	uxtb	r4, r4
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 808205e:	f002 fa87 	bl	8084570 <digitalRead>
 8082062:	b100      	cbz	r0, 8082066 <_ZL12spi_transferh+0x66>
      reply |= 1;
 8082064:	433c      	orrs	r4, r7
    return SPI.transfer(x);

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
 8082066:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 808206a:	d2dd      	bcs.n	8082028 <_ZL12spi_transferh+0x28>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
      reply |= 1;
  }
  return reply;
}
 808206c:	4620      	mov	r0, r4
 808206e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8082072:	bf00      	nop
 8082074:	20000319 	.word	0x20000319
 8082078:	2000084c 	.word	0x2000084c
 808207c:	2000031a 	.word	0x2000031a
 8082080:	20000318 	.word	0x20000318

08082084 <_ZL9spi_writehhPht>:
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8082084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8082088:	461f      	mov	r7, r3
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
 808208a:	4b1b      	ldr	r3, [pc, #108]	; (80820f8 <_ZL9spi_writehhPht+0x74>)
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 808208c:	4616      	mov	r6, r2
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
 808208e:	f993 2000 	ldrsb.w	r2, [r3]
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8082092:	4605      	mov	r5, r0
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
 8082094:	3201      	adds	r2, #1
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8082096:	4688      	mov	r8, r1
 8082098:	461c      	mov	r4, r3
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
 808209a:	d10e      	bne.n	80820ba <_ZL9spi_writehhPht+0x36>
    SPI.begin();
 808209c:	4817      	ldr	r0, [pc, #92]	; (80820fc <_ZL9spi_writehhPht+0x78>)
 808209e:	f001 fe17 	bl	8083cd0 <_ZN8SPIClass5beginEv>
    SPI.setClockDivider(BME680_DEFAULT_SPIFREQ);
 80820a2:	2140      	movs	r1, #64	; 0x40
 80820a4:	4815      	ldr	r0, [pc, #84]	; (80820fc <_ZL9spi_writehhPht+0x78>)
 80820a6:	f001 fe67 	bl	8083d78 <_ZN8SPIClass15setClockDividerEh>
    SPI.setBitOrder(MSBFIRST);
 80820aa:	2101      	movs	r1, #1
 80820ac:	4813      	ldr	r0, [pc, #76]	; (80820fc <_ZL9spi_writehhPht+0x78>)
 80820ae:	f001 fe14 	bl	8083cda <_ZN8SPIClass11setBitOrderEh>
    SPI.setDataMode(SPI_MODE0);
 80820b2:	2100      	movs	r1, #0
 80820b4:	4811      	ldr	r0, [pc, #68]	; (80820fc <_ZL9spi_writehhPht+0x78>)
 80820b6:	f001 fe13 	bl	8083ce0 <_ZN8SPIClass11setDataModeEh>
    //SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  digitalWrite(cspin, LOW);
 80820ba:	b2ad      	uxth	r5, r5
 80820bc:	2100      	movs	r1, #0
 80820be:	4628      	mov	r0, r5
 80820c0:	f002 fa3d 	bl	808453e <digitalWrite>

  spi_transfer(reg_addr);
 80820c4:	4640      	mov	r0, r8
 80820c6:	f7ff ff9b 	bl	8082000 <_ZL12spi_transferh>
 80820ca:	4437      	add	r7, r6
  while (len--) {
 80820cc:	42be      	cmp	r6, r7
 80820ce:	d004      	beq.n	80820da <_ZL9spi_writehhPht+0x56>
    spi_transfer(*reg_data);
 80820d0:	f816 0b01 	ldrb.w	r0, [r6], #1
 80820d4:	f7ff ff94 	bl	8082000 <_ZL12spi_transferh>
  }

  digitalWrite(cspin, LOW);

  spi_transfer(reg_addr);
  while (len--) {
 80820d8:	e7f8      	b.n	80820cc <_ZL9spi_writehhPht+0x48>
    Serial.print("0x"); Serial.print(*reg_data, HEX); Serial.print(", ");
#endif
    reg_data++;
  }

  digitalWrite(cspin, HIGH);
 80820da:	2101      	movs	r1, #1
 80820dc:	4628      	mov	r0, r5
 80820de:	f002 fa2e 	bl	808453e <digitalWrite>

  if (_BME680_SoftwareSPI_SCK == -1) {
 80820e2:	f994 3000 	ldrsb.w	r3, [r4]
 80820e6:	3301      	adds	r3, #1
 80820e8:	d102      	bne.n	80820f0 <_ZL9spi_writehhPht+0x6c>
    SPI.endTransaction();
 80820ea:	4804      	ldr	r0, [pc, #16]	; (80820fc <_ZL9spi_writehhPht+0x78>)
 80820ec:	f001 fdfb 	bl	8083ce6 <_ZN8SPIClass14endTransactionEv>

#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
 80820f0:	2000      	movs	r0, #0
 80820f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80820f6:	bf00      	nop
 80820f8:	20000319 	.word	0x20000319
 80820fc:	2000084c 	.word	0x2000084c

08082100 <_ZL8spi_readhhPht>:
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8082100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8082104:	461f      	mov	r7, r3
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
 8082106:	4b1c      	ldr	r3, [pc, #112]	; (8082178 <_ZL8spi_readhhPht+0x78>)
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8082108:	4616      	mov	r6, r2
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
 808210a:	f993 2000 	ldrsb.w	r2, [r3]
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 808210e:	4605      	mov	r5, r0
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
 8082110:	3201      	adds	r2, #1
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8082112:	4688      	mov	r8, r1
 8082114:	461c      	mov	r4, r3
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
 8082116:	d10e      	bne.n	8082136 <_ZL8spi_readhhPht+0x36>
    SPI.begin();
 8082118:	4818      	ldr	r0, [pc, #96]	; (808217c <_ZL8spi_readhhPht+0x7c>)
 808211a:	f001 fdd9 	bl	8083cd0 <_ZN8SPIClass5beginEv>
    SPI.setClockDivider(BME680_DEFAULT_SPIFREQ);
 808211e:	2140      	movs	r1, #64	; 0x40
 8082120:	4816      	ldr	r0, [pc, #88]	; (808217c <_ZL8spi_readhhPht+0x7c>)
 8082122:	f001 fe29 	bl	8083d78 <_ZN8SPIClass15setClockDividerEh>
    SPI.setBitOrder(MSBFIRST);
 8082126:	2101      	movs	r1, #1
 8082128:	4814      	ldr	r0, [pc, #80]	; (808217c <_ZL8spi_readhhPht+0x7c>)
 808212a:	f001 fdd6 	bl	8083cda <_ZN8SPIClass11setBitOrderEh>
    SPI.setDataMode(SPI_MODE0);
 808212e:	2100      	movs	r1, #0
 8082130:	4812      	ldr	r0, [pc, #72]	; (808217c <_ZL8spi_readhhPht+0x7c>)
 8082132:	f001 fdd5 	bl	8083ce0 <_ZN8SPIClass11setDataModeEh>
    //SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  digitalWrite(cspin, LOW);
 8082136:	b2ad      	uxth	r5, r5
 8082138:	2100      	movs	r1, #0
 808213a:	4628      	mov	r0, r5
 808213c:	f002 f9ff 	bl	808453e <digitalWrite>

  spi_transfer(reg_addr | 0x80);
 8082140:	f048 0080 	orr.w	r0, r8, #128	; 0x80
 8082144:	f7ff ff5c 	bl	8082000 <_ZL12spi_transferh>
 8082148:	4437      	add	r7, r6

  while (len--) {
 808214a:	42be      	cmp	r6, r7
 808214c:	d005      	beq.n	808215a <_ZL8spi_readhhPht+0x5a>
    *reg_data = spi_transfer(0x00);
 808214e:	2000      	movs	r0, #0
 8082150:	f7ff ff56 	bl	8082000 <_ZL12spi_transferh>
 8082154:	f806 0b01 	strb.w	r0, [r6], #1

  digitalWrite(cspin, LOW);

  spi_transfer(reg_addr | 0x80);

  while (len--) {
 8082158:	e7f7      	b.n	808214a <_ZL8spi_readhhPht+0x4a>
    Serial.print("0x"); Serial.print(*reg_data, HEX); Serial.print(", ");
#endif
    reg_data++;
  }

  digitalWrite(cspin, HIGH);
 808215a:	2101      	movs	r1, #1
 808215c:	4628      	mov	r0, r5
 808215e:	f002 f9ee 	bl	808453e <digitalWrite>

  if (_BME680_SoftwareSPI_SCK == -1) {
 8082162:	f994 3000 	ldrsb.w	r3, [r4]
 8082166:	3301      	adds	r3, #1
 8082168:	d102      	bne.n	8082170 <_ZL8spi_readhhPht+0x70>
    SPI.endTransaction();
 808216a:	4804      	ldr	r0, [pc, #16]	; (808217c <_ZL8spi_readhhPht+0x7c>)
 808216c:	f001 fdbb 	bl	8083ce6 <_ZN8SPIClass14endTransactionEv>

#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
 8082170:	2000      	movs	r0, #0
 8082172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082176:	bf00      	nop
 8082178:	20000319 	.word	0x20000319
 808217c:	2000084c 	.word	0x2000084c

08082180 <_ZL8i2c_readhhPht>:
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over I2C
*/
/**************************************************************************/
int8_t i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8082180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082182:	4604      	mov	r4, r0
 8082184:	4615      	mov	r5, r2
 8082186:	461e      	mov	r6, r3
 8082188:	460f      	mov	r7, r1
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  Wire.beginTransmission((uint8_t)dev_id);
 808218a:	f002 fa19 	bl	80845c0 <_Z19__fetch_global_Wirev>
 808218e:	4621      	mov	r1, r4
 8082190:	f001 fa11 	bl	80835b6 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg_addr);
 8082194:	f002 fa14 	bl	80845c0 <_Z19__fetch_global_Wirev>
 8082198:	6803      	ldr	r3, [r0, #0]
 808219a:	4639      	mov	r1, r7
 808219c:	689b      	ldr	r3, [r3, #8]
 808219e:	4798      	blx	r3
  Wire.endTransmission();
 80821a0:	f002 fa0e 	bl	80845c0 <_Z19__fetch_global_Wirev>
 80821a4:	f001 fa12 	bl	80835cc <_ZN7TwoWire15endTransmissionEv>
  if (len != Wire.requestFrom((uint8_t)dev_id, (byte)len)) {
 80821a8:	f002 fa0a 	bl	80845c0 <_Z19__fetch_global_Wirev>
 80821ac:	4621      	mov	r1, r4
 80821ae:	b2f2      	uxtb	r2, r6
 80821b0:	f001 f9f9 	bl	80835a6 <_ZN7TwoWire11requestFromEhh>
 80821b4:	b284      	uxth	r4, r0
 80821b6:	42a6      	cmp	r6, r4
 80821b8:	d10d      	bne.n	80821d6 <_ZL8i2c_readhhPht+0x56>
#ifdef BME680_DEBUG
    Serial.print("Failed to read "); Serial.print(len); Serial.print(" bytes from "); Serial.println(dev_id, HEX);
#endif
    return 1;
  }
  while (len--) {
 80821ba:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80821be:	3c01      	subs	r4, #1
 80821c0:	b2a4      	uxth	r4, r4
 80821c2:	42b4      	cmp	r4, r6
 80821c4:	d009      	beq.n	80821da <_ZL8i2c_readhhPht+0x5a>
    *reg_data = (uint8_t)Wire.read();
 80821c6:	f002 f9fb 	bl	80845c0 <_Z19__fetch_global_Wirev>
 80821ca:	6803      	ldr	r3, [r0, #0]
 80821cc:	695b      	ldr	r3, [r3, #20]
 80821ce:	4798      	blx	r3
 80821d0:	f805 0b01 	strb.w	r0, [r5], #1
 80821d4:	e7f3      	b.n	80821be <_ZL8i2c_readhhPht+0x3e>
  Wire.endTransmission();
  if (len != Wire.requestFrom((uint8_t)dev_id, (byte)len)) {
#ifdef BME680_DEBUG
    Serial.print("Failed to read "); Serial.print(len); Serial.print(" bytes from "); Serial.println(dev_id, HEX);
#endif
    return 1;
 80821d6:	2001      	movs	r0, #1
 80821d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  while (len--) {
 80821da:	2000      	movs	r0, #0
  }
#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
 80821dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080821e0 <_ZN15Adafruit_BME680C1Ea>:
/*!
    @brief  Instantiates sensor with Hardware SPI or I2C.
    @param  cspin SPI chip select. If not passed in, I2C will be used
*/
/**************************************************************************/
Adafruit_BME680::Adafruit_BME680(int8_t cspin)
 80821e0:	b510      	push	{r4, lr}
  : _cs(cspin)
  , _meas_end(0)
{
  _BME680_SoftwareSPI_MOSI = -1;
 80821e2:	4c08      	ldr	r4, [pc, #32]	; (8082204 <_ZN15Adafruit_BME680C1Ea+0x24>)
    @param  cspin SPI chip select. If not passed in, I2C will be used
*/
/**************************************************************************/
Adafruit_BME680::Adafruit_BME680(int8_t cspin)
  : _cs(cspin)
  , _meas_end(0)
 80821e4:	7701      	strb	r1, [r0, #28]
{
  _BME680_SoftwareSPI_MOSI = -1;
 80821e6:	21ff      	movs	r1, #255	; 0xff
 80821e8:	7021      	strb	r1, [r4, #0]
  _BME680_SoftwareSPI_MISO = -1;
 80821ea:	4c07      	ldr	r4, [pc, #28]	; (8082208 <_ZN15Adafruit_BME680C1Ea+0x28>)
    @param  cspin SPI chip select. If not passed in, I2C will be used
*/
/**************************************************************************/
Adafruit_BME680::Adafruit_BME680(int8_t cspin)
  : _cs(cspin)
  , _meas_end(0)
 80821ec:	2200      	movs	r2, #0
{
  _BME680_SoftwareSPI_MOSI = -1;
  _BME680_SoftwareSPI_MISO = -1;
 80821ee:	7021      	strb	r1, [r4, #0]
  _BME680_SoftwareSPI_SCK = -1;
 80821f0:	4c06      	ldr	r4, [pc, #24]	; (808220c <_ZN15Adafruit_BME680C1Ea+0x2c>)
    @param  cspin SPI chip select. If not passed in, I2C will be used
*/
/**************************************************************************/
Adafruit_BME680::Adafruit_BME680(int8_t cspin)
  : _cs(cspin)
  , _meas_end(0)
 80821f2:	6202      	str	r2, [r0, #32]
{
  _BME680_SoftwareSPI_MOSI = -1;
  _BME680_SoftwareSPI_MISO = -1;
  _BME680_SoftwareSPI_SCK = -1;
 80821f4:	7021      	strb	r1, [r4, #0]
  _filterEnabled = _tempEnabled = _humEnabled = _presEnabled = _gasEnabled = false;
 80821f6:	7502      	strb	r2, [r0, #20]
 80821f8:	74c2      	strb	r2, [r0, #19]
 80821fa:	7482      	strb	r2, [r0, #18]
 80821fc:	7442      	strb	r2, [r0, #17]
 80821fe:	7402      	strb	r2, [r0, #16]
}
 8082200:	bd10      	pop	{r4, pc}
 8082202:	bf00      	nop
 8082204:	2000031a 	.word	0x2000031a
 8082208:	20000318 	.word	0x20000318
 808220c:	20000319 	.word	0x20000319

08082210 <_ZN15Adafruit_BME6805beginEhb>:

    @param  addr Optional parameter for the I2C address of BME680. Default is 0x77
    @return True on sensor initialization success. False on failure.
*/
/**************************************************************************/
bool Adafruit_BME680::begin(uint8_t addr, bool initSettings) {
 8082210:	b570      	push	{r4, r5, r6, lr}
 8082212:	4604      	mov	r4, r0
  _i2caddr = addr;
 8082214:	7561      	strb	r1, [r4, #21]

  if (_cs == -1) {
 8082216:	f990 001c 	ldrsb.w	r0, [r0, #28]

    @param  addr Optional parameter for the I2C address of BME680. Default is 0x77
    @return True on sensor initialization success. False on failure.
*/
/**************************************************************************/
bool Adafruit_BME680::begin(uint8_t addr, bool initSettings) {
 808221a:	4615      	mov	r5, r2
  _i2caddr = addr;

  if (_cs == -1) {
 808221c:	1c42      	adds	r2, r0, #1

    @param  addr Optional parameter for the I2C address of BME680. Default is 0x77
    @return True on sensor initialization success. False on failure.
*/
/**************************************************************************/
bool Adafruit_BME680::begin(uint8_t addr, bool initSettings) {
 808221e:	460e      	mov	r6, r1
  _i2caddr = addr;

  if (_cs == -1) {
 8082220:	d10c      	bne.n	808223c <_ZN15Adafruit_BME6805beginEhb+0x2c>
    // i2c
    Wire.begin();
 8082222:	f002 f9cd 	bl	80845c0 <_Z19__fetch_global_Wirev>
 8082226:	f001 f9af 	bl	8083588 <_ZN7TwoWire5beginEv>

    gas_sensor.dev_id = addr;
    gas_sensor.intf = BME680_I2C_INTF;
 808222a:	2301      	movs	r3, #1
 808222c:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
    gas_sensor.read = &i2c_read;
 8082230:	4b34      	ldr	r3, [pc, #208]	; (8082304 <_ZN15Adafruit_BME6805beginEhb+0xf4>)

  if (_cs == -1) {
    // i2c
    Wire.begin();

    gas_sensor.dev_id = addr;
 8082232:	f884 6025 	strb.w	r6, [r4, #37]	; 0x25
    gas_sensor.intf = BME680_I2C_INTF;
    gas_sensor.read = &i2c_read;
 8082236:	66e3      	str	r3, [r4, #108]	; 0x6c
    gas_sensor.write = &i2c_write;
 8082238:	4b33      	ldr	r3, [pc, #204]	; (8082308 <_ZN15Adafruit_BME6805beginEhb+0xf8>)
 808223a:	e02d      	b.n	8082298 <_ZN15Adafruit_BME6805beginEhb+0x88>
  } else {
    digitalWrite(_cs, HIGH);
 808223c:	2101      	movs	r1, #1
 808223e:	b280      	uxth	r0, r0
 8082240:	f002 f97d 	bl	808453e <digitalWrite>
    pinMode(_cs, OUTPUT);
 8082244:	f994 001c 	ldrsb.w	r0, [r4, #28]
 8082248:	2101      	movs	r1, #1
 808224a:	b280      	uxth	r0, r0
 808224c:	f002 f966 	bl	808451c <pinMode>

    if (_BME680_SoftwareSPI_SCK == -1) {
 8082250:	4b2e      	ldr	r3, [pc, #184]	; (808230c <_ZN15Adafruit_BME6805beginEhb+0xfc>)
 8082252:	f993 0000 	ldrsb.w	r0, [r3]
 8082256:	1c43      	adds	r3, r0, #1
 8082258:	d103      	bne.n	8082262 <_ZN15Adafruit_BME6805beginEhb+0x52>
      // hardware SPI
      SPI.begin();
 808225a:	482d      	ldr	r0, [pc, #180]	; (8082310 <_ZN15Adafruit_BME6805beginEhb+0x100>)
 808225c:	f001 fd38 	bl	8083cd0 <_ZN8SPIClass5beginEv>
 8082260:	e011      	b.n	8082286 <_ZN15Adafruit_BME6805beginEhb+0x76>
    } else {
      // software SPI
      pinMode(_BME680_SoftwareSPI_SCK, OUTPUT);
 8082262:	2101      	movs	r1, #1
 8082264:	b280      	uxth	r0, r0
 8082266:	f002 f959 	bl	808451c <pinMode>
      pinMode(_BME680_SoftwareSPI_MOSI, OUTPUT);
 808226a:	4b2a      	ldr	r3, [pc, #168]	; (8082314 <_ZN15Adafruit_BME6805beginEhb+0x104>)
 808226c:	2101      	movs	r1, #1
 808226e:	f993 0000 	ldrsb.w	r0, [r3]
 8082272:	b280      	uxth	r0, r0
 8082274:	f002 f952 	bl	808451c <pinMode>
      pinMode(_BME680_SoftwareSPI_MISO, INPUT);
 8082278:	4b27      	ldr	r3, [pc, #156]	; (8082318 <_ZN15Adafruit_BME6805beginEhb+0x108>)
 808227a:	2100      	movs	r1, #0
 808227c:	f993 0000 	ldrsb.w	r0, [r3]
 8082280:	b280      	uxth	r0, r0
 8082282:	f002 f94b 	bl	808451c <pinMode>
    }

    gas_sensor.dev_id = _cs;
 8082286:	7f23      	ldrb	r3, [r4, #28]
 8082288:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    gas_sensor.intf = BME680_SPI_INTF;
 808228c:	2300      	movs	r3, #0
 808228e:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
    gas_sensor.read = &spi_read;
 8082292:	4b22      	ldr	r3, [pc, #136]	; (808231c <_ZN15Adafruit_BME6805beginEhb+0x10c>)
 8082294:	66e3      	str	r3, [r4, #108]	; 0x6c
    gas_sensor.write = &spi_write;
 8082296:	4b22      	ldr	r3, [pc, #136]	; (8082320 <_ZN15Adafruit_BME6805beginEhb+0x110>)
 8082298:	6723      	str	r3, [r4, #112]	; 0x70
  }

  gas_sensor.delay_ms = delay_msec;
 808229a:	4b22      	ldr	r3, [pc, #136]	; (8082324 <_ZN15Adafruit_BME6805beginEhb+0x114>)

  int8_t rslt = BME680_OK;
  rslt = bme680_init(&gas_sensor);
 808229c:	f104 0024 	add.w	r0, r4, #36	; 0x24
    gas_sensor.intf = BME680_SPI_INTF;
    gas_sensor.read = &spi_read;
    gas_sensor.write = &spi_write;
  }

  gas_sensor.delay_ms = delay_msec;
 80822a0:	6763      	str	r3, [r4, #116]	; 0x74

  int8_t rslt = BME680_OK;
  rslt = bme680_init(&gas_sensor);
 80822a2:	f7fe f810 	bl	80802c6 <bme680_init>
#ifdef BME680_DEBUG
  Serial.print("Result: "); Serial.println(rslt);
#endif

  if (rslt != BME680_OK)
 80822a6:	bb58      	cbnz	r0, 8082300 <_ZN15Adafruit_BME6805beginEhb+0xf0>
  Serial.print("Heat Range = "); Serial.println(gas_sensor.calib.res_heat_range);
  Serial.print("Heat Val = "); Serial.println(gas_sensor.calib.res_heat_val);
  Serial.print("SW Error = "); Serial.println(gas_sensor.calib.range_sw_err);
#endif

  if (initSettings) {
 80822a8:	b1e5      	cbz	r5, 80822e4 <_ZN15Adafruit_BME6805beginEhb+0xd4>
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_hum = oversample;
 80822aa:	2202      	movs	r2, #2
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_temp = oversample;
 80822ac:	2304      	movs	r3, #4
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_hum = oversample;
 80822ae:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;

  gas_sensor.tph_sett.filter = filtersize;
 80822b2:	f884 205f 	strb.w	r2, [r4, #95]	; 0x5f
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 80822b6:	f44f 72a0 	mov.w	r2, #320	; 0x140
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_temp = oversample;
 80822ba:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_pres = oversample;
 80822be:	2103      	movs	r1, #3
  gas_sensor.tph_sett.os_temp = oversample;

  if (oversample == BME680_OS_NONE)
    _tempEnabled = false;
  else
    _tempEnabled = true;
 80822c0:	2301      	movs	r3, #1
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 80822c2:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
  gas_sensor.gas_sett.heatr_dur = heaterTime;
 80822c6:	2296      	movs	r2, #150	; 0x96
  gas_sensor.tph_sett.os_temp = oversample;

  if (oversample == BME680_OS_NONE)
    _tempEnabled = false;
  else
    _tempEnabled = true;
 80822c8:	7463      	strb	r3, [r4, #17]
  gas_sensor.tph_sett.os_hum = oversample;

  if (oversample == BME680_OS_NONE)
    _humEnabled = false;
  else
    _humEnabled = true;
 80822ca:	74a3      	strb	r3, [r4, #18]
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_pres = oversample;
 80822cc:	f884 105e 	strb.w	r1, [r4, #94]	; 0x5e

  if (oversample == BME680_OS_NONE)
    _presEnabled = false;
  else
    _presEnabled = true;
 80822d0:	74e3      	strb	r3, [r4, #19]
  gas_sensor.tph_sett.filter = filtersize;

  if (filtersize == BME680_FILTER_SIZE_0)
    _filterEnabled = false;
  else
    _filterEnabled = true;
 80822d2:	7423      	strb	r3, [r4, #16]
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
  gas_sensor.gas_sett.heatr_dur = heaterTime;
 80822d4:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
    // disabled!
    gas_sensor.gas_sett.heatr_ctrl = BME680_DISABLE_HEATER;
    gas_sensor.gas_sett.run_gas = BME680_DISABLE_GAS_MEAS;
    _gasEnabled = false;
  } else {
    gas_sensor.gas_sett.heatr_ctrl = BME680_ENABLE_HEATER;
 80822d8:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 80822dc:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    _gasEnabled = true;
 80822e0:	7523      	strb	r3, [r4, #20]
 80822e2:	e009      	b.n	80822f8 <_ZN15Adafruit_BME6805beginEhb+0xe8>
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
  gas_sensor.gas_sett.heatr_dur = heaterTime;

  if ( (heaterTemp == 0) || (heaterTime == 0) ) {
    // disabled!
    gas_sensor.gas_sett.heatr_ctrl = BME680_DISABLE_HEATER;
 80822e4:	2308      	movs	r3, #8
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 80822e6:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
  gas_sensor.gas_sett.heatr_dur = heaterTime;
 80822ea:	f8a4 5066 	strh.w	r5, [r4, #102]	; 0x66

  if ( (heaterTemp == 0) || (heaterTime == 0) ) {
    // disabled!
    gas_sensor.gas_sett.heatr_ctrl = BME680_DISABLE_HEATER;
 80822ee:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    gas_sensor.gas_sett.run_gas = BME680_DISABLE_GAS_MEAS;
 80822f2:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
    _gasEnabled = false;
 80822f6:	7525      	strb	r5, [r4, #20]
    setGasHeater(320, 150); // 320*C for 150 ms
  } else {
    setGasHeater(0, 0);
  }
  // don't do anything till we request a reading
  gas_sensor.power_mode = BME680_FORCED_MODE;
 80822f8:	2001      	movs	r0, #1
 80822fa:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

  return true;
 80822fe:	bd70      	pop	{r4, r5, r6, pc}
#ifdef BME680_DEBUG
  Serial.print("Result: "); Serial.println(rslt);
#endif

  if (rslt != BME680_OK)
    return false;
 8082300:	2000      	movs	r0, #0
  }
  // don't do anything till we request a reading
  gas_sensor.power_mode = BME680_FORCED_MODE;

  return true;
}
 8082302:	bd70      	pop	{r4, r5, r6, pc}
 8082304:	08082181 	.word	0x08082181
 8082308:	08081fbd 	.word	0x08081fbd
 808230c:	20000319 	.word	0x20000319
 8082310:	2000084c 	.word	0x2000084c
 8082314:	2000031a 	.word	0x2000031a
 8082318:	20000318 	.word	0x20000318
 808231c:	08082101 	.word	0x08082101
 8082320:	08082085 	.word	0x08082085
 8082324:	08081fb9 	.word	0x08081fb9

08082328 <_ZN15Adafruit_BME68012beginReadingEv>:
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
  return endReading();
}

unsigned long Adafruit_BME680::beginReading(void) {
 8082328:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (_meas_end != 0) {
 808232a:	6a05      	ldr	r5, [r0, #32]
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
  return endReading();
}

unsigned long Adafruit_BME680::beginReading(void) {
 808232c:	4604      	mov	r4, r0
  if (_meas_end != 0) {
 808232e:	bb45      	cbnz	r5, 8082382 <_ZN15Adafruit_BME68012beginReadingEv+0x5a>
  uint8_t set_required_settings = 0;
  int8_t rslt;

  /* Select the power mode */
  /* Must be set before writing the sensor configuration */
  gas_sensor.power_mode = BME680_FORCED_MODE;
 8082330:	2301      	movs	r3, #1
 8082332:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
 8082336:	7ca3      	ldrb	r3, [r4, #18]
  if (_meas_end != 0) {
    /* A measurement is already in progress */
    return _meas_end;
  }

  uint8_t set_required_settings = 0;
 8082338:	7c40      	ldrb	r0, [r0, #17]
  gas_sensor.power_mode = BME680_FORCED_MODE;

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
 808233a:	b10b      	cbz	r3, 8082340 <_ZN15Adafruit_BME68012beginReadingEv+0x18>
    set_required_settings |= BME680_OSH_SEL;
 808233c:	f040 0004 	orr.w	r0, r0, #4
  if (_presEnabled)
 8082340:	7ce3      	ldrb	r3, [r4, #19]
 8082342:	b10b      	cbz	r3, 8082348 <_ZN15Adafruit_BME68012beginReadingEv+0x20>
    set_required_settings |= BME680_OSP_SEL;
 8082344:	f040 0002 	orr.w	r0, r0, #2
  if (_filterEnabled)
 8082348:	7c23      	ldrb	r3, [r4, #16]
 808234a:	b10b      	cbz	r3, 8082350 <_ZN15Adafruit_BME68012beginReadingEv+0x28>
    set_required_settings |= BME680_FILTER_SEL;
 808234c:	f040 0010 	orr.w	r0, r0, #16
  if (_gasEnabled)
 8082350:	7d23      	ldrb	r3, [r4, #20]
 8082352:	b10b      	cbz	r3, 8082358 <_ZN15Adafruit_BME68012beginReadingEv+0x30>
    set_required_settings |= BME680_GAS_SENSOR_SEL;
 8082354:	f040 00c8 	orr.w	r0, r0, #200	; 0xc8

  /* Set the desired sensor configuration */
#ifdef BME680_DEBUG
  Serial.println("Setting sensor settings");
#endif
  rslt = bme680_set_sensor_settings(set_required_settings, &gas_sensor);
 8082358:	f104 0624 	add.w	r6, r4, #36	; 0x24
 808235c:	4631      	mov	r1, r6
 808235e:	f7fe f8d2 	bl	8080506 <bme680_set_sensor_settings>
  if (rslt != BME680_OK)
 8082362:	b970      	cbnz	r0, 8082382 <_ZN15Adafruit_BME68012beginReadingEv+0x5a>

  /* Set the power mode */
#ifdef BME680_DEBUG
  Serial.println("Setting power mode");
#endif
  rslt = bme680_set_sensor_mode(&gas_sensor);
 8082364:	4630      	mov	r0, r6
 8082366:	f7fe f88f 	bl	8080488 <bme680_set_sensor_mode>
  if (rslt != BME680_OK)
 808236a:	b950      	cbnz	r0, 8082382 <_ZN15Adafruit_BME68012beginReadingEv+0x5a>
    return 0;

  /* Get the total measurement duration so as to sleep or wait till the
   * measurement is complete */
  uint16_t meas_period;
  bme680_get_profile_dur(&meas_period, &gas_sensor);
 808236c:	4631      	mov	r1, r6
 808236e:	f10d 0006 	add.w	r0, sp, #6
 8082372:	f7fe fa3f 	bl	80807f4 <bme680_get_profile_dur>
 8082376:	f000 f929 	bl	80825cc <HAL_Timer_Get_Milli_Seconds>
  _meas_end = millis() + meas_period;
 808237a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 808237e:	4405      	add	r5, r0
 8082380:	6225      	str	r5, [r4, #32]
  return _meas_end;
}
 8082382:	4628      	mov	r0, r5
 8082384:	b002      	add	sp, #8
 8082386:	bd70      	pop	{r4, r5, r6, pc}

08082388 <_ZN15Adafruit_BME68010endReadingEv>:

bool Adafruit_BME680::endReading(void) {
 8082388:	b530      	push	{r4, r5, lr}
 808238a:	b087      	sub	sp, #28
 808238c:	4605      	mov	r5, r0
  unsigned long meas_end = beginReading();
 808238e:	f7ff ffcb 	bl	8082328 <_ZN15Adafruit_BME68012beginReadingEv>
  if (meas_end == 0) {
 8082392:	4604      	mov	r4, r0
 8082394:	2800      	cmp	r0, #0
 8082396:	d049      	beq.n	808242c <_ZN15Adafruit_BME68010endReadingEv+0xa4>
 8082398:	f000 f918 	bl	80825cc <HAL_Timer_Get_Milli_Seconds>
    return false;
  }

  unsigned long now = millis();
  if (meas_end > now) {
 808239c:	4284      	cmp	r4, r0
 808239e:	d903      	bls.n	80823a8 <_ZN15Adafruit_BME68010endReadingEv+0x20>
    unsigned long meas_period = meas_end - now;
#ifdef BME680_DEBUG
    Serial.print("Waiting (ms) "); Serial.println(meas_period);
#endif
    delay(meas_period * 2); /* Delay till the measurement is ready */
 80823a0:	1a20      	subs	r0, r4, r0
 80823a2:	0040      	lsls	r0, r0, #1
 80823a4:	f000 fbee 	bl	8082b84 <delay>
  }
  _meas_end = 0; /* Allow new measurement to begin */
 80823a8:	2400      	movs	r4, #0
 80823aa:	622c      	str	r4, [r5, #32]
#endif

  struct bme680_field_data data;

  //Serial.println("Getting sensor data");
  int8_t rslt = bme680_get_sensor_data(&data, &gas_sensor);
 80823ac:	f105 0124 	add.w	r1, r5, #36	; 0x24
 80823b0:	a801      	add	r0, sp, #4
 80823b2:	f7fe fa53 	bl	808085c <bme680_get_sensor_data>
  if (rslt != BME680_OK)
 80823b6:	2800      	cmp	r0, #0
 80823b8:	d138      	bne.n	808242c <_ZN15Adafruit_BME68010endReadingEv+0xa4>
    return false;

  if (_tempEnabled) {
 80823ba:	7c6b      	ldrb	r3, [r5, #17]
 80823bc:	b15b      	cbz	r3, 80823d6 <_ZN15Adafruit_BME68010endReadingEv+0x4e>
    //Serial.print("Temp: "); Serial.println(data.temperature / 100.0, 2);
    temperature = data.temperature / 100.0;
 80823be:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 80823c2:	f003 fd5d 	bl	8085e80 <__aeabi_i2d>
 80823c6:	2200      	movs	r2, #0
 80823c8:	4b1a      	ldr	r3, [pc, #104]	; (8082434 <_ZN15Adafruit_BME68010endReadingEv+0xac>)
 80823ca:	f003 fee9 	bl	80861a0 <__aeabi_ddiv>
 80823ce:	f004 f86d 	bl	80864ac <__aeabi_d2f>
 80823d2:	6028      	str	r0, [r5, #0]
 80823d4:	e001      	b.n	80823da <_ZN15Adafruit_BME68010endReadingEv+0x52>
  } else {
    temperature = NAN;
 80823d6:	4b18      	ldr	r3, [pc, #96]	; (8082438 <_ZN15Adafruit_BME68010endReadingEv+0xb0>)
 80823d8:	602b      	str	r3, [r5, #0]
  }

  if (_humEnabled) {
 80823da:	7cab      	ldrb	r3, [r5, #18]
 80823dc:	b153      	cbz	r3, 80823f4 <_ZN15Adafruit_BME68010endReadingEv+0x6c>
    //Serial.print("Hum:  "); Serial.println(data.humidity / 1000.0, 2);
    humidity = data.humidity / 1000.0;
 80823de:	9804      	ldr	r0, [sp, #16]
 80823e0:	f003 fd3e 	bl	8085e60 <__aeabi_ui2d>
 80823e4:	2200      	movs	r2, #0
 80823e6:	4b15      	ldr	r3, [pc, #84]	; (808243c <_ZN15Adafruit_BME68010endReadingEv+0xb4>)
 80823e8:	f003 feda 	bl	80861a0 <__aeabi_ddiv>
 80823ec:	f004 f85e 	bl	80864ac <__aeabi_d2f>
 80823f0:	60a8      	str	r0, [r5, #8]
 80823f2:	e001      	b.n	80823f8 <_ZN15Adafruit_BME68010endReadingEv+0x70>
  } else {
    humidity = NAN;
 80823f4:	4b10      	ldr	r3, [pc, #64]	; (8082438 <_ZN15Adafruit_BME68010endReadingEv+0xb0>)
 80823f6:	60ab      	str	r3, [r5, #8]
  }

  if (_presEnabled) {
 80823f8:	7ceb      	ldrb	r3, [r5, #19]
 80823fa:	b123      	cbz	r3, 8082406 <_ZN15Adafruit_BME68010endReadingEv+0x7e>
    //Serial.print("Pres: "); Serial.println(data.pressure, 2);
    pressure = data.pressure;
 80823fc:	9803      	ldr	r0, [sp, #12]
 80823fe:	f004 f95b 	bl	80866b8 <__aeabi_ui2f>
 8082402:	6068      	str	r0, [r5, #4]
 8082404:	e001      	b.n	808240a <_ZN15Adafruit_BME68010endReadingEv+0x82>
  } else {
    pressure = NAN;
 8082406:	4b0c      	ldr	r3, [pc, #48]	; (8082438 <_ZN15Adafruit_BME68010endReadingEv+0xb0>)
 8082408:	606b      	str	r3, [r5, #4]
  }

  /* Avoid using measurements from an unstable heating setup */
  if (_gasEnabled) {
 808240a:	7d2c      	ldrb	r4, [r5, #20]
 808240c:	b15c      	cbz	r4, 8082426 <_ZN15Adafruit_BME68010endReadingEv+0x9e>
    if (data.status & BME680_HEAT_STAB_MSK) {
 808240e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8082412:	06db      	lsls	r3, r3, #27
 8082414:	d504      	bpl.n	8082420 <_ZN15Adafruit_BME68010endReadingEv+0x98>
      //Serial.print("Gas resistance: "); Serial.println(data.gas_resistance);
      gas_resistance = data.gas_resistance;
 8082416:	9805      	ldr	r0, [sp, #20]
 8082418:	f004 f94e 	bl	80866b8 <__aeabi_ui2f>
 808241c:	60e8      	str	r0, [r5, #12]
 808241e:	e005      	b.n	808242c <_ZN15Adafruit_BME68010endReadingEv+0xa4>
    } else {
      gas_resistance = 0;
 8082420:	2300      	movs	r3, #0
 8082422:	60eb      	str	r3, [r5, #12]
 8082424:	e002      	b.n	808242c <_ZN15Adafruit_BME68010endReadingEv+0xa4>
      //Serial.println("Gas reading unstable!");
    }
  } else {
    gas_resistance = NAN; 
 8082426:	4b04      	ldr	r3, [pc, #16]	; (8082438 <_ZN15Adafruit_BME68010endReadingEv+0xb0>)
  }

  return true;
 8082428:	2401      	movs	r4, #1
    } else {
      gas_resistance = 0;
      //Serial.println("Gas reading unstable!");
    }
  } else {
    gas_resistance = NAN; 
 808242a:	60eb      	str	r3, [r5, #12]
  }

  return true;
}
 808242c:	4620      	mov	r0, r4
 808242e:	b007      	add	sp, #28
 8082430:	bd30      	pop	{r4, r5, pc}
 8082432:	bf00      	nop
 8082434:	40590000 	.word	0x40590000
 8082438:	7fc00000 	.word	0x7fc00000
 808243c:	408f4000 	.word	0x408f4000

08082440 <_ZN15Adafruit_BME68014performReadingEv>:

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
  return endReading();
 8082440:	f7ff bfa2 	b.w	8082388 <_ZN15Adafruit_BME68010endReadingEv>
 8082444:	0000      	movs	r0, r0
	...

08082448 <_ZN15Adafruit_BME68012readAltitudeEf>:
    @param  seaLevel      Sea-level pressure in hPa
    @return Altitude in meters
*/
/**************************************************************************/
float Adafruit_BME680::readAltitude(float seaLevel)
{
 8082448:	b538      	push	{r3, r4, r5, lr}
 808244a:	4605      	mov	r5, r0
 808244c:	460c      	mov	r4, r1
    @brief Performs a reading and returns the barometric pressure.
    @return Barometic pressure in Pascals
*/
/**************************************************************************/
float Adafruit_BME680::readPressure(void) {
  performReading();
 808244e:	f7ff fff7 	bl	8082440 <_ZN15Adafruit_BME68014performReadingEv>
    // Note that using the equation from wikipedia can give bad results
    // at high altitude. See this thread for more information:
    //  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

    float atmospheric = readPressure() / 100.0F;
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
 8082452:	6868      	ldr	r0, [r5, #4]
 8082454:	4912      	ldr	r1, [pc, #72]	; (80824a0 <_ZN15Adafruit_BME68012readAltitudeEf+0x58>)
 8082456:	f004 fa3b 	bl	80868d0 <__aeabi_fdiv>
 808245a:	4621      	mov	r1, r4
 808245c:	f004 fa38 	bl	80868d0 <__aeabi_fdiv>
 8082460:	f003 fd20 	bl	8085ea4 <__aeabi_f2d>
 8082464:	a30a      	add	r3, pc, #40	; (adr r3, 8082490 <_ZN15Adafruit_BME68012readAltitudeEf+0x48>)
 8082466:	e9d3 2300 	ldrd	r2, r3, [r3]
 808246a:	f002 fa81 	bl	8084970 <pow>
 808246e:	4602      	mov	r2, r0
 8082470:	460b      	mov	r3, r1
 8082472:	2000      	movs	r0, #0
 8082474:	490b      	ldr	r1, [pc, #44]	; (80824a4 <_ZN15Adafruit_BME68012readAltitudeEf+0x5c>)
 8082476:	f003 fbb5 	bl	8085be4 <__aeabi_dsub>
 808247a:	a307      	add	r3, pc, #28	; (adr r3, 8082498 <_ZN15Adafruit_BME68012readAltitudeEf+0x50>)
 808247c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8082480:	f003 fd64 	bl	8085f4c <__aeabi_dmul>
 8082484:	f004 f812 	bl	80864ac <__aeabi_d2f>
}
 8082488:	bd38      	pop	{r3, r4, r5, pc}
 808248a:	bf00      	nop
 808248c:	f3af 8000 	nop.w
 8082490:	1a36e2eb 	.word	0x1a36e2eb
 8082494:	3fc85bc0 	.word	0x3fc85bc0
 8082498:	00000000 	.word	0x00000000
 808249c:	40e5a540 	.word	0x40e5a540
 80824a0:	42c80000 	.word	0x42c80000
 80824a4:	3ff00000 	.word	0x3ff00000

080824a8 <_ZN15Adafruit_BME68012setGasHeaterEtt>:
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 80824a8:	f8a0 1064 	strh.w	r1, [r0, #100]	; 0x64
  gas_sensor.gas_sett.heatr_dur = heaterTime;
 80824ac:	f8a0 2066 	strh.w	r2, [r0, #102]	; 0x66

  if ( (heaterTemp == 0) || (heaterTime == 0) ) {
 80824b0:	b101      	cbz	r1, 80824b4 <_ZN15Adafruit_BME68012setGasHeaterEtt+0xc>
 80824b2:	b922      	cbnz	r2, 80824be <_ZN15Adafruit_BME68012setGasHeaterEtt+0x16>
    // disabled!
    gas_sensor.gas_sett.heatr_ctrl = BME680_DISABLE_HEATER;
 80824b4:	2308      	movs	r3, #8
 80824b6:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
    gas_sensor.gas_sett.run_gas = BME680_DISABLE_GAS_MEAS;
 80824ba:	2300      	movs	r3, #0
 80824bc:	e003      	b.n	80824c6 <_ZN15Adafruit_BME68012setGasHeaterEtt+0x1e>
    _gasEnabled = false;
  } else {
    gas_sensor.gas_sett.heatr_ctrl = BME680_ENABLE_HEATER;
 80824be:	2300      	movs	r3, #0
 80824c0:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 80824c4:	2301      	movs	r3, #1
 80824c6:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
    _gasEnabled = true;
 80824ca:	7503      	strb	r3, [r0, #20]
  }
  return true;
}
 80824cc:	2001      	movs	r0, #1
 80824ce:	4770      	bx	lr

080824d0 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>:
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 80824d0:	2905      	cmp	r1, #5
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
 80824d2:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 80824d4:	d807      	bhi.n	80824e6 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x16>

  gas_sensor.tph_sett.os_temp = oversample;
 80824d6:	f880 105d 	strb.w	r1, [r0, #93]	; 0x5d
 80824da:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
 80824dc:	b909      	cbnz	r1, 80824e2 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x12>
    _tempEnabled = false;
 80824de:	7459      	strb	r1, [r3, #17]
 80824e0:	4770      	bx	lr
  else
    _tempEnabled = true;
 80824e2:	7458      	strb	r0, [r3, #17]
 80824e4:	4770      	bx	lr
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 80824e6:	2000      	movs	r0, #0
    _tempEnabled = false;
  else
    _tempEnabled = true;

  return true;
}
 80824e8:	4770      	bx	lr

080824ea <_ZN15Adafruit_BME68023setHumidityOversamplingEh>:
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 80824ea:	2905      	cmp	r1, #5
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
 80824ec:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 80824ee:	d807      	bhi.n	8082500 <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x16>

  gas_sensor.tph_sett.os_hum = oversample;
 80824f0:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
 80824f4:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
 80824f6:	b909      	cbnz	r1, 80824fc <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x12>
    _humEnabled = false;
 80824f8:	7499      	strb	r1, [r3, #18]
 80824fa:	4770      	bx	lr
  else
    _humEnabled = true;
 80824fc:	7498      	strb	r0, [r3, #18]
 80824fe:	4770      	bx	lr
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 8082500:	2000      	movs	r0, #0
    _humEnabled = false;
  else
    _humEnabled = true;

  return true;
}
 8082502:	4770      	bx	lr

08082504 <_ZN15Adafruit_BME68023setPressureOversamplingEh>:
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 8082504:	2905      	cmp	r1, #5
    @param  oversample Oversampling setting, can be BME680_OS_NONE (turn off Pressure reading),
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
 8082506:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 8082508:	d807      	bhi.n	808251a <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x16>

  gas_sensor.tph_sett.os_pres = oversample;
 808250a:	f880 105e 	strb.w	r1, [r0, #94]	; 0x5e
 808250e:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
 8082510:	b909      	cbnz	r1, 8082516 <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x12>
    _presEnabled = false;
 8082512:	74d9      	strb	r1, [r3, #19]
 8082514:	4770      	bx	lr
  else
    _presEnabled = true;
 8082516:	74d8      	strb	r0, [r3, #19]
 8082518:	4770      	bx	lr
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 808251a:	2000      	movs	r0, #0
    _presEnabled = false;
  else
    _presEnabled = true;

  return true;
}
 808251c:	4770      	bx	lr

0808251e <_ZN15Adafruit_BME68016setIIRFilterSizeEh>:
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 808251e:	2907      	cmp	r1, #7
    @param filtersize Size of the filter (in samples). Can be BME680_FILTER_SIZE_0 (no filtering), BME680_FILTER_SIZE_1, BME680_FILTER_SIZE_3, BME680_FILTER_SIZE_7, BME680_FILTER_SIZE_15, BME680_FILTER_SIZE_31, BME680_FILTER_SIZE_63, BME680_FILTER_SIZE_127
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
 8082520:	4603      	mov	r3, r0
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 8082522:	d807      	bhi.n	8082534 <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x16>

  gas_sensor.tph_sett.filter = filtersize;
 8082524:	f880 105f 	strb.w	r1, [r0, #95]	; 0x5f
 8082528:	2001      	movs	r0, #1

  if (filtersize == BME680_FILTER_SIZE_0)
 808252a:	b909      	cbnz	r1, 8082530 <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x12>
    _filterEnabled = false;
 808252c:	7419      	strb	r1, [r3, #16]
 808252e:	4770      	bx	lr
  else
    _filterEnabled = true;
 8082530:	7418      	strb	r0, [r3, #16]
 8082532:	4770      	bx	lr
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 8082534:	2000      	movs	r0, #0
    _filterEnabled = false;
  else
    _filterEnabled = true;

  return true;
}
 8082536:	4770      	bx	lr

08082538 <_GLOBAL__sub_I__BME680_SoftwareSPI_MOSI>:
 8082538:	f000 b888 	b.w	808264c <HAL_Pin_Map>

0808253c <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 808253c:	b508      	push	{r3, lr}
 808253e:	4b02      	ldr	r3, [pc, #8]	; (8082548 <inet_gethostbyname+0xc>)
 8082540:	681b      	ldr	r3, [r3, #0]
 8082542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8082544:	9301      	str	r3, [sp, #4]
 8082546:	bd08      	pop	{r3, pc}
 8082548:	08060020 	.word	0x08060020

0808254c <cellular_signal>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
 808254c:	b508      	push	{r3, lr}
 808254e:	4b02      	ldr	r3, [pc, #8]	; (8082558 <cellular_signal+0xc>)
 8082550:	681b      	ldr	r3, [r3, #0]
 8082552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8082554:	9301      	str	r3, [sp, #4]
 8082556:	bd08      	pop	{r3, pc}
 8082558:	08060020 	.word	0x08060020

0808255c <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 808255c:	b508      	push	{r3, lr}
 808255e:	4b02      	ldr	r3, [pc, #8]	; (8082568 <cellular_command+0xc>)
 8082560:	681b      	ldr	r3, [r3, #0]
 8082562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8082564:	9301      	str	r3, [sp, #4]
 8082566:	bd08      	pop	{r3, pc}
 8082568:	08060020 	.word	0x08060020

0808256c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 808256c:	b508      	push	{r3, lr}
 808256e:	4b02      	ldr	r3, [pc, #8]	; (8082578 <os_mutex_create+0xc>)
 8082570:	681b      	ldr	r3, [r3, #0]
 8082572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082574:	9301      	str	r3, [sp, #4]
 8082576:	bd08      	pop	{r3, pc}
 8082578:	080401d0 	.word	0x080401d0

0808257c <os_mutex_unlock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
 808257c:	b508      	push	{r3, lr}
 808257e:	4b02      	ldr	r3, [pc, #8]	; (8082588 <os_mutex_unlock+0xc>)
 8082580:	681b      	ldr	r3, [r3, #0]
 8082582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8082584:	9301      	str	r3, [sp, #4]
 8082586:	bd08      	pop	{r3, pc}
 8082588:	080401d0 	.word	0x080401d0

0808258c <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 808258c:	b508      	push	{r3, lr}
 808258e:	4b02      	ldr	r3, [pc, #8]	; (8082598 <HAL_Feature_Set+0xc>)
 8082590:	681b      	ldr	r3, [r3, #0]
 8082592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8082594:	9301      	str	r3, [sp, #4]
 8082596:	bd08      	pop	{r3, pc}
 8082598:	080401b8 	.word	0x080401b8

0808259c <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 808259c:	b508      	push	{r3, lr}
 808259e:	4b02      	ldr	r3, [pc, #8]	; (80825a8 <HAL_Core_System_Reset_Ex+0xc>)
 80825a0:	681b      	ldr	r3, [r3, #0]
 80825a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80825a4:	9301      	str	r3, [sp, #4]
 80825a6:	bd08      	pop	{r3, pc}
 80825a8:	080401b8 	.word	0x080401b8

080825ac <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80825ac:	b508      	push	{r3, lr}
 80825ae:	4b02      	ldr	r3, [pc, #8]	; (80825b8 <HAL_Core_Get_Last_Reset_Info+0xc>)
 80825b0:	681b      	ldr	r3, [r3, #0]
 80825b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80825b4:	9301      	str	r3, [sp, #4]
 80825b6:	bd08      	pop	{r3, pc}
 80825b8:	080401b8 	.word	0x080401b8

080825bc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80825bc:	b508      	push	{r3, lr}
 80825be:	4b02      	ldr	r3, [pc, #8]	; (80825c8 <HAL_RNG_GetRandomNumber+0xc>)
 80825c0:	681b      	ldr	r3, [r3, #0]
 80825c2:	685b      	ldr	r3, [r3, #4]
 80825c4:	9301      	str	r3, [sp, #4]
 80825c6:	bd08      	pop	{r3, pc}
 80825c8:	0804019c 	.word	0x0804019c

080825cc <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80825cc:	b508      	push	{r3, lr}
 80825ce:	4b02      	ldr	r3, [pc, #8]	; (80825d8 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80825d0:	681b      	ldr	r3, [r3, #0]
 80825d2:	695b      	ldr	r3, [r3, #20]
 80825d4:	9301      	str	r3, [sp, #4]
 80825d6:	bd08      	pop	{r3, pc}
 80825d8:	0804019c 	.word	0x0804019c

080825dc <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80825dc:	b508      	push	{r3, lr}
 80825de:	4b02      	ldr	r3, [pc, #8]	; (80825e8 <HAL_RTC_Get_UnixTime+0xc>)
 80825e0:	681b      	ldr	r3, [r3, #0]
 80825e2:	69db      	ldr	r3, [r3, #28]
 80825e4:	9301      	str	r3, [sp, #4]
 80825e6:	bd08      	pop	{r3, pc}
 80825e8:	0804019c 	.word	0x0804019c

080825ec <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 80825ec:	b508      	push	{r3, lr}
 80825ee:	4b02      	ldr	r3, [pc, #8]	; (80825f8 <HAL_EEPROM_Init+0xc>)
 80825f0:	681b      	ldr	r3, [r3, #0]
 80825f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80825f4:	9301      	str	r3, [sp, #4]
 80825f6:	bd08      	pop	{r3, pc}
 80825f8:	0804019c 	.word	0x0804019c

080825fc <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
 80825fc:	b508      	push	{r3, lr}
 80825fe:	4b02      	ldr	r3, [pc, #8]	; (8082608 <HAL_EEPROM_Read+0xc>)
 8082600:	681b      	ldr	r3, [r3, #0]
 8082602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082604:	9301      	str	r3, [sp, #4]
 8082606:	bd08      	pop	{r3, pc}
 8082608:	0804019c 	.word	0x0804019c

0808260c <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
 808260c:	b508      	push	{r3, lr}
 808260e:	4b02      	ldr	r3, [pc, #8]	; (8082618 <HAL_EEPROM_Write+0xc>)
 8082610:	681b      	ldr	r3, [r3, #0]
 8082612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082614:	9301      	str	r3, [sp, #4]
 8082616:	bd08      	pop	{r3, pc}
 8082618:	0804019c 	.word	0x0804019c

0808261c <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 808261c:	b508      	push	{r3, lr}
 808261e:	4b02      	ldr	r3, [pc, #8]	; (8082628 <HAL_EEPROM_Put+0xc>)
 8082620:	681b      	ldr	r3, [r3, #0]
 8082622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8082624:	9301      	str	r3, [sp, #4]
 8082626:	bd08      	pop	{r3, pc}
 8082628:	0804019c 	.word	0x0804019c

0808262c <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 808262c:	b508      	push	{r3, lr}
 808262e:	4b02      	ldr	r3, [pc, #8]	; (8082638 <HAL_RTC_Time_Is_Valid+0xc>)
 8082630:	681b      	ldr	r3, [r3, #0]
 8082632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8082634:	9301      	str	r3, [sp, #4]
 8082636:	bd08      	pop	{r3, pc}
 8082638:	0804019c 	.word	0x0804019c

0808263c <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 808263c:	b508      	push	{r3, lr}
 808263e:	4b02      	ldr	r3, [pc, #8]	; (8082648 <hal_timer_millis+0xc>)
 8082640:	681b      	ldr	r3, [r3, #0]
 8082642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8082644:	9301      	str	r3, [sp, #4]
 8082646:	bd08      	pop	{r3, pc}
 8082648:	0804019c 	.word	0x0804019c

0808264c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 808264c:	b508      	push	{r3, lr}
 808264e:	4b02      	ldr	r3, [pc, #8]	; (8082658 <HAL_Pin_Map+0xc>)
 8082650:	681b      	ldr	r3, [r3, #0]
 8082652:	681b      	ldr	r3, [r3, #0]
 8082654:	9301      	str	r3, [sp, #4]
 8082656:	bd08      	pop	{r3, pc}
 8082658:	080401b0 	.word	0x080401b0

0808265c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 808265c:	b508      	push	{r3, lr}
 808265e:	4b02      	ldr	r3, [pc, #8]	; (8082668 <HAL_Pin_Mode+0xc>)
 8082660:	681b      	ldr	r3, [r3, #0]
 8082662:	689b      	ldr	r3, [r3, #8]
 8082664:	9301      	str	r3, [sp, #4]
 8082666:	bd08      	pop	{r3, pc}
 8082668:	080401b0 	.word	0x080401b0

0808266c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 808266c:	b508      	push	{r3, lr}
 808266e:	4b02      	ldr	r3, [pc, #8]	; (8082678 <HAL_Get_Pin_Mode+0xc>)
 8082670:	681b      	ldr	r3, [r3, #0]
 8082672:	68db      	ldr	r3, [r3, #12]
 8082674:	9301      	str	r3, [sp, #4]
 8082676:	bd08      	pop	{r3, pc}
 8082678:	080401b0 	.word	0x080401b0

0808267c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 808267c:	b508      	push	{r3, lr}
 808267e:	4b02      	ldr	r3, [pc, #8]	; (8082688 <HAL_GPIO_Write+0xc>)
 8082680:	681b      	ldr	r3, [r3, #0]
 8082682:	691b      	ldr	r3, [r3, #16]
 8082684:	9301      	str	r3, [sp, #4]
 8082686:	bd08      	pop	{r3, pc}
 8082688:	080401b0 	.word	0x080401b0

0808268c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 808268c:	b508      	push	{r3, lr}
 808268e:	4b02      	ldr	r3, [pc, #8]	; (8082698 <HAL_GPIO_Read+0xc>)
 8082690:	681b      	ldr	r3, [r3, #0]
 8082692:	695b      	ldr	r3, [r3, #20]
 8082694:	9301      	str	r3, [sp, #4]
 8082696:	bd08      	pop	{r3, pc}
 8082698:	080401b0 	.word	0x080401b0

0808269c <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 808269c:	b508      	push	{r3, lr}
 808269e:	4b02      	ldr	r3, [pc, #8]	; (80826a8 <HAL_Interrupts_Attach+0xc>)
 80826a0:	681b      	ldr	r3, [r3, #0]
 80826a2:	699b      	ldr	r3, [r3, #24]
 80826a4:	9301      	str	r3, [sp, #4]
 80826a6:	bd08      	pop	{r3, pc}
 80826a8:	080401b0 	.word	0x080401b0

080826ac <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 80826ac:	b508      	push	{r3, lr}
 80826ae:	4b02      	ldr	r3, [pc, #8]	; (80826b8 <HAL_Interrupts_Detach+0xc>)
 80826b0:	681b      	ldr	r3, [r3, #0]
 80826b2:	69db      	ldr	r3, [r3, #28]
 80826b4:	9301      	str	r3, [sp, #4]
 80826b6:	bd08      	pop	{r3, pc}
 80826b8:	080401b0 	.word	0x080401b0

080826bc <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80826bc:	b508      	push	{r3, lr}
 80826be:	4b02      	ldr	r3, [pc, #8]	; (80826c8 <HAL_I2C_Begin+0xc>)
 80826c0:	681b      	ldr	r3, [r3, #0]
 80826c2:	68db      	ldr	r3, [r3, #12]
 80826c4:	9301      	str	r3, [sp, #4]
 80826c6:	bd08      	pop	{r3, pc}
 80826c8:	080401ac 	.word	0x080401ac

080826cc <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80826cc:	b508      	push	{r3, lr}
 80826ce:	4b02      	ldr	r3, [pc, #8]	; (80826d8 <HAL_I2C_Request_Data+0xc>)
 80826d0:	681b      	ldr	r3, [r3, #0]
 80826d2:	695b      	ldr	r3, [r3, #20]
 80826d4:	9301      	str	r3, [sp, #4]
 80826d6:	bd08      	pop	{r3, pc}
 80826d8:	080401ac 	.word	0x080401ac

080826dc <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80826dc:	b508      	push	{r3, lr}
 80826de:	4b02      	ldr	r3, [pc, #8]	; (80826e8 <HAL_I2C_Begin_Transmission+0xc>)
 80826e0:	681b      	ldr	r3, [r3, #0]
 80826e2:	699b      	ldr	r3, [r3, #24]
 80826e4:	9301      	str	r3, [sp, #4]
 80826e6:	bd08      	pop	{r3, pc}
 80826e8:	080401ac 	.word	0x080401ac

080826ec <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80826ec:	b508      	push	{r3, lr}
 80826ee:	4b02      	ldr	r3, [pc, #8]	; (80826f8 <HAL_I2C_End_Transmission+0xc>)
 80826f0:	681b      	ldr	r3, [r3, #0]
 80826f2:	69db      	ldr	r3, [r3, #28]
 80826f4:	9301      	str	r3, [sp, #4]
 80826f6:	bd08      	pop	{r3, pc}
 80826f8:	080401ac 	.word	0x080401ac

080826fc <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80826fc:	b508      	push	{r3, lr}
 80826fe:	4b02      	ldr	r3, [pc, #8]	; (8082708 <HAL_I2C_Write_Data+0xc>)
 8082700:	681b      	ldr	r3, [r3, #0]
 8082702:	6a1b      	ldr	r3, [r3, #32]
 8082704:	9301      	str	r3, [sp, #4]
 8082706:	bd08      	pop	{r3, pc}
 8082708:	080401ac 	.word	0x080401ac

0808270c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 808270c:	b508      	push	{r3, lr}
 808270e:	4b02      	ldr	r3, [pc, #8]	; (8082718 <HAL_I2C_Available_Data+0xc>)
 8082710:	681b      	ldr	r3, [r3, #0]
 8082712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8082714:	9301      	str	r3, [sp, #4]
 8082716:	bd08      	pop	{r3, pc}
 8082718:	080401ac 	.word	0x080401ac

0808271c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 808271c:	b508      	push	{r3, lr}
 808271e:	4b02      	ldr	r3, [pc, #8]	; (8082728 <HAL_I2C_Read_Data+0xc>)
 8082720:	681b      	ldr	r3, [r3, #0]
 8082722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8082724:	9301      	str	r3, [sp, #4]
 8082726:	bd08      	pop	{r3, pc}
 8082728:	080401ac 	.word	0x080401ac

0808272c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 808272c:	b508      	push	{r3, lr}
 808272e:	4b02      	ldr	r3, [pc, #8]	; (8082738 <HAL_I2C_Peek_Data+0xc>)
 8082730:	681b      	ldr	r3, [r3, #0]
 8082732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082734:	9301      	str	r3, [sp, #4]
 8082736:	bd08      	pop	{r3, pc}
 8082738:	080401ac 	.word	0x080401ac

0808273c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 808273c:	b508      	push	{r3, lr}
 808273e:	4b02      	ldr	r3, [pc, #8]	; (8082748 <HAL_I2C_Flush_Data+0xc>)
 8082740:	681b      	ldr	r3, [r3, #0]
 8082742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082744:	9301      	str	r3, [sp, #4]
 8082746:	bd08      	pop	{r3, pc}
 8082748:	080401ac 	.word	0x080401ac

0808274c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 808274c:	b508      	push	{r3, lr}
 808274e:	4b02      	ldr	r3, [pc, #8]	; (8082758 <HAL_I2C_Is_Enabled+0xc>)
 8082750:	681b      	ldr	r3, [r3, #0]
 8082752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8082754:	9301      	str	r3, [sp, #4]
 8082756:	bd08      	pop	{r3, pc}
 8082758:	080401ac 	.word	0x080401ac

0808275c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 808275c:	b508      	push	{r3, lr}
 808275e:	4b02      	ldr	r3, [pc, #8]	; (8082768 <HAL_I2C_Init+0xc>)
 8082760:	681b      	ldr	r3, [r3, #0]
 8082762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8082764:	9301      	str	r3, [sp, #4]
 8082766:	bd08      	pop	{r3, pc}
 8082768:	080401ac 	.word	0x080401ac

0808276c <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 808276c:	b508      	push	{r3, lr}
 808276e:	4b02      	ldr	r3, [pc, #8]	; (8082778 <HAL_I2C_Acquire+0xc>)
 8082770:	681b      	ldr	r3, [r3, #0]
 8082772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8082774:	9301      	str	r3, [sp, #4]
 8082776:	bd08      	pop	{r3, pc}
 8082778:	080401ac 	.word	0x080401ac

0808277c <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 808277c:	b508      	push	{r3, lr}
 808277e:	4b02      	ldr	r3, [pc, #8]	; (8082788 <HAL_I2C_Release+0xc>)
 8082780:	681b      	ldr	r3, [r3, #0]
 8082782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8082784:	9301      	str	r3, [sp, #4]
 8082786:	bd08      	pop	{r3, pc}
 8082788:	080401ac 	.word	0x080401ac

0808278c <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 808278c:	b508      	push	{r3, lr}
 808278e:	4b02      	ldr	r3, [pc, #8]	; (8082798 <HAL_SPI_Begin+0xc>)
 8082790:	681b      	ldr	r3, [r3, #0]
 8082792:	681b      	ldr	r3, [r3, #0]
 8082794:	9301      	str	r3, [sp, #4]
 8082796:	bd08      	pop	{r3, pc}
 8082798:	080401b4 	.word	0x080401b4

0808279c <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 808279c:	b508      	push	{r3, lr}
 808279e:	4b02      	ldr	r3, [pc, #8]	; (80827a8 <HAL_SPI_Set_Bit_Order+0xc>)
 80827a0:	681b      	ldr	r3, [r3, #0]
 80827a2:	689b      	ldr	r3, [r3, #8]
 80827a4:	9301      	str	r3, [sp, #4]
 80827a6:	bd08      	pop	{r3, pc}
 80827a8:	080401b4 	.word	0x080401b4

080827ac <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80827ac:	b508      	push	{r3, lr}
 80827ae:	4b02      	ldr	r3, [pc, #8]	; (80827b8 <HAL_SPI_Set_Data_Mode+0xc>)
 80827b0:	681b      	ldr	r3, [r3, #0]
 80827b2:	68db      	ldr	r3, [r3, #12]
 80827b4:	9301      	str	r3, [sp, #4]
 80827b6:	bd08      	pop	{r3, pc}
 80827b8:	080401b4 	.word	0x080401b4

080827bc <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80827bc:	b508      	push	{r3, lr}
 80827be:	4b02      	ldr	r3, [pc, #8]	; (80827c8 <HAL_SPI_Set_Clock_Divider+0xc>)
 80827c0:	681b      	ldr	r3, [r3, #0]
 80827c2:	691b      	ldr	r3, [r3, #16]
 80827c4:	9301      	str	r3, [sp, #4]
 80827c6:	bd08      	pop	{r3, pc}
 80827c8:	080401b4 	.word	0x080401b4

080827cc <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80827cc:	b508      	push	{r3, lr}
 80827ce:	4b02      	ldr	r3, [pc, #8]	; (80827d8 <HAL_SPI_Send_Receive_Data+0xc>)
 80827d0:	681b      	ldr	r3, [r3, #0]
 80827d2:	695b      	ldr	r3, [r3, #20]
 80827d4:	9301      	str	r3, [sp, #4]
 80827d6:	bd08      	pop	{r3, pc}
 80827d8:	080401b4 	.word	0x080401b4

080827dc <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80827dc:	b508      	push	{r3, lr}
 80827de:	4b02      	ldr	r3, [pc, #8]	; (80827e8 <HAL_SPI_Init+0xc>)
 80827e0:	681b      	ldr	r3, [r3, #0]
 80827e2:	69db      	ldr	r3, [r3, #28]
 80827e4:	9301      	str	r3, [sp, #4]
 80827e6:	bd08      	pop	{r3, pc}
 80827e8:	080401b4 	.word	0x080401b4

080827ec <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80827ec:	b508      	push	{r3, lr}
 80827ee:	4b02      	ldr	r3, [pc, #8]	; (80827f8 <HAL_SPI_Is_Enabled+0xc>)
 80827f0:	681b      	ldr	r3, [r3, #0]
 80827f2:	6a1b      	ldr	r3, [r3, #32]
 80827f4:	9301      	str	r3, [sp, #4]
 80827f6:	bd08      	pop	{r3, pc}
 80827f8:	080401b4 	.word	0x080401b4

080827fc <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80827fc:	b508      	push	{r3, lr}
 80827fe:	4b02      	ldr	r3, [pc, #8]	; (8082808 <HAL_SPI_Info+0xc>)
 8082800:	681b      	ldr	r3, [r3, #0]
 8082802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8082804:	9301      	str	r3, [sp, #4]
 8082806:	bd08      	pop	{r3, pc}
 8082808:	080401b4 	.word	0x080401b4

0808280c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 808280c:	b508      	push	{r3, lr}
 808280e:	4b02      	ldr	r3, [pc, #8]	; (8082818 <HAL_USART_Init+0xc>)
 8082810:	681b      	ldr	r3, [r3, #0]
 8082812:	699b      	ldr	r3, [r3, #24]
 8082814:	9301      	str	r3, [sp, #4]
 8082816:	bd08      	pop	{r3, pc}
 8082818:	080401c4 	.word	0x080401c4

0808281c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 808281c:	b508      	push	{r3, lr}
 808281e:	4b02      	ldr	r3, [pc, #8]	; (8082828 <HAL_USART_Write_Data+0xc>)
 8082820:	681b      	ldr	r3, [r3, #0]
 8082822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8082824:	9301      	str	r3, [sp, #4]
 8082826:	bd08      	pop	{r3, pc}
 8082828:	080401c4 	.word	0x080401c4

0808282c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 808282c:	b508      	push	{r3, lr}
 808282e:	4b02      	ldr	r3, [pc, #8]	; (8082838 <HAL_USART_Available_Data+0xc>)
 8082830:	681b      	ldr	r3, [r3, #0]
 8082832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8082834:	9301      	str	r3, [sp, #4]
 8082836:	bd08      	pop	{r3, pc}
 8082838:	080401c4 	.word	0x080401c4

0808283c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 808283c:	b508      	push	{r3, lr}
 808283e:	4b02      	ldr	r3, [pc, #8]	; (8082848 <HAL_USART_Read_Data+0xc>)
 8082840:	681b      	ldr	r3, [r3, #0]
 8082842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082844:	9301      	str	r3, [sp, #4]
 8082846:	bd08      	pop	{r3, pc}
 8082848:	080401c4 	.word	0x080401c4

0808284c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 808284c:	b508      	push	{r3, lr}
 808284e:	4b02      	ldr	r3, [pc, #8]	; (8082858 <HAL_USART_Peek_Data+0xc>)
 8082850:	681b      	ldr	r3, [r3, #0]
 8082852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082854:	9301      	str	r3, [sp, #4]
 8082856:	bd08      	pop	{r3, pc}
 8082858:	080401c4 	.word	0x080401c4

0808285c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 808285c:	b508      	push	{r3, lr}
 808285e:	4b02      	ldr	r3, [pc, #8]	; (8082868 <HAL_USART_Flush_Data+0xc>)
 8082860:	681b      	ldr	r3, [r3, #0]
 8082862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8082864:	9301      	str	r3, [sp, #4]
 8082866:	bd08      	pop	{r3, pc}
 8082868:	080401c4 	.word	0x080401c4

0808286c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 808286c:	b508      	push	{r3, lr}
 808286e:	4b02      	ldr	r3, [pc, #8]	; (8082878 <HAL_USART_Is_Enabled+0xc>)
 8082870:	681b      	ldr	r3, [r3, #0]
 8082872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8082874:	9301      	str	r3, [sp, #4]
 8082876:	bd08      	pop	{r3, pc}
 8082878:	080401c4 	.word	0x080401c4

0808287c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 808287c:	b508      	push	{r3, lr}
 808287e:	4b02      	ldr	r3, [pc, #8]	; (8082888 <HAL_USART_Available_Data_For_Write+0xc>)
 8082880:	681b      	ldr	r3, [r3, #0]
 8082882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8082884:	9301      	str	r3, [sp, #4]
 8082886:	bd08      	pop	{r3, pc}
 8082888:	080401c4 	.word	0x080401c4

0808288c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 808288c:	b508      	push	{r3, lr}
 808288e:	4b02      	ldr	r3, [pc, #8]	; (8082898 <HAL_USB_USART_Init+0xc>)
 8082890:	681b      	ldr	r3, [r3, #0]
 8082892:	681b      	ldr	r3, [r3, #0]
 8082894:	9301      	str	r3, [sp, #4]
 8082896:	bd08      	pop	{r3, pc}
 8082898:	0806001c 	.word	0x0806001c

0808289c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 808289c:	b508      	push	{r3, lr}
 808289e:	4b02      	ldr	r3, [pc, #8]	; (80828a8 <HAL_USB_USART_Available_Data+0xc>)
 80828a0:	681b      	ldr	r3, [r3, #0]
 80828a2:	691b      	ldr	r3, [r3, #16]
 80828a4:	9301      	str	r3, [sp, #4]
 80828a6:	bd08      	pop	{r3, pc}
 80828a8:	0806001c 	.word	0x0806001c

080828ac <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80828ac:	b508      	push	{r3, lr}
 80828ae:	4b02      	ldr	r3, [pc, #8]	; (80828b8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80828b0:	681b      	ldr	r3, [r3, #0]
 80828b2:	695b      	ldr	r3, [r3, #20]
 80828b4:	9301      	str	r3, [sp, #4]
 80828b6:	bd08      	pop	{r3, pc}
 80828b8:	0806001c 	.word	0x0806001c

080828bc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80828bc:	b508      	push	{r3, lr}
 80828be:	4b02      	ldr	r3, [pc, #8]	; (80828c8 <HAL_USB_USART_Receive_Data+0xc>)
 80828c0:	681b      	ldr	r3, [r3, #0]
 80828c2:	699b      	ldr	r3, [r3, #24]
 80828c4:	9301      	str	r3, [sp, #4]
 80828c6:	bd08      	pop	{r3, pc}
 80828c8:	0806001c 	.word	0x0806001c

080828cc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80828cc:	b508      	push	{r3, lr}
 80828ce:	4b02      	ldr	r3, [pc, #8]	; (80828d8 <HAL_USB_USART_Send_Data+0xc>)
 80828d0:	681b      	ldr	r3, [r3, #0]
 80828d2:	69db      	ldr	r3, [r3, #28]
 80828d4:	9301      	str	r3, [sp, #4]
 80828d6:	bd08      	pop	{r3, pc}
 80828d8:	0806001c 	.word	0x0806001c

080828dc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80828dc:	b508      	push	{r3, lr}
 80828de:	4b02      	ldr	r3, [pc, #8]	; (80828e8 <HAL_USB_USART_Flush_Data+0xc>)
 80828e0:	681b      	ldr	r3, [r3, #0]
 80828e2:	6a1b      	ldr	r3, [r3, #32]
 80828e4:	9301      	str	r3, [sp, #4]
 80828e6:	bd08      	pop	{r3, pc}
 80828e8:	0806001c 	.word	0x0806001c

080828ec <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80828ec:	b508      	push	{r3, lr}
 80828ee:	4b02      	ldr	r3, [pc, #8]	; (80828f8 <system_mode+0xc>)
 80828f0:	681b      	ldr	r3, [r3, #0]
 80828f2:	681b      	ldr	r3, [r3, #0]
 80828f4:	9301      	str	r3, [sp, #4]
 80828f6:	bd08      	pop	{r3, pc}
 80828f8:	080401a4 	.word	0x080401a4

080828fc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80828fc:	b508      	push	{r3, lr}
 80828fe:	4b02      	ldr	r3, [pc, #8]	; (8082908 <set_system_mode+0xc>)
 8082900:	681b      	ldr	r3, [r3, #0]
 8082902:	685b      	ldr	r3, [r3, #4]
 8082904:	9301      	str	r3, [sp, #4]
 8082906:	bd08      	pop	{r3, pc}
 8082908:	080401a4 	.word	0x080401a4

0808290c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 808290c:	b508      	push	{r3, lr}
 808290e:	4b02      	ldr	r3, [pc, #8]	; (8082918 <system_delay_ms+0xc>)
 8082910:	681b      	ldr	r3, [r3, #0]
 8082912:	695b      	ldr	r3, [r3, #20]
 8082914:	9301      	str	r3, [sp, #4]
 8082916:	bd08      	pop	{r3, pc}
 8082918:	080401a4 	.word	0x080401a4

0808291c <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 808291c:	b508      	push	{r3, lr}
 808291e:	4b02      	ldr	r3, [pc, #8]	; (8082928 <system_sleep+0xc>)
 8082920:	681b      	ldr	r3, [r3, #0]
 8082922:	699b      	ldr	r3, [r3, #24]
 8082924:	9301      	str	r3, [sp, #4]
 8082926:	bd08      	pop	{r3, pc}
 8082928:	080401a4 	.word	0x080401a4

0808292c <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 808292c:	b508      	push	{r3, lr}
 808292e:	4b02      	ldr	r3, [pc, #8]	; (8082938 <system_thread_set_state+0xc>)
 8082930:	681b      	ldr	r3, [r3, #0]
 8082932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082934:	9301      	str	r3, [sp, #4]
 8082936:	bd08      	pop	{r3, pc}
 8082938:	080401a4 	.word	0x080401a4

0808293c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 808293c:	b508      	push	{r3, lr}
 808293e:	4b02      	ldr	r3, [pc, #8]	; (8082948 <application_thread_current+0xc>)
 8082940:	681b      	ldr	r3, [r3, #0]
 8082942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8082944:	9301      	str	r3, [sp, #4]
 8082946:	bd08      	pop	{r3, pc}
 8082948:	080401a4 	.word	0x080401a4

0808294c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 808294c:	b508      	push	{r3, lr}
 808294e:	4b02      	ldr	r3, [pc, #8]	; (8082958 <application_thread_invoke+0xc>)
 8082950:	681b      	ldr	r3, [r3, #0]
 8082952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8082954:	9301      	str	r3, [sp, #4]
 8082956:	bd08      	pop	{r3, pc}
 8082958:	080401a4 	.word	0x080401a4

0808295c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 808295c:	b508      	push	{r3, lr}
 808295e:	4b02      	ldr	r3, [pc, #8]	; (8082968 <system_thread_get_state+0xc>)
 8082960:	681b      	ldr	r3, [r3, #0]
 8082962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8082964:	9301      	str	r3, [sp, #4]
 8082966:	bd08      	pop	{r3, pc}
 8082968:	080401a4 	.word	0x080401a4

0808296c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 808296c:	b508      	push	{r3, lr}
 808296e:	4b03      	ldr	r3, [pc, #12]	; (808297c <system_ctrl_set_app_request_handler+0x10>)
 8082970:	681b      	ldr	r3, [r3, #0]
 8082972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8082976:	9301      	str	r3, [sp, #4]
 8082978:	bd08      	pop	{r3, pc}
 808297a:	0000      	.short	0x0000
 808297c:	080401a4 	.word	0x080401a4

08082980 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8082980:	b508      	push	{r3, lr}
 8082982:	4b03      	ldr	r3, [pc, #12]	; (8082990 <system_ctrl_set_result+0x10>)
 8082984:	681b      	ldr	r3, [r3, #0]
 8082986:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 808298a:	9301      	str	r3, [sp, #4]
 808298c:	bd08      	pop	{r3, pc}
 808298e:	0000      	.short	0x0000
 8082990:	080401a4 	.word	0x080401a4

08082994 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 8082994:	b508      	push	{r3, lr}
 8082996:	4b02      	ldr	r3, [pc, #8]	; (80829a0 <spark_variable+0xc>)
 8082998:	681b      	ldr	r3, [r3, #0]
 808299a:	681b      	ldr	r3, [r3, #0]
 808299c:	9301      	str	r3, [sp, #4]
 808299e:	bd08      	pop	{r3, pc}
 80829a0:	080401cc 	.word	0x080401cc

080829a4 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80829a4:	b508      	push	{r3, lr}
 80829a6:	4b02      	ldr	r3, [pc, #8]	; (80829b0 <spark_function+0xc>)
 80829a8:	681b      	ldr	r3, [r3, #0]
 80829aa:	685b      	ldr	r3, [r3, #4]
 80829ac:	9301      	str	r3, [sp, #4]
 80829ae:	bd08      	pop	{r3, pc}
 80829b0:	080401cc 	.word	0x080401cc

080829b4 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80829b4:	b508      	push	{r3, lr}
 80829b6:	4b02      	ldr	r3, [pc, #8]	; (80829c0 <spark_process+0xc>)
 80829b8:	681b      	ldr	r3, [r3, #0]
 80829ba:	689b      	ldr	r3, [r3, #8]
 80829bc:	9301      	str	r3, [sp, #4]
 80829be:	bd08      	pop	{r3, pc}
 80829c0:	080401cc 	.word	0x080401cc

080829c4 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80829c4:	b508      	push	{r3, lr}
 80829c6:	4b02      	ldr	r3, [pc, #8]	; (80829d0 <spark_cloud_flag_connect+0xc>)
 80829c8:	681b      	ldr	r3, [r3, #0]
 80829ca:	68db      	ldr	r3, [r3, #12]
 80829cc:	9301      	str	r3, [sp, #4]
 80829ce:	bd08      	pop	{r3, pc}
 80829d0:	080401cc 	.word	0x080401cc

080829d4 <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
 80829d4:	b508      	push	{r3, lr}
 80829d6:	4b02      	ldr	r3, [pc, #8]	; (80829e0 <spark_cloud_flag_disconnect+0xc>)
 80829d8:	681b      	ldr	r3, [r3, #0]
 80829da:	691b      	ldr	r3, [r3, #16]
 80829dc:	9301      	str	r3, [sp, #4]
 80829de:	bd08      	pop	{r3, pc}
 80829e0:	080401cc 	.word	0x080401cc

080829e4 <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80829e4:	b508      	push	{r3, lr}
 80829e6:	4b02      	ldr	r3, [pc, #8]	; (80829f0 <spark_cloud_flag_connected+0xc>)
 80829e8:	681b      	ldr	r3, [r3, #0]
 80829ea:	695b      	ldr	r3, [r3, #20]
 80829ec:	9301      	str	r3, [sp, #4]
 80829ee:	bd08      	pop	{r3, pc}
 80829f0:	080401cc 	.word	0x080401cc

080829f4 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 80829f4:	b508      	push	{r3, lr}
 80829f6:	4b02      	ldr	r3, [pc, #8]	; (8082a00 <spark_deviceID+0xc>)
 80829f8:	681b      	ldr	r3, [r3, #0]
 80829fa:	69db      	ldr	r3, [r3, #28]
 80829fc:	9301      	str	r3, [sp, #4]
 80829fe:	bd08      	pop	{r3, pc}
 8082a00:	080401cc 	.word	0x080401cc

08082a04 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8082a04:	b508      	push	{r3, lr}
 8082a06:	4b02      	ldr	r3, [pc, #8]	; (8082a10 <spark_send_event+0xc>)
 8082a08:	681b      	ldr	r3, [r3, #0]
 8082a0a:	6a1b      	ldr	r3, [r3, #32]
 8082a0c:	9301      	str	r3, [sp, #4]
 8082a0e:	bd08      	pop	{r3, pc}
 8082a10:	080401cc 	.word	0x080401cc

08082a14 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 8082a14:	b508      	push	{r3, lr}
 8082a16:	4b02      	ldr	r3, [pc, #8]	; (8082a20 <spark_subscribe+0xc>)
 8082a18:	681b      	ldr	r3, [r3, #0]
 8082a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8082a1c:	9301      	str	r3, [sp, #4]
 8082a1e:	bd08      	pop	{r3, pc}
 8082a20:	080401cc 	.word	0x080401cc

08082a24 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 8082a24:	b508      	push	{r3, lr}
 8082a26:	4b02      	ldr	r3, [pc, #8]	; (8082a30 <spark_sync_time+0xc>)
 8082a28:	681b      	ldr	r3, [r3, #0]
 8082a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082a2c:	9301      	str	r3, [sp, #4]
 8082a2e:	bd08      	pop	{r3, pc}
 8082a30:	080401cc 	.word	0x080401cc

08082a34 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8082a34:	b508      	push	{r3, lr}
 8082a36:	4b02      	ldr	r3, [pc, #8]	; (8082a40 <spark_sync_time_pending+0xc>)
 8082a38:	681b      	ldr	r3, [r3, #0]
 8082a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082a3c:	9301      	str	r3, [sp, #4]
 8082a3e:	bd08      	pop	{r3, pc}
 8082a40:	080401cc 	.word	0x080401cc

08082a44 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8082a44:	b508      	push	{r3, lr}
 8082a46:	4b02      	ldr	r3, [pc, #8]	; (8082a50 <spark_set_random_seed_from_cloud_handler+0xc>)
 8082a48:	681b      	ldr	r3, [r3, #0]
 8082a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8082a4c:	9301      	str	r3, [sp, #4]
 8082a4e:	bd08      	pop	{r3, pc}
 8082a50:	080401cc 	.word	0x080401cc

08082a54 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8082a54:	b508      	push	{r3, lr}
 8082a56:	4b02      	ldr	r3, [pc, #8]	; (8082a60 <network_connect+0xc>)
 8082a58:	681b      	ldr	r3, [r3, #0]
 8082a5a:	685b      	ldr	r3, [r3, #4]
 8082a5c:	9301      	str	r3, [sp, #4]
 8082a5e:	bd08      	pop	{r3, pc}
 8082a60:	080401c8 	.word	0x080401c8

08082a64 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8082a64:	b508      	push	{r3, lr}
 8082a66:	4b02      	ldr	r3, [pc, #8]	; (8082a70 <network_connecting+0xc>)
 8082a68:	681b      	ldr	r3, [r3, #0]
 8082a6a:	689b      	ldr	r3, [r3, #8]
 8082a6c:	9301      	str	r3, [sp, #4]
 8082a6e:	bd08      	pop	{r3, pc}
 8082a70:	080401c8 	.word	0x080401c8

08082a74 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8082a74:	b508      	push	{r3, lr}
 8082a76:	4b02      	ldr	r3, [pc, #8]	; (8082a80 <network_disconnect+0xc>)
 8082a78:	681b      	ldr	r3, [r3, #0]
 8082a7a:	68db      	ldr	r3, [r3, #12]
 8082a7c:	9301      	str	r3, [sp, #4]
 8082a7e:	bd08      	pop	{r3, pc}
 8082a80:	080401c8 	.word	0x080401c8

08082a84 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8082a84:	b508      	push	{r3, lr}
 8082a86:	4b02      	ldr	r3, [pc, #8]	; (8082a90 <network_ready+0xc>)
 8082a88:	681b      	ldr	r3, [r3, #0]
 8082a8a:	691b      	ldr	r3, [r3, #16]
 8082a8c:	9301      	str	r3, [sp, #4]
 8082a8e:	bd08      	pop	{r3, pc}
 8082a90:	080401c8 	.word	0x080401c8

08082a94 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8082a94:	b508      	push	{r3, lr}
 8082a96:	4b02      	ldr	r3, [pc, #8]	; (8082aa0 <network_on+0xc>)
 8082a98:	681b      	ldr	r3, [r3, #0]
 8082a9a:	695b      	ldr	r3, [r3, #20]
 8082a9c:	9301      	str	r3, [sp, #4]
 8082a9e:	bd08      	pop	{r3, pc}
 8082aa0:	080401c8 	.word	0x080401c8

08082aa4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8082aa4:	b508      	push	{r3, lr}
 8082aa6:	4b02      	ldr	r3, [pc, #8]	; (8082ab0 <network_off+0xc>)
 8082aa8:	681b      	ldr	r3, [r3, #0]
 8082aaa:	699b      	ldr	r3, [r3, #24]
 8082aac:	9301      	str	r3, [sp, #4]
 8082aae:	bd08      	pop	{r3, pc}
 8082ab0:	080401c8 	.word	0x080401c8

08082ab4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8082ab4:	b508      	push	{r3, lr}
 8082ab6:	4b02      	ldr	r3, [pc, #8]	; (8082ac0 <network_listen+0xc>)
 8082ab8:	681b      	ldr	r3, [r3, #0]
 8082aba:	69db      	ldr	r3, [r3, #28]
 8082abc:	9301      	str	r3, [sp, #4]
 8082abe:	bd08      	pop	{r3, pc}
 8082ac0:	080401c8 	.word	0x080401c8

08082ac4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8082ac4:	b508      	push	{r3, lr}
 8082ac6:	4b02      	ldr	r3, [pc, #8]	; (8082ad0 <network_listening+0xc>)
 8082ac8:	681b      	ldr	r3, [r3, #0]
 8082aca:	6a1b      	ldr	r3, [r3, #32]
 8082acc:	9301      	str	r3, [sp, #4]
 8082ace:	bd08      	pop	{r3, pc}
 8082ad0:	080401c8 	.word	0x080401c8

08082ad4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8082ad4:	b508      	push	{r3, lr}
 8082ad6:	4b02      	ldr	r3, [pc, #8]	; (8082ae0 <network_set_listen_timeout+0xc>)
 8082ad8:	681b      	ldr	r3, [r3, #0]
 8082ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082adc:	9301      	str	r3, [sp, #4]
 8082ade:	bd08      	pop	{r3, pc}
 8082ae0:	080401c8 	.word	0x080401c8

08082ae4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8082ae4:	b508      	push	{r3, lr}
 8082ae6:	4b02      	ldr	r3, [pc, #8]	; (8082af0 <network_get_listen_timeout+0xc>)
 8082ae8:	681b      	ldr	r3, [r3, #0]
 8082aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8082aec:	9301      	str	r3, [sp, #4]
 8082aee:	bd08      	pop	{r3, pc}
 8082af0:	080401c8 	.word	0x080401c8

08082af4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8082af4:	b508      	push	{r3, lr}
 8082af6:	4b02      	ldr	r3, [pc, #8]	; (8082b00 <malloc+0xc>)
 8082af8:	681b      	ldr	r3, [r3, #0]
 8082afa:	681b      	ldr	r3, [r3, #0]
 8082afc:	9301      	str	r3, [sp, #4]
 8082afe:	bd08      	pop	{r3, pc}
 8082b00:	080401a0 	.word	0x080401a0

08082b04 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8082b04:	b508      	push	{r3, lr}
 8082b06:	4b02      	ldr	r3, [pc, #8]	; (8082b10 <free+0xc>)
 8082b08:	681b      	ldr	r3, [r3, #0]
 8082b0a:	685b      	ldr	r3, [r3, #4]
 8082b0c:	9301      	str	r3, [sp, #4]
 8082b0e:	bd08      	pop	{r3, pc}
 8082b10:	080401a0 	.word	0x080401a0

08082b14 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8082b14:	b508      	push	{r3, lr}
 8082b16:	4b02      	ldr	r3, [pc, #8]	; (8082b20 <realloc+0xc>)
 8082b18:	681b      	ldr	r3, [r3, #0]
 8082b1a:	689b      	ldr	r3, [r3, #8]
 8082b1c:	9301      	str	r3, [sp, #4]
 8082b1e:	bd08      	pop	{r3, pc}
 8082b20:	080401a0 	.word	0x080401a0

08082b24 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 8082b24:	b508      	push	{r3, lr}
 8082b26:	4b02      	ldr	r3, [pc, #8]	; (8082b30 <siprintf+0xc>)
 8082b28:	681b      	ldr	r3, [r3, #0]
 8082b2a:	691b      	ldr	r3, [r3, #16]
 8082b2c:	9301      	str	r3, [sp, #4]
 8082b2e:	bd08      	pop	{r3, pc}
 8082b30:	080401a0 	.word	0x080401a0

08082b34 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 8082b34:	b508      	push	{r3, lr}
 8082b36:	4b02      	ldr	r3, [pc, #8]	; (8082b40 <siscanf+0xc>)
 8082b38:	681b      	ldr	r3, [r3, #0]
 8082b3a:	699b      	ldr	r3, [r3, #24]
 8082b3c:	9301      	str	r3, [sp, #4]
 8082b3e:	bd08      	pop	{r3, pc}
 8082b40:	080401a0 	.word	0x080401a0

08082b44 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8082b44:	b508      	push	{r3, lr}
 8082b46:	4b02      	ldr	r3, [pc, #8]	; (8082b50 <snprintf+0xc>)
 8082b48:	681b      	ldr	r3, [r3, #0]
 8082b4a:	69db      	ldr	r3, [r3, #28]
 8082b4c:	9301      	str	r3, [sp, #4]
 8082b4e:	bd08      	pop	{r3, pc}
 8082b50:	080401a0 	.word	0x080401a0

08082b54 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8082b54:	b508      	push	{r3, lr}
 8082b56:	4b02      	ldr	r3, [pc, #8]	; (8082b60 <abort+0xc>)
 8082b58:	681b      	ldr	r3, [r3, #0]
 8082b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082b5c:	9301      	str	r3, [sp, #4]
 8082b5e:	bd08      	pop	{r3, pc}
 8082b60:	080401a0 	.word	0x080401a0

08082b64 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8082b64:	b508      	push	{r3, lr}
 8082b66:	4b02      	ldr	r3, [pc, #8]	; (8082b70 <_malloc_r+0xc>)
 8082b68:	681b      	ldr	r3, [r3, #0]
 8082b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082b6c:	9301      	str	r3, [sp, #4]
 8082b6e:	bd08      	pop	{r3, pc}
 8082b70:	080401a0 	.word	0x080401a0

08082b74 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 8082b74:	b508      	push	{r3, lr}
 8082b76:	4b02      	ldr	r3, [pc, #8]	; (8082b80 <__errno+0xc>)
 8082b78:	681b      	ldr	r3, [r3, #0]
 8082b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8082b7c:	9301      	str	r3, [sp, #4]
 8082b7e:	bd08      	pop	{r3, pc}
 8082b80:	080401a0 	.word	0x080401a0

08082b84 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8082b84:	2100      	movs	r1, #0
 8082b86:	f7ff bec1 	b.w	808290c <system_delay_ms>

08082b8a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8082b8a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082b8c:	6883      	ldr	r3, [r0, #8]
 8082b8e:	4604      	mov	r4, r0
 8082b90:	b90b      	cbnz	r3, 8082b96 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8082b92:	f001 fda2 	bl	80846da <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082b96:	68c3      	ldr	r3, [r0, #12]
 8082b98:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8082b9a:	68a3      	ldr	r3, [r4, #8]
 8082b9c:	b11b      	cbz	r3, 8082ba6 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8082b9e:	2203      	movs	r2, #3
 8082ba0:	4621      	mov	r1, r4
 8082ba2:	4620      	mov	r0, r4
 8082ba4:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8082ba6:	4620      	mov	r0, r4
}
 8082ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8082bac:	2110      	movs	r1, #16
 8082bae:	f001 bd92 	b.w	80846d6 <_ZdlPvj>

08082bb2 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8082bb2:	2200      	movs	r2, #0
 8082bb4:	4611      	mov	r1, r2
 8082bb6:	6840      	ldr	r0, [r0, #4]
 8082bb8:	f7ff bf64 	b.w	8082a84 <network_ready>

08082bbc <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8082bbc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 8082bc0:	2600      	movs	r6, #0
 8082bc2:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8082bc4:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082bc6:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8082bc8:	4688      	mov	r8, r1
 8082bca:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 8082bcc:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082bd0:	f004 fb2d 	bl	808722e <strlen>
 8082bd4:	9600      	str	r6, [sp, #0]
 8082bd6:	b281      	uxth	r1, r0
 8082bd8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8082bdc:	4622      	mov	r2, r4
 8082bde:	4638      	mov	r0, r7
 8082be0:	f7ff fcac 	bl	808253c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8082be4:	b120      	cbz	r0, 8082bf0 <_ZN5spark13CellularClass7resolveEPKc+0x34>
 8082be6:	4631      	mov	r1, r6
 8082be8:	4628      	mov	r0, r5
 8082bea:	f000 fd63 	bl	80836b4 <_ZN9IPAddressC1Em>
 8082bee:	e003      	b.n	8082bf8 <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 8082bf0:	4621      	mov	r1, r4
 8082bf2:	4628      	mov	r0, r5
 8082bf4:	f000 fd56 	bl	80836a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 8082bf8:	4628      	mov	r0, r5
 8082bfa:	b004      	add	sp, #16
 8082bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08082c00 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 8082c00:	2200      	movs	r2, #0
 8082c02:	4611      	mov	r1, r2
 8082c04:	6840      	ldr	r0, [r0, #4]
 8082c06:	f7ff bf5d 	b.w	8082ac4 <network_listening>

08082c0a <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 8082c0a:	2200      	movs	r2, #0
 8082c0c:	4611      	mov	r1, r2
 8082c0e:	6840      	ldr	r0, [r0, #4]
 8082c10:	f7ff bf68 	b.w	8082ae4 <network_get_listen_timeout>

08082c14 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 8082c14:	2200      	movs	r2, #0
 8082c16:	6840      	ldr	r0, [r0, #4]
 8082c18:	f7ff bf5c 	b.w	8082ad4 <network_set_listen_timeout>

08082c1c <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 8082c1c:	2200      	movs	r2, #0
 8082c1e:	f081 0101 	eor.w	r1, r1, #1
 8082c22:	6840      	ldr	r0, [r0, #4]
 8082c24:	f7ff bf46 	b.w	8082ab4 <network_listen>

08082c28 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8082c28:	2300      	movs	r3, #0
 8082c2a:	461a      	mov	r2, r3
 8082c2c:	4619      	mov	r1, r3
 8082c2e:	6840      	ldr	r0, [r0, #4]
 8082c30:	f7ff bf38 	b.w	8082aa4 <network_off>

08082c34 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8082c34:	2300      	movs	r3, #0
 8082c36:	461a      	mov	r2, r3
 8082c38:	4619      	mov	r1, r3
 8082c3a:	6840      	ldr	r0, [r0, #4]
 8082c3c:	f7ff bf2a 	b.w	8082a94 <network_on>

08082c40 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 8082c40:	2200      	movs	r2, #0
 8082c42:	4611      	mov	r1, r2
 8082c44:	6840      	ldr	r0, [r0, #4]
 8082c46:	f7ff bf0d 	b.w	8082a64 <network_connecting>

08082c4a <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8082c4a:	2200      	movs	r2, #0
 8082c4c:	2102      	movs	r1, #2
 8082c4e:	6840      	ldr	r0, [r0, #4]
 8082c50:	f7ff bf10 	b.w	8082a74 <network_disconnect>

08082c54 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 8082c54:	2300      	movs	r3, #0
 8082c56:	461a      	mov	r2, r3
 8082c58:	6840      	ldr	r0, [r0, #4]
 8082c5a:	f7ff befb 	b.w	8082a54 <network_connect>
	...

08082c60 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
 8082c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082c62:	460f      	mov	r7, r1
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
 8082c64:	4b1a      	ldr	r3, [pc, #104]	; (8082cd0 <_ZN5spark13CellularClass4RSSIEv+0x70>)
 8082c66:	2500      	movs	r5, #0
 8082c68:	6003      	str	r3, [r0, #0]
 8082c6a:	2618      	movs	r6, #24
 8082c6c:	3328      	adds	r3, #40	; 0x28
 8082c6e:	b089      	sub	sp, #36	; 0x24
 8082c70:	6043      	str	r3, [r0, #4]
 8082c72:	6085      	str	r5, [r0, #8]
 8082c74:	60c5      	str	r5, [r0, #12]
 8082c76:	4632      	mov	r2, r6
 8082c78:	4629      	mov	r1, r5
 8082c7a:	4604      	mov	r4, r0
 8082c7c:	3010      	adds	r0, #16
 8082c7e:	f004 fa78 	bl	8087172 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 8082c82:	462a      	mov	r2, r5
 8082c84:	4629      	mov	r1, r5
 8082c86:	6878      	ldr	r0, [r7, #4]
 8082c88:	f7ff fefc 	bl	8082a84 <network_ready>
 8082c8c:	b908      	cbnz	r0, 8082c92 <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
 8082c8e:	60a0      	str	r0, [r4, #8]
            return sig;
 8082c90:	e01b      	b.n	8082cca <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
 8082c92:	4629      	mov	r1, r5
 8082c94:	4632      	mov	r2, r6
 8082c96:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
 8082c98:	9500      	str	r5, [sp, #0]
 8082c9a:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
 8082c9c:	f004 fa69 	bl	8087172 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8082ca0:	a902      	add	r1, sp, #8
 8082ca2:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
 8082ca4:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8082ca8:	f7ff fc50 	bl	808254c <cellular_signal>
 8082cac:	b110      	cbz	r0, 8082cb4 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
 8082cae:	2301      	movs	r3, #1
 8082cb0:	60a3      	str	r3, [r4, #8]
            return sig;
 8082cb2:	e00a      	b.n	8082cca <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
 8082cb4:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
 8082cb6:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
 8082cb8:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
 8082cba:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
 8082cbc:	b90b      	cbnz	r3, 8082cc2 <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
 8082cbe:	2302      	movs	r3, #2
 8082cc0:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
 8082cc2:	a902      	add	r1, sp, #8
 8082cc4:	4620      	mov	r0, r4
 8082cc6:	f000 f895 	bl	8082df4 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
 8082cca:	4620      	mov	r0, r4
 8082ccc:	b009      	add	sp, #36	; 0x24
 8082cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082cd0:	08087fa0 	.word	0x08087fa0

08082cd4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8082cd4:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8082cd6:	4c08      	ldr	r4, [pc, #32]	; (8082cf8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8082cd8:	2528      	movs	r5, #40	; 0x28
 8082cda:	462a      	mov	r2, r5
 8082cdc:	2100      	movs	r1, #0
 8082cde:	4620      	mov	r0, r4
 8082ce0:	f004 fa47 	bl	8087172 <memset>
        cid = -1;
 8082ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8082ce8:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8082cea:	4b04      	ldr	r3, [pc, #16]	; (8082cfc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
 8082cec:	2204      	movs	r2, #4
 8082cee:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8082cf0:	4a03      	ldr	r2, [pc, #12]	; (8082d00 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
        size = sizeof(*this);
 8082cf2:	8025      	strh	r5, [r4, #0]
 8082cf4:	601a      	str	r2, [r3, #0]
 8082cf6:	bd38      	pop	{r3, r4, r5, pc}
 8082cf8:	20000324 	.word	0x20000324
 8082cfc:	2000031c 	.word	0x2000031c
 8082d00:	08087f6c 	.word	0x08087f6c

08082d04 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 8082d04:	4770      	bx	lr

08082d06 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
 8082d06:	7d00      	ldrb	r0, [r0, #20]
 8082d08:	4770      	bx	lr
	...

08082d0c <_ZNK14CellularSignal16getStrengthValueEv>:

    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
 8082d0c:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
 8082d0e:	7d03      	ldrb	r3, [r0, #20]
 8082d10:	b11b      	cbz	r3, 8082d1a <_ZNK14CellularSignal16getStrengthValueEv+0xe>
 8082d12:	6980      	ldr	r0, [r0, #24]
 8082d14:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8082d18:	d101      	bne.n	8082d1e <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
 8082d1a:	2000      	movs	r0, #0
 8082d1c:	bd08      	pop	{r3, pc}
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
 8082d1e:	f003 fccf 	bl	80866c0 <__aeabi_i2f>
 8082d22:	4902      	ldr	r1, [pc, #8]	; (8082d2c <_ZNK14CellularSignal16getStrengthValueEv+0x20>)
 8082d24:	f003 fdd4 	bl	80868d0 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8082d28:	bd08      	pop	{r3, pc}
 8082d2a:	bf00      	nop
 8082d2c:	42c80000 	.word	0x42c80000

08082d30 <_ZNK14CellularSignal15getQualityValueEv>:

    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
 8082d30:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
 8082d32:	7d03      	ldrb	r3, [r0, #20]
 8082d34:	b11b      	cbz	r3, 8082d3e <_ZNK14CellularSignal15getQualityValueEv+0xe>
 8082d36:	6a00      	ldr	r0, [r0, #32]
 8082d38:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8082d3c:	d101      	bne.n	8082d42 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
 8082d3e:	2000      	movs	r0, #0
 8082d40:	bd08      	pop	{r3, pc}
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
 8082d42:	f003 fcbd 	bl	80866c0 <__aeabi_i2f>
 8082d46:	4902      	ldr	r1, [pc, #8]	; (8082d50 <_ZNK14CellularSignal15getQualityValueEv+0x20>)
 8082d48:	f003 fdc2 	bl	80868d0 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8082d4c:	bd08      	pop	{r3, pc}
 8082d4e:	bf00      	nop
 8082d50:	42c80000 	.word	0x42c80000

08082d54 <_ZNK14CellularSignal7printToER5Print>:

size_t CellularSignal::printTo(Print& p) const
{
 8082d54:	b570      	push	{r4, r5, r6, lr}
 8082d56:	460d      	mov	r5, r1
 8082d58:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 8082d5a:	220a      	movs	r2, #10
 8082d5c:	6881      	ldr	r1, [r0, #8]
 8082d5e:	4628      	mov	r0, r5
 8082d60:	f000 ff83 	bl	8083c6a <_ZN5Print5printEii>
    n += p.print(',');
 8082d64:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 8082d66:	4604      	mov	r4, r0
    n += p.print(',');
 8082d68:	4628      	mov	r0, r5
 8082d6a:	f000 ff17 	bl	8083b9c <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
 8082d6e:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
 8082d70:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
 8082d72:	68f1      	ldr	r1, [r6, #12]
 8082d74:	4628      	mov	r0, r5
 8082d76:	f000 ff78 	bl	8083c6a <_ZN5Print5printEii>
    return n;
}
 8082d7a:	4420      	add	r0, r4
 8082d7c:	bd70      	pop	{r4, r5, r6, pc}

08082d7e <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
 8082d7e:	f1a0 0004 	sub.w	r0, r0, #4
 8082d82:	f7ff bfe7 	b.w	8082d54 <_ZNK14CellularSignal7printToER5Print>

08082d86 <_ZN14CellularSignalD0Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 8082d86:	b510      	push	{r4, lr}
 8082d88:	4604      	mov	r4, r0
 8082d8a:	2128      	movs	r1, #40	; 0x28
 8082d8c:	f001 fca3 	bl	80846d6 <_ZdlPvj>
 8082d90:	4620      	mov	r0, r4
 8082d92:	bd10      	pop	{r4, pc}

08082d94 <_ZNK14CellularSignal10getQualityEv>:

    return 0.0f;
}

float CellularSignal::getQuality() const
{
 8082d94:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
 8082d96:	7d03      	ldrb	r3, [r0, #20]
 8082d98:	b15b      	cbz	r3, 8082db2 <_ZNK14CellularSignal10getQualityEv+0x1e>
 8082d9a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8082d9c:	2800      	cmp	r0, #0
 8082d9e:	db08      	blt.n	8082db2 <_ZNK14CellularSignal10getQualityEv+0x1e>
        return (float)sig_.quality / 65535.0f * 100.0f;
 8082da0:	f003 fc8e 	bl	80866c0 <__aeabi_i2f>
 8082da4:	4904      	ldr	r1, [pc, #16]	; (8082db8 <_ZNK14CellularSignal10getQualityEv+0x24>)
 8082da6:	f003 fd93 	bl	80868d0 <__aeabi_fdiv>
 8082daa:	4904      	ldr	r1, [pc, #16]	; (8082dbc <_ZNK14CellularSignal10getQualityEv+0x28>)
 8082dac:	f003 fcdc 	bl	8086768 <__aeabi_fmul>
 8082db0:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 8082db2:	4803      	ldr	r0, [pc, #12]	; (8082dc0 <_ZNK14CellularSignal10getQualityEv+0x2c>)
}
 8082db4:	bd08      	pop	{r3, pc}
 8082db6:	bf00      	nop
 8082db8:	477fff00 	.word	0x477fff00
 8082dbc:	42c80000 	.word	0x42c80000
 8082dc0:	bf800000 	.word	0xbf800000

08082dc4 <_ZNK14CellularSignal11getStrengthEv>:
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
 8082dc4:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
 8082dc6:	7d03      	ldrb	r3, [r0, #20]
 8082dc8:	b15b      	cbz	r3, 8082de2 <_ZNK14CellularSignal11getStrengthEv+0x1e>
 8082dca:	69c0      	ldr	r0, [r0, #28]
 8082dcc:	2800      	cmp	r0, #0
 8082dce:	db08      	blt.n	8082de2 <_ZNK14CellularSignal11getStrengthEv+0x1e>
        return (float)sig_.strength / 65535.0f * 100.0f;
 8082dd0:	f003 fc76 	bl	80866c0 <__aeabi_i2f>
 8082dd4:	4904      	ldr	r1, [pc, #16]	; (8082de8 <_ZNK14CellularSignal11getStrengthEv+0x24>)
 8082dd6:	f003 fd7b 	bl	80868d0 <__aeabi_fdiv>
 8082dda:	4904      	ldr	r1, [pc, #16]	; (8082dec <_ZNK14CellularSignal11getStrengthEv+0x28>)
 8082ddc:	f003 fcc4 	bl	8086768 <__aeabi_fmul>
 8082de0:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 8082de2:	4803      	ldr	r0, [pc, #12]	; (8082df0 <_ZNK14CellularSignal11getStrengthEv+0x2c>)
}
 8082de4:	bd08      	pop	{r3, pc}
 8082de6:	bf00      	nop
 8082de8:	477fff00 	.word	0x477fff00
 8082dec:	42c80000 	.word	0x42c80000
 8082df0:	bf800000 	.word	0xbf800000

08082df4 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
 8082df4:	b530      	push	{r4, r5, lr}
    sig_ = sig;
 8082df6:	460d      	mov	r5, r1
 8082df8:	f100 0410 	add.w	r4, r0, #16
 8082dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8082dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8082e00:	e895 0003 	ldmia.w	r5, {r0, r1}
 8082e04:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
 8082e08:	2001      	movs	r0, #1
 8082e0a:	bd30      	pop	{r4, r5, pc}

08082e0c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8082e0c:	4770      	bx	lr

08082e0e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 8082e0e:	2000      	movs	r0, #0
 8082e10:	4770      	bx	lr

08082e12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8082e12:	b510      	push	{r4, lr}
 8082e14:	4604      	mov	r4, r0
 8082e16:	2110      	movs	r1, #16
 8082e18:	f001 fc5d 	bl	80846d6 <_ZdlPvj>
 8082e1c:	4620      	mov	r0, r4
 8082e1e:	bd10      	pop	{r4, pc}

08082e20 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 8082e20:	b508      	push	{r3, lr}
      { delete this; }
 8082e22:	b108      	cbz	r0, 8082e28 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 8082e24:	f7ff fff5 	bl	8082e12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8082e28:	bd08      	pop	{r3, pc}

08082e2a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8082e2a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8082e2c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8082e2e:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8082e30:	b113      	cbz	r3, 8082e38 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8082e32:	2203      	movs	r2, #3
 8082e34:	4601      	mov	r1, r0
 8082e36:	4798      	blx	r3
    }
 8082e38:	4620      	mov	r0, r4
 8082e3a:	bd10      	pop	{r4, pc}

08082e3c <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8082e3c:	2200      	movs	r2, #0
 8082e3e:	6002      	str	r2, [r0, #0]
 8082e40:	f64f 729c 	movw	r2, #65436	; 0xff9c
 8082e44:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8082e46:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8082e48:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8082e4c:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8082e4e:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082e50:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 8082e52:	680c      	ldr	r4, [r1, #0]
 8082e54:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8082e56:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 8082e58:	bd10      	pop	{r4, pc}

08082e5a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 8082e5a:	b510      	push	{r4, lr}
 8082e5c:	4604      	mov	r4, r0
    free((void*)msg_);
 8082e5e:	6800      	ldr	r0, [r0, #0]
 8082e60:	f7ff fe50 	bl	8082b04 <free>
}
 8082e64:	4620      	mov	r0, r4
 8082e66:	bd10      	pop	{r4, pc}

08082e68 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 8082e68:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8082e6a:	68c4      	ldr	r4, [r0, #12]
 8082e6c:	b1f4      	cbz	r4, 8082eac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 8082e6e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8082e70:	2b02      	cmp	r3, #2
 8082e72:	d103      	bne.n	8082e7c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 8082e74:	f104 000c 	add.w	r0, r4, #12
 8082e78:	f7ff ffef 	bl	8082e5a <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 8082e7c:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 8082e7e:	b135      	cbz	r5, 8082e8e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082e80:	4628      	mov	r0, r5
 8082e82:	f7ff ffd2 	bl	8082e2a <_ZNSt14_Function_baseD1Ev>
 8082e86:	2110      	movs	r1, #16
 8082e88:	4628      	mov	r0, r5
 8082e8a:	f001 fc24 	bl	80846d6 <_ZdlPvj>
 8082e8e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8082e90:	b135      	cbz	r5, 8082ea0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8082e92:	4628      	mov	r0, r5
 8082e94:	f7ff ffc9 	bl	8082e2a <_ZNSt14_Function_baseD1Ev>
 8082e98:	2110      	movs	r1, #16
 8082e9a:	4628      	mov	r0, r5
 8082e9c:	f001 fc1b 	bl	80846d6 <_ZdlPvj>
 8082ea0:	4620      	mov	r0, r4
 8082ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8082ea6:	2114      	movs	r1, #20
 8082ea8:	f001 bc15 	b.w	80846d6 <_ZdlPvj>
 8082eac:	bd38      	pop	{r3, r4, r5, pc}

08082eae <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8082eae:	b510      	push	{r4, lr}
 8082eb0:	b088      	sub	sp, #32
 8082eb2:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8082eb4:	4668      	mov	r0, sp
 8082eb6:	f000 ffc3 	bl	8083e40 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 8082eba:	4669      	mov	r1, sp
 8082ebc:	a804      	add	r0, sp, #16
 8082ebe:	f000 ffe1 	bl	8083e84 <_ZN6StringC1ERKS_>
 8082ec2:	a804      	add	r0, sp, #16
 8082ec4:	47a0      	blx	r4
 8082ec6:	4604      	mov	r4, r0
 8082ec8:	a804      	add	r0, sp, #16
 8082eca:	f000 ff72 	bl	8083db2 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8082ece:	4668      	mov	r0, sp
 8082ed0:	f000 ff6f 	bl	8083db2 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 8082ed4:	4620      	mov	r0, r4
 8082ed6:	b008      	add	sp, #32
 8082ed8:	bd10      	pop	{r4, pc}

08082eda <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8082eda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082edc:	4607      	mov	r7, r0
 8082ede:	460e      	mov	r6, r1
 8082ee0:	4615      	mov	r5, r2
 8082ee2:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 8082ee4:	2410      	movs	r4, #16
 8082ee6:	4622      	mov	r2, r4
 8082ee8:	2100      	movs	r1, #0
 8082eea:	4668      	mov	r0, sp
 8082eec:	f004 f941 	bl	8087172 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8082ef0:	2200      	movs	r2, #0
 8082ef2:	4669      	mov	r1, sp
 8082ef4:	4610      	mov	r0, r2
         size = sizeof(*this);
 8082ef6:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 8082efa:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 8082efc:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 8082efe:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8082f00:	f7ff fd50 	bl	80829a4 <spark_function>
}
 8082f04:	b005      	add	sp, #20
 8082f06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08082f08 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 8082f08:	b513      	push	{r0, r1, r4, lr}
 8082f0a:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8082f0c:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 8082f10:	2300      	movs	r3, #0
 8082f12:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8082f14:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8082f16:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8082f18:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8082f1a:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 8082f1c:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8082f1e:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8082f20:	f7fe f966 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082f24:	4620      	mov	r0, r4
 8082f26:	b002      	add	sp, #8
 8082f28:	bd10      	pop	{r4, pc}

08082f2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8082f2a:	680b      	ldr	r3, [r1, #0]
 8082f2c:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 8082f2e:	b113      	cbz	r3, 8082f36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8082f30:	685a      	ldr	r2, [r3, #4]
 8082f32:	3201      	adds	r2, #1
 8082f34:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 8082f36:	4770      	bx	lr

08082f38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8082f38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082f3a:	460c      	mov	r4, r1
 8082f3c:	4606      	mov	r6, r0
 8082f3e:	460f      	mov	r7, r1
 8082f40:	f854 3b04 	ldr.w	r3, [r4], #4
 8082f44:	ad02      	add	r5, sp, #8
 8082f46:	f845 3d08 	str.w	r3, [r5, #-8]!
 8082f4a:	4621      	mov	r1, r4
 8082f4c:	a801      	add	r0, sp, #4
 8082f4e:	f7ff ffec 	bl	8082f2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 8082f52:	4629      	mov	r1, r5
 8082f54:	4630      	mov	r0, r6
 8082f56:	f7ff ffd7 	bl	8082f08 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8082f5a:	a801      	add	r0, sp, #4
 8082f5c:	f7fe f948 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082f60:	4620      	mov	r0, r4
 8082f62:	f7fe f945 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 8082f66:	4638      	mov	r0, r7
 8082f68:	2108      	movs	r1, #8
 8082f6a:	f001 fbb4 	bl	80846d6 <_ZdlPvj>
        return p;
    }
 8082f6e:	4630      	mov	r0, r6
 8082f70:	b003      	add	sp, #12
 8082f72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08082f74 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 8082f74:	b513      	push	{r0, r1, r4, lr}
 8082f76:	460b      	mov	r3, r1
 8082f78:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082f7a:	c803      	ldmia	r0, {r0, r1}
 8082f7c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8082f80:	e893 0003 	ldmia.w	r3, {r0, r1}
 8082f84:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8082f88:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8082f8c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8082f90:	b002      	add	sp, #8
 8082f92:	bd10      	pop	{r4, pc}

08082f94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8082f94:	b538      	push	{r3, r4, r5, lr}
 8082f96:	2300      	movs	r3, #0
 8082f98:	4604      	mov	r4, r0
 8082f9a:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082f9c:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8082f9e:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082fa0:	f7fd f87d 	bl	808009e <_Znwj>
 8082fa4:	b128      	cbz	r0, 8082fb2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8082fa6:	2301      	movs	r3, #1
 8082fa8:	6043      	str	r3, [r0, #4]
 8082faa:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 8082fac:	4b02      	ldr	r3, [pc, #8]	; (8082fb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8082fae:	60c5      	str	r5, [r0, #12]
 8082fb0:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082fb2:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 8082fb4:	4620      	mov	r0, r4
 8082fb6:	bd38      	pop	{r3, r4, r5, pc}
 8082fb8:	08087fd4 	.word	0x08087fd4

08082fbc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082fbc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8082fbe:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082fc0:	b90a      	cbnz	r2, 8082fc6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8082fc2:	f001 fb8a 	bl	80846da <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082fc6:	68c3      	ldr	r3, [r0, #12]
    }
 8082fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082fcc:	4718      	bx	r3

08082fce <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8082fce:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082fd0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8082fd2:	f100 0110 	add.w	r1, r0, #16
 8082fd6:	f7ff fff1 	bl	8082fbc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8082fda:	bd08      	pop	{r3, pc}

08082fdc <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082fdc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8082fde:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082fe0:	b90a      	cbnz	r2, 8082fe6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8082fe2:	f001 fb7a 	bl	80846da <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082fe6:	68c3      	ldr	r3, [r0, #12]
    }
 8082fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082fec:	4718      	bx	r3

08082fee <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8082fee:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082ff0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8082ff2:	f100 0110 	add.w	r1, r0, #16
 8082ff6:	f7ff fff1 	bl	8082fdc <_ZNKSt8functionIFvRKbEEclES1_>
 8082ffa:	bd08      	pop	{r3, pc}

08082ffc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8082ffc:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082ffe:	2300      	movs	r3, #0
 8083000:	6083      	str	r3, [r0, #8]
 8083002:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8083004:	4604      	mov	r4, r0
 8083006:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8083008:	b12b      	cbz	r3, 8083016 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808300a:	2202      	movs	r2, #2
 808300c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808300e:	68eb      	ldr	r3, [r5, #12]
 8083010:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8083012:	68ab      	ldr	r3, [r5, #8]
 8083014:	60a3      	str	r3, [r4, #8]
	}
    }
 8083016:	4620      	mov	r0, r4
 8083018:	bd38      	pop	{r3, r4, r5, pc}
	...

0808301c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 808301c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808301e:	b089      	sub	sp, #36	; 0x24
 8083020:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 8083022:	4668      	mov	r0, sp
 8083024:	f7ff ff0a 	bl	8082e3c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8083028:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 808302c:	2300      	movs	r3, #0
 808302e:	f88d 3008 	strb.w	r3, [sp, #8]
 8083032:	e8d4 3f4f 	ldrexb	r3, [r4]
 8083036:	2b00      	cmp	r3, #0
 8083038:	d103      	bne.n	8083042 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 808303a:	e8c4 2f41 	strexb	r1, r2, [r4]
 808303e:	2900      	cmp	r1, #0
 8083040:	d1f7      	bne.n	8083032 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 8083042:	d002      	beq.n	808304a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 8083044:	f88d 3008 	strb.w	r3, [sp, #8]
 8083048:	e063      	b.n	8083112 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 808304a:	f114 050c 	adds.w	r5, r4, #12
 808304e:	d003      	beq.n	8083058 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 8083050:	4669      	mov	r1, sp
 8083052:	4628      	mov	r0, r5
 8083054:	f7ff fef2 	bl	8082e3c <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8083058:	f3bf 8f5f 	dmb	sy
 808305c:	2301      	movs	r3, #1
 808305e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8083060:	f3bf 8f5f 	dmb	sy
 8083064:	f104 0308 	add.w	r3, r4, #8
 8083068:	2000      	movs	r0, #0
 808306a:	e853 6f00 	ldrex	r6, [r3]
 808306e:	e843 0200 	strex	r2, r0, [r3]
 8083072:	2a00      	cmp	r2, #0
 8083074:	d1f9      	bne.n	808306a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 8083076:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 808307a:	2e00      	cmp	r6, #0
 808307c:	d049      	beq.n	8083112 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 808307e:	f7ff fc5d 	bl	808293c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8083082:	b120      	cbz	r0, 808308e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8083084:	4629      	mov	r1, r5
 8083086:	4630      	mov	r0, r6
 8083088:	f7ff ff98 	bl	8082fbc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 808308c:	e03a      	b.n	8083104 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808308e:	4631      	mov	r1, r6
 8083090:	a802      	add	r0, sp, #8
 8083092:	f7ff ffb3 	bl	8082ffc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8083096:	68e0      	ldr	r0, [r4, #12]
 8083098:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 808309c:	b108      	cbz	r0, 80830a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 808309e:	f004 f8ab 	bl	80871f8 <strdup>
 80830a2:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80830a4:	2010      	movs	r0, #16
 80830a6:	f8ad 501c 	strh.w	r5, [sp, #28]
 80830aa:	f7fc fff8 	bl	808009e <_Znwj>
 80830ae:	4605      	mov	r5, r0
 80830b0:	b1e8      	cbz	r0, 80830ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80830b2:	2700      	movs	r7, #0
 80830b4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80830b6:	2018      	movs	r0, #24
 80830b8:	f7fc fff1 	bl	808009e <_Znwj>
 80830bc:	4604      	mov	r4, r0
 80830be:	b188      	cbz	r0, 80830e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80830c0:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80830c2:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80830c4:	a802      	add	r0, sp, #8
 80830c6:	f7ff ff55 	bl	8082f74 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80830ca:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80830cc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80830ce:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80830d0:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80830d2:	9204      	str	r2, [sp, #16]
 80830d4:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80830d6:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80830d8:	60e3      	str	r3, [r4, #12]
 80830da:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80830de:	9205      	str	r2, [sp, #20]
 80830e0:	f7ff feac 	bl	8082e3c <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80830e4:	4b0d      	ldr	r3, [pc, #52]	; (808311c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80830e6:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80830e8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80830ea:	4b0d      	ldr	r3, [pc, #52]	; (8083120 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80830ec:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80830ee:	a806      	add	r0, sp, #24
 80830f0:	f7ff feb3 	bl	8082e5a <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80830f4:	a802      	add	r0, sp, #8
 80830f6:	f7ff fe98 	bl	8082e2a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80830fa:	2200      	movs	r2, #0
 80830fc:	4629      	mov	r1, r5
 80830fe:	4809      	ldr	r0, [pc, #36]	; (8083124 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 8083100:	f7ff fc24 	bl	808294c <application_thread_invoke>
 8083104:	4630      	mov	r0, r6
 8083106:	f7ff fe90 	bl	8082e2a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 808310a:	2110      	movs	r1, #16
 808310c:	4630      	mov	r0, r6
 808310e:	f001 fae2 	bl	80846d6 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 8083112:	4668      	mov	r0, sp
 8083114:	f7ff fea1 	bl	8082e5a <_ZN8particle5ErrorD1Ev>
    }
 8083118:	b009      	add	sp, #36	; 0x24
 808311a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808311c:	08082fcf 	.word	0x08082fcf
 8083120:	08083245 	.word	0x08083245
 8083124:	08082b8b 	.word	0x08082b8b

08083128 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8083128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808312c:	b08b      	sub	sp, #44	; 0x2c
 808312e:	4606      	mov	r6, r0
 8083130:	460f      	mov	r7, r1
 8083132:	4690      	mov	r8, r2
 8083134:	4699      	mov	r9, r3
 8083136:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808313a:	f7ff fc53 	bl	80829e4 <spark_cloud_flag_connected>
 808313e:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 8083140:	4683      	mov	fp, r0
 8083142:	bb30      	cbnz	r0, 8083192 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8083144:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8083148:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 808314a:	a905      	add	r1, sp, #20
 808314c:	4628      	mov	r0, r5
 808314e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8083152:	f7ff fe73 	bl	8082e3c <_ZN8particle5ErrorC1EOS0_>
 8083156:	2014      	movs	r0, #20
 8083158:	f7fc ffa1 	bl	808009e <_Znwj>
 808315c:	4604      	mov	r4, r0
 808315e:	b158      	cbz	r0, 8083178 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8083160:	2302      	movs	r3, #2
 8083162:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8083164:	2301      	movs	r3, #1
 8083166:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8083168:	f8c0 b004 	str.w	fp, [r0, #4]
 808316c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 8083170:	4629      	mov	r1, r5
 8083172:	300c      	adds	r0, #12
 8083174:	f7ff fe62 	bl	8082e3c <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 8083178:	4630      	mov	r0, r6
 808317a:	4621      	mov	r1, r4
 808317c:	f840 4b04 	str.w	r4, [r0], #4
 8083180:	f7ff ff08 	bl	8082f94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8083184:	4628      	mov	r0, r5
 8083186:	f7ff fe68 	bl	8082e5a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 808318a:	a805      	add	r0, sp, #20
 808318c:	f7ff fe65 	bl	8082e5a <_ZN8particle5ErrorD1Ev>
 8083190:	e052      	b.n	8083238 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8083192:	2400      	movs	r4, #0
 8083194:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8083196:	2014      	movs	r0, #20
 8083198:	606c      	str	r4, [r5, #4]
 808319a:	60ac      	str	r4, [r5, #8]
 808319c:	9307      	str	r3, [sp, #28]
 808319e:	f7fc ff7e 	bl	808009e <_Znwj>
 80831a2:	4601      	mov	r1, r0
 80831a4:	b118      	cbz	r0, 80831ae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80831a6:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80831a8:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80831aa:	6044      	str	r4, [r0, #4]
 80831ac:	6084      	str	r4, [r0, #8]
 80831ae:	a804      	add	r0, sp, #16
 80831b0:	9103      	str	r1, [sp, #12]
 80831b2:	f7ff feef 	bl	8082f94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80831b6:	4b22      	ldr	r3, [pc, #136]	; (8083240 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80831b8:	2008      	movs	r0, #8
 80831ba:	9308      	str	r3, [sp, #32]
 80831bc:	f7fc ff6f 	bl	808009e <_Znwj>
 80831c0:	4604      	mov	r4, r0
 80831c2:	b128      	cbz	r0, 80831d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80831c4:	9b03      	ldr	r3, [sp, #12]
 80831c6:	a904      	add	r1, sp, #16
 80831c8:	f840 3b04 	str.w	r3, [r0], #4
 80831cc:	f7ff fead 	bl	8082f2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80831d0:	9500      	str	r5, [sp, #0]
 80831d2:	fa5f f38a 	uxtb.w	r3, sl
 80831d6:	464a      	mov	r2, r9
 80831d8:	4641      	mov	r1, r8
 80831da:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80831dc:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80831de:	f7ff fc11 	bl	8082a04 <spark_send_event>
 80831e2:	b920      	cbnz	r0, 80831ee <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80831e4:	9b03      	ldr	r3, [sp, #12]
 80831e6:	785b      	ldrb	r3, [r3, #1]
 80831e8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80831ec:	b183      	cbz	r3, 8083210 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80831ee:	9b03      	ldr	r3, [sp, #12]
 80831f0:	a904      	add	r1, sp, #16
 80831f2:	a806      	add	r0, sp, #24
 80831f4:	9305      	str	r3, [sp, #20]
 80831f6:	f7ff fe98 	bl	8082f2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80831fa:	a905      	add	r1, sp, #20
 80831fc:	4630      	mov	r0, r6
 80831fe:	f7ff fe83 	bl	8082f08 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8083202:	a806      	add	r0, sp, #24
 8083204:	f7fd fff4 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8083208:	a804      	add	r0, sp, #16
 808320a:	f7fd fff1 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808320e:	e013      	b.n	8083238 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 8083210:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 8083214:	a905      	add	r1, sp, #20
 8083216:	a803      	add	r0, sp, #12
 8083218:	9205      	str	r2, [sp, #20]
 808321a:	f8ad 3018 	strh.w	r3, [sp, #24]
 808321e:	f7ff fefd 	bl	808301c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8083222:	a805      	add	r0, sp, #20
 8083224:	f7ff fe19 	bl	8082e5a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8083228:	a805      	add	r0, sp, #20
 808322a:	9909      	ldr	r1, [sp, #36]	; 0x24
 808322c:	f7ff fe84 	bl	8082f38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 8083230:	a806      	add	r0, sp, #24
 8083232:	f7fd ffdd 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8083236:	e7da      	b.n	80831ee <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 8083238:	4630      	mov	r0, r6
 808323a:	b00b      	add	sp, #44	; 0x2c
 808323c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8083240:	080833b5 	.word	0x080833b5

08083244 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8083244:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8083246:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8083248:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 808324a:	d006      	beq.n	808325a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 808324c:	2a03      	cmp	r2, #3
 808324e:	d017      	beq.n	8083280 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 8083250:	2a01      	cmp	r2, #1
 8083252:	d122      	bne.n	808329a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8083254:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8083256:	6003      	str	r3, [r0, #0]
	      break;
 8083258:	e01f      	b.n	808329a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808325a:	2018      	movs	r0, #24
 808325c:	680e      	ldr	r6, [r1, #0]
 808325e:	f7fc ff1e 	bl	808009e <_Znwj>
 8083262:	4605      	mov	r5, r0
 8083264:	b150      	cbz	r0, 808327c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8083266:	4631      	mov	r1, r6
 8083268:	f7ff fec8 	bl	8082ffc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 808326c:	6930      	ldr	r0, [r6, #16]
 808326e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8083272:	b108      	cbz	r0, 8083278 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8083274:	f003 ffc0 	bl	80871f8 <strdup>
 8083278:	6128      	str	r0, [r5, #16]
 808327a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808327c:	6025      	str	r5, [r4, #0]
 808327e:	e00c      	b.n	808329a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8083280:	6804      	ldr	r4, [r0, #0]
 8083282:	b154      	cbz	r4, 808329a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 8083284:	f104 0010 	add.w	r0, r4, #16
 8083288:	f7ff fde7 	bl	8082e5a <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808328c:	4620      	mov	r0, r4
 808328e:	f7ff fdcc 	bl	8082e2a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8083292:	2118      	movs	r1, #24
 8083294:	4620      	mov	r0, r4
 8083296:	f001 fa1e 	bl	80846d6 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 808329a:	2000      	movs	r0, #0
 808329c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808329e <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808329e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80832a0:	2300      	movs	r3, #0
 80832a2:	6083      	str	r3, [r0, #8]
 80832a4:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80832a6:	4604      	mov	r4, r0
 80832a8:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80832aa:	b12b      	cbz	r3, 80832b8 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80832ac:	2202      	movs	r2, #2
 80832ae:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80832b0:	68eb      	ldr	r3, [r5, #12]
 80832b2:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80832b4:	68ab      	ldr	r3, [r5, #8]
 80832b6:	60a3      	str	r3, [r4, #8]
	}
    }
 80832b8:	4620      	mov	r0, r4
 80832ba:	bd38      	pop	{r3, r4, r5, pc}

080832bc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80832bc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80832be:	b570      	push	{r4, r5, r6, lr}
 80832c0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80832c2:	d006      	beq.n	80832d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80832c4:	2a03      	cmp	r2, #3
 80832c6:	d011      	beq.n	80832ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80832c8:	2a01      	cmp	r2, #1
 80832ca:	d118      	bne.n	80832fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80832cc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80832ce:	6003      	str	r3, [r0, #0]
	      break;
 80832d0:	e015      	b.n	80832fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80832d2:	2014      	movs	r0, #20
 80832d4:	680e      	ldr	r6, [r1, #0]
 80832d6:	f7fc fee2 	bl	808009e <_Znwj>
 80832da:	4605      	mov	r5, r0
 80832dc:	b120      	cbz	r0, 80832e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80832de:	4631      	mov	r1, r6
 80832e0:	f7ff ffdd 	bl	808329e <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80832e4:	7c33      	ldrb	r3, [r6, #16]
 80832e6:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80832e8:	6025      	str	r5, [r4, #0]
 80832ea:	e008      	b.n	80832fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80832ec:	6804      	ldr	r4, [r0, #0]
 80832ee:	b134      	cbz	r4, 80832fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80832f0:	4620      	mov	r0, r4
 80832f2:	f7ff fd9a 	bl	8082e2a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80832f6:	2114      	movs	r1, #20
 80832f8:	4620      	mov	r0, r4
 80832fa:	f001 f9ec 	bl	80846d6 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80832fe:	2000      	movs	r0, #0
 8083300:	bd70      	pop	{r4, r5, r6, pc}
	...

08083304 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 8083304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8083306:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8083308:	f3bf 8f5f 	dmb	sy
 808330c:	b087      	sub	sp, #28
 808330e:	2300      	movs	r3, #0
 8083310:	e850 6f00 	ldrex	r6, [r0]
 8083314:	e840 3200 	strex	r2, r3, [r0]
 8083318:	2a00      	cmp	r2, #0
 808331a:	d1f9      	bne.n	8083310 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 808331c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8083320:	2e00      	cmp	r6, #0
 8083322:	d03f      	beq.n	80833a4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8083324:	4618      	mov	r0, r3
 8083326:	f7ff fb09 	bl	808293c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 808332a:	4607      	mov	r7, r0
 808332c:	b120      	cbz	r0, 8083338 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808332e:	4621      	mov	r1, r4
 8083330:	4630      	mov	r0, r6
 8083332:	f7ff fe53 	bl	8082fdc <_ZNKSt8functionIFvRKbEEclES1_>
 8083336:	e02e      	b.n	8083396 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8083338:	4631      	mov	r1, r6
 808333a:	a801      	add	r0, sp, #4
 808333c:	f7ff ffaf 	bl	808329e <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8083340:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8083342:	2010      	movs	r0, #16
 8083344:	f88d 3014 	strb.w	r3, [sp, #20]
 8083348:	f7fc fea9 	bl	808009e <_Znwj>
 808334c:	4605      	mov	r5, r0
 808334e:	b1d0      	cbz	r0, 8083386 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8083350:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8083352:	2014      	movs	r0, #20
 8083354:	f7fc fea3 	bl	808009e <_Znwj>
 8083358:	4604      	mov	r4, r0
 808335a:	b178      	cbz	r0, 808337c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808335c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 808335e:	4601      	mov	r1, r0
 8083360:	a801      	add	r0, sp, #4
 8083362:	f7ff fe07 	bl	8082f74 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8083366:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8083368:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808336a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808336c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 808336e:	9203      	str	r2, [sp, #12]
 8083370:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8083372:	60e3      	str	r3, [r4, #12]
 8083374:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8083378:	9204      	str	r2, [sp, #16]
 808337a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808337c:	4b0a      	ldr	r3, [pc, #40]	; (80833a8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808337e:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8083380:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8083382:	4b0a      	ldr	r3, [pc, #40]	; (80833ac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8083384:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8083386:	a801      	add	r0, sp, #4
 8083388:	f7ff fd4f 	bl	8082e2a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808338c:	2200      	movs	r2, #0
 808338e:	4629      	mov	r1, r5
 8083390:	4807      	ldr	r0, [pc, #28]	; (80833b0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 8083392:	f7ff fadb 	bl	808294c <application_thread_invoke>
 8083396:	4630      	mov	r0, r6
 8083398:	f7ff fd47 	bl	8082e2a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 808339c:	2110      	movs	r1, #16
 808339e:	4630      	mov	r0, r6
 80833a0:	f001 f999 	bl	80846d6 <_ZdlPvj>
        }
    }
 80833a4:	b007      	add	sp, #28
 80833a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80833a8:	08082fef 	.word	0x08082fef
 80833ac:	080832bd 	.word	0x080832bd
 80833b0:	08082b8b 	.word	0x08082b8b

080833b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80833b4:	b530      	push	{r4, r5, lr}
 80833b6:	4604      	mov	r4, r0
 80833b8:	b085      	sub	sp, #20
 80833ba:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80833bc:	4668      	mov	r0, sp
 80833be:	4611      	mov	r1, r2
 80833c0:	f7ff fdba 	bl	8082f38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80833c4:	b17c      	cbz	r4, 80833e6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80833c6:	b224      	sxth	r4, r4
 80833c8:	4628      	mov	r0, r5
 80833ca:	b10d      	cbz	r5, 80833d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80833cc:	f003 ff14 	bl	80871f8 <strdup>
 80833d0:	9002      	str	r0, [sp, #8]
 80833d2:	a902      	add	r1, sp, #8
 80833d4:	4668      	mov	r0, sp
 80833d6:	f8ad 400c 	strh.w	r4, [sp, #12]
 80833da:	f7ff fe1f 	bl	808301c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80833de:	a802      	add	r0, sp, #8
 80833e0:	f7ff fd3b 	bl	8082e5a <_ZN8particle5ErrorD1Ev>
 80833e4:	e01d      	b.n	8083422 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80833e6:	f04f 0201 	mov.w	r2, #1
 80833ea:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80833ec:	f88d 4008 	strb.w	r4, [sp, #8]
 80833f0:	e8d0 3f4f 	ldrexb	r3, [r0]
 80833f4:	42a3      	cmp	r3, r4
 80833f6:	d103      	bne.n	8083400 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80833f8:	e8c0 2f41 	strexb	r1, r2, [r0]
 80833fc:	2900      	cmp	r1, #0
 80833fe:	d1f7      	bne.n	80833f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 8083400:	d002      	beq.n	8083408 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 8083402:	f88d 3008 	strb.w	r3, [sp, #8]
 8083406:	e00c      	b.n	8083422 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 8083408:	f110 010c 	adds.w	r1, r0, #12
 808340c:	f04f 0301 	mov.w	r3, #1
 8083410:	bf18      	it	ne
 8083412:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8083414:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 8083418:	3004      	adds	r0, #4
 808341a:	f800 3c03 	strb.w	r3, [r0, #-3]
 808341e:	f7ff ff71 	bl	8083304 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 8083422:	a801      	add	r0, sp, #4
 8083424:	f7fd fee4 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 8083428:	b005      	add	sp, #20
 808342a:	bd30      	pop	{r4, r5, pc}

0808342c <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 808342c:	6800      	ldr	r0, [r0, #0]
 808342e:	f000 b8d4 	b.w	80835da <_ZN7TwoWire4lockEv>

08083432 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 8083432:	b510      	push	{r4, lr}
 8083434:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 8083436:	6001      	str	r1, [r0, #0]
 8083438:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 808343a:	b10a      	cbz	r2, 8083440 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 808343c:	f7ff fff6 	bl	808342c <_ZN9FuelGauge4lockEv>
    }
}
 8083440:	4620      	mov	r0, r4
 8083442:	bd10      	pop	{r4, pc}

08083444 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
 8083444:	b538      	push	{r3, r4, r5, lr}
 8083446:	4604      	mov	r4, r0
 8083448:	460d      	mov	r5, r1
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808344a:	f001 f8d9 	bl	8084600 <_Z20__fetch_global_Wire3v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
 808344e:	462a      	mov	r2, r5
 8083450:	4601      	mov	r1, r0
 8083452:	4620      	mov	r0, r4
 8083454:	f7ff ffed 	bl	8083432 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
 8083458:	4620      	mov	r0, r4
 808345a:	bd38      	pop	{r3, r4, r5, pc}

0808345c <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 808345c:	6800      	ldr	r0, [r0, #0]
 808345e:	f000 b8c5 	b.w	80835ec <_ZN7TwoWire6unlockEv>

08083462 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 8083462:	b510      	push	{r4, lr}
{
    if (lock_) {
 8083464:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 8083466:	4604      	mov	r4, r0
{
    if (lock_) {
 8083468:	b10b      	cbz	r3, 808346e <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 808346a:	f7ff fff7 	bl	808345c <_ZN9FuelGauge6unlockEv>
    }
}
 808346e:	4620      	mov	r0, r4
 8083470:	bd10      	pop	{r4, pc}

08083472 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 8083472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8083474:	4604      	mov	r4, r0
 8083476:	460f      	mov	r7, r1
 8083478:	4616      	mov	r6, r2
 808347a:	461d      	mov	r5, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
 808347c:	f7ff ffd6 	bl	808342c <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
 8083480:	6820      	ldr	r0, [r4, #0]
 8083482:	2136      	movs	r1, #54	; 0x36
 8083484:	f000 f89b 	bl	80835be <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
 8083488:	6820      	ldr	r0, [r4, #0]
 808348a:	4639      	mov	r1, r7
 808348c:	6803      	ldr	r3, [r0, #0]
 808348e:	689b      	ldr	r3, [r3, #8]
 8083490:	4798      	blx	r3
    i2c_.endTransmission(true);
 8083492:	2101      	movs	r1, #1
 8083494:	6820      	ldr	r0, [r4, #0]
 8083496:	f000 f895 	bl	80835c4 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
 808349a:	2202      	movs	r2, #2
 808349c:	2136      	movs	r1, #54	; 0x36
 808349e:	2301      	movs	r3, #1
 80834a0:	6820      	ldr	r0, [r4, #0]
 80834a2:	f000 f883 	bl	80835ac <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
 80834a6:	6820      	ldr	r0, [r4, #0]
 80834a8:	6803      	ldr	r3, [r0, #0]
 80834aa:	695b      	ldr	r3, [r3, #20]
 80834ac:	4798      	blx	r3
 80834ae:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
 80834b0:	6820      	ldr	r0, [r4, #0]
 80834b2:	6803      	ldr	r3, [r0, #0]
 80834b4:	695b      	ldr	r3, [r3, #20]
 80834b6:	4798      	blx	r3
 80834b8:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 80834ba:	4620      	mov	r0, r4
}
 80834bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80834c0:	f7ff bfcc 	b.w	808345c <_ZN9FuelGauge6unlockEv>

080834c4 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
 80834c4:	b513      	push	{r0, r1, r4, lr}

	byte MSB = 0;
 80834c6:	2200      	movs	r2, #0
	byte LSB = 0;
 80834c8:	ab02      	add	r3, sp, #8
 80834ca:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
 80834ce:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
 80834d2:	2104      	movs	r1, #4
 80834d4:	f10d 0206 	add.w	r2, sp, #6
 80834d8:	f7ff ffcb 	bl	8083472 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
 80834dc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80834e0:	f002 fcce 	bl	8085e80 <__aeabi_i2d>
 80834e4:	2200      	movs	r2, #0
 80834e6:	4b08      	ldr	r3, [pc, #32]	; (8083508 <_ZN9FuelGauge6getSoCEv+0x44>)
 80834e8:	f002 fd30 	bl	8085f4c <__aeabi_dmul>
 80834ec:	f002 ffde 	bl	80864ac <__aeabi_d2f>
 80834f0:	4604      	mov	r4, r0
 80834f2:	f89d 0006 	ldrb.w	r0, [sp, #6]
 80834f6:	f003 f8e3 	bl	80866c0 <__aeabi_i2f>
 80834fa:	4601      	mov	r1, r0
 80834fc:	4620      	mov	r0, r4
 80834fe:	f003 f82b 	bl	8086558 <__addsf3>
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
 8083502:	b002      	add	sp, #8
 8083504:	bd10      	pop	{r4, pc}
 8083506:	bf00      	nop
 8083508:	3f700000 	.word	0x3f700000

0808350c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 808350c:	4770      	bx	lr

0808350e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 808350e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8083510:	4606      	mov	r6, r0
 8083512:	4615      	mov	r5, r2
 8083514:	460c      	mov	r4, r1
 8083516:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8083518:	42bc      	cmp	r4, r7
 808351a:	d006      	beq.n	808352a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 808351c:	6833      	ldr	r3, [r6, #0]
 808351e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8083522:	689b      	ldr	r3, [r3, #8]
 8083524:	4630      	mov	r0, r6
 8083526:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8083528:	e7f6      	b.n	8083518 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 808352a:	4628      	mov	r0, r5
 808352c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808352e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 808352e:	2200      	movs	r2, #0
 8083530:	7c00      	ldrb	r0, [r0, #16]
 8083532:	f7ff b8e3 	b.w	80826fc <HAL_I2C_Write_Data>

08083536 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 8083536:	2100      	movs	r1, #0
 8083538:	7c00      	ldrb	r0, [r0, #16]
 808353a:	f7ff b8e7 	b.w	808270c <HAL_I2C_Available_Data>

0808353e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 808353e:	2100      	movs	r1, #0
 8083540:	7c00      	ldrb	r0, [r0, #16]
 8083542:	f7ff b8eb 	b.w	808271c <HAL_I2C_Read_Data>

08083546 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8083546:	2100      	movs	r1, #0
 8083548:	7c00      	ldrb	r0, [r0, #16]
 808354a:	f7ff b8ef 	b.w	808272c <HAL_I2C_Peek_Data>

0808354e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 808354e:	2100      	movs	r1, #0
 8083550:	7c00      	ldrb	r0, [r0, #16]
 8083552:	f7ff b8f3 	b.w	808273c <HAL_I2C_Flush_Data>

08083556 <_ZN7TwoWireD0Ev>:
 8083556:	b510      	push	{r4, lr}
 8083558:	4604      	mov	r4, r0
 808355a:	2114      	movs	r1, #20
 808355c:	f001 f8bb 	bl	80846d6 <_ZdlPvj>
 8083560:	4620      	mov	r0, r4
 8083562:	bd10      	pop	{r4, pc}

08083564 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8083564:	b510      	push	{r4, lr}
 8083566:	4604      	mov	r4, r0
 8083568:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808356a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808356e:	60a3      	str	r3, [r4, #8]
 8083570:	4b04      	ldr	r3, [pc, #16]	; (8083584 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8083572:	2100      	movs	r1, #0
{
  _i2c = i2c;
 8083574:	7420      	strb	r0, [r4, #16]
 8083576:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8083578:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 808357a:	f7ff f8ef 	bl	808275c <HAL_I2C_Init>

}
 808357e:	4620      	mov	r0, r4
 8083580:	bd10      	pop	{r4, pc}
 8083582:	bf00      	nop
 8083584:	08087ff0 	.word	0x08087ff0

08083588 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 8083588:	2300      	movs	r3, #0
 808358a:	461a      	mov	r2, r3
 808358c:	4619      	mov	r1, r3
 808358e:	7c00      	ldrb	r0, [r0, #16]
 8083590:	f7ff b894 	b.w	80826bc <HAL_I2C_Begin>

08083594 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8083594:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 8083596:	2400      	movs	r4, #0
 8083598:	7c00      	ldrb	r0, [r0, #16]
 808359a:	9400      	str	r4, [sp, #0]
 808359c:	f7ff f896 	bl	80826cc <HAL_I2C_Request_Data>
  return result;
}
 80835a0:	b2c0      	uxtb	r0, r0
 80835a2:	b002      	add	sp, #8
 80835a4:	bd10      	pop	{r4, pc}

080835a6 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80835a6:	2301      	movs	r3, #1
 80835a8:	f7ff bff4 	b.w	8083594 <_ZN7TwoWire11requestFromEhhh>

080835ac <_ZN7TwoWire11requestFromEiii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
 80835ac:	b2db      	uxtb	r3, r3
 80835ae:	b2d2      	uxtb	r2, r2
 80835b0:	b2c9      	uxtb	r1, r1
 80835b2:	f7ff bfef 	b.w	8083594 <_ZN7TwoWire11requestFromEhhh>

080835b6 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80835b6:	2200      	movs	r2, #0
 80835b8:	7c00      	ldrb	r0, [r0, #16]
 80835ba:	f7ff b88f 	b.w	80826dc <HAL_I2C_Begin_Transmission>

080835be <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80835be:	b2c9      	uxtb	r1, r1
 80835c0:	f7ff bff9 	b.w	80835b6 <_ZN7TwoWire17beginTransmissionEh>

080835c4 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80835c4:	2200      	movs	r2, #0
 80835c6:	7c00      	ldrb	r0, [r0, #16]
 80835c8:	f7ff b890 	b.w	80826ec <HAL_I2C_End_Transmission>

080835cc <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80835cc:	2101      	movs	r1, #1
 80835ce:	f7ff bff9 	b.w	80835c4 <_ZN7TwoWire15endTransmissionEh>

080835d2 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80835d2:	2100      	movs	r1, #0
 80835d4:	7c00      	ldrb	r0, [r0, #16]
 80835d6:	f7ff b8b9 	b.w	808274c <HAL_I2C_Is_Enabled>

080835da <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 80835da:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 80835dc:	2100      	movs	r1, #0
 80835de:	7c00      	ldrb	r0, [r0, #16]
 80835e0:	f7ff f8c4 	bl	808276c <HAL_I2C_Acquire>
}
 80835e4:	fab0 f080 	clz	r0, r0
 80835e8:	0940      	lsrs	r0, r0, #5
 80835ea:	bd08      	pop	{r3, pc}

080835ec <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 80835ec:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 80835ee:	2100      	movs	r1, #0
 80835f0:	7c00      	ldrb	r0, [r0, #16]
 80835f2:	f7ff f8c3 	bl	808277c <HAL_I2C_Release>
}
 80835f6:	fab0 f080 	clz	r0, r0
 80835fa:	0940      	lsrs	r0, r0, #5
 80835fc:	bd08      	pop	{r3, pc}

080835fe <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80835fe:	4700      	bx	r0

08083600 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 8083600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8083602:	461c      	mov	r4, r3
 8083604:	b085      	sub	sp, #20
 8083606:	460e      	mov	r6, r1
 8083608:	4617      	mov	r7, r2
 808360a:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
 808360c:	f7ff f84e 	bl	80826ac <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
 8083610:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 8083612:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8083614:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 8083618:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 808361a:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 808361e:	bfb4      	ite	lt
 8083620:	4603      	movlt	r3, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 8083622:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8083626:	4632      	mov	r2, r6
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 8083628:	bfa4      	itt	ge
 808362a:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 808362e:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8083630:	9300      	str	r3, [sp, #0]
 8083632:	4906      	ldr	r1, [pc, #24]	; (808364c <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)
 8083634:	463b      	mov	r3, r7
 8083636:	4628      	mov	r0, r5

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 8083638:	bfa8      	it	ge
 808363a:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 808363e:	f7ff f82d 	bl	808269c <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 8083642:	fab0 f080 	clz	r0, r0
 8083646:	0940      	lsrs	r0, r0, #5
 8083648:	b005      	add	sp, #20
 808364a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808364c:	080835ff 	.word	0x080835ff

08083650 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8083650:	4770      	bx	lr

08083652 <_ZN9IPAddressD0Ev>:
 8083652:	b510      	push	{r4, lr}
 8083654:	4604      	mov	r4, r0
 8083656:	2108      	movs	r1, #8
 8083658:	f001 f83d 	bl	80846d6 <_ZdlPvj>
 808365c:	4620      	mov	r0, r4
 808365e:	bd10      	pop	{r4, pc}

08083660 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8083660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8083662:	460f      	mov	r7, r1
 8083664:	f100 0608 	add.w	r6, r0, #8
 8083668:	1d05      	adds	r5, r0, #4
 808366a:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808366c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8083670:	220a      	movs	r2, #10
 8083672:	4638      	mov	r0, r7
 8083674:	f000 fad5 	bl	8083c22 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8083678:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808367a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808367c:	d007      	beq.n	808368e <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 808367e:	2c00      	cmp	r4, #0
 8083680:	d0f4      	beq.n	808366c <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8083682:	212e      	movs	r1, #46	; 0x2e
 8083684:	4638      	mov	r0, r7
 8083686:	f000 fa89 	bl	8083b9c <_ZN5Print5printEc>
 808368a:	4404      	add	r4, r0
 808368c:	e7ee      	b.n	808366c <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 808368e:	4620      	mov	r0, r4
 8083690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08083694 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 8083694:	4a02      	ldr	r2, [pc, #8]	; (80836a0 <_ZN9IPAddressC1Ev+0xc>)
 8083696:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8083698:	2200      	movs	r2, #0
 808369a:	6042      	str	r2, [r0, #4]
{
    clear();
}
 808369c:	4770      	bx	lr
 808369e:	bf00      	nop
 80836a0:	08088018 	.word	0x08088018

080836a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80836a4:	4a02      	ldr	r2, [pc, #8]	; (80836b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 80836a6:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 80836a8:	680a      	ldr	r2, [r1, #0]
 80836aa:	6042      	str	r2, [r0, #4]
}
 80836ac:	4770      	bx	lr
 80836ae:	bf00      	nop
 80836b0:	08088018 	.word	0x08088018

080836b4 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80836b4:	4a01      	ldr	r2, [pc, #4]	; (80836bc <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80836b6:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80836b8:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 80836ba:	4770      	bx	lr
 80836bc:	08088018 	.word	0x08088018

080836c0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80836c0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80836c2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80836c6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80836ca:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80836ce:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80836d2:	6041      	str	r1, [r0, #4]
 80836d4:	bd10      	pop	{r4, pc}
	...

080836d8 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80836d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80836da:	4d04      	ldr	r5, [pc, #16]	; (80836ec <_ZN9IPAddressC1Ehhhh+0x14>)
 80836dc:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80836de:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80836e2:	9500      	str	r5, [sp, #0]
 80836e4:	f7ff ffec 	bl	80836c0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80836e8:	b003      	add	sp, #12
 80836ea:	bd30      	pop	{r4, r5, pc}
 80836ec:	08088018 	.word	0x08088018

080836f0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80836f0:	4a01      	ldr	r2, [pc, #4]	; (80836f8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80836f2:	4b02      	ldr	r3, [pc, #8]	; (80836fc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80836f4:	601a      	str	r2, [r3, #0]
 80836f6:	4770      	bx	lr
 80836f8:	0808809a 	.word	0x0808809a
 80836fc:	2000034c 	.word	0x2000034c

08083700 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8083700:	2300      	movs	r3, #0
 8083702:	461a      	mov	r2, r3
 8083704:	6840      	ldr	r0, [r0, #4]
 8083706:	f7ff b9a5 	b.w	8082a54 <network_connect>

0808370a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 808370a:	2200      	movs	r2, #0
 808370c:	2102      	movs	r1, #2
 808370e:	6840      	ldr	r0, [r0, #4]
 8083710:	f7ff b9b0 	b.w	8082a74 <network_disconnect>

08083714 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8083714:	2200      	movs	r2, #0
 8083716:	4611      	mov	r1, r2
 8083718:	6840      	ldr	r0, [r0, #4]
 808371a:	f7ff b9a3 	b.w	8082a64 <network_connecting>

0808371e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 808371e:	2200      	movs	r2, #0
 8083720:	4611      	mov	r1, r2
 8083722:	6840      	ldr	r0, [r0, #4]
 8083724:	f7ff b9ae 	b.w	8082a84 <network_ready>

08083728 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8083728:	2300      	movs	r3, #0
 808372a:	461a      	mov	r2, r3
 808372c:	4619      	mov	r1, r3
 808372e:	6840      	ldr	r0, [r0, #4]
 8083730:	f7ff b9b0 	b.w	8082a94 <network_on>

08083734 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8083734:	2300      	movs	r3, #0
 8083736:	461a      	mov	r2, r3
 8083738:	4619      	mov	r1, r3
 808373a:	6840      	ldr	r0, [r0, #4]
 808373c:	f7ff b9b2 	b.w	8082aa4 <network_off>

08083740 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8083740:	2200      	movs	r2, #0
 8083742:	f081 0101 	eor.w	r1, r1, #1
 8083746:	6840      	ldr	r0, [r0, #4]
 8083748:	f7ff b9b4 	b.w	8082ab4 <network_listen>

0808374c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 808374c:	2200      	movs	r2, #0
 808374e:	6840      	ldr	r0, [r0, #4]
 8083750:	f7ff b9c0 	b.w	8082ad4 <network_set_listen_timeout>

08083754 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8083754:	2200      	movs	r2, #0
 8083756:	4611      	mov	r1, r2
 8083758:	6840      	ldr	r0, [r0, #4]
 808375a:	f7ff b9c3 	b.w	8082ae4 <network_get_listen_timeout>

0808375e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 808375e:	2200      	movs	r2, #0
 8083760:	4611      	mov	r1, r2
 8083762:	6840      	ldr	r0, [r0, #4]
 8083764:	f7ff b9ae 	b.w	8082ac4 <network_listening>

08083768 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8083768:	b5f0      	push	{r4, r5, r6, r7, lr}
 808376a:	4617      	mov	r7, r2
 808376c:	b087      	sub	sp, #28
 808376e:	4605      	mov	r5, r0
    IPAddress addr;
 8083770:	a804      	add	r0, sp, #16
 8083772:	f7ff ff8f 	bl	8083694 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8083776:	2600      	movs	r6, #0
 8083778:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808377a:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 808377c:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8083780:	f003 fd55 	bl	808722e <strlen>
 8083784:	4b0a      	ldr	r3, [pc, #40]	; (80837b0 <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 8083786:	9600      	str	r6, [sp, #0]
 8083788:	b281      	uxth	r1, r0
 808378a:	685b      	ldr	r3, [r3, #4]
 808378c:	4622      	mov	r2, r4
 808378e:	4638      	mov	r0, r7
 8083790:	f7fe fed4 	bl	808253c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8083794:	b120      	cbz	r0, 80837a0 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8083796:	4631      	mov	r1, r6
 8083798:	4628      	mov	r0, r5
 808379a:	f7ff ff8b 	bl	80836b4 <_ZN9IPAddressC1Em>
 808379e:	e003      	b.n	80837a8 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80837a0:	4621      	mov	r1, r4
 80837a2:	4628      	mov	r0, r5
 80837a4:	f7ff ff7e 	bl	80836a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80837a8:	4628      	mov	r0, r5
 80837aa:	b007      	add	sp, #28
 80837ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80837ae:	bf00      	nop
 80837b0:	2000031c 	.word	0x2000031c

080837b4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80837b4:	4b02      	ldr	r3, [pc, #8]	; (80837c0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80837b6:	4a03      	ldr	r2, [pc, #12]	; (80837c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80837b8:	601a      	str	r2, [r3, #0]
 80837ba:	2200      	movs	r2, #0
 80837bc:	605a      	str	r2, [r3, #4]
 80837be:	4770      	bx	lr
 80837c0:	20000350 	.word	0x20000350
 80837c4:	0808810c 	.word	0x0808810c

080837c8 <_ZN4PMIC5beginEv>:
 * Description    : Initializes the I2C for the PMIC module
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
 80837c8:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80837ca:	f000 ff19 	bl	8084600 <_Z20__fetch_global_Wire3v>
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
 80837ce:	f7ff ff00 	bl	80835d2 <_ZN7TwoWire9isEnabledEv>
 80837d2:	b918      	cbnz	r0, 80837dc <_ZN4PMIC5beginEv+0x14>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80837d4:	f000 ff14 	bl	8084600 <_Z20__fetch_global_Wire3v>
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
 80837d8:	f7ff fed6 	bl	8083588 <_ZN7TwoWire5beginEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80837dc:	f000 ff10 	bl	8084600 <_Z20__fetch_global_Wire3v>
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
}
 80837e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
 80837e4:	f7ff bef5 	b.w	80835d2 <_ZN7TwoWire9isEnabledEv>

080837e8 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 80837e8:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80837ea:	f000 ff09 	bl	8084600 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
 80837ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
 80837f2:	f7ff bef2 	b.w	80835da <_ZN7TwoWire4lockEv>

080837f6 <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
 80837f6:	b510      	push	{r4, lr}
 80837f8:	4604      	mov	r4, r0
    lock_(_lock)
 80837fa:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
 80837fc:	b109      	cbz	r1, 8083802 <_ZN4PMICC1Eb+0xc>
        lock();
 80837fe:	f7ff fff3 	bl	80837e8 <_ZN4PMIC4lockEv>
    }
}
 8083802:	4620      	mov	r0, r4
 8083804:	bd10      	pop	{r4, pc}

08083806 <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
 8083806:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8083808:	f000 fefa 	bl	8084600 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
 808380c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
 8083810:	f7ff beec 	b.w	80835ec <_ZN7TwoWire6unlockEv>

08083814 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8083814:	b510      	push	{r4, lr}
{
    if (lock_) {
 8083816:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8083818:	4604      	mov	r4, r0
{
    if (lock_) {
 808381a:	b10b      	cbz	r3, 8083820 <_ZN4PMICD1Ev+0xc>
        unlock();
 808381c:	f7ff fff3 	bl	8083806 <_ZN4PMIC6unlockEv>
    }
}
 8083820:	4620      	mov	r0, r4
 8083822:	bd10      	pop	{r4, pc}

08083824 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 8083824:	b510      	push	{r4, lr}
 8083826:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 8083828:	6800      	ldr	r0, [r0, #0]
 808382a:	f7ff ffec 	bl	8083806 <_ZN4PMIC6unlockEv>
 808382e:	4620      	mov	r0, r4
 8083830:	bd10      	pop	{r4, pc}

08083832 <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
 8083832:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8083834:	ac02      	add	r4, sp, #8
 8083836:	460d      	mov	r5, r1
 8083838:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 808383c:	f7ff ffd4 	bl	80837e8 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8083840:	f000 fede 	bl	8084600 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 8083844:	216b      	movs	r1, #107	; 0x6b
 8083846:	f7ff feba 	bl	80835be <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808384a:	f000 fed9 	bl	8084600 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
 808384e:	6803      	ldr	r3, [r0, #0]
 8083850:	4629      	mov	r1, r5
 8083852:	689b      	ldr	r3, [r3, #8]
 8083854:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8083856:	f000 fed3 	bl	8084600 <_Z20__fetch_global_Wire3v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
 808385a:	2101      	movs	r1, #1
 808385c:	f7ff feb2 	bl	80835c4 <_ZN7TwoWire15endTransmissionEh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8083860:	f000 fece 	bl	8084600 <_Z20__fetch_global_Wire3v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
 8083864:	2301      	movs	r3, #1
 8083866:	461a      	mov	r2, r3
 8083868:	216b      	movs	r1, #107	; 0x6b
 808386a:	f7ff fe9f 	bl	80835ac <_ZN7TwoWire11requestFromEiii>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808386e:	f000 fec7 	bl	8084600 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
 8083872:	6803      	ldr	r3, [r0, #0]
 8083874:	695b      	ldr	r3, [r3, #20]
 8083876:	4798      	blx	r3
 8083878:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
 808387a:	4620      	mov	r0, r4
 808387c:	f7ff ffd2 	bl	8083824 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
 8083880:	b2e8      	uxtb	r0, r5
 8083882:	b003      	add	sp, #12
 8083884:	bd30      	pop	{r4, r5, pc}

08083886 <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
 8083886:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8083888:	ac02      	add	r4, sp, #8
 808388a:	4615      	mov	r5, r2
 808388c:	460e      	mov	r6, r1
 808388e:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8083892:	f7ff ffa9 	bl	80837e8 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8083896:	f000 feb3 	bl	8084600 <_Z20__fetch_global_Wire3v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 808389a:	216b      	movs	r1, #107	; 0x6b
 808389c:	f7ff fe8f 	bl	80835be <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80838a0:	f000 feae 	bl	8084600 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
 80838a4:	6803      	ldr	r3, [r0, #0]
 80838a6:	4631      	mov	r1, r6
 80838a8:	689b      	ldr	r3, [r3, #8]
 80838aa:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80838ac:	f000 fea8 	bl	8084600 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
 80838b0:	6803      	ldr	r3, [r0, #0]
 80838b2:	4629      	mov	r1, r5
 80838b4:	689b      	ldr	r3, [r3, #8]
 80838b6:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80838b8:	f000 fea2 	bl	8084600 <_Z20__fetch_global_Wire3v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
 80838bc:	2101      	movs	r1, #1
 80838be:	f7ff fe81 	bl	80835c4 <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
 80838c2:	4620      	mov	r0, r4
 80838c4:	f7ff ffae 	bl	8083824 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
 80838c8:	b002      	add	sp, #8
 80838ca:	bd70      	pop	{r4, r5, r6, pc}

080838cc <_ZN4PMIC20setInputVoltageLimitEt>:
                    5000
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
 80838cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80838ce:	4604      	mov	r4, r0
 80838d0:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80838d2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80838d4:	f7ff ff88 	bl	80837e8 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 80838d8:	2100      	movs	r1, #0
 80838da:	4620      	mov	r0, r4
 80838dc:	f7ff ffa9 	bl	8083832 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 80838e0:	f241 1358 	movw	r3, #4440	; 0x1158
 80838e4:	429d      	cmp	r5, r3
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;
 80838e6:	f000 0287 	and.w	r2, r0, #135	; 0x87

    switch(voltage) {
 80838ea:	d05b      	beq.n	80839a4 <_ZN4PMIC20setInputVoltageLimitEt+0xd8>
 80838ec:	d820      	bhi.n	8083930 <_ZN4PMIC20setInputVoltageLimitEt+0x64>
 80838ee:	f241 0318 	movw	r3, #4120	; 0x1018
 80838f2:	429d      	cmp	r5, r3
 80838f4:	d04d      	beq.n	8083992 <_ZN4PMIC20setInputVoltageLimitEt+0xc6>
 80838f6:	d80c      	bhi.n	8083912 <_ZN4PMIC20setInputVoltageLimitEt+0x46>
 80838f8:	f640 7378 	movw	r3, #3960	; 0xf78
 80838fc:	429d      	cmp	r5, r3
 80838fe:	d042      	beq.n	8083986 <_ZN4PMIC20setInputVoltageLimitEt+0xba>
 8083900:	f640 73c8 	movw	r3, #4040	; 0xfc8
 8083904:	429d      	cmp	r5, r3
 8083906:	d041      	beq.n	808398c <_ZN4PMIC20setInputVoltageLimitEt+0xc0>
 8083908:	f640 7328 	movw	r3, #3880	; 0xf28
 808390c:	429d      	cmp	r5, r3
 808390e:	d160      	bne.n	80839d2 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
 8083910:	e059      	b.n	80839c6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
 8083912:	f241 03b8 	movw	r3, #4280	; 0x10b8
 8083916:	429d      	cmp	r5, r3
 8083918:	d03e      	beq.n	8083998 <_ZN4PMIC20setInputVoltageLimitEt+0xcc>
 808391a:	f241 1308 	movw	r3, #4360	; 0x1108
 808391e:	429d      	cmp	r5, r3
 8083920:	d03d      	beq.n	808399e <_ZN4PMIC20setInputVoltageLimitEt+0xd2>
 8083922:	f241 0368 	movw	r3, #4200	; 0x1068
 8083926:	429d      	cmp	r5, r3
 8083928:	d153      	bne.n	80839d2 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
        break;

        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
 808392a:	f042 0220 	orr.w	r2, r2, #32
 808392e:	e04a      	b.n	80839c6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 8083930:	f241 2398 	movw	r3, #4760	; 0x1298
 8083934:	429d      	cmp	r5, r3
 8083936:	d03e      	beq.n	80839b6 <_ZN4PMIC20setInputVoltageLimitEt+0xea>
 8083938:	d80e      	bhi.n	8083958 <_ZN4PMIC20setInputVoltageLimitEt+0x8c>
 808393a:	f241 13f8 	movw	r3, #4600	; 0x11f8
 808393e:	429d      	cmp	r5, r3
 8083940:	d033      	beq.n	80839aa <_ZN4PMIC20setInputVoltageLimitEt+0xde>
 8083942:	f241 2348 	movw	r3, #4680	; 0x1248
 8083946:	429d      	cmp	r5, r3
 8083948:	d032      	beq.n	80839b0 <_ZN4PMIC20setInputVoltageLimitEt+0xe4>
 808394a:	f241 13a8 	movw	r3, #4520	; 0x11a8
 808394e:	429d      	cmp	r5, r3
 8083950:	d13f      	bne.n	80839d2 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
        break;

        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
 8083952:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8083956:	e036      	b.n	80839c6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 8083958:	f241 3338 	movw	r3, #4920	; 0x1338
 808395c:	429d      	cmp	r5, r3
 808395e:	d02d      	beq.n	80839bc <_ZN4PMIC20setInputVoltageLimitEt+0xf0>
 8083960:	d806      	bhi.n	8083970 <_ZN4PMIC20setInputVoltageLimitEt+0xa4>
 8083962:	f241 23e8 	movw	r3, #4840	; 0x12e8
 8083966:	429d      	cmp	r5, r3
 8083968:	d133      	bne.n	80839d2 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
        break;

        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
 808396a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 808396e:	e02a      	b.n	80839c6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 8083970:	f241 3388 	movw	r3, #5000	; 0x1388
 8083974:	429d      	cmp	r5, r3
 8083976:	d024      	beq.n	80839c2 <_ZN4PMIC20setInputVoltageLimitEt+0xf6>
 8083978:	f241 33d8 	movw	r3, #5080	; 0x13d8
 808397c:	429d      	cmp	r5, r3
 808397e:	d128      	bne.n	80839d2 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;

        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
 8083980:	f042 0278 	orr.w	r2, r2, #120	; 0x78
 8083984:	e01f      	b.n	80839c6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 3880:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 3960:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00001000));
 8083986:	f042 0208 	orr.w	r2, r2, #8
 808398a:	e01c      	b.n	80839c6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4040:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00010000));
 808398c:	f042 0210 	orr.w	r2, r2, #16
 8083990:	e019      	b.n	80839c6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
 8083992:	f042 0218 	orr.w	r2, r2, #24
 8083996:	e016      	b.n	80839c6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
        break;

        case 4280:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00101000));
 8083998:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 808399c:	e013      	b.n	80839c6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4360:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00110000));
 808399e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80839a2:	e010      	b.n	80839c6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
 80839a4:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 80839a8:	e00d      	b.n	80839c6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
        break;

        case 4600:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01001000));
 80839aa:	f042 0248 	orr.w	r2, r2, #72	; 0x48
 80839ae:	e00a      	b.n	80839c6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4680:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01010000));
 80839b0:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80839b4:	e007      	b.n	80839c6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
 80839b6:	f042 0258 	orr.w	r2, r2, #88	; 0x58
 80839ba:	e004      	b.n	80839c6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
        break;

        case 4920:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
 80839bc:	f042 0268 	orr.w	r2, r2, #104	; 0x68
 80839c0:	e001      	b.n	80839c6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
 80839c2:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80839c6:	4620      	mov	r0, r4
 80839c8:	2100      	movs	r1, #0
 80839ca:	f7ff ff5c 	bl	8083886 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 80839ce:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;
 80839d0:	e000      	b.n	80839d4 <_ZN4PMIC20setInputVoltageLimitEt+0x108>
        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
        break;

        default:
        return 0; // return error since the value passed didn't match
 80839d2:	2400      	movs	r4, #0
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 80839d4:	a801      	add	r0, sp, #4
 80839d6:	f7ff ff25 	bl	8083824 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 80839da:	4620      	mov	r0, r4
 80839dc:	b003      	add	sp, #12
 80839de:	bd30      	pop	{r4, r5, pc}

080839e0 <_ZN4PMIC20setInputCurrentLimitEt>:
 * Function Name  : setInputCurrentLimit
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
 80839e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80839e2:	4604      	mov	r4, r0
 80839e4:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80839e6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80839e8:	f7ff fefe 	bl	80837e8 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 80839ec:	2100      	movs	r1, #0
 80839ee:	4620      	mov	r0, r4
 80839f0:	f7ff ff1f 	bl	8083832 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b11111000;

    switch (current) {
 80839f4:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;
 80839f8:	f000 02f8 	and.w	r2, r0, #248	; 0xf8

    switch (current) {
 80839fc:	d023      	beq.n	8083a46 <_ZN4PMIC20setInputCurrentLimitEt+0x66>
 80839fe:	d807      	bhi.n	8083a10 <_ZN4PMIC20setInputCurrentLimitEt+0x30>
 8083a00:	2d96      	cmp	r5, #150	; 0x96
 8083a02:	d01a      	beq.n	8083a3a <_ZN4PMIC20setInputCurrentLimitEt+0x5a>
 8083a04:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 8083a08:	d01a      	beq.n	8083a40 <_ZN4PMIC20setInputCurrentLimitEt+0x60>
 8083a0a:	2d64      	cmp	r5, #100	; 0x64
 8083a0c:	d129      	bne.n	8083a62 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
 8083a0e:	e022      	b.n	8083a56 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
 8083a10:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8083a14:	429d      	cmp	r5, r3
 8083a16:	d019      	beq.n	8083a4c <_ZN4PMIC20setInputCurrentLimitEt+0x6c>
 8083a18:	d805      	bhi.n	8083a26 <_ZN4PMIC20setInputCurrentLimitEt+0x46>
 8083a1a:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8083a1e:	d120      	bne.n	8083a62 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
        break;

        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
 8083a20:	f042 0204 	orr.w	r2, r2, #4
 8083a24:	e017      	b.n	8083a56 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;

    switch (current) {
 8083a26:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8083a2a:	d012      	beq.n	8083a52 <_ZN4PMIC20setInputCurrentLimitEt+0x72>
 8083a2c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8083a30:	429d      	cmp	r5, r3
 8083a32:	d116      	bne.n	8083a62 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;

        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
 8083a34:	f042 0207 	orr.w	r2, r2, #7
 8083a38:	e00d      	b.n	8083a56 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 100:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 150:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000001));
 8083a3a:	f042 0201 	orr.w	r2, r2, #1
 8083a3e:	e00a      	b.n	8083a56 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000010));
 8083a40:	f042 0202 	orr.w	r2, r2, #2
 8083a44:	e007      	b.n	8083a56 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
 8083a46:	f042 0203 	orr.w	r2, r2, #3
 8083a4a:	e004      	b.n	8083a56 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
        break;

        case 1500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
 8083a4c:	f042 0205 	orr.w	r2, r2, #5
 8083a50:	e001      	b.n	8083a56 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
 8083a52:	f042 0206 	orr.w	r2, r2, #6
 8083a56:	4620      	mov	r0, r4
 8083a58:	2100      	movs	r1, #0
 8083a5a:	f7ff ff14 	bl	8083886 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 8083a5e:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;
 8083a60:	e000      	b.n	8083a64 <_ZN4PMIC20setInputCurrentLimitEt+0x84>
        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
        break;

        default:
        return 0; // return error since the value passed didn't match
 8083a62:	2400      	movs	r4, #0
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);
 8083a64:	a801      	add	r0, sp, #4
 8083a66:	f7ff fedd 	bl	8083824 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 8083a6a:	4620      	mov	r0, r4
 8083a6c:	b003      	add	sp, #12
 8083a6e:	bd30      	pop	{r4, r5, pc}

08083a70 <_ZN4PMIC16setChargeCurrentEbbbbbb>:
                    For example,
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
 8083a70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8083a72:	460c      	mov	r4, r1
 8083a74:	4617      	mov	r7, r2
 8083a76:	4605      	mov	r5, r0
 8083a78:	461e      	mov	r6, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8083a7a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8083a7c:	f7ff feb4 	bl	80837e8 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte current = 0;
    if (bit7) current = current | 0b10000000;
 8083a80:	2c00      	cmp	r4, #0
 8083a82:	bf0c      	ite	eq
 8083a84:	2400      	moveq	r4, #0
 8083a86:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
 8083a88:	b117      	cbz	r7, 8083a90 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x20>
 8083a8a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8083a8e:	b2e4      	uxtb	r4, r4
    if (bit5) current = current | 0b00100000;
 8083a90:	b10e      	cbz	r6, 8083a96 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x26>
 8083a92:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
 8083a96:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8083a9a:	b10b      	cbz	r3, 8083aa0 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x30>
 8083a9c:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
 8083aa0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8083aa4:	b10b      	cbz	r3, 8083aaa <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3a>
 8083aa6:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
 8083aaa:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8083aae:	b10b      	cbz	r3, 8083ab4 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x44>
 8083ab0:	f044 0404 	orr.w	r4, r4, #4

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 8083ab4:	2102      	movs	r1, #2
 8083ab6:	4628      	mov	r0, r5
 8083ab8:	f7ff febb 	bl	8083832 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
 8083abc:	f000 0201 	and.w	r2, r0, #1
 8083ac0:	4322      	orrs	r2, r4
 8083ac2:	2102      	movs	r1, #2
 8083ac4:	4628      	mov	r0, r5
 8083ac6:	f7ff fede 	bl	8083886 <_ZN4PMIC13writeRegisterEhh>
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
    std::lock_guard<PMIC> l(*this);
 8083aca:	a801      	add	r0, sp, #4
 8083acc:	f7ff feaa 	bl	8083824 <_ZNSt10lock_guardI4PMICED1Ev>

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
    return 1;
}
 8083ad0:	2001      	movs	r0, #1
 8083ad2:	b003      	add	sp, #12
 8083ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08083ad6 <_ZN4PMIC16setChargeVoltageEt>:
                    4208 is the default
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
 8083ad6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8083ad8:	4604      	mov	r4, r0
 8083ada:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8083adc:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8083ade:	f7ff fe83 	bl	80837e8 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 8083ae2:	2104      	movs	r1, #4
 8083ae4:	4620      	mov	r0, r4
 8083ae6:	f7ff fea4 	bl	8083832 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b000000011;

    switch (voltage) {
 8083aea:	f241 0310 	movw	r3, #4112	; 0x1010
 8083aee:	429d      	cmp	r5, r3
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
    byte mask = DATA & 0b000000011;
 8083af0:	f000 0203 	and.w	r2, r0, #3

    switch (voltage) {
 8083af4:	d006      	beq.n	8083b04 <_ZN4PMIC16setChargeVoltageEt+0x2e>
 8083af6:	f241 0370 	movw	r3, #4208	; 0x1070
 8083afa:	429d      	cmp	r5, r3
 8083afc:	d10a      	bne.n	8083b14 <_ZN4PMIC16setChargeVoltageEt+0x3e>
        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 8083afe:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
 8083b02:	e001      	b.n	8083b08 <_ZN4PMIC16setChargeVoltageEt+0x32>
    byte mask = DATA & 0b000000011;

    switch (voltage) {

        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
 8083b04:	f042 0298 	orr.w	r2, r2, #152	; 0x98
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 8083b08:	4620      	mov	r0, r4
 8083b0a:	2104      	movs	r1, #4
 8083b0c:	f7ff febb 	bl	8083886 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 8083b10:	2401      	movs	r4, #1
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
        break;
 8083b12:	e000      	b.n	8083b16 <_ZN4PMIC16setChargeVoltageEt+0x40>

        default:
        return 0; // return error since the value passed didn't match
 8083b14:	2400      	movs	r4, #0
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 8083b16:	a801      	add	r0, sp, #4
 8083b18:	f7ff fe84 	bl	8083824 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 8083b1c:	4620      	mov	r0, r4
 8083b1e:	b003      	add	sp, #12
 8083b20:	bd30      	pop	{r4, r5, pc}

08083b22 <_ZN4PMIC15disableWatchdogEv>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
bool PMIC::disableWatchdog(void) {
 8083b22:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8083b24:	4605      	mov	r5, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8083b26:	ac02      	add	r4, sp, #8
 8083b28:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8083b2c:	f7ff fe5c 	bl	80837e8 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_TIMER_CONTROL_REGISTER);
 8083b30:	2105      	movs	r1, #5
 8083b32:	4628      	mov	r0, r5
 8083b34:	f7ff fe7d 	bl	8083832 <_ZN4PMIC12readRegisterEh>
    writeRegister(CHARGE_TIMER_CONTROL_REGISTER, (DATA & 0b11001110));
 8083b38:	2105      	movs	r1, #5
 8083b3a:	f000 02ce 	and.w	r2, r0, #206	; 0xce
 8083b3e:	4628      	mov	r0, r5
 8083b40:	f7ff fea1 	bl	8083886 <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
bool PMIC::disableWatchdog(void) {
    std::lock_guard<PMIC> l(*this);
 8083b44:	4620      	mov	r0, r4
 8083b46:	f7ff fe6d 	bl	8083824 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(CHARGE_TIMER_CONTROL_REGISTER);
    writeRegister(CHARGE_TIMER_CONTROL_REGISTER, (DATA & 0b11001110));
    return 1;
}
 8083b4a:	2001      	movs	r0, #1
 8083b4c:	b003      	add	sp, #12
 8083b4e:	bd30      	pop	{r4, r5, pc}

08083b50 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8083b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8083b52:	4606      	mov	r6, r0
 8083b54:	460d      	mov	r5, r1
 8083b56:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8083b58:	2400      	movs	r4, #0
  while (size--) {
 8083b5a:	42bd      	cmp	r5, r7
 8083b5c:	d00c      	beq.n	8083b78 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8083b5e:	6833      	ldr	r3, [r6, #0]
 8083b60:	f815 1b01 	ldrb.w	r1, [r5], #1
 8083b64:	689b      	ldr	r3, [r3, #8]
 8083b66:	4630      	mov	r0, r6
 8083b68:	4798      	blx	r3
     if (chunk>=0)
 8083b6a:	2800      	cmp	r0, #0
 8083b6c:	db01      	blt.n	8083b72 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8083b6e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8083b70:	e7f3      	b.n	8083b5a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8083b72:	2c00      	cmp	r4, #0
 8083b74:	bf08      	it	eq
 8083b76:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8083b78:	4620      	mov	r0, r4
 8083b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08083b7c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8083b7c:	b570      	push	{r4, r5, r6, lr}
 8083b7e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8083b80:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8083b82:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8083b84:	b149      	cbz	r1, 8083b9a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8083b86:	f003 fb52 	bl	808722e <strlen>
 8083b8a:	682b      	ldr	r3, [r5, #0]
 8083b8c:	4602      	mov	r2, r0
 8083b8e:	4621      	mov	r1, r4
 8083b90:	4628      	mov	r0, r5
    }
 8083b92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 8083b96:	68db      	ldr	r3, [r3, #12]
 8083b98:	4718      	bx	r3
    }
 8083b9a:	bd70      	pop	{r4, r5, r6, pc}

08083b9c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8083b9c:	6803      	ldr	r3, [r0, #0]
 8083b9e:	689b      	ldr	r3, [r3, #8]
 8083ba0:	4718      	bx	r3

08083ba2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8083ba2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8083ba4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8083ba6:	4605      	mov	r5, r0
  size_t n = print('\r');
 8083ba8:	f7ff fff8 	bl	8083b9c <_ZN5Print5printEc>
  n += print('\n');
 8083bac:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 8083bae:	4604      	mov	r4, r0
  n += print('\n');
 8083bb0:	4628      	mov	r0, r5
 8083bb2:	f7ff fff3 	bl	8083b9c <_ZN5Print5printEc>
  return n;
}
 8083bb6:	4420      	add	r0, r4
 8083bb8:	bd38      	pop	{r3, r4, r5, pc}

08083bba <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8083bba:	b538      	push	{r3, r4, r5, lr}
 8083bbc:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8083bbe:	f7ff ffdd 	bl	8083b7c <_ZN5Print5writeEPKc>
 8083bc2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 8083bc4:	4628      	mov	r0, r5
 8083bc6:	f7ff ffec 	bl	8083ba2 <_ZN5Print7printlnEv>
  return n;
}
 8083bca:	4420      	add	r0, r4
 8083bcc:	bd38      	pop	{r3, r4, r5, pc}

08083bce <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8083bce:	2a01      	cmp	r2, #1
 8083bd0:	bf98      	it	ls
 8083bd2:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8083bd4:	b530      	push	{r4, r5, lr}
 8083bd6:	460b      	mov	r3, r1
 8083bd8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8083bda:	2100      	movs	r1, #0
 8083bdc:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8083be0:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8083be4:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 8083be8:	fb05 3312 	mls	r3, r5, r2, r3
 8083bec:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8083bee:	2b09      	cmp	r3, #9
 8083bf0:	bf94      	ite	ls
 8083bf2:	3330      	addls	r3, #48	; 0x30
 8083bf4:	3337      	addhi	r3, #55	; 0x37
 8083bf6:	b2db      	uxtb	r3, r3
 8083bf8:	4621      	mov	r1, r4
 8083bfa:	f804 3901 	strb.w	r3, [r4], #-1
 8083bfe:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8083c00:	2d00      	cmp	r5, #0
 8083c02:	d1ef      	bne.n	8083be4 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8083c04:	f7ff ffba 	bl	8083b7c <_ZN5Print5writeEPKc>
}
 8083c08:	b00b      	add	sp, #44	; 0x2c
 8083c0a:	bd30      	pop	{r4, r5, pc}

08083c0c <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 8083c0c:	b410      	push	{r4}
  if (base == 0) return write(n);
 8083c0e:	b922      	cbnz	r2, 8083c1a <_ZN5Print5printEmi+0xe>
 8083c10:	6803      	ldr	r3, [r0, #0]
 8083c12:	b2c9      	uxtb	r1, r1
 8083c14:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 8083c16:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 8083c18:	4718      	bx	r3
  else return printNumber(n, base);
 8083c1a:	b2d2      	uxtb	r2, r2
}
 8083c1c:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8083c1e:	f7ff bfd6 	b.w	8083bce <_ZN5Print11printNumberEmh>

08083c22 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 8083c22:	f7ff bff3 	b.w	8083c0c <_ZN5Print5printEmi>

08083c26 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8083c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8083c2a:	4607      	mov	r7, r0
 8083c2c:	460e      	mov	r6, r1
  if (base == 0) {
 8083c2e:	4615      	mov	r5, r2
 8083c30:	b92a      	cbnz	r2, 8083c3e <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8083c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 8083c36:	6803      	ldr	r3, [r0, #0]
 8083c38:	b2c9      	uxtb	r1, r1
 8083c3a:	689b      	ldr	r3, [r3, #8]
 8083c3c:	4718      	bx	r3
  } else if (base == 10) {
 8083c3e:	2a0a      	cmp	r2, #10
 8083c40:	d102      	bne.n	8083c48 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 8083c42:	2900      	cmp	r1, #0
 8083c44:	da01      	bge.n	8083c4a <_ZN5Print5printEli+0x24>
 8083c46:	e004      	b.n	8083c52 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8083c48:	b2d2      	uxtb	r2, r2
  }
}
 8083c4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8083c4e:	f7ff bfbe 	b.w	8083bce <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8083c52:	212d      	movs	r1, #45	; 0x2d
 8083c54:	f7ff ffa2 	bl	8083b9c <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 8083c58:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8083c5a:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 8083c5c:	4271      	negs	r1, r6
 8083c5e:	4638      	mov	r0, r7
 8083c60:	f7ff ffb5 	bl	8083bce <_ZN5Print11printNumberEmh>
 8083c64:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8083c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08083c6a <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 8083c6a:	f7ff bfdc 	b.w	8083c26 <_ZN5Print5printEli>

08083c6e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8083c6e:	b510      	push	{r4, lr}
 8083c70:	4604      	mov	r4, r0
 8083c72:	f7ff f8da 	bl	8082e2a <_ZNSt14_Function_baseD1Ev>
 8083c76:	4620      	mov	r0, r4
 8083c78:	bd10      	pop	{r4, pc}
	...

08083c7c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8083c7c:	4803      	ldr	r0, [pc, #12]	; (8083c8c <_GLOBAL__sub_I_RGB+0x10>)
 8083c7e:	2300      	movs	r3, #0
 8083c80:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8083c82:	4a03      	ldr	r2, [pc, #12]	; (8083c90 <_GLOBAL__sub_I_RGB+0x14>)
 8083c84:	4903      	ldr	r1, [pc, #12]	; (8083c94 <_GLOBAL__sub_I_RGB+0x18>)
 8083c86:	f000 bd21 	b.w	80846cc <__aeabi_atexit>
 8083c8a:	bf00      	nop
 8083c8c:	20000358 	.word	0x20000358
 8083c90:	20000158 	.word	0x20000158
 8083c94:	08083c6f 	.word	0x08083c6f

08083c98 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8083c98:	4770      	bx	lr

08083c9a <_ZN8SPIClassD0Ev>:
 8083c9a:	b510      	push	{r4, lr}
 8083c9c:	4604      	mov	r4, r0
 8083c9e:	2110      	movs	r1, #16
 8083ca0:	f000 fd19 	bl	80846d6 <_ZdlPvj>
 8083ca4:	4620      	mov	r0, r4
 8083ca6:	bd10      	pop	{r4, pc}

08083ca8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8083ca8:	b570      	push	{r4, r5, r6, lr}
 8083caa:	4604      	mov	r4, r0
 8083cac:	460e      	mov	r6, r1
 8083cae:	4b07      	ldr	r3, [pc, #28]	; (8083ccc <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 8083cb0:	2500      	movs	r5, #0
 8083cb2:	6003      	str	r3, [r0, #0]
 8083cb4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 8083cb8:	f7fe fc58 	bl	808256c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 8083cbc:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 8083cbe:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 8083cc0:	f7fe fd8c 	bl	80827dc <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8083cc4:	60a5      	str	r5, [r4, #8]
}
 8083cc6:	4620      	mov	r0, r4
 8083cc8:	bd70      	pop	{r4, r5, r6, pc}
 8083cca:	bf00      	nop
 8083ccc:	08088140 	.word	0x08088140

08083cd0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 8083cd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8083cd4:	7900      	ldrb	r0, [r0, #4]
 8083cd6:	f7fe bd59 	b.w	808278c <HAL_SPI_Begin>

08083cda <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 8083cda:	7900      	ldrb	r0, [r0, #4]
 8083cdc:	f7fe bd5e 	b.w	808279c <HAL_SPI_Set_Bit_Order>

08083ce0 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 8083ce0:	7900      	ldrb	r0, [r0, #4]
 8083ce2:	f7fe bd63 	b.w	80827ac <HAL_SPI_Set_Data_Mode>

08083ce6 <_ZN8SPIClass14endTransactionEv>:
        }
    }

    void lock() { os_mutex_lock(handle_); }
    bool trylock() { return os_mutex_trylock(handle_)==0; }
    void unlock() { os_mutex_unlock(handle_); }
 8083ce6:	68c0      	ldr	r0, [r0, #12]
 8083ce8:	f7fe bc48 	b.w	808257c <os_mutex_unlock>

08083cec <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 8083cec:	4a05      	ldr	r2, [pc, #20]	; (8083d04 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 8083cee:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 8083cf0:	5c99      	ldrb	r1, [r3, r2]
 8083cf2:	4281      	cmp	r1, r0
 8083cf4:	d002      	beq.n	8083cfc <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 8083cf6:	3301      	adds	r3, #1
 8083cf8:	2b08      	cmp	r3, #8
 8083cfa:	d1f9      	bne.n	8083cf0 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 8083cfc:	1c58      	adds	r0, r3, #1
}
 8083cfe:	b2c0      	uxtb	r0, r0
 8083d00:	4770      	bx	lr
 8083d02:	bf00      	nop
 8083d04:	08088148 	.word	0x08088148

08083d08 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 8083d08:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 8083d0a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 8083d0c:	6018      	str	r0, [r3, #0]
 8083d0e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 8083d10:	6818      	ldr	r0, [r3, #0]
 8083d12:	b2e5      	uxtb	r5, r4
 8083d14:	4288      	cmp	r0, r1
 8083d16:	d906      	bls.n	8083d26 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 8083d18:	3401      	adds	r4, #1
 8083d1a:	2c08      	cmp	r4, #8
 8083d1c:	d002      	beq.n	8083d24 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 8083d1e:	0840      	lsrs	r0, r0, #1
 8083d20:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 8083d22:	e7f5      	b.n	8083d10 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 8083d24:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 8083d26:	4b02      	ldr	r3, [pc, #8]	; (8083d30 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 8083d28:	5d5b      	ldrb	r3, [r3, r5]
 8083d2a:	7013      	strb	r3, [r2, #0]
 8083d2c:	bd30      	pop	{r4, r5, pc}
 8083d2e:	bf00      	nop
 8083d30:	08088148 	.word	0x08088148

08083d34 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 8083d34:	b570      	push	{r4, r5, r6, lr}
 8083d36:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 8083d38:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 8083d3c:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 8083d3e:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 8083d40:	2214      	movs	r2, #20
 8083d42:	2100      	movs	r1, #0
 8083d44:	a803      	add	r0, sp, #12
 8083d46:	f003 fa14 	bl	8087172 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 8083d4a:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 8083d4c:	a903      	add	r1, sp, #12
 8083d4e:	4630      	mov	r0, r6
 8083d50:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 8083d52:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 8083d56:	f7fe fd51 	bl	80827fc <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 8083d5a:	ab02      	add	r3, sp, #8
 8083d5c:	f10d 0207 	add.w	r2, sp, #7
 8083d60:	4629      	mov	r1, r5
 8083d62:	9804      	ldr	r0, [sp, #16]
 8083d64:	f7ff ffd0 	bl	8083d08 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 8083d68:	7920      	ldrb	r0, [r4, #4]
 8083d6a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8083d6e:	f7fe fd25 	bl	80827bc <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 8083d72:	9802      	ldr	r0, [sp, #8]
 8083d74:	b008      	add	sp, #32
 8083d76:	bd70      	pop	{r4, r5, r6, pc}

08083d78 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 8083d78:	b538      	push	{r3, r4, r5, lr}
 8083d7a:	4604      	mov	r4, r0
    if (dividerReference)
 8083d7c:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 8083d7e:	4608      	mov	r0, r1
    if (dividerReference)
 8083d80:	b14d      	cbz	r5, 8083d96 <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 8083d82:	f7ff ffb3 	bl	8083cec <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 8083d86:	2201      	movs	r2, #1
 8083d88:	fa25 f100 	lsr.w	r1, r5, r0
 8083d8c:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 8083d8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 8083d92:	f7ff bfcf 	b.w	8083d34 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 8083d96:	7920      	ldrb	r0, [r4, #4]
    }
}
 8083d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 8083d9c:	f7fe bd0e 	b.w	80827bc <HAL_SPI_Set_Clock_Divider>

08083da0 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 8083da0:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 8083da2:	7900      	ldrb	r0, [r0, #4]
 8083da4:	f7fe fd12 	bl	80827cc <HAL_SPI_Send_Receive_Data>
}
 8083da8:	b2c0      	uxtb	r0, r0
 8083daa:	bd08      	pop	{r3, pc}

08083dac <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 8083dac:	7900      	ldrb	r0, [r0, #4]
 8083dae:	f7fe bd1d 	b.w	80827ec <HAL_SPI_Is_Enabled>

08083db2 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8083db2:	b510      	push	{r4, lr}
 8083db4:	4604      	mov	r4, r0
{
	free(buffer);
 8083db6:	6800      	ldr	r0, [r0, #0]
 8083db8:	f7fe fea4 	bl	8082b04 <free>
}
 8083dbc:	4620      	mov	r0, r4
 8083dbe:	bd10      	pop	{r4, pc}

08083dc0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8083dc0:	b510      	push	{r4, lr}
 8083dc2:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8083dc4:	6800      	ldr	r0, [r0, #0]
 8083dc6:	b108      	cbz	r0, 8083dcc <_ZN6String10invalidateEv+0xc>
 8083dc8:	f7fe fe9c 	bl	8082b04 <free>
	buffer = NULL;
 8083dcc:	2300      	movs	r3, #0
 8083dce:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8083dd0:	60a3      	str	r3, [r4, #8]
 8083dd2:	6063      	str	r3, [r4, #4]
 8083dd4:	bd10      	pop	{r4, pc}

08083dd6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8083dd6:	b538      	push	{r3, r4, r5, lr}
 8083dd8:	4604      	mov	r4, r0
 8083dda:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8083ddc:	6800      	ldr	r0, [r0, #0]
 8083dde:	3101      	adds	r1, #1
 8083de0:	f7fe fe98 	bl	8082b14 <realloc>
	if (newbuffer) {
 8083de4:	b110      	cbz	r0, 8083dec <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8083de6:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8083dea:	2001      	movs	r0, #1
	}
	return 0;
}
 8083dec:	bd38      	pop	{r3, r4, r5, pc}

08083dee <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8083dee:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8083df0:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8083df2:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8083df4:	b113      	cbz	r3, 8083dfc <_ZN6String7reserveEj+0xe>
 8083df6:	6843      	ldr	r3, [r0, #4]
 8083df8:	428b      	cmp	r3, r1
 8083dfa:	d207      	bcs.n	8083e0c <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 8083dfc:	4620      	mov	r0, r4
 8083dfe:	f7ff ffea 	bl	8083dd6 <_ZN6String12changeBufferEj>
 8083e02:	b120      	cbz	r0, 8083e0e <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8083e04:	68a3      	ldr	r3, [r4, #8]
 8083e06:	b90b      	cbnz	r3, 8083e0c <_ZN6String7reserveEj+0x1e>
 8083e08:	6822      	ldr	r2, [r4, #0]
 8083e0a:	7013      	strb	r3, [r2, #0]
 8083e0c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8083e0e:	bd10      	pop	{r4, pc}

08083e10 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8083e10:	b570      	push	{r4, r5, r6, lr}
 8083e12:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8083e14:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8083e16:	4604      	mov	r4, r0
 8083e18:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8083e1a:	f7ff ffe8 	bl	8083dee <_ZN6String7reserveEj>
 8083e1e:	b918      	cbnz	r0, 8083e28 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8083e20:	4620      	mov	r0, r4
 8083e22:	f7ff ffcd 	bl	8083dc0 <_ZN6String10invalidateEv>
		return *this;
 8083e26:	e009      	b.n	8083e3c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8083e28:	462a      	mov	r2, r5
 8083e2a:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 8083e2c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8083e2e:	6820      	ldr	r0, [r4, #0]
 8083e30:	f003 f994 	bl	808715c <memcpy>
	buffer[len] = 0;
 8083e34:	6822      	ldr	r2, [r4, #0]
 8083e36:	68a3      	ldr	r3, [r4, #8]
 8083e38:	2100      	movs	r1, #0
 8083e3a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 8083e3c:	4620      	mov	r0, r4
 8083e3e:	bd70      	pop	{r4, r5, r6, pc}

08083e40 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8083e40:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8083e42:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8083e44:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8083e46:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8083e48:	6043      	str	r3, [r0, #4]
	len = 0;
 8083e4a:	6083      	str	r3, [r0, #8]
	flags = 0;
 8083e4c:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 8083e4e:	460d      	mov	r5, r1
 8083e50:	b139      	cbz	r1, 8083e62 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8083e52:	4608      	mov	r0, r1
 8083e54:	f003 f9eb 	bl	808722e <strlen>
 8083e58:	4629      	mov	r1, r5
 8083e5a:	4602      	mov	r2, r0
 8083e5c:	4620      	mov	r0, r4
 8083e5e:	f7ff ffd7 	bl	8083e10 <_ZN6String4copyEPKcj>
}
 8083e62:	4620      	mov	r0, r4
 8083e64:	bd38      	pop	{r3, r4, r5, pc}

08083e66 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8083e66:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8083e68:	b510      	push	{r4, lr}
 8083e6a:	460b      	mov	r3, r1
 8083e6c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8083e6e:	d007      	beq.n	8083e80 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8083e70:	6809      	ldr	r1, [r1, #0]
 8083e72:	b119      	cbz	r1, 8083e7c <_ZN6StringaSERKS_+0x16>
 8083e74:	689a      	ldr	r2, [r3, #8]
 8083e76:	f7ff ffcb 	bl	8083e10 <_ZN6String4copyEPKcj>
 8083e7a:	e001      	b.n	8083e80 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 8083e7c:	f7ff ffa0 	bl	8083dc0 <_ZN6String10invalidateEv>

	return *this;
}
 8083e80:	4620      	mov	r0, r4
 8083e82:	bd10      	pop	{r4, pc}

08083e84 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 8083e84:	b510      	push	{r4, lr}
 8083e86:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8083e88:	2300      	movs	r3, #0
 8083e8a:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8083e8c:	6043      	str	r3, [r0, #4]
	len = 0;
 8083e8e:	6083      	str	r3, [r0, #8]
	flags = 0;
 8083e90:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 8083e92:	f7ff ffe8 	bl	8083e66 <_ZN6StringaSERKS_>
}
 8083e96:	4620      	mov	r0, r4
 8083e98:	bd10      	pop	{r4, pc}

08083e9a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8083e9a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8083e9c:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8083e9e:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8083ea0:	b912      	cbnz	r2, 8083ea8 <_ZNK6String6equalsEPKc+0xe>
 8083ea2:	b919      	cbnz	r1, 8083eac <_ZNK6String6equalsEPKc+0x12>
 8083ea4:	2001      	movs	r0, #1
 8083ea6:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8083ea8:	b911      	cbnz	r1, 8083eb0 <_ZNK6String6equalsEPKc+0x16>
 8083eaa:	6803      	ldr	r3, [r0, #0]
 8083eac:	7818      	ldrb	r0, [r3, #0]
 8083eae:	e002      	b.n	8083eb6 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 8083eb0:	6800      	ldr	r0, [r0, #0]
 8083eb2:	f003 f98f 	bl	80871d4 <strcmp>
 8083eb6:	fab0 f080 	clz	r0, r0
 8083eba:	0940      	lsrs	r0, r0, #5
}
 8083ebc:	bd08      	pop	{r3, pc}

08083ebe <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 8083ebe:	b570      	push	{r4, r5, r6, lr}
 8083ec0:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 8083ec2:	b19a      	cbz	r2, 8083eec <_ZNK6String8getBytesEPhjj+0x2e>
 8083ec4:	b191      	cbz	r1, 8083eec <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
 8083ec6:	6885      	ldr	r5, [r0, #8]
 8083ec8:	429d      	cmp	r5, r3
 8083eca:	d802      	bhi.n	8083ed2 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 8083ecc:	2300      	movs	r3, #0
 8083ece:	700b      	strb	r3, [r1, #0]
		return;
 8083ed0:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
 8083ed2:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
 8083ed4:	1aed      	subs	r5, r5, r3
 8083ed6:	42ac      	cmp	r4, r5
 8083ed8:	bf28      	it	cs
 8083eda:	462c      	movcs	r4, r5
	strncpy((char *)buf, buffer + index, n);
 8083edc:	6801      	ldr	r1, [r0, #0]
 8083ede:	4622      	mov	r2, r4
 8083ee0:	4419      	add	r1, r3
 8083ee2:	4630      	mov	r0, r6
 8083ee4:	f003 f9c0 	bl	8087268 <strncpy>
	buf[n] = 0;
 8083ee8:	2300      	movs	r3, #0
 8083eea:	5533      	strb	r3, [r6, r4]
 8083eec:	bd70      	pop	{r4, r5, r6, pc}

08083eee <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 8083eee:	4601      	mov	r1, r0
 8083ef0:	2200      	movs	r2, #0
 8083ef2:	208c      	movs	r0, #140	; 0x8c
 8083ef4:	f7fe bb52 	b.w	808259c <HAL_Core_System_Reset_Ex>

08083ef8 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 8083ef8:	2000      	movs	r0, #0
 8083efa:	f7ff bff8 	b.w	8083eee <_ZN11SystemClass5resetEm>
	...

08083f00 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 8083f00:	b510      	push	{r4, lr}
 8083f02:	4604      	mov	r4, r0
 8083f04:	4608      	mov	r0, r1
 8083f06:	4611      	mov	r1, r2
 8083f08:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 8083f0a:	2300      	movs	r3, #0
 8083f0c:	f7fe fd06 	bl	808291c <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
 8083f10:	4b06      	ldr	r3, [pc, #24]	; (8083f2c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
 8083f12:	2200      	movs	r2, #0
 8083f14:	701a      	strb	r2, [r3, #0]
 8083f16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8083f1a:	8058      	strh	r0, [r3, #2]
 8083f1c:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
 8083f1e:	681a      	ldr	r2, [r3, #0]
 8083f20:	889b      	ldrh	r3, [r3, #4]
 8083f22:	6022      	str	r2, [r4, #0]
 8083f24:	80a3      	strh	r3, [r4, #4]
}
 8083f26:	4620      	mov	r0, r4
 8083f28:	bd10      	pop	{r4, pc}
 8083f2a:	bf00      	nop
 8083f2c:	20000368 	.word	0x20000368

08083f30 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8083f30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8083f34:	4b03      	ldr	r3, [pc, #12]	; (8083f44 <_GLOBAL__sub_I_System+0x14>)
 8083f36:	2000      	movs	r0, #0
 8083f38:	7018      	strb	r0, [r3, #0]
 8083f3a:	8058      	strh	r0, [r3, #2]
 8083f3c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8083f3e:	f7fe bcdd 	b.w	80828fc <set_system_mode>
 8083f42:	bf00      	nop
 8083f44:	20000368 	.word	0x20000368

08083f48 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8083f48:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 8083f4a:	4b14      	ldr	r3, [pc, #80]	; (8083f9c <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8083f4c:	4f14      	ldr	r7, [pc, #80]	; (8083fa0 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 8083f4e:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 8083f50:	4b14      	ldr	r3, [pc, #80]	; (8083fa4 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 8083f52:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 8083f54:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 8083f56:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 8083f58:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 8083f5a:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8083f5c:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8083f5e:	d01b      	beq.n	8083f98 <_ZL22Refresh_UnixTime_Cachel+0x50>
 8083f60:	a80a      	add	r0, sp, #40	; 0x28
 8083f62:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 8083f66:	f003 f801 	bl	8086f6c <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8083f6a:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8083f6c:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 8083f6e:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8083f70:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8083f74:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 8083f76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8083f78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8083f7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8083f7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8083f7e:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8083f82:	4c09      	ldr	r4, [pc, #36]	; (8083fa8 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8083f84:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8083f88:	ad01      	add	r5, sp, #4
 8083f8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8083f8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8083f8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8083f90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 8083f92:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8083f94:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 8083f98:	b00b      	add	sp, #44	; 0x2c
 8083f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083f9c:	200003a0 	.word	0x200003a0
 8083fa0:	2000039c 	.word	0x2000039c
 8083fa4:	20000398 	.word	0x20000398
 8083fa8:	20000370 	.word	0x20000370

08083fac <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 8083fac:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8083fae:	2000      	movs	r0, #0
 8083fb0:	f7fe fd40 	bl	8082a34 <spark_sync_time_pending>
 8083fb4:	b128      	cbz	r0, 8083fc2 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8083fb6:	f7fe fd15 	bl	80829e4 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8083fba:	f080 0001 	eor.w	r0, r0, #1
 8083fbe:	b2c0      	uxtb	r0, r0
 8083fc0:	bd08      	pop	{r3, pc}
 8083fc2:	2001      	movs	r0, #1
    }
 8083fc4:	bd08      	pop	{r3, pc}
	...

08083fc8 <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8083fc8:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8083fca:	4909      	ldr	r1, [pc, #36]	; (8083ff0 <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8083fcc:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8083fce:	f002 fd69 	bl	8086aa4 <__aeabi_fcmplt>
 8083fd2:	b960      	cbnz	r0, 8083fee <_ZN9TimeClass4zoneEf+0x26>
 8083fd4:	4907      	ldr	r1, [pc, #28]	; (8083ff4 <_ZN9TimeClass4zoneEf+0x2c>)
 8083fd6:	4620      	mov	r0, r4
 8083fd8:	f002 fd82 	bl	8086ae0 <__aeabi_fcmpgt>
 8083fdc:	b938      	cbnz	r0, 8083fee <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 8083fde:	4906      	ldr	r1, [pc, #24]	; (8083ff8 <_ZN9TimeClass4zoneEf+0x30>)
 8083fe0:	4620      	mov	r0, r4
 8083fe2:	f002 fbc1 	bl	8086768 <__aeabi_fmul>
 8083fe6:	f002 fd85 	bl	8086af4 <__aeabi_f2iz>
 8083fea:	4b04      	ldr	r3, [pc, #16]	; (8083ffc <_ZN9TimeClass4zoneEf+0x34>)
 8083fec:	6018      	str	r0, [r3, #0]
 8083fee:	bd10      	pop	{r4, pc}
 8083ff0:	c1400000 	.word	0xc1400000
 8083ff4:	41600000 	.word	0x41600000
 8083ff8:	45610000 	.word	0x45610000
 8083ffc:	200003a0 	.word	0x200003a0

08084000 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8084000:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 8084002:	4b0e      	ldr	r3, [pc, #56]	; (808403c <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8084004:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 8084006:	681b      	ldr	r3, [r3, #0]
 8084008:	a802      	add	r0, sp, #8
 808400a:	4419      	add	r1, r3
 808400c:	4b0c      	ldr	r3, [pc, #48]	; (8084040 <_ZN9TimeClass7timeStrEl+0x40>)
 808400e:	681b      	ldr	r3, [r3, #0]
 8084010:	4419      	add	r1, r3
 8084012:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 8084016:	f002 ffa9 	bl	8086f6c <localtime>
        char* ascstr = asctime(calendar_time);
 808401a:	f002 ff59 	bl	8086ed0 <asctime>
 808401e:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 8084020:	f003 f905 	bl	808722e <strlen>
        ascstr[len-1] = 0; // remove final newline
 8084024:	2300      	movs	r3, #0
 8084026:	4428      	add	r0, r5
 8084028:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 808402c:	4629      	mov	r1, r5
 808402e:	4620      	mov	r0, r4
 8084030:	f7ff ff06 	bl	8083e40 <_ZN6StringC1EPK19__FlashStringHelper>
}
 8084034:	4620      	mov	r0, r4
 8084036:	b003      	add	sp, #12
 8084038:	bd30      	pop	{r4, r5, pc}
 808403a:	bf00      	nop
 808403c:	200003a0 	.word	0x200003a0
 8084040:	20000398 	.word	0x20000398

08084044 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 8084044:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 8084046:	2000      	movs	r0, #0
 8084048:	f7fe faf0 	bl	808262c <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 808404c:	4604      	mov	r4, r0
 808404e:	b968      	cbnz	r0, 808406c <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8084050:	f7fe fc4c 	bl	80828ec <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8084054:	2801      	cmp	r0, #1
 8084056:	d10b      	bne.n	8084070 <_ZN9TimeClass7isValidEv+0x2c>
 8084058:	4620      	mov	r0, r4
 808405a:	f7fe fc7f 	bl	808295c <system_thread_get_state>
 808405e:	b938      	cbnz	r0, 8084070 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 8084060:	f7ff ffa4 	bl	8083fac <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8084064:	b930      	cbnz	r0, 8084074 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 8084066:	f7fe fca5 	bl	80829b4 <spark_process>
 808406a:	e7f9      	b.n	8084060 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 808406c:	2001      	movs	r0, #1
 808406e:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 8084070:	2000      	movs	r0, #0
 8084072:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 8084074:	f7ff ff9a 	bl	8083fac <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 8084078:	2000      	movs	r0, #0
 808407a:	f7fe fad7 	bl	808262c <HAL_RTC_Time_Is_Valid>
 808407e:	3000      	adds	r0, #0
 8084080:	bf18      	it	ne
 8084082:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 8084084:	bd10      	pop	{r4, pc}

08084086 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 8084086:	b508      	push	{r3, lr}
    (void)isValid();
 8084088:	f7ff ffdc 	bl	8084044 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 808408c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 8084090:	f7fe baa4 	b.w	80825dc <HAL_RTC_Get_UnixTime>

08084094 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 8084094:	b508      	push	{r3, lr}
	return hour(now());
 8084096:	f7ff fff6 	bl	8084086 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808409a:	f7ff ff55 	bl	8083f48 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 808409e:	4b01      	ldr	r3, [pc, #4]	; (80840a4 <_ZN9TimeClass4hourEv+0x10>)
 80840a0:	6898      	ldr	r0, [r3, #8]
 80840a2:	bd08      	pop	{r3, pc}
 80840a4:	20000370 	.word	0x20000370

080840a8 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 80840a8:	b508      	push	{r3, lr}
	return minute(now());
 80840aa:	f7ff ffec 	bl	8084086 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80840ae:	f7ff ff4b 	bl	8083f48 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 80840b2:	4b01      	ldr	r3, [pc, #4]	; (80840b8 <_ZN9TimeClass6minuteEv+0x10>)
 80840b4:	6858      	ldr	r0, [r3, #4]
 80840b6:	bd08      	pop	{r3, pc}
 80840b8:	20000370 	.word	0x20000370

080840bc <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
 80840bc:	b508      	push	{r3, lr}
	return day(now());
 80840be:	f7ff ffe2 	bl	8084086 <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80840c2:	f7ff ff41 	bl	8083f48 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
 80840c6:	4b01      	ldr	r3, [pc, #4]	; (80840cc <_ZN9TimeClass3dayEv+0x10>)
 80840c8:	68d8      	ldr	r0, [r3, #12]
 80840ca:	bd08      	pop	{r3, pc}
 80840cc:	20000370 	.word	0x20000370

080840d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80840d0:	4b02      	ldr	r3, [pc, #8]	; (80840dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80840d2:	681a      	ldr	r2, [r3, #0]
 80840d4:	4b02      	ldr	r3, [pc, #8]	; (80840e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80840d6:	601a      	str	r2, [r3, #0]
 80840d8:	4770      	bx	lr
 80840da:	bf00      	nop
 80840dc:	20000098 	.word	0x20000098
 80840e0:	20000394 	.word	0x20000394

080840e4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80840e4:	4770      	bx	lr

080840e6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80840e6:	7441      	strb	r1, [r0, #17]
 80840e8:	4770      	bx	lr

080840ea <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80840ea:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80840ec:	7c00      	ldrb	r0, [r0, #16]
 80840ee:	f7fe fbc5 	bl	808287c <HAL_USART_Available_Data_For_Write>
}
 80840f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80840f6:	bd08      	pop	{r3, pc}

080840f8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80840f8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80840fa:	7c00      	ldrb	r0, [r0, #16]
 80840fc:	f7fe fb96 	bl	808282c <HAL_USART_Available_Data>
}
 8084100:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8084104:	bd08      	pop	{r3, pc}

08084106 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 8084106:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 8084108:	7c00      	ldrb	r0, [r0, #16]
 808410a:	f7fe fb9f 	bl	808284c <HAL_USART_Peek_Data>
}
 808410e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8084112:	bf28      	it	cs
 8084114:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8084118:	bd08      	pop	{r3, pc}

0808411a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 808411a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 808411c:	7c00      	ldrb	r0, [r0, #16]
 808411e:	f7fe fb8d 	bl	808283c <HAL_USART_Read_Data>
}
 8084122:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8084126:	bf28      	it	cs
 8084128:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 808412c:	bd08      	pop	{r3, pc}

0808412e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 808412e:	7c00      	ldrb	r0, [r0, #16]
 8084130:	f7fe bb94 	b.w	808285c <HAL_USART_Flush_Data>

08084134 <_ZN11USARTSerialD0Ev>:
 8084134:	b510      	push	{r4, lr}
 8084136:	4604      	mov	r4, r0
 8084138:	2114      	movs	r1, #20
 808413a:	f000 facc 	bl	80846d6 <_ZdlPvj>
 808413e:	4620      	mov	r0, r4
 8084140:	bd10      	pop	{r4, pc}

08084142 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8084142:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8084144:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 8084146:	4604      	mov	r4, r0
 8084148:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 808414a:	b925      	cbnz	r5, 8084156 <_ZN11USARTSerial5writeEh+0x14>
 808414c:	7c00      	ldrb	r0, [r0, #16]
 808414e:	f7fe fb95 	bl	808287c <HAL_USART_Available_Data_For_Write>
 8084152:	2800      	cmp	r0, #0
 8084154:	dd05      	ble.n	8084162 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8084156:	4631      	mov	r1, r6
 8084158:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 808415a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 808415e:	f7fe bb5d 	b.w	808281c <HAL_USART_Write_Data>
  }
  return 0;
}
 8084162:	4628      	mov	r0, r5
 8084164:	bd70      	pop	{r4, r5, r6, pc}
	...

08084168 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8084168:	b510      	push	{r4, lr}
 808416a:	4604      	mov	r4, r0
 808416c:	4608      	mov	r0, r1
 808416e:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8084170:	2200      	movs	r2, #0
 8084172:	6062      	str	r2, [r4, #4]
 8084174:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8084178:	60a2      	str	r2, [r4, #8]
 808417a:	4a05      	ldr	r2, [pc, #20]	; (8084190 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 808417c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 808417e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8084180:	2201      	movs	r2, #1
 8084182:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8084184:	461a      	mov	r2, r3
 8084186:	f7fe fb41 	bl	808280c <HAL_USART_Init>
}
 808418a:	4620      	mov	r0, r4
 808418c:	bd10      	pop	{r4, pc}
 808418e:	bf00      	nop
 8084190:	08088180 	.word	0x08088180

08084194 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 8084194:	7c00      	ldrb	r0, [r0, #16]
 8084196:	f7fe bb69 	b.w	808286c <HAL_USART_Is_Enabled>
	...

0808419c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 808419c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 808419e:	4d0c      	ldr	r5, [pc, #48]	; (80841d0 <_Z22__fetch_global_Serial1v+0x34>)
 80841a0:	6829      	ldr	r1, [r5, #0]
 80841a2:	f011 0401 	ands.w	r4, r1, #1
 80841a6:	d111      	bne.n	80841cc <_Z22__fetch_global_Serial1v+0x30>
 80841a8:	4628      	mov	r0, r5
 80841aa:	f7fb ff7c 	bl	80800a6 <__cxa_guard_acquire>
 80841ae:	b168      	cbz	r0, 80841cc <_Z22__fetch_global_Serial1v+0x30>
 80841b0:	4a08      	ldr	r2, [pc, #32]	; (80841d4 <_Z22__fetch_global_Serial1v+0x38>)
 80841b2:	4621      	mov	r1, r4
 80841b4:	4b08      	ldr	r3, [pc, #32]	; (80841d8 <_Z22__fetch_global_Serial1v+0x3c>)
 80841b6:	4809      	ldr	r0, [pc, #36]	; (80841dc <_Z22__fetch_global_Serial1v+0x40>)
 80841b8:	f7ff ffd6 	bl	8084168 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80841bc:	4628      	mov	r0, r5
 80841be:	f7fb ff77 	bl	80800b0 <__cxa_guard_release>
 80841c2:	4a07      	ldr	r2, [pc, #28]	; (80841e0 <_Z22__fetch_global_Serial1v+0x44>)
 80841c4:	4907      	ldr	r1, [pc, #28]	; (80841e4 <_Z22__fetch_global_Serial1v+0x48>)
 80841c6:	4805      	ldr	r0, [pc, #20]	; (80841dc <_Z22__fetch_global_Serial1v+0x40>)
 80841c8:	f000 fa80 	bl	80846cc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80841cc:	4803      	ldr	r0, [pc, #12]	; (80841dc <_Z22__fetch_global_Serial1v+0x40>)
 80841ce:	bd38      	pop	{r3, r4, r5, pc}
 80841d0:	2000043c 	.word	0x2000043c
 80841d4:	20000440 	.word	0x20000440
 80841d8:	200003b8 	.word	0x200003b8
 80841dc:	200003a4 	.word	0x200003a4
 80841e0:	20000158 	.word	0x20000158
 80841e4:	080840e5 	.word	0x080840e5

080841e8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80841e8:	7441      	strb	r1, [r0, #17]
 80841ea:	4770      	bx	lr

080841ec <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80841ec:	4770      	bx	lr

080841ee <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80841ee:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80841f0:	2100      	movs	r1, #0
 80841f2:	7c00      	ldrb	r0, [r0, #16]
 80841f4:	f7fe fb62 	bl	80828bc <HAL_USB_USART_Receive_Data>
}
 80841f8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80841fc:	bf28      	it	cs
 80841fe:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8084202:	bd08      	pop	{r3, pc}

08084204 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 8084204:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8084206:	2101      	movs	r1, #1
 8084208:	7c00      	ldrb	r0, [r0, #16]
 808420a:	f7fe fb57 	bl	80828bc <HAL_USB_USART_Receive_Data>
}
 808420e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8084212:	bf28      	it	cs
 8084214:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8084218:	bd08      	pop	{r3, pc}

0808421a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 808421a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 808421c:	7c00      	ldrb	r0, [r0, #16]
 808421e:	f7fe fb45 	bl	80828ac <HAL_USB_USART_Available_Data_For_Write>
}
 8084222:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8084226:	bd08      	pop	{r3, pc}

08084228 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 8084228:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 808422a:	7c00      	ldrb	r0, [r0, #16]
 808422c:	f7fe fb36 	bl	808289c <HAL_USB_USART_Available_Data>
}
 8084230:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8084234:	bd08      	pop	{r3, pc}

08084236 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 8084236:	7c00      	ldrb	r0, [r0, #16]
 8084238:	f7fe bb50 	b.w	80828dc <HAL_USB_USART_Flush_Data>

0808423c <_ZN9USBSerialD0Ev>:
 808423c:	b510      	push	{r4, lr}
 808423e:	4604      	mov	r4, r0
 8084240:	2114      	movs	r1, #20
 8084242:	f000 fa48 	bl	80846d6 <_ZdlPvj>
 8084246:	4620      	mov	r0, r4
 8084248:	bd10      	pop	{r4, pc}

0808424a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 808424a:	b538      	push	{r3, r4, r5, lr}
 808424c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808424e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8084250:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8084252:	f7fe fb2b 	bl	80828ac <HAL_USB_USART_Available_Data_For_Write>
 8084256:	2800      	cmp	r0, #0
 8084258:	dc01      	bgt.n	808425e <_ZN9USBSerial5writeEh+0x14>
 808425a:	7c60      	ldrb	r0, [r4, #17]
 808425c:	b128      	cbz	r0, 808426a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 808425e:	4629      	mov	r1, r5
 8084260:	7c20      	ldrb	r0, [r4, #16]
 8084262:	f7fe fb33 	bl	80828cc <HAL_USB_USART_Send_Data>
 8084266:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 808426a:	bd38      	pop	{r3, r4, r5, pc}

0808426c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 808426c:	b510      	push	{r4, lr}
 808426e:	4604      	mov	r4, r0
 8084270:	2300      	movs	r3, #0
 8084272:	6063      	str	r3, [r4, #4]
 8084274:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8084278:	60a3      	str	r3, [r4, #8]
 808427a:	4b05      	ldr	r3, [pc, #20]	; (8084290 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 808427c:	4608      	mov	r0, r1
 808427e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8084280:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8084282:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8084284:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8084286:	4611      	mov	r1, r2
 8084288:	f7fe fb00 	bl	808288c <HAL_USB_USART_Init>
}
 808428c:	4620      	mov	r0, r4
 808428e:	bd10      	pop	{r4, pc}
 8084290:	080881b0 	.word	0x080881b0

08084294 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8084294:	b510      	push	{r4, lr}
 8084296:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8084298:	2214      	movs	r2, #20
 808429a:	2100      	movs	r1, #0
 808429c:	f002 ff69 	bl	8087172 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80842a0:	4b05      	ldr	r3, [pc, #20]	; (80842b8 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80842a2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80842a4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80842a6:	4b05      	ldr	r3, [pc, #20]	; (80842bc <_Z19acquireSerialBufferv+0x28>)
 80842a8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80842aa:	f240 1301 	movw	r3, #257	; 0x101
 80842ae:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80842b0:	2381      	movs	r3, #129	; 0x81
 80842b2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80842b4:	bd10      	pop	{r4, pc}
 80842b6:	bf00      	nop
 80842b8:	20000549 	.word	0x20000549
 80842bc:	200004c8 	.word	0x200004c8

080842c0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80842c0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80842c2:	4d0e      	ldr	r5, [pc, #56]	; (80842fc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80842c4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80842c6:	a801      	add	r0, sp, #4
 80842c8:	f7ff ffe4 	bl	8084294 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80842cc:	6829      	ldr	r1, [r5, #0]
 80842ce:	f011 0401 	ands.w	r4, r1, #1
 80842d2:	d110      	bne.n	80842f6 <_Z16_fetch_usbserialv+0x36>
 80842d4:	4628      	mov	r0, r5
 80842d6:	f7fb fee6 	bl	80800a6 <__cxa_guard_acquire>
 80842da:	b160      	cbz	r0, 80842f6 <_Z16_fetch_usbserialv+0x36>
 80842dc:	aa01      	add	r2, sp, #4
 80842de:	4621      	mov	r1, r4
 80842e0:	4807      	ldr	r0, [pc, #28]	; (8084300 <_Z16_fetch_usbserialv+0x40>)
 80842e2:	f7ff ffc3 	bl	808426c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80842e6:	4628      	mov	r0, r5
 80842e8:	f7fb fee2 	bl	80800b0 <__cxa_guard_release>
 80842ec:	4a05      	ldr	r2, [pc, #20]	; (8084304 <_Z16_fetch_usbserialv+0x44>)
 80842ee:	4906      	ldr	r1, [pc, #24]	; (8084308 <_Z16_fetch_usbserialv+0x48>)
 80842f0:	4803      	ldr	r0, [pc, #12]	; (8084300 <_Z16_fetch_usbserialv+0x40>)
 80842f2:	f000 f9eb 	bl	80846cc <__aeabi_atexit>
	return _usbserial;
}
 80842f6:	4802      	ldr	r0, [pc, #8]	; (8084300 <_Z16_fetch_usbserialv+0x40>)
 80842f8:	b007      	add	sp, #28
 80842fa:	bd30      	pop	{r4, r5, pc}
 80842fc:	200004c4 	.word	0x200004c4
 8084300:	2000064c 	.word	0x2000064c
 8084304:	20000158 	.word	0x20000158
 8084308:	080841ed 	.word	0x080841ed

0808430c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 808430c:	b510      	push	{r4, lr}
 808430e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8084310:	2214      	movs	r2, #20
 8084312:	2100      	movs	r1, #0
 8084314:	f002 ff2d 	bl	8087172 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8084318:	4b05      	ldr	r3, [pc, #20]	; (8084330 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808431a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 808431c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 808431e:	4b05      	ldr	r3, [pc, #20]	; (8084334 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8084320:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8084322:	f240 1301 	movw	r3, #257	; 0x101
 8084326:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8084328:	2381      	movs	r3, #129	; 0x81
 808432a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 808432c:	bd10      	pop	{r4, pc}
 808432e:	bf00      	nop
 8084330:	200006fc 	.word	0x200006fc
 8084334:	20000664 	.word	0x20000664

08084338 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8084338:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808433a:	4c0e      	ldr	r4, [pc, #56]	; (8084374 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 808433c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 808433e:	a801      	add	r0, sp, #4
 8084340:	f7ff ffe4 	bl	808430c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8084344:	6823      	ldr	r3, [r4, #0]
 8084346:	07db      	lsls	r3, r3, #31
 8084348:	d410      	bmi.n	808436c <_Z17_fetch_usbserial1v+0x34>
 808434a:	4620      	mov	r0, r4
 808434c:	f7fb feab 	bl	80800a6 <__cxa_guard_acquire>
 8084350:	b160      	cbz	r0, 808436c <_Z17_fetch_usbserial1v+0x34>
 8084352:	aa01      	add	r2, sp, #4
 8084354:	2101      	movs	r1, #1
 8084356:	4808      	ldr	r0, [pc, #32]	; (8084378 <_Z17_fetch_usbserial1v+0x40>)
 8084358:	f7ff ff88 	bl	808426c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808435c:	4620      	mov	r0, r4
 808435e:	f7fb fea7 	bl	80800b0 <__cxa_guard_release>
 8084362:	4a06      	ldr	r2, [pc, #24]	; (808437c <_Z17_fetch_usbserial1v+0x44>)
 8084364:	4906      	ldr	r1, [pc, #24]	; (8084380 <_Z17_fetch_usbserial1v+0x48>)
 8084366:	4804      	ldr	r0, [pc, #16]	; (8084378 <_Z17_fetch_usbserial1v+0x40>)
 8084368:	f000 f9b0 	bl	80846cc <__aeabi_atexit>
  return _usbserial1;
}
 808436c:	4802      	ldr	r0, [pc, #8]	; (8084378 <_Z17_fetch_usbserial1v+0x40>)
 808436e:	b006      	add	sp, #24
 8084370:	bd10      	pop	{r4, pc}
 8084372:	bf00      	nop
 8084374:	20000660 	.word	0x20000660
 8084378:	200006e8 	.word	0x200006e8
 808437c:	20000158 	.word	0x20000158
 8084380:	080841ed 	.word	0x080841ed

08084384 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8084384:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8084386:	4b18      	ldr	r3, [pc, #96]	; (80843e8 <serialEventRun+0x64>)
 8084388:	b133      	cbz	r3, 8084398 <serialEventRun+0x14>
 808438a:	f7ff ff99 	bl	80842c0 <_Z16_fetch_usbserialv>
 808438e:	6803      	ldr	r3, [r0, #0]
 8084390:	691b      	ldr	r3, [r3, #16]
 8084392:	4798      	blx	r3
 8084394:	2800      	cmp	r0, #0
 8084396:	dc1e      	bgt.n	80843d6 <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8084398:	4b14      	ldr	r3, [pc, #80]	; (80843ec <serialEventRun+0x68>)
 808439a:	b133      	cbz	r3, 80843aa <serialEventRun+0x26>
 808439c:	f7ff fefe 	bl	808419c <_Z22__fetch_global_Serial1v>
 80843a0:	6803      	ldr	r3, [r0, #0]
 80843a2:	691b      	ldr	r3, [r3, #16]
 80843a4:	4798      	blx	r3
 80843a6:	2800      	cmp	r0, #0
 80843a8:	dc18      	bgt.n	80843dc <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80843aa:	4b11      	ldr	r3, [pc, #68]	; (80843f0 <serialEventRun+0x6c>)
 80843ac:	b10b      	cbz	r3, 80843b2 <serialEventRun+0x2e>
 80843ae:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 80843b2:	4b10      	ldr	r3, [pc, #64]	; (80843f4 <serialEventRun+0x70>)
 80843b4:	b10b      	cbz	r3, 80843ba <serialEventRun+0x36>
 80843b6:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 80843ba:	4b0f      	ldr	r3, [pc, #60]	; (80843f8 <serialEventRun+0x74>)
 80843bc:	b10b      	cbz	r3, 80843c2 <serialEventRun+0x3e>
 80843be:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80843c2:	4b0e      	ldr	r3, [pc, #56]	; (80843fc <serialEventRun+0x78>)
 80843c4:	b17b      	cbz	r3, 80843e6 <serialEventRun+0x62>
 80843c6:	f7ff ffb7 	bl	8084338 <_Z17_fetch_usbserial1v>
 80843ca:	6803      	ldr	r3, [r0, #0]
 80843cc:	691b      	ldr	r3, [r3, #16]
 80843ce:	4798      	blx	r3
 80843d0:	2800      	cmp	r0, #0
 80843d2:	dc06      	bgt.n	80843e2 <serialEventRun+0x5e>
 80843d4:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80843d6:	f3af 8000 	nop.w
 80843da:	e7dd      	b.n	8084398 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80843dc:	f3af 8000 	nop.w
 80843e0:	e7e3      	b.n	80843aa <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80843e2:	f3af 8000 	nop.w
 80843e6:	bd08      	pop	{r3, pc}
	...

08084400 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8084400:	b508      	push	{r3, lr}
	serialEventRun();
 8084402:	f7ff ffbf 	bl	8084384 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8084406:	f7fe f8e1 	bl	80825cc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808440a:	4b01      	ldr	r3, [pc, #4]	; (8084410 <_post_loop+0x10>)
 808440c:	6018      	str	r0, [r3, #0]
 808440e:	bd08      	pop	{r3, pc}
 8084410:	20000808 	.word	0x20000808

08084414 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8084414:	4802      	ldr	r0, [pc, #8]	; (8084420 <_Z33system_initialize_user_backup_ramv+0xc>)
 8084416:	4a03      	ldr	r2, [pc, #12]	; (8084424 <_Z33system_initialize_user_backup_ramv+0x10>)
 8084418:	4903      	ldr	r1, [pc, #12]	; (8084428 <_Z33system_initialize_user_backup_ramv+0x14>)
 808441a:	1a12      	subs	r2, r2, r0
 808441c:	f002 be9e 	b.w	808715c <memcpy>
 8084420:	40024000 	.word	0x40024000
 8084424:	40024004 	.word	0x40024004
 8084428:	08088498 	.word	0x08088498

0808442c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 808442c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808442e:	2300      	movs	r3, #0
 8084430:	9300      	str	r3, [sp, #0]
 8084432:	461a      	mov	r2, r3
 8084434:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8084438:	f7fe faa2 	bl	8082980 <system_ctrl_set_result>
}
 808443c:	b003      	add	sp, #12
 808443e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08084444 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8084444:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8084446:	8843      	ldrh	r3, [r0, #2]
 8084448:	2b0a      	cmp	r3, #10
 808444a:	d008      	beq.n	808445e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 808444c:	2b50      	cmp	r3, #80	; 0x50
 808444e:	d109      	bne.n	8084464 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8084450:	4b09      	ldr	r3, [pc, #36]	; (8084478 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8084452:	681b      	ldr	r3, [r3, #0]
 8084454:	b13b      	cbz	r3, 8084466 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 8084456:	b003      	add	sp, #12
 8084458:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 808445c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 808445e:	f7ff ffe5 	bl	808442c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 8084462:	e006      	b.n	8084472 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8084464:	2300      	movs	r3, #0
 8084466:	9300      	str	r3, [sp, #0]
 8084468:	461a      	mov	r2, r3
 808446a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808446e:	f7fe fa87 	bl	8082980 <system_ctrl_set_result>
        break;
    }
}
 8084472:	b003      	add	sp, #12
 8084474:	f85d fb04 	ldr.w	pc, [sp], #4
 8084478:	20000800 	.word	0x20000800

0808447c <module_user_init_hook>:

void module_user_init_hook()
{
 808447c:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 808447e:	4c10      	ldr	r4, [pc, #64]	; (80844c0 <module_user_init_hook+0x44>)
 8084480:	4d10      	ldr	r5, [pc, #64]	; (80844c4 <module_user_init_hook+0x48>)
 8084482:	6823      	ldr	r3, [r4, #0]
 8084484:	42ab      	cmp	r3, r5
 8084486:	4b10      	ldr	r3, [pc, #64]	; (80844c8 <module_user_init_hook+0x4c>)
 8084488:	bf0c      	ite	eq
 808448a:	2201      	moveq	r2, #1
 808448c:	2200      	movne	r2, #0
 808448e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8084490:	d002      	beq.n	8084498 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 8084492:	f7ff ffbf 	bl	8084414 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8084496:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8084498:	f7fe f890 	bl	80825bc <HAL_RNG_GetRandomNumber>
 808449c:	4604      	mov	r4, r0
    srand(seed);
 808449e:	f002 fe71 	bl	8087184 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80844a2:	4b0a      	ldr	r3, [pc, #40]	; (80844cc <module_user_init_hook+0x50>)
 80844a4:	b113      	cbz	r3, 80844ac <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80844a6:	4620      	mov	r0, r4
 80844a8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80844ac:	2100      	movs	r1, #0
 80844ae:	4807      	ldr	r0, [pc, #28]	; (80844cc <module_user_init_hook+0x50>)
 80844b0:	f7fe fac8 	bl	8082a44 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80844b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80844b8:	2100      	movs	r1, #0
 80844ba:	4805      	ldr	r0, [pc, #20]	; (80844d0 <module_user_init_hook+0x54>)
 80844bc:	f7fe ba56 	b.w	808296c <system_ctrl_set_app_request_handler>
 80844c0:	40024000 	.word	0x40024000
 80844c4:	9a271c1e 	.word	0x9a271c1e
 80844c8:	20000804 	.word	0x20000804
 80844cc:	00000000 	.word	0x00000000
 80844d0:	08084445 	.word	0x08084445

080844d4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80844d4:	b510      	push	{r4, lr}
 80844d6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80844d8:	480f      	ldr	r0, [pc, #60]	; (8084518 <pinAvailable+0x44>)
 80844da:	f7ff fc67 	bl	8083dac <_ZN8SPIClass9isEnabledEv>
 80844de:	b128      	cbz	r0, 80844ec <pinAvailable+0x18>
 80844e0:	f1a4 030d 	sub.w	r3, r4, #13
 80844e4:	2b02      	cmp	r3, #2
 80844e6:	d801      	bhi.n	80844ec <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80844e8:	2000      	movs	r0, #0
 80844ea:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80844ec:	f000 f868 	bl	80845c0 <_Z19__fetch_global_Wirev>
 80844f0:	f7ff f86f 	bl	80835d2 <_ZN7TwoWire9isEnabledEv>
 80844f4:	b108      	cbz	r0, 80844fa <pinAvailable+0x26>
 80844f6:	2c01      	cmp	r4, #1
 80844f8:	d9f6      	bls.n	80844e8 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80844fa:	f7ff fe4f 	bl	808419c <_Z22__fetch_global_Serial1v>
 80844fe:	f7ff fe49 	bl	8084194 <_ZN11USARTSerial9isEnabledEv>
 8084502:	b118      	cbz	r0, 808450c <pinAvailable+0x38>
 8084504:	f1a4 0312 	sub.w	r3, r4, #18
 8084508:	2b01      	cmp	r3, #1
 808450a:	d9ed      	bls.n	80844e8 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 808450c:	2c2e      	cmp	r4, #46	; 0x2e
 808450e:	bf8c      	ite	hi
 8084510:	2000      	movhi	r0, #0
 8084512:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8084514:	bd10      	pop	{r4, pc}
 8084516:	bf00      	nop
 8084518:	2000084c 	.word	0x2000084c

0808451c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808451c:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 808451e:	b538      	push	{r3, r4, r5, lr}
 8084520:	4604      	mov	r4, r0
 8084522:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8084524:	d80a      	bhi.n	808453c <pinMode+0x20>
 8084526:	29ff      	cmp	r1, #255	; 0xff
 8084528:	d008      	beq.n	808453c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808452a:	f7ff ffd3 	bl	80844d4 <pinAvailable>
 808452e:	b128      	cbz	r0, 808453c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8084530:	4629      	mov	r1, r5
 8084532:	4620      	mov	r0, r4
}
 8084534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8084538:	f7fe b890 	b.w	808265c <HAL_Pin_Mode>
 808453c:	bd38      	pop	{r3, r4, r5, pc}

0808453e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 808453e:	b538      	push	{r3, r4, r5, lr}
 8084540:	4604      	mov	r4, r0
 8084542:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8084544:	f7fe f892 	bl	808266c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8084548:	28ff      	cmp	r0, #255	; 0xff
 808454a:	d010      	beq.n	808456e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 808454c:	2806      	cmp	r0, #6
 808454e:	d804      	bhi.n	808455a <digitalWrite+0x1c>
 8084550:	234d      	movs	r3, #77	; 0x4d
 8084552:	fa23 f000 	lsr.w	r0, r3, r0
 8084556:	07c3      	lsls	r3, r0, #31
 8084558:	d409      	bmi.n	808456e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 808455a:	4620      	mov	r0, r4
 808455c:	f7ff ffba 	bl	80844d4 <pinAvailable>
 8084560:	b128      	cbz	r0, 808456e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8084562:	4629      	mov	r1, r5
 8084564:	4620      	mov	r0, r4
}
 8084566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 808456a:	f7fe b887 	b.w	808267c <HAL_GPIO_Write>
 808456e:	bd38      	pop	{r3, r4, r5, pc}

08084570 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 8084570:	b510      	push	{r4, lr}
 8084572:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8084574:	f7fe f87a 	bl	808266c <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 8084578:	3804      	subs	r0, #4
 808457a:	b2c0      	uxtb	r0, r0
 808457c:	2801      	cmp	r0, #1
 808457e:	d908      	bls.n	8084592 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 8084580:	4620      	mov	r0, r4
 8084582:	f7ff ffa7 	bl	80844d4 <pinAvailable>
 8084586:	b120      	cbz	r0, 8084592 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8084588:	4620      	mov	r0, r4
}
 808458a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 808458e:	f7fe b87d 	b.w	808268c <HAL_GPIO_Read>
}
 8084592:	2000      	movs	r0, #0
 8084594:	bd10      	pop	{r4, pc}
	...

08084598 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 8084598:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 808459a:	4c07      	ldr	r4, [pc, #28]	; (80845b8 <_Z21__fetch_global_EEPROMv+0x20>)
 808459c:	6823      	ldr	r3, [r4, #0]
 808459e:	07db      	lsls	r3, r3, #31
 80845a0:	d408      	bmi.n	80845b4 <_Z21__fetch_global_EEPROMv+0x1c>
 80845a2:	4620      	mov	r0, r4
 80845a4:	f7fb fd7f 	bl	80800a6 <__cxa_guard_acquire>
 80845a8:	b120      	cbz	r0, 80845b4 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 80845aa:	f7fe f81f 	bl	80825ec <HAL_EEPROM_Init>
 80845ae:	4620      	mov	r0, r4
 80845b0:	f7fb fd7e 	bl	80800b0 <__cxa_guard_release>
	return eeprom;
}
 80845b4:	4801      	ldr	r0, [pc, #4]	; (80845bc <_Z21__fetch_global_EEPROMv+0x24>)
 80845b6:	bd10      	pop	{r4, pc}
 80845b8:	2000080c 	.word	0x2000080c
 80845bc:	20000810 	.word	0x20000810

080845c0 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80845c0:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80845c2:	4d0b      	ldr	r5, [pc, #44]	; (80845f0 <_Z19__fetch_global_Wirev+0x30>)
 80845c4:	6829      	ldr	r1, [r5, #0]
 80845c6:	f011 0401 	ands.w	r4, r1, #1
 80845ca:	d10f      	bne.n	80845ec <_Z19__fetch_global_Wirev+0x2c>
 80845cc:	4628      	mov	r0, r5
 80845ce:	f7fb fd6a 	bl	80800a6 <__cxa_guard_acquire>
 80845d2:	b158      	cbz	r0, 80845ec <_Z19__fetch_global_Wirev+0x2c>
 80845d4:	4621      	mov	r1, r4
 80845d6:	4807      	ldr	r0, [pc, #28]	; (80845f4 <_Z19__fetch_global_Wirev+0x34>)
 80845d8:	f7fe ffc4 	bl	8083564 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80845dc:	4628      	mov	r0, r5
 80845de:	f7fb fd67 	bl	80800b0 <__cxa_guard_release>
 80845e2:	4a05      	ldr	r2, [pc, #20]	; (80845f8 <_Z19__fetch_global_Wirev+0x38>)
 80845e4:	4905      	ldr	r1, [pc, #20]	; (80845fc <_Z19__fetch_global_Wirev+0x3c>)
 80845e6:	4803      	ldr	r0, [pc, #12]	; (80845f4 <_Z19__fetch_global_Wirev+0x34>)
 80845e8:	f000 f870 	bl	80846cc <__aeabi_atexit>
	return wire;
}
 80845ec:	4801      	ldr	r0, [pc, #4]	; (80845f4 <_Z19__fetch_global_Wirev+0x34>)
 80845ee:	bd38      	pop	{r3, r4, r5, pc}
 80845f0:	20000814 	.word	0x20000814
 80845f4:	2000082c 	.word	0x2000082c
 80845f8:	20000158 	.word	0x20000158
 80845fc:	0808350d 	.word	0x0808350d

08084600 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8084600:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3);
 8084602:	4c0b      	ldr	r4, [pc, #44]	; (8084630 <_Z20__fetch_global_Wire3v+0x30>)
 8084604:	6823      	ldr	r3, [r4, #0]
 8084606:	07db      	lsls	r3, r3, #31
 8084608:	d40f      	bmi.n	808462a <_Z20__fetch_global_Wire3v+0x2a>
 808460a:	4620      	mov	r0, r4
 808460c:	f7fb fd4b 	bl	80800a6 <__cxa_guard_acquire>
 8084610:	b158      	cbz	r0, 808462a <_Z20__fetch_global_Wire3v+0x2a>
 8084612:	2102      	movs	r1, #2
 8084614:	4807      	ldr	r0, [pc, #28]	; (8084634 <_Z20__fetch_global_Wire3v+0x34>)
 8084616:	f7fe ffa5 	bl	8083564 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 808461a:	4620      	mov	r0, r4
 808461c:	f7fb fd48 	bl	80800b0 <__cxa_guard_release>
 8084620:	4a05      	ldr	r2, [pc, #20]	; (8084638 <_Z20__fetch_global_Wire3v+0x38>)
 8084622:	4906      	ldr	r1, [pc, #24]	; (808463c <_Z20__fetch_global_Wire3v+0x3c>)
 8084624:	4803      	ldr	r0, [pc, #12]	; (8084634 <_Z20__fetch_global_Wire3v+0x34>)
 8084626:	f000 f851 	bl	80846cc <__aeabi_atexit>
	return wire;
}
 808462a:	4802      	ldr	r0, [pc, #8]	; (8084634 <_Z20__fetch_global_Wire3v+0x34>)
 808462c:	bd10      	pop	{r4, pc}
 808462e:	bf00      	nop
 8084630:	20000840 	.word	0x20000840
 8084634:	20000818 	.word	0x20000818
 8084638:	20000158 	.word	0x20000158
 808463c:	0808350d 	.word	0x0808350d

08084640 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8084640:	b513      	push	{r0, r1, r4, lr}
 8084642:	4c08      	ldr	r4, [pc, #32]	; (8084664 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8084644:	2300      	movs	r3, #0
 8084646:	461a      	mov	r2, r3
 8084648:	4619      	mov	r1, r3
 808464a:	9300      	str	r3, [sp, #0]
 808464c:	4620      	mov	r0, r4
 808464e:	f7ff f843 	bl	80836d8 <_ZN9IPAddressC1Ehhhh>
 8084652:	4620      	mov	r0, r4
 8084654:	4a04      	ldr	r2, [pc, #16]	; (8084668 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8084656:	4905      	ldr	r1, [pc, #20]	; (808466c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8084658:	b002      	add	sp, #8
 808465a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808465e:	f000 b835 	b.w	80846cc <__aeabi_atexit>
 8084662:	bf00      	nop
 8084664:	20000844 	.word	0x20000844
 8084668:	20000158 	.word	0x20000158
 808466c:	08083651 	.word	0x08083651

08084670 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8084670:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8084672:	4e11      	ldr	r6, [pc, #68]	; (80846b8 <_GLOBAL__sub_I_SPI+0x48>)
 8084674:	4d11      	ldr	r5, [pc, #68]	; (80846bc <_GLOBAL__sub_I_SPI+0x4c>)
 8084676:	4c12      	ldr	r4, [pc, #72]	; (80846c0 <_GLOBAL__sub_I_SPI+0x50>)
 8084678:	2100      	movs	r1, #0
 808467a:	4630      	mov	r0, r6
 808467c:	f7ff fb14 	bl	8083ca8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8084680:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8084682:	4e10      	ldr	r6, [pc, #64]	; (80846c4 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8084684:	462a      	mov	r2, r5
 8084686:	4621      	mov	r1, r4
 8084688:	f000 f820 	bl	80846cc <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808468c:	2101      	movs	r1, #1
 808468e:	4630      	mov	r0, r6
 8084690:	f7ff fb0a 	bl	8083ca8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8084694:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8084696:	4e0c      	ldr	r6, [pc, #48]	; (80846c8 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8084698:	462a      	mov	r2, r5
 808469a:	4621      	mov	r1, r4
 808469c:	f000 f816 	bl	80846cc <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80846a0:	2102      	movs	r1, #2
 80846a2:	4630      	mov	r0, r6
 80846a4:	f7ff fb00 	bl	8083ca8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80846a8:	462a      	mov	r2, r5
 80846aa:	4621      	mov	r1, r4
 80846ac:	4630      	mov	r0, r6
 80846ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80846b2:	f000 b80b 	b.w	80846cc <__aeabi_atexit>
 80846b6:	bf00      	nop
 80846b8:	2000084c 	.word	0x2000084c
 80846bc:	20000158 	.word	0x20000158
 80846c0:	08083c99 	.word	0x08083c99
 80846c4:	2000085c 	.word	0x2000085c
 80846c8:	2000086c 	.word	0x2000086c

080846cc <__aeabi_atexit>:
 80846cc:	460b      	mov	r3, r1
 80846ce:	4601      	mov	r1, r0
 80846d0:	4618      	mov	r0, r3
 80846d2:	f002 bc3d 	b.w	8086f50 <__cxa_atexit>

080846d6 <_ZdlPvj>:
 80846d6:	f7fb bce4 	b.w	80800a2 <_ZdlPv>

080846da <_ZSt25__throw_bad_function_callv>:
 80846da:	b508      	push	{r3, lr}
 80846dc:	f7fe fa3a 	bl	8082b54 <abort>

080846e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80846e0:	4b24      	ldr	r3, [pc, #144]	; (8084774 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80846e2:	681a      	ldr	r2, [r3, #0]
 80846e4:	07d0      	lsls	r0, r2, #31
 80846e6:	bf5c      	itt	pl
 80846e8:	2201      	movpl	r2, #1
 80846ea:	601a      	strpl	r2, [r3, #0]
 80846ec:	4b22      	ldr	r3, [pc, #136]	; (8084778 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80846ee:	681a      	ldr	r2, [r3, #0]
 80846f0:	07d1      	lsls	r1, r2, #31
 80846f2:	bf5c      	itt	pl
 80846f4:	2201      	movpl	r2, #1
 80846f6:	601a      	strpl	r2, [r3, #0]
 80846f8:	4b20      	ldr	r3, [pc, #128]	; (808477c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80846fa:	681a      	ldr	r2, [r3, #0]
 80846fc:	07d2      	lsls	r2, r2, #31
 80846fe:	bf5c      	itt	pl
 8084700:	2201      	movpl	r2, #1
 8084702:	601a      	strpl	r2, [r3, #0]
 8084704:	4b1e      	ldr	r3, [pc, #120]	; (8084780 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8084706:	681a      	ldr	r2, [r3, #0]
 8084708:	07d0      	lsls	r0, r2, #31
 808470a:	bf5c      	itt	pl
 808470c:	2201      	movpl	r2, #1
 808470e:	601a      	strpl	r2, [r3, #0]
 8084710:	4b1c      	ldr	r3, [pc, #112]	; (8084784 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8084712:	681a      	ldr	r2, [r3, #0]
 8084714:	07d1      	lsls	r1, r2, #31
 8084716:	bf5c      	itt	pl
 8084718:	2201      	movpl	r2, #1
 808471a:	601a      	strpl	r2, [r3, #0]
 808471c:	4b1a      	ldr	r3, [pc, #104]	; (8084788 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 808471e:	681a      	ldr	r2, [r3, #0]
 8084720:	07d2      	lsls	r2, r2, #31
 8084722:	bf5c      	itt	pl
 8084724:	2201      	movpl	r2, #1
 8084726:	601a      	strpl	r2, [r3, #0]
 8084728:	4b18      	ldr	r3, [pc, #96]	; (808478c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 808472a:	681a      	ldr	r2, [r3, #0]
 808472c:	07d0      	lsls	r0, r2, #31
 808472e:	bf5c      	itt	pl
 8084730:	2201      	movpl	r2, #1
 8084732:	601a      	strpl	r2, [r3, #0]
 8084734:	4b16      	ldr	r3, [pc, #88]	; (8084790 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8084736:	681a      	ldr	r2, [r3, #0]
 8084738:	07d1      	lsls	r1, r2, #31
 808473a:	bf5c      	itt	pl
 808473c:	2201      	movpl	r2, #1
 808473e:	601a      	strpl	r2, [r3, #0]
 8084740:	4b14      	ldr	r3, [pc, #80]	; (8084794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8084742:	681a      	ldr	r2, [r3, #0]
 8084744:	07d2      	lsls	r2, r2, #31
 8084746:	bf5c      	itt	pl
 8084748:	2201      	movpl	r2, #1
 808474a:	601a      	strpl	r2, [r3, #0]
 808474c:	4b12      	ldr	r3, [pc, #72]	; (8084798 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 808474e:	681a      	ldr	r2, [r3, #0]
 8084750:	07d0      	lsls	r0, r2, #31
 8084752:	bf5c      	itt	pl
 8084754:	2201      	movpl	r2, #1
 8084756:	601a      	strpl	r2, [r3, #0]
 8084758:	4b10      	ldr	r3, [pc, #64]	; (808479c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 808475a:	681a      	ldr	r2, [r3, #0]
 808475c:	07d1      	lsls	r1, r2, #31
 808475e:	bf5c      	itt	pl
 8084760:	2201      	movpl	r2, #1
 8084762:	601a      	strpl	r2, [r3, #0]
 8084764:	4b0e      	ldr	r3, [pc, #56]	; (80847a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8084766:	681a      	ldr	r2, [r3, #0]
 8084768:	07d2      	lsls	r2, r2, #31
 808476a:	bf5c      	itt	pl
 808476c:	2201      	movpl	r2, #1
 808476e:	601a      	strpl	r2, [r3, #0]
 8084770:	4770      	bx	lr
 8084772:	bf00      	nop
 8084774:	200008a8 	.word	0x200008a8
 8084778:	200008a4 	.word	0x200008a4
 808477c:	200008a0 	.word	0x200008a0
 8084780:	2000089c 	.word	0x2000089c
 8084784:	20000898 	.word	0x20000898
 8084788:	20000894 	.word	0x20000894
 808478c:	20000890 	.word	0x20000890
 8084790:	2000088c 	.word	0x2000088c
 8084794:	20000888 	.word	0x20000888
 8084798:	20000884 	.word	0x20000884
 808479c:	20000880 	.word	0x20000880
 80847a0:	2000087c 	.word	0x2000087c

080847a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80847a4:	4b18      	ldr	r3, [pc, #96]	; (8084808 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80847a6:	681a      	ldr	r2, [r3, #0]
 80847a8:	07d1      	lsls	r1, r2, #31
 80847aa:	bf5c      	itt	pl
 80847ac:	2201      	movpl	r2, #1
 80847ae:	601a      	strpl	r2, [r3, #0]
 80847b0:	4b16      	ldr	r3, [pc, #88]	; (808480c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80847b2:	681a      	ldr	r2, [r3, #0]
 80847b4:	07d2      	lsls	r2, r2, #31
 80847b6:	bf5c      	itt	pl
 80847b8:	2201      	movpl	r2, #1
 80847ba:	601a      	strpl	r2, [r3, #0]
 80847bc:	4b14      	ldr	r3, [pc, #80]	; (8084810 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80847be:	681a      	ldr	r2, [r3, #0]
 80847c0:	07d0      	lsls	r0, r2, #31
 80847c2:	bf5c      	itt	pl
 80847c4:	2201      	movpl	r2, #1
 80847c6:	601a      	strpl	r2, [r3, #0]
 80847c8:	4b12      	ldr	r3, [pc, #72]	; (8084814 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80847ca:	681a      	ldr	r2, [r3, #0]
 80847cc:	07d1      	lsls	r1, r2, #31
 80847ce:	bf5c      	itt	pl
 80847d0:	2201      	movpl	r2, #1
 80847d2:	601a      	strpl	r2, [r3, #0]
 80847d4:	4b10      	ldr	r3, [pc, #64]	; (8084818 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80847d6:	681a      	ldr	r2, [r3, #0]
 80847d8:	07d2      	lsls	r2, r2, #31
 80847da:	bf5c      	itt	pl
 80847dc:	2201      	movpl	r2, #1
 80847de:	601a      	strpl	r2, [r3, #0]
 80847e0:	4b0e      	ldr	r3, [pc, #56]	; (808481c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80847e2:	681a      	ldr	r2, [r3, #0]
 80847e4:	07d0      	lsls	r0, r2, #31
 80847e6:	bf5c      	itt	pl
 80847e8:	2201      	movpl	r2, #1
 80847ea:	601a      	strpl	r2, [r3, #0]
 80847ec:	4b0c      	ldr	r3, [pc, #48]	; (8084820 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80847ee:	681a      	ldr	r2, [r3, #0]
 80847f0:	07d1      	lsls	r1, r2, #31
 80847f2:	bf5c      	itt	pl
 80847f4:	2201      	movpl	r2, #1
 80847f6:	601a      	strpl	r2, [r3, #0]
 80847f8:	4b0a      	ldr	r3, [pc, #40]	; (8084824 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80847fa:	681a      	ldr	r2, [r3, #0]
 80847fc:	07d2      	lsls	r2, r2, #31
 80847fe:	bf5c      	itt	pl
 8084800:	2201      	movpl	r2, #1
 8084802:	601a      	strpl	r2, [r3, #0]
 8084804:	4770      	bx	lr
 8084806:	bf00      	nop
 8084808:	200008c8 	.word	0x200008c8
 808480c:	200008c4 	.word	0x200008c4
 8084810:	200008c0 	.word	0x200008c0
 8084814:	200008bc 	.word	0x200008bc
 8084818:	200008b8 	.word	0x200008b8
 808481c:	200008b4 	.word	0x200008b4
 8084820:	200008b0 	.word	0x200008b0
 8084824:	200008ac 	.word	0x200008ac

08084828 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8084828:	4b18      	ldr	r3, [pc, #96]	; (808488c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 808482a:	681a      	ldr	r2, [r3, #0]
 808482c:	07d1      	lsls	r1, r2, #31
 808482e:	bf5c      	itt	pl
 8084830:	2201      	movpl	r2, #1
 8084832:	601a      	strpl	r2, [r3, #0]
 8084834:	4b16      	ldr	r3, [pc, #88]	; (8084890 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8084836:	681a      	ldr	r2, [r3, #0]
 8084838:	07d2      	lsls	r2, r2, #31
 808483a:	bf5c      	itt	pl
 808483c:	2201      	movpl	r2, #1
 808483e:	601a      	strpl	r2, [r3, #0]
 8084840:	4b14      	ldr	r3, [pc, #80]	; (8084894 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8084842:	681a      	ldr	r2, [r3, #0]
 8084844:	07d0      	lsls	r0, r2, #31
 8084846:	bf5c      	itt	pl
 8084848:	2201      	movpl	r2, #1
 808484a:	601a      	strpl	r2, [r3, #0]
 808484c:	4b12      	ldr	r3, [pc, #72]	; (8084898 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 808484e:	681a      	ldr	r2, [r3, #0]
 8084850:	07d1      	lsls	r1, r2, #31
 8084852:	bf5c      	itt	pl
 8084854:	2201      	movpl	r2, #1
 8084856:	601a      	strpl	r2, [r3, #0]
 8084858:	4b10      	ldr	r3, [pc, #64]	; (808489c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 808485a:	681a      	ldr	r2, [r3, #0]
 808485c:	07d2      	lsls	r2, r2, #31
 808485e:	bf5c      	itt	pl
 8084860:	2201      	movpl	r2, #1
 8084862:	601a      	strpl	r2, [r3, #0]
 8084864:	4b0e      	ldr	r3, [pc, #56]	; (80848a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8084866:	681a      	ldr	r2, [r3, #0]
 8084868:	07d0      	lsls	r0, r2, #31
 808486a:	bf5c      	itt	pl
 808486c:	2201      	movpl	r2, #1
 808486e:	601a      	strpl	r2, [r3, #0]
 8084870:	4b0c      	ldr	r3, [pc, #48]	; (80848a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8084872:	681a      	ldr	r2, [r3, #0]
 8084874:	07d1      	lsls	r1, r2, #31
 8084876:	bf5c      	itt	pl
 8084878:	2201      	movpl	r2, #1
 808487a:	601a      	strpl	r2, [r3, #0]
 808487c:	4b0a      	ldr	r3, [pc, #40]	; (80848a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 808487e:	681a      	ldr	r2, [r3, #0]
 8084880:	07d2      	lsls	r2, r2, #31
 8084882:	bf5c      	itt	pl
 8084884:	2201      	movpl	r2, #1
 8084886:	601a      	strpl	r2, [r3, #0]
 8084888:	4770      	bx	lr
 808488a:	bf00      	nop
 808488c:	200008e8 	.word	0x200008e8
 8084890:	200008e4 	.word	0x200008e4
 8084894:	200008e0 	.word	0x200008e0
 8084898:	200008dc 	.word	0x200008dc
 808489c:	200008d8 	.word	0x200008d8
 80848a0:	200008d4 	.word	0x200008d4
 80848a4:	200008d0 	.word	0x200008d0
 80848a8:	200008cc 	.word	0x200008cc

080848ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80848ac:	4b24      	ldr	r3, [pc, #144]	; (8084940 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80848ae:	681a      	ldr	r2, [r3, #0]
 80848b0:	07d0      	lsls	r0, r2, #31
 80848b2:	bf5c      	itt	pl
 80848b4:	2201      	movpl	r2, #1
 80848b6:	601a      	strpl	r2, [r3, #0]
 80848b8:	4b22      	ldr	r3, [pc, #136]	; (8084944 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80848ba:	681a      	ldr	r2, [r3, #0]
 80848bc:	07d1      	lsls	r1, r2, #31
 80848be:	bf5c      	itt	pl
 80848c0:	2201      	movpl	r2, #1
 80848c2:	601a      	strpl	r2, [r3, #0]
 80848c4:	4b20      	ldr	r3, [pc, #128]	; (8084948 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80848c6:	681a      	ldr	r2, [r3, #0]
 80848c8:	07d2      	lsls	r2, r2, #31
 80848ca:	bf5c      	itt	pl
 80848cc:	2201      	movpl	r2, #1
 80848ce:	601a      	strpl	r2, [r3, #0]
 80848d0:	4b1e      	ldr	r3, [pc, #120]	; (808494c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80848d2:	681a      	ldr	r2, [r3, #0]
 80848d4:	07d0      	lsls	r0, r2, #31
 80848d6:	bf5c      	itt	pl
 80848d8:	2201      	movpl	r2, #1
 80848da:	601a      	strpl	r2, [r3, #0]
 80848dc:	4b1c      	ldr	r3, [pc, #112]	; (8084950 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80848de:	681a      	ldr	r2, [r3, #0]
 80848e0:	07d1      	lsls	r1, r2, #31
 80848e2:	bf5c      	itt	pl
 80848e4:	2201      	movpl	r2, #1
 80848e6:	601a      	strpl	r2, [r3, #0]
 80848e8:	4b1a      	ldr	r3, [pc, #104]	; (8084954 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80848ea:	681a      	ldr	r2, [r3, #0]
 80848ec:	07d2      	lsls	r2, r2, #31
 80848ee:	bf5c      	itt	pl
 80848f0:	2201      	movpl	r2, #1
 80848f2:	601a      	strpl	r2, [r3, #0]
 80848f4:	4b18      	ldr	r3, [pc, #96]	; (8084958 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80848f6:	681a      	ldr	r2, [r3, #0]
 80848f8:	07d0      	lsls	r0, r2, #31
 80848fa:	bf5c      	itt	pl
 80848fc:	2201      	movpl	r2, #1
 80848fe:	601a      	strpl	r2, [r3, #0]
 8084900:	4b16      	ldr	r3, [pc, #88]	; (808495c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8084902:	681a      	ldr	r2, [r3, #0]
 8084904:	07d1      	lsls	r1, r2, #31
 8084906:	bf5c      	itt	pl
 8084908:	2201      	movpl	r2, #1
 808490a:	601a      	strpl	r2, [r3, #0]
 808490c:	4b14      	ldr	r3, [pc, #80]	; (8084960 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 808490e:	681a      	ldr	r2, [r3, #0]
 8084910:	07d2      	lsls	r2, r2, #31
 8084912:	bf5c      	itt	pl
 8084914:	2201      	movpl	r2, #1
 8084916:	601a      	strpl	r2, [r3, #0]
 8084918:	4b12      	ldr	r3, [pc, #72]	; (8084964 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 808491a:	681a      	ldr	r2, [r3, #0]
 808491c:	07d0      	lsls	r0, r2, #31
 808491e:	bf5c      	itt	pl
 8084920:	2201      	movpl	r2, #1
 8084922:	601a      	strpl	r2, [r3, #0]
 8084924:	4b10      	ldr	r3, [pc, #64]	; (8084968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8084926:	681a      	ldr	r2, [r3, #0]
 8084928:	07d1      	lsls	r1, r2, #31
 808492a:	bf5c      	itt	pl
 808492c:	2201      	movpl	r2, #1
 808492e:	601a      	strpl	r2, [r3, #0]
 8084930:	4b0e      	ldr	r3, [pc, #56]	; (808496c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8084932:	681a      	ldr	r2, [r3, #0]
 8084934:	07d2      	lsls	r2, r2, #31
 8084936:	bf5c      	itt	pl
 8084938:	2201      	movpl	r2, #1
 808493a:	601a      	strpl	r2, [r3, #0]
 808493c:	4770      	bx	lr
 808493e:	bf00      	nop
 8084940:	20000918 	.word	0x20000918
 8084944:	20000914 	.word	0x20000914
 8084948:	20000910 	.word	0x20000910
 808494c:	2000090c 	.word	0x2000090c
 8084950:	20000908 	.word	0x20000908
 8084954:	20000904 	.word	0x20000904
 8084958:	20000900 	.word	0x20000900
 808495c:	200008fc 	.word	0x200008fc
 8084960:	200008f8 	.word	0x200008f8
 8084964:	200008f4 	.word	0x200008f4
 8084968:	200008f0 	.word	0x200008f0
 808496c:	200008ec 	.word	0x200008ec

08084970 <pow>:
 8084970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084974:	b08d      	sub	sp, #52	; 0x34
 8084976:	4606      	mov	r6, r0
 8084978:	460f      	mov	r7, r1
 808497a:	4614      	mov	r4, r2
 808497c:	461d      	mov	r5, r3
 808497e:	f000 f9eb 	bl	8084d58 <__ieee754_pow>
 8084982:	f8df 9310 	ldr.w	r9, [pc, #784]	; 8084c94 <pow+0x324>
 8084986:	e9cd 0100 	strd	r0, r1, [sp]
 808498a:	f999 8000 	ldrsb.w	r8, [r9]
 808498e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8084992:	d046      	beq.n	8084a22 <pow+0xb2>
 8084994:	4622      	mov	r2, r4
 8084996:	462b      	mov	r3, r5
 8084998:	4620      	mov	r0, r4
 808499a:	4629      	mov	r1, r5
 808499c:	f001 fd70 	bl	8086480 <__aeabi_dcmpun>
 80849a0:	4683      	mov	fp, r0
 80849a2:	2800      	cmp	r0, #0
 80849a4:	d13d      	bne.n	8084a22 <pow+0xb2>
 80849a6:	4632      	mov	r2, r6
 80849a8:	463b      	mov	r3, r7
 80849aa:	4630      	mov	r0, r6
 80849ac:	4639      	mov	r1, r7
 80849ae:	f001 fd67 	bl	8086480 <__aeabi_dcmpun>
 80849b2:	4682      	mov	sl, r0
 80849b4:	2800      	cmp	r0, #0
 80849b6:	d174      	bne.n	8084aa2 <pow+0x132>
 80849b8:	4630      	mov	r0, r6
 80849ba:	4639      	mov	r1, r7
 80849bc:	2200      	movs	r2, #0
 80849be:	2300      	movs	r3, #0
 80849c0:	f001 fd2c 	bl	808641c <__aeabi_dcmpeq>
 80849c4:	2800      	cmp	r0, #0
 80849c6:	d033      	beq.n	8084a30 <pow+0xc0>
 80849c8:	2200      	movs	r2, #0
 80849ca:	2300      	movs	r3, #0
 80849cc:	4620      	mov	r0, r4
 80849ce:	4629      	mov	r1, r5
 80849d0:	f001 fd24 	bl	808641c <__aeabi_dcmpeq>
 80849d4:	4683      	mov	fp, r0
 80849d6:	b1b8      	cbz	r0, 8084a08 <pow+0x98>
 80849d8:	4aa9      	ldr	r2, [pc, #676]	; (8084c80 <pow+0x310>)
 80849da:	2301      	movs	r3, #1
 80849dc:	2000      	movs	r0, #0
 80849de:	2100      	movs	r1, #0
 80849e0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80849e4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80849e8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80849ec:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80849f0:	9203      	str	r2, [sp, #12]
 80849f2:	9302      	str	r3, [sp, #8]
 80849f4:	f1b8 0f00 	cmp.w	r8, #0
 80849f8:	d06c      	beq.n	8084ad4 <pow+0x164>
 80849fa:	4ba2      	ldr	r3, [pc, #648]	; (8084c84 <pow+0x314>)
 80849fc:	2200      	movs	r2, #0
 80849fe:	4610      	mov	r0, r2
 8084a00:	4619      	mov	r1, r3
 8084a02:	b00d      	add	sp, #52	; 0x34
 8084a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084a08:	4620      	mov	r0, r4
 8084a0a:	4629      	mov	r1, r5
 8084a0c:	f000 ffce 	bl	80859ac <finite>
 8084a10:	b138      	cbz	r0, 8084a22 <pow+0xb2>
 8084a12:	2200      	movs	r2, #0
 8084a14:	2300      	movs	r3, #0
 8084a16:	4620      	mov	r0, r4
 8084a18:	4629      	mov	r1, r5
 8084a1a:	f001 fd09 	bl	8086430 <__aeabi_dcmplt>
 8084a1e:	2800      	cmp	r0, #0
 8084a20:	d16a      	bne.n	8084af8 <pow+0x188>
 8084a22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8084a26:	4610      	mov	r0, r2
 8084a28:	4619      	mov	r1, r3
 8084a2a:	b00d      	add	sp, #52	; 0x34
 8084a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084a30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8084a34:	f000 ffba 	bl	80859ac <finite>
 8084a38:	4680      	mov	r8, r0
 8084a3a:	2800      	cmp	r0, #0
 8084a3c:	d07d      	beq.n	8084b3a <pow+0x1ca>
 8084a3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8084a42:	f04f 0a00 	mov.w	sl, #0
 8084a46:	f04f 0b00 	mov.w	fp, #0
 8084a4a:	4652      	mov	r2, sl
 8084a4c:	465b      	mov	r3, fp
 8084a4e:	f001 fce5 	bl	808641c <__aeabi_dcmpeq>
 8084a52:	2800      	cmp	r0, #0
 8084a54:	d0e5      	beq.n	8084a22 <pow+0xb2>
 8084a56:	4630      	mov	r0, r6
 8084a58:	4639      	mov	r1, r7
 8084a5a:	f000 ffa7 	bl	80859ac <finite>
 8084a5e:	2800      	cmp	r0, #0
 8084a60:	d0df      	beq.n	8084a22 <pow+0xb2>
 8084a62:	4620      	mov	r0, r4
 8084a64:	4629      	mov	r1, r5
 8084a66:	f000 ffa1 	bl	80859ac <finite>
 8084a6a:	2800      	cmp	r0, #0
 8084a6c:	d0d9      	beq.n	8084a22 <pow+0xb2>
 8084a6e:	f999 3000 	ldrsb.w	r3, [r9]
 8084a72:	4883      	ldr	r0, [pc, #524]	; (8084c80 <pow+0x310>)
 8084a74:	2104      	movs	r1, #4
 8084a76:	2200      	movs	r2, #0
 8084a78:	2b02      	cmp	r3, #2
 8084a7a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8084a7e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8084a82:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8084a86:	9003      	str	r0, [sp, #12]
 8084a88:	9102      	str	r1, [sp, #8]
 8084a8a:	920a      	str	r2, [sp, #40]	; 0x28
 8084a8c:	d004      	beq.n	8084a98 <pow+0x128>
 8084a8e:	a802      	add	r0, sp, #8
 8084a90:	f000 ff92 	bl	80859b8 <matherr>
 8084a94:	2800      	cmp	r0, #0
 8084a96:	d147      	bne.n	8084b28 <pow+0x1b8>
 8084a98:	f7fe f86c 	bl	8082b74 <__errno>
 8084a9c:	2322      	movs	r3, #34	; 0x22
 8084a9e:	6003      	str	r3, [r0, #0]
 8084aa0:	e042      	b.n	8084b28 <pow+0x1b8>
 8084aa2:	2200      	movs	r2, #0
 8084aa4:	2300      	movs	r3, #0
 8084aa6:	4620      	mov	r0, r4
 8084aa8:	4629      	mov	r1, r5
 8084aaa:	f001 fcb7 	bl	808641c <__aeabi_dcmpeq>
 8084aae:	2800      	cmp	r0, #0
 8084ab0:	d0b7      	beq.n	8084a22 <pow+0xb2>
 8084ab2:	4b74      	ldr	r3, [pc, #464]	; (8084c84 <pow+0x314>)
 8084ab4:	4872      	ldr	r0, [pc, #456]	; (8084c80 <pow+0x310>)
 8084ab6:	2200      	movs	r2, #0
 8084ab8:	2101      	movs	r1, #1
 8084aba:	f1b8 0f02 	cmp.w	r8, #2
 8084abe:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8084ac2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8084ac6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8084aca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8084ace:	9003      	str	r0, [sp, #12]
 8084ad0:	9102      	str	r1, [sp, #8]
 8084ad2:	d0a8      	beq.n	8084a26 <pow+0xb6>
 8084ad4:	a802      	add	r0, sp, #8
 8084ad6:	f000 ff6f 	bl	80859b8 <matherr>
 8084ada:	2800      	cmp	r0, #0
 8084adc:	d07e      	beq.n	8084bdc <pow+0x26c>
 8084ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084ae0:	b343      	cbz	r3, 8084b34 <pow+0x1c4>
 8084ae2:	f7fe f847 	bl	8082b74 <__errno>
 8084ae6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8084aea:	990a      	ldr	r1, [sp, #40]	; 0x28
 8084aec:	6001      	str	r1, [r0, #0]
 8084aee:	4610      	mov	r0, r2
 8084af0:	4619      	mov	r1, r3
 8084af2:	b00d      	add	sp, #52	; 0x34
 8084af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084af8:	4961      	ldr	r1, [pc, #388]	; (8084c80 <pow+0x310>)
 8084afa:	f999 3000 	ldrsb.w	r3, [r9]
 8084afe:	2201      	movs	r2, #1
 8084b00:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8084b04:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8084b08:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8084b0c:	9103      	str	r1, [sp, #12]
 8084b0e:	9202      	str	r2, [sp, #8]
 8084b10:	2b00      	cmp	r3, #0
 8084b12:	d068      	beq.n	8084be6 <pow+0x276>
 8084b14:	495c      	ldr	r1, [pc, #368]	; (8084c88 <pow+0x318>)
 8084b16:	2000      	movs	r0, #0
 8084b18:	2b02      	cmp	r3, #2
 8084b1a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8084b1e:	d166      	bne.n	8084bee <pow+0x27e>
 8084b20:	f7fe f828 	bl	8082b74 <__errno>
 8084b24:	2321      	movs	r3, #33	; 0x21
 8084b26:	6003      	str	r3, [r0, #0]
 8084b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084b2a:	b11b      	cbz	r3, 8084b34 <pow+0x1c4>
 8084b2c:	f7fe f822 	bl	8082b74 <__errno>
 8084b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084b32:	6003      	str	r3, [r0, #0]
 8084b34:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8084b38:	e775      	b.n	8084a26 <pow+0xb6>
 8084b3a:	4630      	mov	r0, r6
 8084b3c:	4639      	mov	r1, r7
 8084b3e:	f000 ff35 	bl	80859ac <finite>
 8084b42:	2800      	cmp	r0, #0
 8084b44:	f43f af7b 	beq.w	8084a3e <pow+0xce>
 8084b48:	4620      	mov	r0, r4
 8084b4a:	4629      	mov	r1, r5
 8084b4c:	f000 ff2e 	bl	80859ac <finite>
 8084b50:	2800      	cmp	r0, #0
 8084b52:	f43f af74 	beq.w	8084a3e <pow+0xce>
 8084b56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8084b5a:	4610      	mov	r0, r2
 8084b5c:	4619      	mov	r1, r3
 8084b5e:	f001 fc8f 	bl	8086480 <__aeabi_dcmpun>
 8084b62:	2800      	cmp	r0, #0
 8084b64:	d16f      	bne.n	8084c46 <pow+0x2d6>
 8084b66:	4b46      	ldr	r3, [pc, #280]	; (8084c80 <pow+0x310>)
 8084b68:	f999 8000 	ldrsb.w	r8, [r9]
 8084b6c:	9303      	str	r3, [sp, #12]
 8084b6e:	2303      	movs	r3, #3
 8084b70:	900a      	str	r0, [sp, #40]	; 0x28
 8084b72:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8084b76:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8084b7a:	9302      	str	r3, [sp, #8]
 8084b7c:	f1b8 0f00 	cmp.w	r8, #0
 8084b80:	d13b      	bne.n	8084bfa <pow+0x28a>
 8084b82:	f8df b114 	ldr.w	fp, [pc, #276]	; 8084c98 <pow+0x328>
 8084b86:	f04f 4a60 	mov.w	sl, #3758096384	; 0xe0000000
 8084b8a:	2200      	movs	r2, #0
 8084b8c:	2300      	movs	r3, #0
 8084b8e:	4630      	mov	r0, r6
 8084b90:	4639      	mov	r1, r7
 8084b92:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8084b96:	f001 fc4b 	bl	8086430 <__aeabi_dcmplt>
 8084b9a:	2800      	cmp	r0, #0
 8084b9c:	f43f af77 	beq.w	8084a8e <pow+0x11e>
 8084ba0:	2200      	movs	r2, #0
 8084ba2:	4b3a      	ldr	r3, [pc, #232]	; (8084c8c <pow+0x31c>)
 8084ba4:	4620      	mov	r0, r4
 8084ba6:	4629      	mov	r1, r5
 8084ba8:	f001 f9d0 	bl	8085f4c <__aeabi_dmul>
 8084bac:	4604      	mov	r4, r0
 8084bae:	460d      	mov	r5, r1
 8084bb0:	f000 ff0a 	bl	80859c8 <rint>
 8084bb4:	4602      	mov	r2, r0
 8084bb6:	460b      	mov	r3, r1
 8084bb8:	4620      	mov	r0, r4
 8084bba:	4629      	mov	r1, r5
 8084bbc:	f001 fc2e 	bl	808641c <__aeabi_dcmpeq>
 8084bc0:	2800      	cmp	r0, #0
 8084bc2:	d13d      	bne.n	8084c40 <pow+0x2d0>
 8084bc4:	4b32      	ldr	r3, [pc, #200]	; (8084c90 <pow+0x320>)
 8084bc6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8084bca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8084bce:	f999 8000 	ldrsb.w	r8, [r9]
 8084bd2:	f1b8 0f02 	cmp.w	r8, #2
 8084bd6:	f47f af5a 	bne.w	8084a8e <pow+0x11e>
 8084bda:	e75d      	b.n	8084a98 <pow+0x128>
 8084bdc:	f7fd ffca 	bl	8082b74 <__errno>
 8084be0:	2321      	movs	r3, #33	; 0x21
 8084be2:	6003      	str	r3, [r0, #0]
 8084be4:	e77b      	b.n	8084ade <pow+0x16e>
 8084be6:	2300      	movs	r3, #0
 8084be8:	2400      	movs	r4, #0
 8084bea:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8084bee:	a802      	add	r0, sp, #8
 8084bf0:	f000 fee2 	bl	80859b8 <matherr>
 8084bf4:	2800      	cmp	r0, #0
 8084bf6:	d197      	bne.n	8084b28 <pow+0x1b8>
 8084bf8:	e792      	b.n	8084b20 <pow+0x1b0>
 8084bfa:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 8084c9c <pow+0x32c>
 8084bfe:	f04f 0a00 	mov.w	sl, #0
 8084c02:	2200      	movs	r2, #0
 8084c04:	2300      	movs	r3, #0
 8084c06:	4630      	mov	r0, r6
 8084c08:	4639      	mov	r1, r7
 8084c0a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8084c0e:	f001 fc0f 	bl	8086430 <__aeabi_dcmplt>
 8084c12:	2800      	cmp	r0, #0
 8084c14:	d0dd      	beq.n	8084bd2 <pow+0x262>
 8084c16:	2200      	movs	r2, #0
 8084c18:	4b1c      	ldr	r3, [pc, #112]	; (8084c8c <pow+0x31c>)
 8084c1a:	4620      	mov	r0, r4
 8084c1c:	4629      	mov	r1, r5
 8084c1e:	f001 f995 	bl	8085f4c <__aeabi_dmul>
 8084c22:	4604      	mov	r4, r0
 8084c24:	460d      	mov	r5, r1
 8084c26:	f000 fecf 	bl	80859c8 <rint>
 8084c2a:	4602      	mov	r2, r0
 8084c2c:	460b      	mov	r3, r1
 8084c2e:	4620      	mov	r0, r4
 8084c30:	4629      	mov	r1, r5
 8084c32:	f001 fbf3 	bl	808641c <__aeabi_dcmpeq>
 8084c36:	b918      	cbnz	r0, 8084c40 <pow+0x2d0>
 8084c38:	4b13      	ldr	r3, [pc, #76]	; (8084c88 <pow+0x318>)
 8084c3a:	2200      	movs	r2, #0
 8084c3c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8084c40:	f999 8000 	ldrsb.w	r8, [r9]
 8084c44:	e7c5      	b.n	8084bd2 <pow+0x262>
 8084c46:	4a0e      	ldr	r2, [pc, #56]	; (8084c80 <pow+0x310>)
 8084c48:	f999 9000 	ldrsb.w	r9, [r9]
 8084c4c:	2301      	movs	r3, #1
 8084c4e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8084c52:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8084c56:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8084c5a:	9203      	str	r2, [sp, #12]
 8084c5c:	9302      	str	r3, [sp, #8]
 8084c5e:	f1b9 0f00 	cmp.w	r9, #0
 8084c62:	d0c0      	beq.n	8084be6 <pow+0x276>
 8084c64:	2200      	movs	r2, #0
 8084c66:	2300      	movs	r3, #0
 8084c68:	4610      	mov	r0, r2
 8084c6a:	4619      	mov	r1, r3
 8084c6c:	f001 fa98 	bl	80861a0 <__aeabi_ddiv>
 8084c70:	f1b9 0f02 	cmp.w	r9, #2
 8084c74:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8084c78:	f43f af52 	beq.w	8084b20 <pow+0x1b0>
 8084c7c:	e7b7      	b.n	8084bee <pow+0x27e>
 8084c7e:	bf00      	nop
 8084c80:	080881d8 	.word	0x080881d8
 8084c84:	3ff00000 	.word	0x3ff00000
 8084c88:	fff00000 	.word	0xfff00000
 8084c8c:	3fe00000 	.word	0x3fe00000
 8084c90:	c7efffff 	.word	0xc7efffff
 8084c94:	2000009c 	.word	0x2000009c
 8084c98:	47efffff 	.word	0x47efffff
 8084c9c:	7ff00000 	.word	0x7ff00000

08084ca0 <sqrt>:
 8084ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084ca4:	b08b      	sub	sp, #44	; 0x2c
 8084ca6:	4604      	mov	r4, r0
 8084ca8:	460d      	mov	r5, r1
 8084caa:	f000 fdb7 	bl	808581c <__ieee754_sqrt>
 8084cae:	4b28      	ldr	r3, [pc, #160]	; (8084d50 <sqrt+0xb0>)
 8084cb0:	4606      	mov	r6, r0
 8084cb2:	f993 a000 	ldrsb.w	sl, [r3]
 8084cb6:	460f      	mov	r7, r1
 8084cb8:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8084cbc:	d012      	beq.n	8084ce4 <sqrt+0x44>
 8084cbe:	4622      	mov	r2, r4
 8084cc0:	462b      	mov	r3, r5
 8084cc2:	4620      	mov	r0, r4
 8084cc4:	4629      	mov	r1, r5
 8084cc6:	f001 fbdb 	bl	8086480 <__aeabi_dcmpun>
 8084cca:	4683      	mov	fp, r0
 8084ccc:	b950      	cbnz	r0, 8084ce4 <sqrt+0x44>
 8084cce:	f04f 0800 	mov.w	r8, #0
 8084cd2:	f04f 0900 	mov.w	r9, #0
 8084cd6:	4620      	mov	r0, r4
 8084cd8:	4629      	mov	r1, r5
 8084cda:	4642      	mov	r2, r8
 8084cdc:	464b      	mov	r3, r9
 8084cde:	f001 fba7 	bl	8086430 <__aeabi_dcmplt>
 8084ce2:	b920      	cbnz	r0, 8084cee <sqrt+0x4e>
 8084ce4:	4630      	mov	r0, r6
 8084ce6:	4639      	mov	r1, r7
 8084ce8:	b00b      	add	sp, #44	; 0x2c
 8084cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084cee:	4a19      	ldr	r2, [pc, #100]	; (8084d54 <sqrt+0xb4>)
 8084cf0:	2301      	movs	r3, #1
 8084cf2:	f8cd b020 	str.w	fp, [sp, #32]
 8084cf6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8084cfa:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8084cfe:	9201      	str	r2, [sp, #4]
 8084d00:	9300      	str	r3, [sp, #0]
 8084d02:	f1ba 0f00 	cmp.w	sl, #0
 8084d06:	d015      	beq.n	8084d34 <sqrt+0x94>
 8084d08:	4642      	mov	r2, r8
 8084d0a:	464b      	mov	r3, r9
 8084d0c:	4640      	mov	r0, r8
 8084d0e:	4649      	mov	r1, r9
 8084d10:	f001 fa46 	bl	80861a0 <__aeabi_ddiv>
 8084d14:	f1ba 0f02 	cmp.w	sl, #2
 8084d18:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8084d1c:	d10c      	bne.n	8084d38 <sqrt+0x98>
 8084d1e:	f7fd ff29 	bl	8082b74 <__errno>
 8084d22:	2321      	movs	r3, #33	; 0x21
 8084d24:	6003      	str	r3, [r0, #0]
 8084d26:	9b08      	ldr	r3, [sp, #32]
 8084d28:	b963      	cbnz	r3, 8084d44 <sqrt+0xa4>
 8084d2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8084d2e:	b00b      	add	sp, #44	; 0x2c
 8084d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084d34:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8084d38:	4668      	mov	r0, sp
 8084d3a:	f000 fe3d 	bl	80859b8 <matherr>
 8084d3e:	2800      	cmp	r0, #0
 8084d40:	d1f1      	bne.n	8084d26 <sqrt+0x86>
 8084d42:	e7ec      	b.n	8084d1e <sqrt+0x7e>
 8084d44:	f7fd ff16 	bl	8082b74 <__errno>
 8084d48:	9b08      	ldr	r3, [sp, #32]
 8084d4a:	6003      	str	r3, [r0, #0]
 8084d4c:	e7ed      	b.n	8084d2a <sqrt+0x8a>
 8084d4e:	bf00      	nop
 8084d50:	2000009c 	.word	0x2000009c
 8084d54:	080881dc 	.word	0x080881dc

08084d58 <__ieee754_pow>:
 8084d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084d5c:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 8084d60:	ea58 0902 	orrs.w	r9, r8, r2
 8084d64:	b093      	sub	sp, #76	; 0x4c
 8084d66:	d03c      	beq.n	8084de2 <__ieee754_pow+0x8a>
 8084d68:	4c71      	ldr	r4, [pc, #452]	; (8084f30 <__ieee754_pow+0x1d8>)
 8084d6a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8084d6e:	42a6      	cmp	r6, r4
 8084d70:	4683      	mov	fp, r0
 8084d72:	460d      	mov	r5, r1
 8084d74:	dd0c      	ble.n	8084d90 <__ieee754_pow+0x38>
 8084d76:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 8084d7a:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8084d7e:	ea56 000b 	orrs.w	r0, r6, fp
 8084d82:	d138      	bne.n	8084df6 <__ieee754_pow+0x9e>
 8084d84:	4683      	mov	fp, r0
 8084d86:	496b      	ldr	r1, [pc, #428]	; (8084f34 <__ieee754_pow+0x1dc>)
 8084d88:	4658      	mov	r0, fp
 8084d8a:	b013      	add	sp, #76	; 0x4c
 8084d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084d90:	469a      	mov	sl, r3
 8084d92:	4696      	mov	lr, r2
 8084d94:	d02b      	beq.n	8084dee <__ieee754_pow+0x96>
 8084d96:	45a0      	cmp	r8, r4
 8084d98:	dced      	bgt.n	8084d76 <__ieee754_pow+0x1e>
 8084d9a:	4c65      	ldr	r4, [pc, #404]	; (8084f30 <__ieee754_pow+0x1d8>)
 8084d9c:	45a0      	cmp	r8, r4
 8084d9e:	d078      	beq.n	8084e92 <__ieee754_pow+0x13a>
 8084da0:	2d00      	cmp	r5, #0
 8084da2:	460f      	mov	r7, r1
 8084da4:	4681      	mov	r9, r0
 8084da6:	e9cd 2300 	strd	r2, r3, [sp]
 8084daa:	db76      	blt.n	8084e9a <__ieee754_pow+0x142>
 8084dac:	2400      	movs	r4, #0
 8084dae:	f1be 0f00 	cmp.w	lr, #0
 8084db2:	d127      	bne.n	8084e04 <__ieee754_pow+0xac>
 8084db4:	4b5e      	ldr	r3, [pc, #376]	; (8084f30 <__ieee754_pow+0x1d8>)
 8084db6:	4598      	cmp	r8, r3
 8084db8:	f000 808b 	beq.w	8084ed2 <__ieee754_pow+0x17a>
 8084dbc:	4b5d      	ldr	r3, [pc, #372]	; (8084f34 <__ieee754_pow+0x1dc>)
 8084dbe:	4598      	cmp	r8, r3
 8084dc0:	d052      	beq.n	8084e68 <__ieee754_pow+0x110>
 8084dc2:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
 8084dc6:	f000 83c9 	beq.w	808555c <__ieee754_pow+0x804>
 8084dca:	4b5b      	ldr	r3, [pc, #364]	; (8084f38 <__ieee754_pow+0x1e0>)
 8084dcc:	459a      	cmp	sl, r3
 8084dce:	d119      	bne.n	8084e04 <__ieee754_pow+0xac>
 8084dd0:	2d00      	cmp	r5, #0
 8084dd2:	db17      	blt.n	8084e04 <__ieee754_pow+0xac>
 8084dd4:	4648      	mov	r0, r9
 8084dd6:	4639      	mov	r1, r7
 8084dd8:	b013      	add	sp, #76	; 0x4c
 8084dda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084dde:	f000 bd1d 	b.w	808581c <__ieee754_sqrt>
 8084de2:	46cb      	mov	fp, r9
 8084de4:	4658      	mov	r0, fp
 8084de6:	4953      	ldr	r1, [pc, #332]	; (8084f34 <__ieee754_pow+0x1dc>)
 8084de8:	b013      	add	sp, #76	; 0x4c
 8084dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084dee:	2800      	cmp	r0, #0
 8084df0:	d1c1      	bne.n	8084d76 <__ieee754_pow+0x1e>
 8084df2:	45b0      	cmp	r8, r6
 8084df4:	ddd1      	ble.n	8084d9a <__ieee754_pow+0x42>
 8084df6:	4851      	ldr	r0, [pc, #324]	; (8084f3c <__ieee754_pow+0x1e4>)
 8084df8:	b013      	add	sp, #76	; 0x4c
 8084dfa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084dfe:	f000 bddd 	b.w	80859bc <nan>
 8084e02:	2400      	movs	r4, #0
 8084e04:	4648      	mov	r0, r9
 8084e06:	4639      	mov	r1, r7
 8084e08:	f000 fdcc 	bl	80859a4 <fabs>
 8084e0c:	f1bb 0f00 	cmp.w	fp, #0
 8084e10:	d01c      	beq.n	8084e4c <__ieee754_pow+0xf4>
 8084e12:	0fed      	lsrs	r5, r5, #31
 8084e14:	3d01      	subs	r5, #1
 8084e16:	ea54 0305 	orrs.w	r3, r4, r5
 8084e1a:	d070      	beq.n	8084efe <__ieee754_pow+0x1a6>
 8084e1c:	4b48      	ldr	r3, [pc, #288]	; (8084f40 <__ieee754_pow+0x1e8>)
 8084e1e:	4598      	cmp	r8, r3
 8084e20:	f340 8094 	ble.w	8084f4c <__ieee754_pow+0x1f4>
 8084e24:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8084e28:	4598      	cmp	r8, r3
 8084e2a:	f340 840d 	ble.w	8085648 <__ieee754_pow+0x8f0>
 8084e2e:	4b45      	ldr	r3, [pc, #276]	; (8084f44 <__ieee754_pow+0x1ec>)
 8084e30:	429e      	cmp	r6, r3
 8084e32:	dd70      	ble.n	8084f16 <__ieee754_pow+0x1be>
 8084e34:	f1ba 0f00 	cmp.w	sl, #0
 8084e38:	dd70      	ble.n	8084f1c <__ieee754_pow+0x1c4>
 8084e3a:	a33b      	add	r3, pc, #236	; (adr r3, 8084f28 <__ieee754_pow+0x1d0>)
 8084e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084e40:	4610      	mov	r0, r2
 8084e42:	4619      	mov	r1, r3
 8084e44:	f001 f882 	bl	8085f4c <__aeabi_dmul>
 8084e48:	4683      	mov	fp, r0
 8084e4a:	e79d      	b.n	8084d88 <__ieee754_pow+0x30>
 8084e4c:	b126      	cbz	r6, 8084e58 <__ieee754_pow+0x100>
 8084e4e:	4b39      	ldr	r3, [pc, #228]	; (8084f34 <__ieee754_pow+0x1dc>)
 8084e50:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8084e54:	429a      	cmp	r2, r3
 8084e56:	d1dc      	bne.n	8084e12 <__ieee754_pow+0xba>
 8084e58:	f1ba 0f00 	cmp.w	sl, #0
 8084e5c:	f2c0 83b7 	blt.w	80855ce <__ieee754_pow+0x876>
 8084e60:	2d00      	cmp	r5, #0
 8084e62:	db08      	blt.n	8084e76 <__ieee754_pow+0x11e>
 8084e64:	4683      	mov	fp, r0
 8084e66:	e78f      	b.n	8084d88 <__ieee754_pow+0x30>
 8084e68:	f1ba 0f00 	cmp.w	sl, #0
 8084e6c:	f2c0 845e 	blt.w	808572c <__ieee754_pow+0x9d4>
 8084e70:	46cb      	mov	fp, r9
 8084e72:	4639      	mov	r1, r7
 8084e74:	e788      	b.n	8084d88 <__ieee754_pow+0x30>
 8084e76:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 8084e7a:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8084e7e:	ea56 0304 	orrs.w	r3, r6, r4
 8084e82:	f000 8483 	beq.w	808578c <__ieee754_pow+0xa34>
 8084e86:	2c01      	cmp	r4, #1
 8084e88:	d1ec      	bne.n	8084e64 <__ieee754_pow+0x10c>
 8084e8a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8084e8e:	4683      	mov	fp, r0
 8084e90:	e77a      	b.n	8084d88 <__ieee754_pow+0x30>
 8084e92:	f1be 0f00 	cmp.w	lr, #0
 8084e96:	d083      	beq.n	8084da0 <__ieee754_pow+0x48>
 8084e98:	e76d      	b.n	8084d76 <__ieee754_pow+0x1e>
 8084e9a:	4b2b      	ldr	r3, [pc, #172]	; (8084f48 <__ieee754_pow+0x1f0>)
 8084e9c:	4598      	cmp	r8, r3
 8084e9e:	dc2c      	bgt.n	8084efa <__ieee754_pow+0x1a2>
 8084ea0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8084ea4:	4598      	cmp	r8, r3
 8084ea6:	dd81      	ble.n	8084dac <__ieee754_pow+0x54>
 8084ea8:	ea4f 5328 	mov.w	r3, r8, asr #20
 8084eac:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8084eb0:	2b14      	cmp	r3, #20
 8084eb2:	f340 8453 	ble.w	808575c <__ieee754_pow+0xa04>
 8084eb6:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8084eba:	fa2e f203 	lsr.w	r2, lr, r3
 8084ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8084ec2:	459e      	cmp	lr, r3
 8084ec4:	f47f af72 	bne.w	8084dac <__ieee754_pow+0x54>
 8084ec8:	f002 0201 	and.w	r2, r2, #1
 8084ecc:	f1c2 0402 	rsb	r4, r2, #2
 8084ed0:	e76d      	b.n	8084dae <__ieee754_pow+0x56>
 8084ed2:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
 8084ed6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8084eda:	ea53 030b 	orrs.w	r3, r3, fp
 8084ede:	f000 833a 	beq.w	8085556 <__ieee754_pow+0x7fe>
 8084ee2:	4b18      	ldr	r3, [pc, #96]	; (8084f44 <__ieee754_pow+0x1ec>)
 8084ee4:	429e      	cmp	r6, r3
 8084ee6:	f340 8367 	ble.w	80855b8 <__ieee754_pow+0x860>
 8084eea:	f1ba 0f00 	cmp.w	sl, #0
 8084eee:	db15      	blt.n	8084f1c <__ieee754_pow+0x1c4>
 8084ef0:	e9dd 3400 	ldrd	r3, r4, [sp]
 8084ef4:	469b      	mov	fp, r3
 8084ef6:	4621      	mov	r1, r4
 8084ef8:	e746      	b.n	8084d88 <__ieee754_pow+0x30>
 8084efa:	2402      	movs	r4, #2
 8084efc:	e757      	b.n	8084dae <__ieee754_pow+0x56>
 8084efe:	464a      	mov	r2, r9
 8084f00:	4648      	mov	r0, r9
 8084f02:	463b      	mov	r3, r7
 8084f04:	4639      	mov	r1, r7
 8084f06:	f000 fe6d 	bl	8085be4 <__aeabi_dsub>
 8084f0a:	4602      	mov	r2, r0
 8084f0c:	460b      	mov	r3, r1
 8084f0e:	f001 f947 	bl	80861a0 <__aeabi_ddiv>
 8084f12:	4683      	mov	fp, r0
 8084f14:	e738      	b.n	8084d88 <__ieee754_pow+0x30>
 8084f16:	f1ba 0f00 	cmp.w	sl, #0
 8084f1a:	db8e      	blt.n	8084e3a <__ieee754_pow+0xe2>
 8084f1c:	f04f 0b00 	mov.w	fp, #0
 8084f20:	4659      	mov	r1, fp
 8084f22:	e731      	b.n	8084d88 <__ieee754_pow+0x30>
 8084f24:	f3af 8000 	nop.w
 8084f28:	8800759c 	.word	0x8800759c
 8084f2c:	7e37e43c 	.word	0x7e37e43c
 8084f30:	7ff00000 	.word	0x7ff00000
 8084f34:	3ff00000 	.word	0x3ff00000
 8084f38:	3fe00000 	.word	0x3fe00000
 8084f3c:	080881e0 	.word	0x080881e0
 8084f40:	41e00000 	.word	0x41e00000
 8084f44:	3fefffff 	.word	0x3fefffff
 8084f48:	433fffff 	.word	0x433fffff
 8084f4c:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
 8084f50:	f04f 0200 	mov.w	r2, #0
 8084f54:	da05      	bge.n	8084f62 <__ieee754_pow+0x20a>
 8084f56:	4bd0      	ldr	r3, [pc, #832]	; (8085298 <__ieee754_pow+0x540>)
 8084f58:	f000 fff8 	bl	8085f4c <__aeabi_dmul>
 8084f5c:	460e      	mov	r6, r1
 8084f5e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8084f62:	f8df e344 	ldr.w	lr, [pc, #836]	; 80852a8 <__ieee754_pow+0x550>
 8084f66:	1533      	asrs	r3, r6, #20
 8084f68:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8084f6c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8084f70:	f046 577f 	orr.w	r7, r6, #1069547520	; 0x3fc00000
 8084f74:	4576      	cmp	r6, lr
 8084f76:	eb03 0a02 	add.w	sl, r3, r2
 8084f7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8084f7e:	f340 83c9 	ble.w	8085714 <__ieee754_pow+0x9bc>
 8084f82:	4bc6      	ldr	r3, [pc, #792]	; (808529c <__ieee754_pow+0x544>)
 8084f84:	2200      	movs	r2, #0
 8084f86:	429e      	cmp	r6, r3
 8084f88:	f340 8404 	ble.w	8085794 <__ieee754_pow+0xa3c>
 8084f8c:	2300      	movs	r3, #0
 8084f8e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8084f92:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8084f96:	4bc2      	ldr	r3, [pc, #776]	; (80852a0 <__ieee754_pow+0x548>)
 8084f98:	2200      	movs	r2, #0
 8084f9a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8084f9e:	f10a 0a01 	add.w	sl, sl, #1
 8084fa2:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8084fa6:	2600      	movs	r6, #0
 8084fa8:	4639      	mov	r1, r7
 8084faa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8084fae:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8084fb2:	f000 fe17 	bl	8085be4 <__aeabi_dsub>
 8084fb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8084fba:	4680      	mov	r8, r0
 8084fbc:	4689      	mov	r9, r1
 8084fbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8084fc2:	f000 fe11 	bl	8085be8 <__adddf3>
 8084fc6:	4602      	mov	r2, r0
 8084fc8:	460b      	mov	r3, r1
 8084fca:	2000      	movs	r0, #0
 8084fcc:	49b4      	ldr	r1, [pc, #720]	; (80852a0 <__ieee754_pow+0x548>)
 8084fce:	f001 f8e7 	bl	80861a0 <__aeabi_ddiv>
 8084fd2:	460a      	mov	r2, r1
 8084fd4:	4601      	mov	r1, r0
 8084fd6:	4613      	mov	r3, r2
 8084fd8:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 8084fdc:	4602      	mov	r2, r0
 8084fde:	4649      	mov	r1, r9
 8084fe0:	4640      	mov	r0, r8
 8084fe2:	f000 ffb3 	bl	8085f4c <__aeabi_dmul>
 8084fe6:	468c      	mov	ip, r1
 8084fe8:	4683      	mov	fp, r0
 8084fea:	107b      	asrs	r3, r7, #1
 8084fec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8084ff0:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8084ff4:	1999      	adds	r1, r3, r6
 8084ff6:	2000      	movs	r0, #0
 8084ff8:	e9cd bc04 	strd	fp, ip, [sp, #16]
 8084ffc:	4606      	mov	r6, r0
 8084ffe:	460f      	mov	r7, r1
 8085000:	f04f 0b00 	mov.w	fp, #0
 8085004:	4661      	mov	r1, ip
 8085006:	4658      	mov	r0, fp
 8085008:	4632      	mov	r2, r6
 808500a:	463b      	mov	r3, r7
 808500c:	e9cd bc10 	strd	fp, ip, [sp, #64]	; 0x40
 8085010:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8085014:	f000 ff9a 	bl	8085f4c <__aeabi_dmul>
 8085018:	4602      	mov	r2, r0
 808501a:	460b      	mov	r3, r1
 808501c:	4640      	mov	r0, r8
 808501e:	4649      	mov	r1, r9
 8085020:	f000 fde0 	bl	8085be4 <__aeabi_dsub>
 8085024:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8085028:	4680      	mov	r8, r0
 808502a:	4689      	mov	r9, r1
 808502c:	4630      	mov	r0, r6
 808502e:	4639      	mov	r1, r7
 8085030:	f000 fdd8 	bl	8085be4 <__aeabi_dsub>
 8085034:	4602      	mov	r2, r0
 8085036:	460b      	mov	r3, r1
 8085038:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808503c:	f000 fdd2 	bl	8085be4 <__aeabi_dsub>
 8085040:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8085044:	f000 ff82 	bl	8085f4c <__aeabi_dmul>
 8085048:	4602      	mov	r2, r0
 808504a:	460b      	mov	r3, r1
 808504c:	4640      	mov	r0, r8
 808504e:	4649      	mov	r1, r9
 8085050:	f000 fdc8 	bl	8085be4 <__aeabi_dsub>
 8085054:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8085058:	f000 ff78 	bl	8085f4c <__aeabi_dmul>
 808505c:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
 8085060:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8085064:	463a      	mov	r2, r7
 8085066:	4643      	mov	r3, r8
 8085068:	4638      	mov	r0, r7
 808506a:	4641      	mov	r1, r8
 808506c:	f000 ff6e 	bl	8085f4c <__aeabi_dmul>
 8085070:	a377      	add	r3, pc, #476	; (adr r3, 8085250 <__ieee754_pow+0x4f8>)
 8085072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085076:	4606      	mov	r6, r0
 8085078:	460f      	mov	r7, r1
 808507a:	f000 ff67 	bl	8085f4c <__aeabi_dmul>
 808507e:	a376      	add	r3, pc, #472	; (adr r3, 8085258 <__ieee754_pow+0x500>)
 8085080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085084:	f000 fdb0 	bl	8085be8 <__adddf3>
 8085088:	4632      	mov	r2, r6
 808508a:	463b      	mov	r3, r7
 808508c:	f000 ff5e 	bl	8085f4c <__aeabi_dmul>
 8085090:	a373      	add	r3, pc, #460	; (adr r3, 8085260 <__ieee754_pow+0x508>)
 8085092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085096:	f000 fda7 	bl	8085be8 <__adddf3>
 808509a:	4632      	mov	r2, r6
 808509c:	463b      	mov	r3, r7
 808509e:	f000 ff55 	bl	8085f4c <__aeabi_dmul>
 80850a2:	a371      	add	r3, pc, #452	; (adr r3, 8085268 <__ieee754_pow+0x510>)
 80850a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80850a8:	f000 fd9e 	bl	8085be8 <__adddf3>
 80850ac:	4632      	mov	r2, r6
 80850ae:	463b      	mov	r3, r7
 80850b0:	f000 ff4c 	bl	8085f4c <__aeabi_dmul>
 80850b4:	a36e      	add	r3, pc, #440	; (adr r3, 8085270 <__ieee754_pow+0x518>)
 80850b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80850ba:	f000 fd95 	bl	8085be8 <__adddf3>
 80850be:	4632      	mov	r2, r6
 80850c0:	463b      	mov	r3, r7
 80850c2:	f000 ff43 	bl	8085f4c <__aeabi_dmul>
 80850c6:	a36c      	add	r3, pc, #432	; (adr r3, 8085278 <__ieee754_pow+0x520>)
 80850c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80850cc:	f000 fd8c 	bl	8085be8 <__adddf3>
 80850d0:	4632      	mov	r2, r6
 80850d2:	4680      	mov	r8, r0
 80850d4:	4689      	mov	r9, r1
 80850d6:	463b      	mov	r3, r7
 80850d8:	4630      	mov	r0, r6
 80850da:	4639      	mov	r1, r7
 80850dc:	f000 ff36 	bl	8085f4c <__aeabi_dmul>
 80850e0:	4602      	mov	r2, r0
 80850e2:	460b      	mov	r3, r1
 80850e4:	4640      	mov	r0, r8
 80850e6:	4649      	mov	r1, r9
 80850e8:	f000 ff30 	bl	8085f4c <__aeabi_dmul>
 80850ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80850f0:	4606      	mov	r6, r0
 80850f2:	460f      	mov	r7, r1
 80850f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80850f8:	f000 fd76 	bl	8085be8 <__adddf3>
 80850fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8085100:	f000 ff24 	bl	8085f4c <__aeabi_dmul>
 8085104:	4632      	mov	r2, r6
 8085106:	463b      	mov	r3, r7
 8085108:	f000 fd6e 	bl	8085be8 <__adddf3>
 808510c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8085110:	4680      	mov	r8, r0
 8085112:	4689      	mov	r9, r1
 8085114:	4632      	mov	r2, r6
 8085116:	463b      	mov	r3, r7
 8085118:	4630      	mov	r0, r6
 808511a:	4639      	mov	r1, r7
 808511c:	f000 ff16 	bl	8085f4c <__aeabi_dmul>
 8085120:	2200      	movs	r2, #0
 8085122:	4b60      	ldr	r3, [pc, #384]	; (80852a4 <__ieee754_pow+0x54c>)
 8085124:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8085128:	f000 fd5e 	bl	8085be8 <__adddf3>
 808512c:	4642      	mov	r2, r8
 808512e:	464b      	mov	r3, r9
 8085130:	f000 fd5a 	bl	8085be8 <__adddf3>
 8085134:	e9dd bc10 	ldrd	fp, ip, [sp, #64]	; 0x40
 8085138:	460f      	mov	r7, r1
 808513a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808513e:	465a      	mov	r2, fp
 8085140:	463b      	mov	r3, r7
 8085142:	e9cd bc0e 	strd	fp, ip, [sp, #56]	; 0x38
 8085146:	465e      	mov	r6, fp
 8085148:	f000 ff00 	bl	8085f4c <__aeabi_dmul>
 808514c:	2200      	movs	r2, #0
 808514e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8085152:	4b54      	ldr	r3, [pc, #336]	; (80852a4 <__ieee754_pow+0x54c>)
 8085154:	4630      	mov	r0, r6
 8085156:	4639      	mov	r1, r7
 8085158:	f000 fd44 	bl	8085be4 <__aeabi_dsub>
 808515c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8085160:	f000 fd40 	bl	8085be4 <__aeabi_dsub>
 8085164:	4602      	mov	r2, r0
 8085166:	460b      	mov	r3, r1
 8085168:	4640      	mov	r0, r8
 808516a:	4649      	mov	r1, r9
 808516c:	f000 fd3a 	bl	8085be4 <__aeabi_dsub>
 8085170:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8085174:	f000 feea 	bl	8085f4c <__aeabi_dmul>
 8085178:	4632      	mov	r2, r6
 808517a:	4680      	mov	r8, r0
 808517c:	4689      	mov	r9, r1
 808517e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8085182:	463b      	mov	r3, r7
 8085184:	f000 fee2 	bl	8085f4c <__aeabi_dmul>
 8085188:	4602      	mov	r2, r0
 808518a:	460b      	mov	r3, r1
 808518c:	4640      	mov	r0, r8
 808518e:	4649      	mov	r1, r9
 8085190:	f000 fd2a 	bl	8085be8 <__adddf3>
 8085194:	4680      	mov	r8, r0
 8085196:	4689      	mov	r9, r1
 8085198:	4602      	mov	r2, r0
 808519a:	460b      	mov	r3, r1
 808519c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80851a0:	f000 fd22 	bl	8085be8 <__adddf3>
 80851a4:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	; 0x38
 80851a8:	a335      	add	r3, pc, #212	; (adr r3, 8085280 <__ieee754_pow+0x528>)
 80851aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80851ae:	4658      	mov	r0, fp
 80851b0:	e9cd bc06 	strd	fp, ip, [sp, #24]
 80851b4:	465e      	mov	r6, fp
 80851b6:	460f      	mov	r7, r1
 80851b8:	f000 fec8 	bl	8085f4c <__aeabi_dmul>
 80851bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80851c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80851c4:	4630      	mov	r0, r6
 80851c6:	4639      	mov	r1, r7
 80851c8:	f000 fd0c 	bl	8085be4 <__aeabi_dsub>
 80851cc:	4602      	mov	r2, r0
 80851ce:	460b      	mov	r3, r1
 80851d0:	4640      	mov	r0, r8
 80851d2:	4649      	mov	r1, r9
 80851d4:	f000 fd06 	bl	8085be4 <__aeabi_dsub>
 80851d8:	a32b      	add	r3, pc, #172	; (adr r3, 8085288 <__ieee754_pow+0x530>)
 80851da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80851de:	f000 feb5 	bl	8085f4c <__aeabi_dmul>
 80851e2:	a32b      	add	r3, pc, #172	; (adr r3, 8085290 <__ieee754_pow+0x538>)
 80851e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80851e8:	4680      	mov	r8, r0
 80851ea:	4689      	mov	r9, r1
 80851ec:	4630      	mov	r0, r6
 80851ee:	4639      	mov	r1, r7
 80851f0:	f000 feac 	bl	8085f4c <__aeabi_dmul>
 80851f4:	4602      	mov	r2, r0
 80851f6:	460b      	mov	r3, r1
 80851f8:	4640      	mov	r0, r8
 80851fa:	4649      	mov	r1, r9
 80851fc:	f000 fcf4 	bl	8085be8 <__adddf3>
 8085200:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8085204:	f000 fcf0 	bl	8085be8 <__adddf3>
 8085208:	4680      	mov	r8, r0
 808520a:	4650      	mov	r0, sl
 808520c:	4689      	mov	r9, r1
 808520e:	f000 fe37 	bl	8085e80 <__aeabi_i2d>
 8085212:	4606      	mov	r6, r0
 8085214:	460f      	mov	r7, r1
 8085216:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 808521a:	4642      	mov	r2, r8
 808521c:	464b      	mov	r3, r9
 808521e:	f000 fce3 	bl	8085be8 <__adddf3>
 8085222:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8085226:	f000 fcdf 	bl	8085be8 <__adddf3>
 808522a:	4632      	mov	r2, r6
 808522c:	463b      	mov	r3, r7
 808522e:	f000 fcdb 	bl	8085be8 <__adddf3>
 8085232:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 8085236:	4632      	mov	r2, r6
 8085238:	4658      	mov	r0, fp
 808523a:	463b      	mov	r3, r7
 808523c:	46da      	mov	sl, fp
 808523e:	468b      	mov	fp, r1
 8085240:	f000 fcd0 	bl	8085be4 <__aeabi_dsub>
 8085244:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8085248:	e030      	b.n	80852ac <__ieee754_pow+0x554>
 808524a:	bf00      	nop
 808524c:	f3af 8000 	nop.w
 8085250:	4a454eef 	.word	0x4a454eef
 8085254:	3fca7e28 	.word	0x3fca7e28
 8085258:	93c9db65 	.word	0x93c9db65
 808525c:	3fcd864a 	.word	0x3fcd864a
 8085260:	a91d4101 	.word	0xa91d4101
 8085264:	3fd17460 	.word	0x3fd17460
 8085268:	518f264d 	.word	0x518f264d
 808526c:	3fd55555 	.word	0x3fd55555
 8085270:	db6fabff 	.word	0xdb6fabff
 8085274:	3fdb6db6 	.word	0x3fdb6db6
 8085278:	33333303 	.word	0x33333303
 808527c:	3fe33333 	.word	0x3fe33333
 8085280:	e0000000 	.word	0xe0000000
 8085284:	3feec709 	.word	0x3feec709
 8085288:	dc3a03fd 	.word	0xdc3a03fd
 808528c:	3feec709 	.word	0x3feec709
 8085290:	145b01f5 	.word	0x145b01f5
 8085294:	be3e2fe0 	.word	0xbe3e2fe0
 8085298:	43400000 	.word	0x43400000
 808529c:	000bb679 	.word	0x000bb679
 80852a0:	3ff00000 	.word	0x3ff00000
 80852a4:	40080000 	.word	0x40080000
 80852a8:	0003988e 	.word	0x0003988e
 80852ac:	f000 fc9a 	bl	8085be4 <__aeabi_dsub>
 80852b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80852b4:	f000 fc96 	bl	8085be4 <__aeabi_dsub>
 80852b8:	4602      	mov	r2, r0
 80852ba:	460b      	mov	r3, r1
 80852bc:	4640      	mov	r0, r8
 80852be:	4649      	mov	r1, r9
 80852c0:	f000 fc90 	bl	8085be4 <__aeabi_dsub>
 80852c4:	4680      	mov	r8, r0
 80852c6:	4689      	mov	r9, r1
 80852c8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80852cc:	3c01      	subs	r4, #1
 80852ce:	ea54 0305 	orrs.w	r3, r4, r5
 80852d2:	bf14      	ite	ne
 80852d4:	4cd6      	ldrne	r4, [pc, #856]	; (8085630 <__ieee754_pow+0x8d8>)
 80852d6:	4cd7      	ldreq	r4, [pc, #860]	; (8085634 <__ieee754_pow+0x8dc>)
 80852d8:	2300      	movs	r3, #0
 80852da:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80852de:	460b      	mov	r3, r1
 80852e0:	4614      	mov	r4, r2
 80852e2:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80852e6:	2300      	movs	r3, #0
 80852e8:	9302      	str	r3, [sp, #8]
 80852ea:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80852ee:	4608      	mov	r0, r1
 80852f0:	462b      	mov	r3, r5
 80852f2:	4611      	mov	r1, r2
 80852f4:	4622      	mov	r2, r4
 80852f6:	f000 fc75 	bl	8085be4 <__aeabi_dsub>
 80852fa:	4652      	mov	r2, sl
 80852fc:	465b      	mov	r3, fp
 80852fe:	f000 fe25 	bl	8085f4c <__aeabi_dmul>
 8085302:	e9dd 2300 	ldrd	r2, r3, [sp]
 8085306:	4606      	mov	r6, r0
 8085308:	460f      	mov	r7, r1
 808530a:	4640      	mov	r0, r8
 808530c:	4649      	mov	r1, r9
 808530e:	f000 fe1d 	bl	8085f4c <__aeabi_dmul>
 8085312:	4602      	mov	r2, r0
 8085314:	460b      	mov	r3, r1
 8085316:	4630      	mov	r0, r6
 8085318:	4639      	mov	r1, r7
 808531a:	f000 fc65 	bl	8085be8 <__adddf3>
 808531e:	4606      	mov	r6, r0
 8085320:	460f      	mov	r7, r1
 8085322:	4622      	mov	r2, r4
 8085324:	462b      	mov	r3, r5
 8085326:	4650      	mov	r0, sl
 8085328:	4659      	mov	r1, fp
 808532a:	e9cd 6700 	strd	r6, r7, [sp]
 808532e:	f000 fe0d 	bl	8085f4c <__aeabi_dmul>
 8085332:	460b      	mov	r3, r1
 8085334:	4602      	mov	r2, r0
 8085336:	4680      	mov	r8, r0
 8085338:	4689      	mov	r9, r1
 808533a:	4630      	mov	r0, r6
 808533c:	4639      	mov	r1, r7
 808533e:	f000 fc53 	bl	8085be8 <__adddf3>
 8085342:	4bbd      	ldr	r3, [pc, #756]	; (8085638 <__ieee754_pow+0x8e0>)
 8085344:	4606      	mov	r6, r0
 8085346:	4299      	cmp	r1, r3
 8085348:	460d      	mov	r5, r1
 808534a:	460c      	mov	r4, r1
 808534c:	f340 810e 	ble.w	808556c <__ieee754_pow+0x814>
 8085350:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8085354:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8085358:	4303      	orrs	r3, r0
 808535a:	f040 81f0 	bne.w	808573e <__ieee754_pow+0x9e6>
 808535e:	a3a0      	add	r3, pc, #640	; (adr r3, 80855e0 <__ieee754_pow+0x888>)
 8085360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085364:	e9dd 0100 	ldrd	r0, r1, [sp]
 8085368:	f000 fc3e 	bl	8085be8 <__adddf3>
 808536c:	4642      	mov	r2, r8
 808536e:	4682      	mov	sl, r0
 8085370:	468b      	mov	fp, r1
 8085372:	464b      	mov	r3, r9
 8085374:	4630      	mov	r0, r6
 8085376:	4629      	mov	r1, r5
 8085378:	f000 fc34 	bl	8085be4 <__aeabi_dsub>
 808537c:	4602      	mov	r2, r0
 808537e:	460b      	mov	r3, r1
 8085380:	4650      	mov	r0, sl
 8085382:	4659      	mov	r1, fp
 8085384:	f001 f872 	bl	808646c <__aeabi_dcmpgt>
 8085388:	2800      	cmp	r0, #0
 808538a:	f040 81d8 	bne.w	808573e <__ieee754_pow+0x9e6>
 808538e:	462f      	mov	r7, r5
 8085390:	153b      	asrs	r3, r7, #20
 8085392:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8085396:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 808539a:	fa42 f303 	asr.w	r3, r2, r3
 808539e:	4423      	add	r3, r4
 80853a0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80853a4:	4ea5      	ldr	r6, [pc, #660]	; (808563c <__ieee754_pow+0x8e4>)
 80853a6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80853aa:	4116      	asrs	r6, r2
 80853ac:	f3c3 0b13 	ubfx	fp, r3, #0, #20
 80853b0:	2000      	movs	r0, #0
 80853b2:	f1c2 0514 	rsb	r5, r2, #20
 80853b6:	ea23 0106 	bic.w	r1, r3, r6
 80853ba:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
 80853be:	4602      	mov	r2, r0
 80853c0:	460b      	mov	r3, r1
 80853c2:	2c00      	cmp	r4, #0
 80853c4:	fa4b fb05 	asr.w	fp, fp, r5
 80853c8:	4640      	mov	r0, r8
 80853ca:	4649      	mov	r1, r9
 80853cc:	bfb8      	it	lt
 80853ce:	f1cb 0b00 	rsblt	fp, fp, #0
 80853d2:	f000 fc07 	bl	8085be4 <__aeabi_dsub>
 80853d6:	4602      	mov	r2, r0
 80853d8:	460b      	mov	r3, r1
 80853da:	4680      	mov	r8, r0
 80853dc:	4689      	mov	r9, r1
 80853de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80853e2:	f000 fc01 	bl	8085be8 <__adddf3>
 80853e6:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
 80853ea:	2400      	movs	r4, #0
 80853ec:	a37e      	add	r3, pc, #504	; (adr r3, 80855e8 <__ieee754_pow+0x890>)
 80853ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80853f2:	4620      	mov	r0, r4
 80853f4:	460d      	mov	r5, r1
 80853f6:	f000 fda9 	bl	8085f4c <__aeabi_dmul>
 80853fa:	4642      	mov	r2, r8
 80853fc:	4606      	mov	r6, r0
 80853fe:	460f      	mov	r7, r1
 8085400:	464b      	mov	r3, r9
 8085402:	4620      	mov	r0, r4
 8085404:	4629      	mov	r1, r5
 8085406:	f000 fbed 	bl	8085be4 <__aeabi_dsub>
 808540a:	4602      	mov	r2, r0
 808540c:	460b      	mov	r3, r1
 808540e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8085412:	f000 fbe7 	bl	8085be4 <__aeabi_dsub>
 8085416:	a376      	add	r3, pc, #472	; (adr r3, 80855f0 <__ieee754_pow+0x898>)
 8085418:	e9d3 2300 	ldrd	r2, r3, [r3]
 808541c:	f000 fd96 	bl	8085f4c <__aeabi_dmul>
 8085420:	a375      	add	r3, pc, #468	; (adr r3, 80855f8 <__ieee754_pow+0x8a0>)
 8085422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085426:	4680      	mov	r8, r0
 8085428:	4689      	mov	r9, r1
 808542a:	4620      	mov	r0, r4
 808542c:	4629      	mov	r1, r5
 808542e:	f000 fd8d 	bl	8085f4c <__aeabi_dmul>
 8085432:	4602      	mov	r2, r0
 8085434:	460b      	mov	r3, r1
 8085436:	4640      	mov	r0, r8
 8085438:	4649      	mov	r1, r9
 808543a:	f000 fbd5 	bl	8085be8 <__adddf3>
 808543e:	4680      	mov	r8, r0
 8085440:	4689      	mov	r9, r1
 8085442:	4602      	mov	r2, r0
 8085444:	460b      	mov	r3, r1
 8085446:	4630      	mov	r0, r6
 8085448:	4639      	mov	r1, r7
 808544a:	f000 fbcd 	bl	8085be8 <__adddf3>
 808544e:	4632      	mov	r2, r6
 8085450:	463b      	mov	r3, r7
 8085452:	4604      	mov	r4, r0
 8085454:	460d      	mov	r5, r1
 8085456:	f000 fbc5 	bl	8085be4 <__aeabi_dsub>
 808545a:	4602      	mov	r2, r0
 808545c:	460b      	mov	r3, r1
 808545e:	4640      	mov	r0, r8
 8085460:	4649      	mov	r1, r9
 8085462:	f000 fbbf 	bl	8085be4 <__aeabi_dsub>
 8085466:	4622      	mov	r2, r4
 8085468:	4680      	mov	r8, r0
 808546a:	4689      	mov	r9, r1
 808546c:	462b      	mov	r3, r5
 808546e:	4620      	mov	r0, r4
 8085470:	4629      	mov	r1, r5
 8085472:	f000 fd6b 	bl	8085f4c <__aeabi_dmul>
 8085476:	a362      	add	r3, pc, #392	; (adr r3, 8085600 <__ieee754_pow+0x8a8>)
 8085478:	e9d3 2300 	ldrd	r2, r3, [r3]
 808547c:	4606      	mov	r6, r0
 808547e:	460f      	mov	r7, r1
 8085480:	f000 fd64 	bl	8085f4c <__aeabi_dmul>
 8085484:	a360      	add	r3, pc, #384	; (adr r3, 8085608 <__ieee754_pow+0x8b0>)
 8085486:	e9d3 2300 	ldrd	r2, r3, [r3]
 808548a:	f000 fbab 	bl	8085be4 <__aeabi_dsub>
 808548e:	4632      	mov	r2, r6
 8085490:	463b      	mov	r3, r7
 8085492:	f000 fd5b 	bl	8085f4c <__aeabi_dmul>
 8085496:	a35e      	add	r3, pc, #376	; (adr r3, 8085610 <__ieee754_pow+0x8b8>)
 8085498:	e9d3 2300 	ldrd	r2, r3, [r3]
 808549c:	f000 fba4 	bl	8085be8 <__adddf3>
 80854a0:	4632      	mov	r2, r6
 80854a2:	463b      	mov	r3, r7
 80854a4:	f000 fd52 	bl	8085f4c <__aeabi_dmul>
 80854a8:	a35b      	add	r3, pc, #364	; (adr r3, 8085618 <__ieee754_pow+0x8c0>)
 80854aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80854ae:	f000 fb99 	bl	8085be4 <__aeabi_dsub>
 80854b2:	4632      	mov	r2, r6
 80854b4:	463b      	mov	r3, r7
 80854b6:	f000 fd49 	bl	8085f4c <__aeabi_dmul>
 80854ba:	a359      	add	r3, pc, #356	; (adr r3, 8085620 <__ieee754_pow+0x8c8>)
 80854bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80854c0:	f000 fb92 	bl	8085be8 <__adddf3>
 80854c4:	4632      	mov	r2, r6
 80854c6:	463b      	mov	r3, r7
 80854c8:	f000 fd40 	bl	8085f4c <__aeabi_dmul>
 80854cc:	4602      	mov	r2, r0
 80854ce:	460b      	mov	r3, r1
 80854d0:	4620      	mov	r0, r4
 80854d2:	4629      	mov	r1, r5
 80854d4:	f000 fb86 	bl	8085be4 <__aeabi_dsub>
 80854d8:	4606      	mov	r6, r0
 80854da:	460f      	mov	r7, r1
 80854dc:	4602      	mov	r2, r0
 80854de:	460b      	mov	r3, r1
 80854e0:	4620      	mov	r0, r4
 80854e2:	4629      	mov	r1, r5
 80854e4:	f000 fd32 	bl	8085f4c <__aeabi_dmul>
 80854e8:	2200      	movs	r2, #0
 80854ea:	e9cd 0100 	strd	r0, r1, [sp]
 80854ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80854f2:	4630      	mov	r0, r6
 80854f4:	4639      	mov	r1, r7
 80854f6:	f000 fb75 	bl	8085be4 <__aeabi_dsub>
 80854fa:	4602      	mov	r2, r0
 80854fc:	460b      	mov	r3, r1
 80854fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8085502:	f000 fe4d 	bl	80861a0 <__aeabi_ddiv>
 8085506:	4642      	mov	r2, r8
 8085508:	4606      	mov	r6, r0
 808550a:	460f      	mov	r7, r1
 808550c:	464b      	mov	r3, r9
 808550e:	4620      	mov	r0, r4
 8085510:	4629      	mov	r1, r5
 8085512:	f000 fd1b 	bl	8085f4c <__aeabi_dmul>
 8085516:	4642      	mov	r2, r8
 8085518:	464b      	mov	r3, r9
 808551a:	f000 fb65 	bl	8085be8 <__adddf3>
 808551e:	4602      	mov	r2, r0
 8085520:	460b      	mov	r3, r1
 8085522:	4630      	mov	r0, r6
 8085524:	4639      	mov	r1, r7
 8085526:	f000 fb5d 	bl	8085be4 <__aeabi_dsub>
 808552a:	4622      	mov	r2, r4
 808552c:	462b      	mov	r3, r5
 808552e:	f000 fb59 	bl	8085be4 <__aeabi_dsub>
 8085532:	4602      	mov	r2, r0
 8085534:	460b      	mov	r3, r1
 8085536:	2000      	movs	r0, #0
 8085538:	493d      	ldr	r1, [pc, #244]	; (8085630 <__ieee754_pow+0x8d8>)
 808553a:	f000 fb53 	bl	8085be4 <__aeabi_dsub>
 808553e:	448a      	add	sl, r1
 8085540:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
 8085544:	f2c0 8137 	blt.w	80857b6 <__ieee754_pow+0xa5e>
 8085548:	4651      	mov	r1, sl
 808554a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 808554e:	f000 fcfd 	bl	8085f4c <__aeabi_dmul>
 8085552:	4683      	mov	fp, r0
 8085554:	e418      	b.n	8084d88 <__ieee754_pow+0x30>
 8085556:	46f3      	mov	fp, lr
 8085558:	4935      	ldr	r1, [pc, #212]	; (8085630 <__ieee754_pow+0x8d8>)
 808555a:	e415      	b.n	8084d88 <__ieee754_pow+0x30>
 808555c:	464a      	mov	r2, r9
 808555e:	4648      	mov	r0, r9
 8085560:	463b      	mov	r3, r7
 8085562:	4639      	mov	r1, r7
 8085564:	f000 fcf2 	bl	8085f4c <__aeabi_dmul>
 8085568:	4683      	mov	fp, r0
 808556a:	e40d      	b.n	8084d88 <__ieee754_pow+0x30>
 808556c:	4b34      	ldr	r3, [pc, #208]	; (8085640 <__ieee754_pow+0x8e8>)
 808556e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8085572:	429f      	cmp	r7, r3
 8085574:	f340 8101 	ble.w	808577a <__ieee754_pow+0xa22>
 8085578:	4b32      	ldr	r3, [pc, #200]	; (8085644 <__ieee754_pow+0x8ec>)
 808557a:	440b      	add	r3, r1
 808557c:	4303      	orrs	r3, r0
 808557e:	d10c      	bne.n	808559a <__ieee754_pow+0x842>
 8085580:	4642      	mov	r2, r8
 8085582:	464b      	mov	r3, r9
 8085584:	f000 fb2e 	bl	8085be4 <__aeabi_dsub>
 8085588:	4602      	mov	r2, r0
 808558a:	460b      	mov	r3, r1
 808558c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8085590:	f000 ff58 	bl	8086444 <__aeabi_dcmple>
 8085594:	2800      	cmp	r0, #0
 8085596:	f43f aefb 	beq.w	8085390 <__ieee754_pow+0x638>
 808559a:	a323      	add	r3, pc, #140	; (adr r3, 8085628 <__ieee754_pow+0x8d0>)
 808559c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80855a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80855a4:	f000 fcd2 	bl	8085f4c <__aeabi_dmul>
 80855a8:	a31f      	add	r3, pc, #124	; (adr r3, 8085628 <__ieee754_pow+0x8d0>)
 80855aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80855ae:	f000 fccd 	bl	8085f4c <__aeabi_dmul>
 80855b2:	4683      	mov	fp, r0
 80855b4:	f7ff bbe8 	b.w	8084d88 <__ieee754_pow+0x30>
 80855b8:	f1ba 0f00 	cmp.w	sl, #0
 80855bc:	f6bf acae 	bge.w	8084f1c <__ieee754_pow+0x1c4>
 80855c0:	e9dd 3400 	ldrd	r3, r4, [sp]
 80855c4:	469b      	mov	fp, r3
 80855c6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80855ca:	f7ff bbdd 	b.w	8084d88 <__ieee754_pow+0x30>
 80855ce:	4602      	mov	r2, r0
 80855d0:	460b      	mov	r3, r1
 80855d2:	2000      	movs	r0, #0
 80855d4:	4916      	ldr	r1, [pc, #88]	; (8085630 <__ieee754_pow+0x8d8>)
 80855d6:	f000 fde3 	bl	80861a0 <__aeabi_ddiv>
 80855da:	e441      	b.n	8084e60 <__ieee754_pow+0x108>
 80855dc:	f3af 8000 	nop.w
 80855e0:	652b82fe 	.word	0x652b82fe
 80855e4:	3c971547 	.word	0x3c971547
 80855e8:	00000000 	.word	0x00000000
 80855ec:	3fe62e43 	.word	0x3fe62e43
 80855f0:	fefa39ef 	.word	0xfefa39ef
 80855f4:	3fe62e42 	.word	0x3fe62e42
 80855f8:	0ca86c39 	.word	0x0ca86c39
 80855fc:	be205c61 	.word	0xbe205c61
 8085600:	72bea4d0 	.word	0x72bea4d0
 8085604:	3e663769 	.word	0x3e663769
 8085608:	c5d26bf1 	.word	0xc5d26bf1
 808560c:	3ebbbd41 	.word	0x3ebbbd41
 8085610:	af25de2c 	.word	0xaf25de2c
 8085614:	3f11566a 	.word	0x3f11566a
 8085618:	16bebd93 	.word	0x16bebd93
 808561c:	3f66c16c 	.word	0x3f66c16c
 8085620:	5555553e 	.word	0x5555553e
 8085624:	3fc55555 	.word	0x3fc55555
 8085628:	c2f8f359 	.word	0xc2f8f359
 808562c:	01a56e1f 	.word	0x01a56e1f
 8085630:	3ff00000 	.word	0x3ff00000
 8085634:	bff00000 	.word	0xbff00000
 8085638:	408fffff 	.word	0x408fffff
 808563c:	000fffff 	.word	0x000fffff
 8085640:	4090cbff 	.word	0x4090cbff
 8085644:	3f6f3400 	.word	0x3f6f3400
 8085648:	4b6f      	ldr	r3, [pc, #444]	; (8085808 <__ieee754_pow+0xab0>)
 808564a:	429e      	cmp	r6, r3
 808564c:	f77f ac63 	ble.w	8084f16 <__ieee754_pow+0x1be>
 8085650:	4b6e      	ldr	r3, [pc, #440]	; (808580c <__ieee754_pow+0xab4>)
 8085652:	429e      	cmp	r6, r3
 8085654:	f73f abee 	bgt.w	8084e34 <__ieee754_pow+0xdc>
 8085658:	2200      	movs	r2, #0
 808565a:	4b6c      	ldr	r3, [pc, #432]	; (808580c <__ieee754_pow+0xab4>)
 808565c:	f000 fac2 	bl	8085be4 <__aeabi_dsub>
 8085660:	a35b      	add	r3, pc, #364	; (adr r3, 80857d0 <__ieee754_pow+0xa78>)
 8085662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085666:	4606      	mov	r6, r0
 8085668:	460f      	mov	r7, r1
 808566a:	f000 fc6f 	bl	8085f4c <__aeabi_dmul>
 808566e:	a35a      	add	r3, pc, #360	; (adr r3, 80857d8 <__ieee754_pow+0xa80>)
 8085670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085674:	4680      	mov	r8, r0
 8085676:	4689      	mov	r9, r1
 8085678:	4630      	mov	r0, r6
 808567a:	4639      	mov	r1, r7
 808567c:	f000 fc66 	bl	8085f4c <__aeabi_dmul>
 8085680:	2200      	movs	r2, #0
 8085682:	4682      	mov	sl, r0
 8085684:	468b      	mov	fp, r1
 8085686:	4b62      	ldr	r3, [pc, #392]	; (8085810 <__ieee754_pow+0xab8>)
 8085688:	4630      	mov	r0, r6
 808568a:	4639      	mov	r1, r7
 808568c:	f000 fc5e 	bl	8085f4c <__aeabi_dmul>
 8085690:	4602      	mov	r2, r0
 8085692:	460b      	mov	r3, r1
 8085694:	a152      	add	r1, pc, #328	; (adr r1, 80857e0 <__ieee754_pow+0xa88>)
 8085696:	e9d1 0100 	ldrd	r0, r1, [r1]
 808569a:	f000 faa3 	bl	8085be4 <__aeabi_dsub>
 808569e:	4632      	mov	r2, r6
 80856a0:	463b      	mov	r3, r7
 80856a2:	f000 fc53 	bl	8085f4c <__aeabi_dmul>
 80856a6:	4602      	mov	r2, r0
 80856a8:	460b      	mov	r3, r1
 80856aa:	2000      	movs	r0, #0
 80856ac:	4959      	ldr	r1, [pc, #356]	; (8085814 <__ieee754_pow+0xabc>)
 80856ae:	f000 fa99 	bl	8085be4 <__aeabi_dsub>
 80856b2:	4632      	mov	r2, r6
 80856b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80856b8:	463b      	mov	r3, r7
 80856ba:	4630      	mov	r0, r6
 80856bc:	4639      	mov	r1, r7
 80856be:	f000 fc45 	bl	8085f4c <__aeabi_dmul>
 80856c2:	4602      	mov	r2, r0
 80856c4:	460b      	mov	r3, r1
 80856c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80856ca:	f000 fc3f 	bl	8085f4c <__aeabi_dmul>
 80856ce:	a346      	add	r3, pc, #280	; (adr r3, 80857e8 <__ieee754_pow+0xa90>)
 80856d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80856d4:	f000 fc3a 	bl	8085f4c <__aeabi_dmul>
 80856d8:	4602      	mov	r2, r0
 80856da:	460b      	mov	r3, r1
 80856dc:	4650      	mov	r0, sl
 80856de:	4659      	mov	r1, fp
 80856e0:	f000 fa80 	bl	8085be4 <__aeabi_dsub>
 80856e4:	4602      	mov	r2, r0
 80856e6:	460b      	mov	r3, r1
 80856e8:	4606      	mov	r6, r0
 80856ea:	460f      	mov	r7, r1
 80856ec:	4640      	mov	r0, r8
 80856ee:	4649      	mov	r1, r9
 80856f0:	f000 fa7a 	bl	8085be8 <__adddf3>
 80856f4:	4642      	mov	r2, r8
 80856f6:	464b      	mov	r3, r9
 80856f8:	2000      	movs	r0, #0
 80856fa:	4682      	mov	sl, r0
 80856fc:	468b      	mov	fp, r1
 80856fe:	f000 fa71 	bl	8085be4 <__aeabi_dsub>
 8085702:	4602      	mov	r2, r0
 8085704:	460b      	mov	r3, r1
 8085706:	4630      	mov	r0, r6
 8085708:	4639      	mov	r1, r7
 808570a:	f000 fa6b 	bl	8085be4 <__aeabi_dsub>
 808570e:	4680      	mov	r8, r0
 8085710:	4689      	mov	r9, r1
 8085712:	e5d9      	b.n	80852c8 <__ieee754_pow+0x570>
 8085714:	2200      	movs	r2, #0
 8085716:	2300      	movs	r3, #0
 8085718:	e9cd 2308 	strd	r2, r3, [sp, #32]
 808571c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8085720:	4b3a      	ldr	r3, [pc, #232]	; (808580c <__ieee754_pow+0xab4>)
 8085722:	2200      	movs	r2, #0
 8085724:	2600      	movs	r6, #0
 8085726:	e9cd 2306 	strd	r2, r3, [sp, #24]
 808572a:	e43d      	b.n	8084fa8 <__ieee754_pow+0x250>
 808572c:	464a      	mov	r2, r9
 808572e:	463b      	mov	r3, r7
 8085730:	2000      	movs	r0, #0
 8085732:	4936      	ldr	r1, [pc, #216]	; (808580c <__ieee754_pow+0xab4>)
 8085734:	f000 fd34 	bl	80861a0 <__aeabi_ddiv>
 8085738:	4683      	mov	fp, r0
 808573a:	f7ff bb25 	b.w	8084d88 <__ieee754_pow+0x30>
 808573e:	a32c      	add	r3, pc, #176	; (adr r3, 80857f0 <__ieee754_pow+0xa98>)
 8085740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085744:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8085748:	f000 fc00 	bl	8085f4c <__aeabi_dmul>
 808574c:	a328      	add	r3, pc, #160	; (adr r3, 80857f0 <__ieee754_pow+0xa98>)
 808574e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085752:	f000 fbfb 	bl	8085f4c <__aeabi_dmul>
 8085756:	4683      	mov	fp, r0
 8085758:	f7ff bb16 	b.w	8084d88 <__ieee754_pow+0x30>
 808575c:	f1be 0f00 	cmp.w	lr, #0
 8085760:	f47f ab4f 	bne.w	8084e02 <__ieee754_pow+0xaa>
 8085764:	f1c3 0314 	rsb	r3, r3, #20
 8085768:	fa48 f203 	asr.w	r2, r8, r3
 808576c:	fa02 f303 	lsl.w	r3, r2, r3
 8085770:	4598      	cmp	r8, r3
 8085772:	d024      	beq.n	80857be <__ieee754_pow+0xa66>
 8085774:	4674      	mov	r4, lr
 8085776:	f7ff bb21 	b.w	8084dbc <__ieee754_pow+0x64>
 808577a:	4b26      	ldr	r3, [pc, #152]	; (8085814 <__ieee754_pow+0xabc>)
 808577c:	429f      	cmp	r7, r3
 808577e:	f73f ae07 	bgt.w	8085390 <__ieee754_pow+0x638>
 8085782:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 8085786:	469a      	mov	sl, r3
 8085788:	469b      	mov	fp, r3
 808578a:	e62e      	b.n	80853ea <__ieee754_pow+0x692>
 808578c:	4602      	mov	r2, r0
 808578e:	460b      	mov	r3, r1
 8085790:	f7ff bbb9 	b.w	8084f06 <__ieee754_pow+0x1ae>
 8085794:	4b20      	ldr	r3, [pc, #128]	; (8085818 <__ieee754_pow+0xac0>)
 8085796:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 808579a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 808579e:	a316      	add	r3, pc, #88	; (adr r3, 80857f8 <__ieee754_pow+0xaa0>)
 80857a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80857a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80857a8:	a315      	add	r3, pc, #84	; (adr r3, 8085800 <__ieee754_pow+0xaa8>)
 80857aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80857ae:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80857b2:	f7ff bbf9 	b.w	8084fa8 <__ieee754_pow+0x250>
 80857b6:	465a      	mov	r2, fp
 80857b8:	f000 f996 	bl	8085ae8 <scalbn>
 80857bc:	e6c5      	b.n	808554a <__ieee754_pow+0x7f2>
 80857be:	f002 0201 	and.w	r2, r2, #1
 80857c2:	f1c2 0402 	rsb	r4, r2, #2
 80857c6:	f7ff baf9 	b.w	8084dbc <__ieee754_pow+0x64>
 80857ca:	bf00      	nop
 80857cc:	f3af 8000 	nop.w
 80857d0:	60000000 	.word	0x60000000
 80857d4:	3ff71547 	.word	0x3ff71547
 80857d8:	f85ddf44 	.word	0xf85ddf44
 80857dc:	3e54ae0b 	.word	0x3e54ae0b
 80857e0:	55555555 	.word	0x55555555
 80857e4:	3fd55555 	.word	0x3fd55555
 80857e8:	652b82fe 	.word	0x652b82fe
 80857ec:	3ff71547 	.word	0x3ff71547
 80857f0:	8800759c 	.word	0x8800759c
 80857f4:	7e37e43c 	.word	0x7e37e43c
 80857f8:	40000000 	.word	0x40000000
 80857fc:	3fe2b803 	.word	0x3fe2b803
 8085800:	43cfd006 	.word	0x43cfd006
 8085804:	3e4cfdeb 	.word	0x3e4cfdeb
 8085808:	3feffffe 	.word	0x3feffffe
 808580c:	3ff00000 	.word	0x3ff00000
 8085810:	3fd00000 	.word	0x3fd00000
 8085814:	3fe00000 	.word	0x3fe00000
 8085818:	3ff80000 	.word	0x3ff80000

0808581c <__ieee754_sqrt>:
 808581c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8085820:	4e5f      	ldr	r6, [pc, #380]	; (80859a0 <__ieee754_sqrt+0x184>)
 8085822:	460c      	mov	r4, r1
 8085824:	46b6      	mov	lr, r6
 8085826:	400e      	ands	r6, r1
 8085828:	4576      	cmp	r6, lr
 808582a:	4605      	mov	r5, r0
 808582c:	f000 8098 	beq.w	8085960 <__ieee754_sqrt+0x144>
 8085830:	2900      	cmp	r1, #0
 8085832:	460b      	mov	r3, r1
 8085834:	4602      	mov	r2, r0
 8085836:	dd74      	ble.n	8085922 <__ieee754_sqrt+0x106>
 8085838:	ea5f 5e21 	movs.w	lr, r1, asr #20
 808583c:	d07f      	beq.n	808593e <__ieee754_sqrt+0x122>
 808583e:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
 8085842:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8085846:	f01e 0f01 	tst.w	lr, #1
 808584a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 808584e:	d163      	bne.n	8085918 <__ieee754_sqrt+0xfc>
 8085850:	2700      	movs	r7, #0
 8085852:	463e      	mov	r6, r7
 8085854:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 8085858:	440b      	add	r3, r1
 808585a:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 808585e:	0052      	lsls	r2, r2, #1
 8085860:	2016      	movs	r0, #22
 8085862:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8085866:	1874      	adds	r4, r6, r1
 8085868:	429c      	cmp	r4, r3
 808586a:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 808586e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8085872:	dc02      	bgt.n	808587a <__ieee754_sqrt+0x5e>
 8085874:	1b1b      	subs	r3, r3, r4
 8085876:	1866      	adds	r6, r4, r1
 8085878:	440f      	add	r7, r1
 808587a:	3801      	subs	r0, #1
 808587c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8085880:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8085884:	d1ef      	bne.n	8085866 <__ieee754_sqrt+0x4a>
 8085886:	4684      	mov	ip, r0
 8085888:	2420      	movs	r4, #32
 808588a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 808588e:	e009      	b.n	80858a4 <__ieee754_sqrt+0x88>
 8085890:	d020      	beq.n	80858d4 <__ieee754_sqrt+0xb8>
 8085892:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 8085896:	3c01      	subs	r4, #1
 8085898:	ea4f 0151 	mov.w	r1, r1, lsr #1
 808589c:	442b      	add	r3, r5
 808589e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80858a2:	d020      	beq.n	80858e6 <__ieee754_sqrt+0xca>
 80858a4:	429e      	cmp	r6, r3
 80858a6:	eb01 050c 	add.w	r5, r1, ip
 80858aa:	daf1      	bge.n	8085890 <__ieee754_sqrt+0x74>
 80858ac:	2d00      	cmp	r5, #0
 80858ae:	eb05 0c01 	add.w	ip, r5, r1
 80858b2:	db09      	blt.n	80858c8 <__ieee754_sqrt+0xac>
 80858b4:	46b0      	mov	r8, r6
 80858b6:	4295      	cmp	r5, r2
 80858b8:	eba3 0306 	sub.w	r3, r3, r6
 80858bc:	d900      	bls.n	80858c0 <__ieee754_sqrt+0xa4>
 80858be:	3b01      	subs	r3, #1
 80858c0:	4646      	mov	r6, r8
 80858c2:	1b52      	subs	r2, r2, r5
 80858c4:	4408      	add	r0, r1
 80858c6:	e7e4      	b.n	8085892 <__ieee754_sqrt+0x76>
 80858c8:	f1bc 0f00 	cmp.w	ip, #0
 80858cc:	dbf2      	blt.n	80858b4 <__ieee754_sqrt+0x98>
 80858ce:	f106 0801 	add.w	r8, r6, #1
 80858d2:	e7f0      	b.n	80858b6 <__ieee754_sqrt+0x9a>
 80858d4:	4295      	cmp	r5, r2
 80858d6:	d817      	bhi.n	8085908 <__ieee754_sqrt+0xec>
 80858d8:	2d00      	cmp	r5, #0
 80858da:	eb05 0c01 	add.w	ip, r5, r1
 80858de:	db49      	blt.n	8085974 <__ieee754_sqrt+0x158>
 80858e0:	4698      	mov	r8, r3
 80858e2:	2300      	movs	r3, #0
 80858e4:	e7ec      	b.n	80858c0 <__ieee754_sqrt+0xa4>
 80858e6:	4313      	orrs	r3, r2
 80858e8:	d110      	bne.n	808590c <__ieee754_sqrt+0xf0>
 80858ea:	0840      	lsrs	r0, r0, #1
 80858ec:	107b      	asrs	r3, r7, #1
 80858ee:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80858f2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80858f6:	07fa      	lsls	r2, r7, #31
 80858f8:	eb03 570e 	add.w	r7, r3, lr, lsl #20
 80858fc:	4639      	mov	r1, r7
 80858fe:	bf48      	it	mi
 8085900:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 8085904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8085908:	4633      	mov	r3, r6
 808590a:	e7c2      	b.n	8085892 <__ieee754_sqrt+0x76>
 808590c:	1c41      	adds	r1, r0, #1
 808590e:	d035      	beq.n	808597c <__ieee754_sqrt+0x160>
 8085910:	f000 0301 	and.w	r3, r0, #1
 8085914:	4418      	add	r0, r3
 8085916:	e7e8      	b.n	80858ea <__ieee754_sqrt+0xce>
 8085918:	005b      	lsls	r3, r3, #1
 808591a:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 808591e:	0052      	lsls	r2, r2, #1
 8085920:	e796      	b.n	8085850 <__ieee754_sqrt+0x34>
 8085922:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8085926:	4306      	orrs	r6, r0
 8085928:	d0ec      	beq.n	8085904 <__ieee754_sqrt+0xe8>
 808592a:	bb79      	cbnz	r1, 808598c <__ieee754_sqrt+0x170>
 808592c:	468e      	mov	lr, r1
 808592e:	0ad3      	lsrs	r3, r2, #11
 8085930:	f1ae 0e15 	sub.w	lr, lr, #21
 8085934:	0552      	lsls	r2, r2, #21
 8085936:	2b00      	cmp	r3, #0
 8085938:	d0f9      	beq.n	808592e <__ieee754_sqrt+0x112>
 808593a:	02dd      	lsls	r5, r3, #11
 808593c:	d421      	bmi.n	8085982 <__ieee754_sqrt+0x166>
 808593e:	2100      	movs	r1, #0
 8085940:	e000      	b.n	8085944 <__ieee754_sqrt+0x128>
 8085942:	4601      	mov	r1, r0
 8085944:	005b      	lsls	r3, r3, #1
 8085946:	02dc      	lsls	r4, r3, #11
 8085948:	f101 0001 	add.w	r0, r1, #1
 808594c:	d5f9      	bpl.n	8085942 <__ieee754_sqrt+0x126>
 808594e:	f1c0 0420 	rsb	r4, r0, #32
 8085952:	fa22 f404 	lsr.w	r4, r2, r4
 8085956:	4323      	orrs	r3, r4
 8085958:	ebc1 0e0e 	rsb	lr, r1, lr
 808595c:	4082      	lsls	r2, r0
 808595e:	e76e      	b.n	808583e <__ieee754_sqrt+0x22>
 8085960:	4602      	mov	r2, r0
 8085962:	460b      	mov	r3, r1
 8085964:	f000 faf2 	bl	8085f4c <__aeabi_dmul>
 8085968:	462a      	mov	r2, r5
 808596a:	4623      	mov	r3, r4
 808596c:	f000 f93c 	bl	8085be8 <__adddf3>
 8085970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8085974:	f1bc 0f00 	cmp.w	ip, #0
 8085978:	daa9      	bge.n	80858ce <__ieee754_sqrt+0xb2>
 808597a:	e7b1      	b.n	80858e0 <__ieee754_sqrt+0xc4>
 808597c:	3701      	adds	r7, #1
 808597e:	4620      	mov	r0, r4
 8085980:	e7b4      	b.n	80858ec <__ieee754_sqrt+0xd0>
 8085982:	2420      	movs	r4, #32
 8085984:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8085988:	2000      	movs	r0, #0
 808598a:	e7e2      	b.n	8085952 <__ieee754_sqrt+0x136>
 808598c:	4602      	mov	r2, r0
 808598e:	460b      	mov	r3, r1
 8085990:	f000 f928 	bl	8085be4 <__aeabi_dsub>
 8085994:	4602      	mov	r2, r0
 8085996:	460b      	mov	r3, r1
 8085998:	f000 fc02 	bl	80861a0 <__aeabi_ddiv>
 808599c:	e7b2      	b.n	8085904 <__ieee754_sqrt+0xe8>
 808599e:	bf00      	nop
 80859a0:	7ff00000 	.word	0x7ff00000

080859a4 <fabs>:
 80859a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80859a8:	4770      	bx	lr
 80859aa:	bf00      	nop

080859ac <finite>:
 80859ac:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80859b0:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 80859b4:	0fc0      	lsrs	r0, r0, #31
 80859b6:	4770      	bx	lr

080859b8 <matherr>:
 80859b8:	2000      	movs	r0, #0
 80859ba:	4770      	bx	lr

080859bc <nan>:
 80859bc:	2000      	movs	r0, #0
 80859be:	4901      	ldr	r1, [pc, #4]	; (80859c4 <nan+0x8>)
 80859c0:	4770      	bx	lr
 80859c2:	bf00      	nop
 80859c4:	7ff80000 	.word	0x7ff80000

080859c8 <rint>:
 80859c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80859ca:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 80859ce:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
 80859d2:	2e13      	cmp	r6, #19
 80859d4:	b083      	sub	sp, #12
 80859d6:	4602      	mov	r2, r0
 80859d8:	460b      	mov	r3, r1
 80859da:	460c      	mov	r4, r1
 80859dc:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80859e0:	4607      	mov	r7, r0
 80859e2:	dc2e      	bgt.n	8085a42 <rint+0x7a>
 80859e4:	2e00      	cmp	r6, #0
 80859e6:	db49      	blt.n	8085a7c <rint+0xb4>
 80859e8:	493d      	ldr	r1, [pc, #244]	; (8085ae0 <rint+0x118>)
 80859ea:	4131      	asrs	r1, r6
 80859ec:	ea03 0001 	and.w	r0, r3, r1
 80859f0:	4310      	orrs	r0, r2
 80859f2:	d02b      	beq.n	8085a4c <rint+0x84>
 80859f4:	0849      	lsrs	r1, r1, #1
 80859f6:	400b      	ands	r3, r1
 80859f8:	ea53 0702 	orrs.w	r7, r3, r2
 80859fc:	d00c      	beq.n	8085a18 <rint+0x50>
 80859fe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8085a02:	2e13      	cmp	r6, #19
 8085a04:	ea24 0101 	bic.w	r1, r4, r1
 8085a08:	fa43 f406 	asr.w	r4, r3, r6
 8085a0c:	ea44 0401 	orr.w	r4, r4, r1
 8085a10:	bf0c      	ite	eq
 8085a12:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 8085a16:	2700      	movne	r7, #0
 8085a18:	4b32      	ldr	r3, [pc, #200]	; (8085ae4 <rint+0x11c>)
 8085a1a:	4621      	mov	r1, r4
 8085a1c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8085a20:	e9d5 4500 	ldrd	r4, r5, [r5]
 8085a24:	4638      	mov	r0, r7
 8085a26:	4622      	mov	r2, r4
 8085a28:	462b      	mov	r3, r5
 8085a2a:	f000 f8dd 	bl	8085be8 <__adddf3>
 8085a2e:	e9cd 0100 	strd	r0, r1, [sp]
 8085a32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8085a36:	4622      	mov	r2, r4
 8085a38:	462b      	mov	r3, r5
 8085a3a:	f000 f8d3 	bl	8085be4 <__aeabi_dsub>
 8085a3e:	b003      	add	sp, #12
 8085a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8085a42:	2e33      	cmp	r6, #51	; 0x33
 8085a44:	dd06      	ble.n	8085a54 <rint+0x8c>
 8085a46:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8085a4a:	d045      	beq.n	8085ad8 <rint+0x110>
 8085a4c:	4610      	mov	r0, r2
 8085a4e:	4619      	mov	r1, r3
 8085a50:	b003      	add	sp, #12
 8085a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8085a54:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
 8085a58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8085a5c:	fa21 f10e 	lsr.w	r1, r1, lr
 8085a60:	4208      	tst	r0, r1
 8085a62:	d0f3      	beq.n	8085a4c <rint+0x84>
 8085a64:	0849      	lsrs	r1, r1, #1
 8085a66:	4208      	tst	r0, r1
 8085a68:	d0d6      	beq.n	8085a18 <rint+0x50>
 8085a6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8085a6e:	ea20 0101 	bic.w	r1, r0, r1
 8085a72:	fa43 fe0e 	asr.w	lr, r3, lr
 8085a76:	ea4e 0701 	orr.w	r7, lr, r1
 8085a7a:	e7cd      	b.n	8085a18 <rint+0x50>
 8085a7c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8085a80:	4301      	orrs	r1, r0
 8085a82:	4619      	mov	r1, r3
 8085a84:	d0e4      	beq.n	8085a50 <rint+0x88>
 8085a86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8085a8a:	ea43 0c00 	orr.w	ip, r3, r0
 8085a8e:	f1cc 0300 	rsb	r3, ip, #0
 8085a92:	ea43 0c0c 	orr.w	ip, r3, ip
 8085a96:	4b13      	ldr	r3, [pc, #76]	; (8085ae4 <rint+0x11c>)
 8085a98:	0c64      	lsrs	r4, r4, #17
 8085a9a:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
 8085a9e:	f40c 2c00 	and.w	ip, ip, #524288	; 0x80000
 8085aa2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8085aa6:	0464      	lsls	r4, r4, #17
 8085aa8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8085aac:	ea4c 0104 	orr.w	r1, ip, r4
 8085ab0:	4632      	mov	r2, r6
 8085ab2:	463b      	mov	r3, r7
 8085ab4:	f000 f898 	bl	8085be8 <__adddf3>
 8085ab8:	e9cd 0100 	strd	r0, r1, [sp]
 8085abc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8085ac0:	4632      	mov	r2, r6
 8085ac2:	463b      	mov	r3, r7
 8085ac4:	f000 f88e 	bl	8085be4 <__aeabi_dsub>
 8085ac8:	4602      	mov	r2, r0
 8085aca:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8085ace:	ea41 73c5 	orr.w	r3, r1, r5, lsl #31
 8085ad2:	4610      	mov	r0, r2
 8085ad4:	4619      	mov	r1, r3
 8085ad6:	e7bb      	b.n	8085a50 <rint+0x88>
 8085ad8:	f000 f886 	bl	8085be8 <__adddf3>
 8085adc:	e7b8      	b.n	8085a50 <rint+0x88>
 8085ade:	bf00      	nop
 8085ae0:	000fffff 	.word	0x000fffff
 8085ae4:	080881e8 	.word	0x080881e8

08085ae8 <scalbn>:
 8085ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8085aea:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8085aee:	4604      	mov	r4, r0
 8085af0:	460d      	mov	r5, r1
 8085af2:	460b      	mov	r3, r1
 8085af4:	4617      	mov	r7, r2
 8085af6:	bb06      	cbnz	r6, 8085b3a <scalbn+0x52>
 8085af8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8085afc:	4303      	orrs	r3, r0
 8085afe:	d025      	beq.n	8085b4c <scalbn+0x64>
 8085b00:	2200      	movs	r2, #0
 8085b02:	4b2f      	ldr	r3, [pc, #188]	; (8085bc0 <scalbn+0xd8>)
 8085b04:	f000 fa22 	bl	8085f4c <__aeabi_dmul>
 8085b08:	4a2e      	ldr	r2, [pc, #184]	; (8085bc4 <scalbn+0xdc>)
 8085b0a:	4604      	mov	r4, r0
 8085b0c:	4297      	cmp	r7, r2
 8085b0e:	460d      	mov	r5, r1
 8085b10:	460b      	mov	r3, r1
 8085b12:	db2a      	blt.n	8085b6a <scalbn+0x82>
 8085b14:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8085b18:	3e36      	subs	r6, #54	; 0x36
 8085b1a:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8085b1e:	443e      	add	r6, r7
 8085b20:	4296      	cmp	r6, r2
 8085b22:	dc28      	bgt.n	8085b76 <scalbn+0x8e>
 8085b24:	2e00      	cmp	r6, #0
 8085b26:	dd12      	ble.n	8085b4e <scalbn+0x66>
 8085b28:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8085b2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8085b30:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 8085b34:	4620      	mov	r0, r4
 8085b36:	4629      	mov	r1, r5
 8085b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8085b3a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8085b3e:	4296      	cmp	r6, r2
 8085b40:	d1eb      	bne.n	8085b1a <scalbn+0x32>
 8085b42:	4602      	mov	r2, r0
 8085b44:	460b      	mov	r3, r1
 8085b46:	f000 f84f 	bl	8085be8 <__adddf3>
 8085b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8085b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8085b4e:	f116 0f35 	cmn.w	r6, #53	; 0x35
 8085b52:	da1d      	bge.n	8085b90 <scalbn+0xa8>
 8085b54:	f24c 3350 	movw	r3, #50000	; 0xc350
 8085b58:	429f      	cmp	r7, r3
 8085b5a:	dc0c      	bgt.n	8085b76 <scalbn+0x8e>
 8085b5c:	a114      	add	r1, pc, #80	; (adr r1, 8085bb0 <scalbn+0xc8>)
 8085b5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8085b62:	4622      	mov	r2, r4
 8085b64:	462b      	mov	r3, r5
 8085b66:	f000 f831 	bl	8085bcc <copysign>
 8085b6a:	a311      	add	r3, pc, #68	; (adr r3, 8085bb0 <scalbn+0xc8>)
 8085b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085b70:	f000 f9ec 	bl	8085f4c <__aeabi_dmul>
 8085b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8085b76:	4622      	mov	r2, r4
 8085b78:	a10f      	add	r1, pc, #60	; (adr r1, 8085bb8 <scalbn+0xd0>)
 8085b7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8085b7e:	462b      	mov	r3, r5
 8085b80:	f000 f824 	bl	8085bcc <copysign>
 8085b84:	a30c      	add	r3, pc, #48	; (adr r3, 8085bb8 <scalbn+0xd0>)
 8085b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085b8a:	f000 f9df 	bl	8085f4c <__aeabi_dmul>
 8085b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8085b90:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8085b94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8085b98:	3636      	adds	r6, #54	; 0x36
 8085b9a:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 8085b9e:	4620      	mov	r0, r4
 8085ba0:	4629      	mov	r1, r5
 8085ba2:	2200      	movs	r2, #0
 8085ba4:	4b08      	ldr	r3, [pc, #32]	; (8085bc8 <scalbn+0xe0>)
 8085ba6:	f000 f9d1 	bl	8085f4c <__aeabi_dmul>
 8085baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8085bac:	f3af 8000 	nop.w
 8085bb0:	c2f8f359 	.word	0xc2f8f359
 8085bb4:	01a56e1f 	.word	0x01a56e1f
 8085bb8:	8800759c 	.word	0x8800759c
 8085bbc:	7e37e43c 	.word	0x7e37e43c
 8085bc0:	43500000 	.word	0x43500000
 8085bc4:	ffff3cb0 	.word	0xffff3cb0
 8085bc8:	3c900000 	.word	0x3c900000

08085bcc <copysign>:
 8085bcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8085bd0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8085bd4:	ea42 0103 	orr.w	r1, r2, r3
 8085bd8:	4770      	bx	lr
 8085bda:	bf00      	nop

08085bdc <__aeabi_drsub>:
 8085bdc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8085be0:	e002      	b.n	8085be8 <__adddf3>
 8085be2:	bf00      	nop

08085be4 <__aeabi_dsub>:
 8085be4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08085be8 <__adddf3>:
 8085be8:	b530      	push	{r4, r5, lr}
 8085bea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8085bee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8085bf2:	ea94 0f05 	teq	r4, r5
 8085bf6:	bf08      	it	eq
 8085bf8:	ea90 0f02 	teqeq	r0, r2
 8085bfc:	bf1f      	itttt	ne
 8085bfe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8085c02:	ea55 0c02 	orrsne.w	ip, r5, r2
 8085c06:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8085c0a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8085c0e:	f000 80e2 	beq.w	8085dd6 <__adddf3+0x1ee>
 8085c12:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8085c16:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8085c1a:	bfb8      	it	lt
 8085c1c:	426d      	neglt	r5, r5
 8085c1e:	dd0c      	ble.n	8085c3a <__adddf3+0x52>
 8085c20:	442c      	add	r4, r5
 8085c22:	ea80 0202 	eor.w	r2, r0, r2
 8085c26:	ea81 0303 	eor.w	r3, r1, r3
 8085c2a:	ea82 0000 	eor.w	r0, r2, r0
 8085c2e:	ea83 0101 	eor.w	r1, r3, r1
 8085c32:	ea80 0202 	eor.w	r2, r0, r2
 8085c36:	ea81 0303 	eor.w	r3, r1, r3
 8085c3a:	2d36      	cmp	r5, #54	; 0x36
 8085c3c:	bf88      	it	hi
 8085c3e:	bd30      	pophi	{r4, r5, pc}
 8085c40:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8085c44:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8085c48:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8085c4c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8085c50:	d002      	beq.n	8085c58 <__adddf3+0x70>
 8085c52:	4240      	negs	r0, r0
 8085c54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8085c58:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8085c5c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8085c60:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8085c64:	d002      	beq.n	8085c6c <__adddf3+0x84>
 8085c66:	4252      	negs	r2, r2
 8085c68:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8085c6c:	ea94 0f05 	teq	r4, r5
 8085c70:	f000 80a7 	beq.w	8085dc2 <__adddf3+0x1da>
 8085c74:	f1a4 0401 	sub.w	r4, r4, #1
 8085c78:	f1d5 0e20 	rsbs	lr, r5, #32
 8085c7c:	db0d      	blt.n	8085c9a <__adddf3+0xb2>
 8085c7e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8085c82:	fa22 f205 	lsr.w	r2, r2, r5
 8085c86:	1880      	adds	r0, r0, r2
 8085c88:	f141 0100 	adc.w	r1, r1, #0
 8085c8c:	fa03 f20e 	lsl.w	r2, r3, lr
 8085c90:	1880      	adds	r0, r0, r2
 8085c92:	fa43 f305 	asr.w	r3, r3, r5
 8085c96:	4159      	adcs	r1, r3
 8085c98:	e00e      	b.n	8085cb8 <__adddf3+0xd0>
 8085c9a:	f1a5 0520 	sub.w	r5, r5, #32
 8085c9e:	f10e 0e20 	add.w	lr, lr, #32
 8085ca2:	2a01      	cmp	r2, #1
 8085ca4:	fa03 fc0e 	lsl.w	ip, r3, lr
 8085ca8:	bf28      	it	cs
 8085caa:	f04c 0c02 	orrcs.w	ip, ip, #2
 8085cae:	fa43 f305 	asr.w	r3, r3, r5
 8085cb2:	18c0      	adds	r0, r0, r3
 8085cb4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8085cb8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8085cbc:	d507      	bpl.n	8085cce <__adddf3+0xe6>
 8085cbe:	f04f 0e00 	mov.w	lr, #0
 8085cc2:	f1dc 0c00 	rsbs	ip, ip, #0
 8085cc6:	eb7e 0000 	sbcs.w	r0, lr, r0
 8085cca:	eb6e 0101 	sbc.w	r1, lr, r1
 8085cce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8085cd2:	d31b      	bcc.n	8085d0c <__adddf3+0x124>
 8085cd4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8085cd8:	d30c      	bcc.n	8085cf4 <__adddf3+0x10c>
 8085cda:	0849      	lsrs	r1, r1, #1
 8085cdc:	ea5f 0030 	movs.w	r0, r0, rrx
 8085ce0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8085ce4:	f104 0401 	add.w	r4, r4, #1
 8085ce8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8085cec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8085cf0:	f080 809a 	bcs.w	8085e28 <__adddf3+0x240>
 8085cf4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8085cf8:	bf08      	it	eq
 8085cfa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8085cfe:	f150 0000 	adcs.w	r0, r0, #0
 8085d02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8085d06:	ea41 0105 	orr.w	r1, r1, r5
 8085d0a:	bd30      	pop	{r4, r5, pc}
 8085d0c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8085d10:	4140      	adcs	r0, r0
 8085d12:	eb41 0101 	adc.w	r1, r1, r1
 8085d16:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8085d1a:	f1a4 0401 	sub.w	r4, r4, #1
 8085d1e:	d1e9      	bne.n	8085cf4 <__adddf3+0x10c>
 8085d20:	f091 0f00 	teq	r1, #0
 8085d24:	bf04      	itt	eq
 8085d26:	4601      	moveq	r1, r0
 8085d28:	2000      	moveq	r0, #0
 8085d2a:	fab1 f381 	clz	r3, r1
 8085d2e:	bf08      	it	eq
 8085d30:	3320      	addeq	r3, #32
 8085d32:	f1a3 030b 	sub.w	r3, r3, #11
 8085d36:	f1b3 0220 	subs.w	r2, r3, #32
 8085d3a:	da0c      	bge.n	8085d56 <__adddf3+0x16e>
 8085d3c:	320c      	adds	r2, #12
 8085d3e:	dd08      	ble.n	8085d52 <__adddf3+0x16a>
 8085d40:	f102 0c14 	add.w	ip, r2, #20
 8085d44:	f1c2 020c 	rsb	r2, r2, #12
 8085d48:	fa01 f00c 	lsl.w	r0, r1, ip
 8085d4c:	fa21 f102 	lsr.w	r1, r1, r2
 8085d50:	e00c      	b.n	8085d6c <__adddf3+0x184>
 8085d52:	f102 0214 	add.w	r2, r2, #20
 8085d56:	bfd8      	it	le
 8085d58:	f1c2 0c20 	rsble	ip, r2, #32
 8085d5c:	fa01 f102 	lsl.w	r1, r1, r2
 8085d60:	fa20 fc0c 	lsr.w	ip, r0, ip
 8085d64:	bfdc      	itt	le
 8085d66:	ea41 010c 	orrle.w	r1, r1, ip
 8085d6a:	4090      	lslle	r0, r2
 8085d6c:	1ae4      	subs	r4, r4, r3
 8085d6e:	bfa2      	ittt	ge
 8085d70:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8085d74:	4329      	orrge	r1, r5
 8085d76:	bd30      	popge	{r4, r5, pc}
 8085d78:	ea6f 0404 	mvn.w	r4, r4
 8085d7c:	3c1f      	subs	r4, #31
 8085d7e:	da1c      	bge.n	8085dba <__adddf3+0x1d2>
 8085d80:	340c      	adds	r4, #12
 8085d82:	dc0e      	bgt.n	8085da2 <__adddf3+0x1ba>
 8085d84:	f104 0414 	add.w	r4, r4, #20
 8085d88:	f1c4 0220 	rsb	r2, r4, #32
 8085d8c:	fa20 f004 	lsr.w	r0, r0, r4
 8085d90:	fa01 f302 	lsl.w	r3, r1, r2
 8085d94:	ea40 0003 	orr.w	r0, r0, r3
 8085d98:	fa21 f304 	lsr.w	r3, r1, r4
 8085d9c:	ea45 0103 	orr.w	r1, r5, r3
 8085da0:	bd30      	pop	{r4, r5, pc}
 8085da2:	f1c4 040c 	rsb	r4, r4, #12
 8085da6:	f1c4 0220 	rsb	r2, r4, #32
 8085daa:	fa20 f002 	lsr.w	r0, r0, r2
 8085dae:	fa01 f304 	lsl.w	r3, r1, r4
 8085db2:	ea40 0003 	orr.w	r0, r0, r3
 8085db6:	4629      	mov	r1, r5
 8085db8:	bd30      	pop	{r4, r5, pc}
 8085dba:	fa21 f004 	lsr.w	r0, r1, r4
 8085dbe:	4629      	mov	r1, r5
 8085dc0:	bd30      	pop	{r4, r5, pc}
 8085dc2:	f094 0f00 	teq	r4, #0
 8085dc6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8085dca:	bf06      	itte	eq
 8085dcc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8085dd0:	3401      	addeq	r4, #1
 8085dd2:	3d01      	subne	r5, #1
 8085dd4:	e74e      	b.n	8085c74 <__adddf3+0x8c>
 8085dd6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8085dda:	bf18      	it	ne
 8085ddc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8085de0:	d029      	beq.n	8085e36 <__adddf3+0x24e>
 8085de2:	ea94 0f05 	teq	r4, r5
 8085de6:	bf08      	it	eq
 8085de8:	ea90 0f02 	teqeq	r0, r2
 8085dec:	d005      	beq.n	8085dfa <__adddf3+0x212>
 8085dee:	ea54 0c00 	orrs.w	ip, r4, r0
 8085df2:	bf04      	itt	eq
 8085df4:	4619      	moveq	r1, r3
 8085df6:	4610      	moveq	r0, r2
 8085df8:	bd30      	pop	{r4, r5, pc}
 8085dfa:	ea91 0f03 	teq	r1, r3
 8085dfe:	bf1e      	ittt	ne
 8085e00:	2100      	movne	r1, #0
 8085e02:	2000      	movne	r0, #0
 8085e04:	bd30      	popne	{r4, r5, pc}
 8085e06:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8085e0a:	d105      	bne.n	8085e18 <__adddf3+0x230>
 8085e0c:	0040      	lsls	r0, r0, #1
 8085e0e:	4149      	adcs	r1, r1
 8085e10:	bf28      	it	cs
 8085e12:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8085e16:	bd30      	pop	{r4, r5, pc}
 8085e18:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8085e1c:	bf3c      	itt	cc
 8085e1e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8085e22:	bd30      	popcc	{r4, r5, pc}
 8085e24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8085e28:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8085e2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8085e30:	f04f 0000 	mov.w	r0, #0
 8085e34:	bd30      	pop	{r4, r5, pc}
 8085e36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8085e3a:	bf1a      	itte	ne
 8085e3c:	4619      	movne	r1, r3
 8085e3e:	4610      	movne	r0, r2
 8085e40:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8085e44:	bf1c      	itt	ne
 8085e46:	460b      	movne	r3, r1
 8085e48:	4602      	movne	r2, r0
 8085e4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8085e4e:	bf06      	itte	eq
 8085e50:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8085e54:	ea91 0f03 	teqeq	r1, r3
 8085e58:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8085e5c:	bd30      	pop	{r4, r5, pc}
 8085e5e:	bf00      	nop

08085e60 <__aeabi_ui2d>:
 8085e60:	f090 0f00 	teq	r0, #0
 8085e64:	bf04      	itt	eq
 8085e66:	2100      	moveq	r1, #0
 8085e68:	4770      	bxeq	lr
 8085e6a:	b530      	push	{r4, r5, lr}
 8085e6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8085e70:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8085e74:	f04f 0500 	mov.w	r5, #0
 8085e78:	f04f 0100 	mov.w	r1, #0
 8085e7c:	e750      	b.n	8085d20 <__adddf3+0x138>
 8085e7e:	bf00      	nop

08085e80 <__aeabi_i2d>:
 8085e80:	f090 0f00 	teq	r0, #0
 8085e84:	bf04      	itt	eq
 8085e86:	2100      	moveq	r1, #0
 8085e88:	4770      	bxeq	lr
 8085e8a:	b530      	push	{r4, r5, lr}
 8085e8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8085e90:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8085e94:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8085e98:	bf48      	it	mi
 8085e9a:	4240      	negmi	r0, r0
 8085e9c:	f04f 0100 	mov.w	r1, #0
 8085ea0:	e73e      	b.n	8085d20 <__adddf3+0x138>
 8085ea2:	bf00      	nop

08085ea4 <__aeabi_f2d>:
 8085ea4:	0042      	lsls	r2, r0, #1
 8085ea6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8085eaa:	ea4f 0131 	mov.w	r1, r1, rrx
 8085eae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8085eb2:	bf1f      	itttt	ne
 8085eb4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8085eb8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8085ebc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8085ec0:	4770      	bxne	lr
 8085ec2:	f092 0f00 	teq	r2, #0
 8085ec6:	bf14      	ite	ne
 8085ec8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8085ecc:	4770      	bxeq	lr
 8085ece:	b530      	push	{r4, r5, lr}
 8085ed0:	f44f 7460 	mov.w	r4, #896	; 0x380
 8085ed4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8085ed8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8085edc:	e720      	b.n	8085d20 <__adddf3+0x138>
 8085ede:	bf00      	nop

08085ee0 <__aeabi_ul2d>:
 8085ee0:	ea50 0201 	orrs.w	r2, r0, r1
 8085ee4:	bf08      	it	eq
 8085ee6:	4770      	bxeq	lr
 8085ee8:	b530      	push	{r4, r5, lr}
 8085eea:	f04f 0500 	mov.w	r5, #0
 8085eee:	e00a      	b.n	8085f06 <__aeabi_l2d+0x16>

08085ef0 <__aeabi_l2d>:
 8085ef0:	ea50 0201 	orrs.w	r2, r0, r1
 8085ef4:	bf08      	it	eq
 8085ef6:	4770      	bxeq	lr
 8085ef8:	b530      	push	{r4, r5, lr}
 8085efa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8085efe:	d502      	bpl.n	8085f06 <__aeabi_l2d+0x16>
 8085f00:	4240      	negs	r0, r0
 8085f02:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8085f06:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8085f0a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8085f0e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8085f12:	f43f aedc 	beq.w	8085cce <__adddf3+0xe6>
 8085f16:	f04f 0203 	mov.w	r2, #3
 8085f1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8085f1e:	bf18      	it	ne
 8085f20:	3203      	addne	r2, #3
 8085f22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8085f26:	bf18      	it	ne
 8085f28:	3203      	addne	r2, #3
 8085f2a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8085f2e:	f1c2 0320 	rsb	r3, r2, #32
 8085f32:	fa00 fc03 	lsl.w	ip, r0, r3
 8085f36:	fa20 f002 	lsr.w	r0, r0, r2
 8085f3a:	fa01 fe03 	lsl.w	lr, r1, r3
 8085f3e:	ea40 000e 	orr.w	r0, r0, lr
 8085f42:	fa21 f102 	lsr.w	r1, r1, r2
 8085f46:	4414      	add	r4, r2
 8085f48:	e6c1      	b.n	8085cce <__adddf3+0xe6>
 8085f4a:	bf00      	nop

08085f4c <__aeabi_dmul>:
 8085f4c:	b570      	push	{r4, r5, r6, lr}
 8085f4e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8085f52:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8085f56:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8085f5a:	bf1d      	ittte	ne
 8085f5c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8085f60:	ea94 0f0c 	teqne	r4, ip
 8085f64:	ea95 0f0c 	teqne	r5, ip
 8085f68:	f000 f8de 	bleq	8086128 <__aeabi_dmul+0x1dc>
 8085f6c:	442c      	add	r4, r5
 8085f6e:	ea81 0603 	eor.w	r6, r1, r3
 8085f72:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8085f76:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8085f7a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8085f7e:	bf18      	it	ne
 8085f80:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8085f84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8085f88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8085f8c:	d038      	beq.n	8086000 <__aeabi_dmul+0xb4>
 8085f8e:	fba0 ce02 	umull	ip, lr, r0, r2
 8085f92:	f04f 0500 	mov.w	r5, #0
 8085f96:	fbe1 e502 	umlal	lr, r5, r1, r2
 8085f9a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8085f9e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8085fa2:	f04f 0600 	mov.w	r6, #0
 8085fa6:	fbe1 5603 	umlal	r5, r6, r1, r3
 8085faa:	f09c 0f00 	teq	ip, #0
 8085fae:	bf18      	it	ne
 8085fb0:	f04e 0e01 	orrne.w	lr, lr, #1
 8085fb4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8085fb8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8085fbc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8085fc0:	d204      	bcs.n	8085fcc <__aeabi_dmul+0x80>
 8085fc2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8085fc6:	416d      	adcs	r5, r5
 8085fc8:	eb46 0606 	adc.w	r6, r6, r6
 8085fcc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8085fd0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8085fd4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8085fd8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8085fdc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8085fe0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8085fe4:	bf88      	it	hi
 8085fe6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8085fea:	d81e      	bhi.n	808602a <__aeabi_dmul+0xde>
 8085fec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8085ff0:	bf08      	it	eq
 8085ff2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8085ff6:	f150 0000 	adcs.w	r0, r0, #0
 8085ffa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8085ffe:	bd70      	pop	{r4, r5, r6, pc}
 8086000:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8086004:	ea46 0101 	orr.w	r1, r6, r1
 8086008:	ea40 0002 	orr.w	r0, r0, r2
 808600c:	ea81 0103 	eor.w	r1, r1, r3
 8086010:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8086014:	bfc2      	ittt	gt
 8086016:	ebd4 050c 	rsbsgt	r5, r4, ip
 808601a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808601e:	bd70      	popgt	{r4, r5, r6, pc}
 8086020:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8086024:	f04f 0e00 	mov.w	lr, #0
 8086028:	3c01      	subs	r4, #1
 808602a:	f300 80ab 	bgt.w	8086184 <__aeabi_dmul+0x238>
 808602e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8086032:	bfde      	ittt	le
 8086034:	2000      	movle	r0, #0
 8086036:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 808603a:	bd70      	pople	{r4, r5, r6, pc}
 808603c:	f1c4 0400 	rsb	r4, r4, #0
 8086040:	3c20      	subs	r4, #32
 8086042:	da35      	bge.n	80860b0 <__aeabi_dmul+0x164>
 8086044:	340c      	adds	r4, #12
 8086046:	dc1b      	bgt.n	8086080 <__aeabi_dmul+0x134>
 8086048:	f104 0414 	add.w	r4, r4, #20
 808604c:	f1c4 0520 	rsb	r5, r4, #32
 8086050:	fa00 f305 	lsl.w	r3, r0, r5
 8086054:	fa20 f004 	lsr.w	r0, r0, r4
 8086058:	fa01 f205 	lsl.w	r2, r1, r5
 808605c:	ea40 0002 	orr.w	r0, r0, r2
 8086060:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8086064:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8086068:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808606c:	fa21 f604 	lsr.w	r6, r1, r4
 8086070:	eb42 0106 	adc.w	r1, r2, r6
 8086074:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8086078:	bf08      	it	eq
 808607a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808607e:	bd70      	pop	{r4, r5, r6, pc}
 8086080:	f1c4 040c 	rsb	r4, r4, #12
 8086084:	f1c4 0520 	rsb	r5, r4, #32
 8086088:	fa00 f304 	lsl.w	r3, r0, r4
 808608c:	fa20 f005 	lsr.w	r0, r0, r5
 8086090:	fa01 f204 	lsl.w	r2, r1, r4
 8086094:	ea40 0002 	orr.w	r0, r0, r2
 8086098:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808609c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80860a0:	f141 0100 	adc.w	r1, r1, #0
 80860a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80860a8:	bf08      	it	eq
 80860aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80860ae:	bd70      	pop	{r4, r5, r6, pc}
 80860b0:	f1c4 0520 	rsb	r5, r4, #32
 80860b4:	fa00 f205 	lsl.w	r2, r0, r5
 80860b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80860bc:	fa20 f304 	lsr.w	r3, r0, r4
 80860c0:	fa01 f205 	lsl.w	r2, r1, r5
 80860c4:	ea43 0302 	orr.w	r3, r3, r2
 80860c8:	fa21 f004 	lsr.w	r0, r1, r4
 80860cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80860d0:	fa21 f204 	lsr.w	r2, r1, r4
 80860d4:	ea20 0002 	bic.w	r0, r0, r2
 80860d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80860dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80860e0:	bf08      	it	eq
 80860e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80860e6:	bd70      	pop	{r4, r5, r6, pc}
 80860e8:	f094 0f00 	teq	r4, #0
 80860ec:	d10f      	bne.n	808610e <__aeabi_dmul+0x1c2>
 80860ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80860f2:	0040      	lsls	r0, r0, #1
 80860f4:	eb41 0101 	adc.w	r1, r1, r1
 80860f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80860fc:	bf08      	it	eq
 80860fe:	3c01      	subeq	r4, #1
 8086100:	d0f7      	beq.n	80860f2 <__aeabi_dmul+0x1a6>
 8086102:	ea41 0106 	orr.w	r1, r1, r6
 8086106:	f095 0f00 	teq	r5, #0
 808610a:	bf18      	it	ne
 808610c:	4770      	bxne	lr
 808610e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8086112:	0052      	lsls	r2, r2, #1
 8086114:	eb43 0303 	adc.w	r3, r3, r3
 8086118:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 808611c:	bf08      	it	eq
 808611e:	3d01      	subeq	r5, #1
 8086120:	d0f7      	beq.n	8086112 <__aeabi_dmul+0x1c6>
 8086122:	ea43 0306 	orr.w	r3, r3, r6
 8086126:	4770      	bx	lr
 8086128:	ea94 0f0c 	teq	r4, ip
 808612c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8086130:	bf18      	it	ne
 8086132:	ea95 0f0c 	teqne	r5, ip
 8086136:	d00c      	beq.n	8086152 <__aeabi_dmul+0x206>
 8086138:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808613c:	bf18      	it	ne
 808613e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8086142:	d1d1      	bne.n	80860e8 <__aeabi_dmul+0x19c>
 8086144:	ea81 0103 	eor.w	r1, r1, r3
 8086148:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808614c:	f04f 0000 	mov.w	r0, #0
 8086150:	bd70      	pop	{r4, r5, r6, pc}
 8086152:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8086156:	bf06      	itte	eq
 8086158:	4610      	moveq	r0, r2
 808615a:	4619      	moveq	r1, r3
 808615c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8086160:	d019      	beq.n	8086196 <__aeabi_dmul+0x24a>
 8086162:	ea94 0f0c 	teq	r4, ip
 8086166:	d102      	bne.n	808616e <__aeabi_dmul+0x222>
 8086168:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 808616c:	d113      	bne.n	8086196 <__aeabi_dmul+0x24a>
 808616e:	ea95 0f0c 	teq	r5, ip
 8086172:	d105      	bne.n	8086180 <__aeabi_dmul+0x234>
 8086174:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8086178:	bf1c      	itt	ne
 808617a:	4610      	movne	r0, r2
 808617c:	4619      	movne	r1, r3
 808617e:	d10a      	bne.n	8086196 <__aeabi_dmul+0x24a>
 8086180:	ea81 0103 	eor.w	r1, r1, r3
 8086184:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8086188:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808618c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8086190:	f04f 0000 	mov.w	r0, #0
 8086194:	bd70      	pop	{r4, r5, r6, pc}
 8086196:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808619a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 808619e:	bd70      	pop	{r4, r5, r6, pc}

080861a0 <__aeabi_ddiv>:
 80861a0:	b570      	push	{r4, r5, r6, lr}
 80861a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80861a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80861aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80861ae:	bf1d      	ittte	ne
 80861b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80861b4:	ea94 0f0c 	teqne	r4, ip
 80861b8:	ea95 0f0c 	teqne	r5, ip
 80861bc:	f000 f8a7 	bleq	808630e <__aeabi_ddiv+0x16e>
 80861c0:	eba4 0405 	sub.w	r4, r4, r5
 80861c4:	ea81 0e03 	eor.w	lr, r1, r3
 80861c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80861cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80861d0:	f000 8088 	beq.w	80862e4 <__aeabi_ddiv+0x144>
 80861d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80861d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80861dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80861e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80861e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80861e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80861ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80861f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80861f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80861f8:	429d      	cmp	r5, r3
 80861fa:	bf08      	it	eq
 80861fc:	4296      	cmpeq	r6, r2
 80861fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8086202:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8086206:	d202      	bcs.n	808620e <__aeabi_ddiv+0x6e>
 8086208:	085b      	lsrs	r3, r3, #1
 808620a:	ea4f 0232 	mov.w	r2, r2, rrx
 808620e:	1ab6      	subs	r6, r6, r2
 8086210:	eb65 0503 	sbc.w	r5, r5, r3
 8086214:	085b      	lsrs	r3, r3, #1
 8086216:	ea4f 0232 	mov.w	r2, r2, rrx
 808621a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 808621e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8086222:	ebb6 0e02 	subs.w	lr, r6, r2
 8086226:	eb75 0e03 	sbcs.w	lr, r5, r3
 808622a:	bf22      	ittt	cs
 808622c:	1ab6      	subcs	r6, r6, r2
 808622e:	4675      	movcs	r5, lr
 8086230:	ea40 000c 	orrcs.w	r0, r0, ip
 8086234:	085b      	lsrs	r3, r3, #1
 8086236:	ea4f 0232 	mov.w	r2, r2, rrx
 808623a:	ebb6 0e02 	subs.w	lr, r6, r2
 808623e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8086242:	bf22      	ittt	cs
 8086244:	1ab6      	subcs	r6, r6, r2
 8086246:	4675      	movcs	r5, lr
 8086248:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808624c:	085b      	lsrs	r3, r3, #1
 808624e:	ea4f 0232 	mov.w	r2, r2, rrx
 8086252:	ebb6 0e02 	subs.w	lr, r6, r2
 8086256:	eb75 0e03 	sbcs.w	lr, r5, r3
 808625a:	bf22      	ittt	cs
 808625c:	1ab6      	subcs	r6, r6, r2
 808625e:	4675      	movcs	r5, lr
 8086260:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8086264:	085b      	lsrs	r3, r3, #1
 8086266:	ea4f 0232 	mov.w	r2, r2, rrx
 808626a:	ebb6 0e02 	subs.w	lr, r6, r2
 808626e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8086272:	bf22      	ittt	cs
 8086274:	1ab6      	subcs	r6, r6, r2
 8086276:	4675      	movcs	r5, lr
 8086278:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808627c:	ea55 0e06 	orrs.w	lr, r5, r6
 8086280:	d018      	beq.n	80862b4 <__aeabi_ddiv+0x114>
 8086282:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8086286:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 808628a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 808628e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8086292:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8086296:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 808629a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 808629e:	d1c0      	bne.n	8086222 <__aeabi_ddiv+0x82>
 80862a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80862a4:	d10b      	bne.n	80862be <__aeabi_ddiv+0x11e>
 80862a6:	ea41 0100 	orr.w	r1, r1, r0
 80862aa:	f04f 0000 	mov.w	r0, #0
 80862ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80862b2:	e7b6      	b.n	8086222 <__aeabi_ddiv+0x82>
 80862b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80862b8:	bf04      	itt	eq
 80862ba:	4301      	orreq	r1, r0
 80862bc:	2000      	moveq	r0, #0
 80862be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80862c2:	bf88      	it	hi
 80862c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80862c8:	f63f aeaf 	bhi.w	808602a <__aeabi_dmul+0xde>
 80862cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80862d0:	bf04      	itt	eq
 80862d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80862d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80862da:	f150 0000 	adcs.w	r0, r0, #0
 80862de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80862e2:	bd70      	pop	{r4, r5, r6, pc}
 80862e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80862e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80862ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80862f0:	bfc2      	ittt	gt
 80862f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80862f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80862fa:	bd70      	popgt	{r4, r5, r6, pc}
 80862fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8086300:	f04f 0e00 	mov.w	lr, #0
 8086304:	3c01      	subs	r4, #1
 8086306:	e690      	b.n	808602a <__aeabi_dmul+0xde>
 8086308:	ea45 0e06 	orr.w	lr, r5, r6
 808630c:	e68d      	b.n	808602a <__aeabi_dmul+0xde>
 808630e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8086312:	ea94 0f0c 	teq	r4, ip
 8086316:	bf08      	it	eq
 8086318:	ea95 0f0c 	teqeq	r5, ip
 808631c:	f43f af3b 	beq.w	8086196 <__aeabi_dmul+0x24a>
 8086320:	ea94 0f0c 	teq	r4, ip
 8086324:	d10a      	bne.n	808633c <__aeabi_ddiv+0x19c>
 8086326:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808632a:	f47f af34 	bne.w	8086196 <__aeabi_dmul+0x24a>
 808632e:	ea95 0f0c 	teq	r5, ip
 8086332:	f47f af25 	bne.w	8086180 <__aeabi_dmul+0x234>
 8086336:	4610      	mov	r0, r2
 8086338:	4619      	mov	r1, r3
 808633a:	e72c      	b.n	8086196 <__aeabi_dmul+0x24a>
 808633c:	ea95 0f0c 	teq	r5, ip
 8086340:	d106      	bne.n	8086350 <__aeabi_ddiv+0x1b0>
 8086342:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8086346:	f43f aefd 	beq.w	8086144 <__aeabi_dmul+0x1f8>
 808634a:	4610      	mov	r0, r2
 808634c:	4619      	mov	r1, r3
 808634e:	e722      	b.n	8086196 <__aeabi_dmul+0x24a>
 8086350:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8086354:	bf18      	it	ne
 8086356:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808635a:	f47f aec5 	bne.w	80860e8 <__aeabi_dmul+0x19c>
 808635e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8086362:	f47f af0d 	bne.w	8086180 <__aeabi_dmul+0x234>
 8086366:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 808636a:	f47f aeeb 	bne.w	8086144 <__aeabi_dmul+0x1f8>
 808636e:	e712      	b.n	8086196 <__aeabi_dmul+0x24a>

08086370 <__gedf2>:
 8086370:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8086374:	e006      	b.n	8086384 <__cmpdf2+0x4>
 8086376:	bf00      	nop

08086378 <__ledf2>:
 8086378:	f04f 0c01 	mov.w	ip, #1
 808637c:	e002      	b.n	8086384 <__cmpdf2+0x4>
 808637e:	bf00      	nop

08086380 <__cmpdf2>:
 8086380:	f04f 0c01 	mov.w	ip, #1
 8086384:	f84d cd04 	str.w	ip, [sp, #-4]!
 8086388:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808638c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8086390:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8086394:	bf18      	it	ne
 8086396:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 808639a:	d01b      	beq.n	80863d4 <__cmpdf2+0x54>
 808639c:	b001      	add	sp, #4
 808639e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80863a2:	bf0c      	ite	eq
 80863a4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80863a8:	ea91 0f03 	teqne	r1, r3
 80863ac:	bf02      	ittt	eq
 80863ae:	ea90 0f02 	teqeq	r0, r2
 80863b2:	2000      	moveq	r0, #0
 80863b4:	4770      	bxeq	lr
 80863b6:	f110 0f00 	cmn.w	r0, #0
 80863ba:	ea91 0f03 	teq	r1, r3
 80863be:	bf58      	it	pl
 80863c0:	4299      	cmppl	r1, r3
 80863c2:	bf08      	it	eq
 80863c4:	4290      	cmpeq	r0, r2
 80863c6:	bf2c      	ite	cs
 80863c8:	17d8      	asrcs	r0, r3, #31
 80863ca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80863ce:	f040 0001 	orr.w	r0, r0, #1
 80863d2:	4770      	bx	lr
 80863d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80863d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80863dc:	d102      	bne.n	80863e4 <__cmpdf2+0x64>
 80863de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80863e2:	d107      	bne.n	80863f4 <__cmpdf2+0x74>
 80863e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80863e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80863ec:	d1d6      	bne.n	808639c <__cmpdf2+0x1c>
 80863ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80863f2:	d0d3      	beq.n	808639c <__cmpdf2+0x1c>
 80863f4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80863f8:	4770      	bx	lr
 80863fa:	bf00      	nop

080863fc <__aeabi_cdrcmple>:
 80863fc:	4684      	mov	ip, r0
 80863fe:	4610      	mov	r0, r2
 8086400:	4662      	mov	r2, ip
 8086402:	468c      	mov	ip, r1
 8086404:	4619      	mov	r1, r3
 8086406:	4663      	mov	r3, ip
 8086408:	e000      	b.n	808640c <__aeabi_cdcmpeq>
 808640a:	bf00      	nop

0808640c <__aeabi_cdcmpeq>:
 808640c:	b501      	push	{r0, lr}
 808640e:	f7ff ffb7 	bl	8086380 <__cmpdf2>
 8086412:	2800      	cmp	r0, #0
 8086414:	bf48      	it	mi
 8086416:	f110 0f00 	cmnmi.w	r0, #0
 808641a:	bd01      	pop	{r0, pc}

0808641c <__aeabi_dcmpeq>:
 808641c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8086420:	f7ff fff4 	bl	808640c <__aeabi_cdcmpeq>
 8086424:	bf0c      	ite	eq
 8086426:	2001      	moveq	r0, #1
 8086428:	2000      	movne	r0, #0
 808642a:	f85d fb08 	ldr.w	pc, [sp], #8
 808642e:	bf00      	nop

08086430 <__aeabi_dcmplt>:
 8086430:	f84d ed08 	str.w	lr, [sp, #-8]!
 8086434:	f7ff ffea 	bl	808640c <__aeabi_cdcmpeq>
 8086438:	bf34      	ite	cc
 808643a:	2001      	movcc	r0, #1
 808643c:	2000      	movcs	r0, #0
 808643e:	f85d fb08 	ldr.w	pc, [sp], #8
 8086442:	bf00      	nop

08086444 <__aeabi_dcmple>:
 8086444:	f84d ed08 	str.w	lr, [sp, #-8]!
 8086448:	f7ff ffe0 	bl	808640c <__aeabi_cdcmpeq>
 808644c:	bf94      	ite	ls
 808644e:	2001      	movls	r0, #1
 8086450:	2000      	movhi	r0, #0
 8086452:	f85d fb08 	ldr.w	pc, [sp], #8
 8086456:	bf00      	nop

08086458 <__aeabi_dcmpge>:
 8086458:	f84d ed08 	str.w	lr, [sp, #-8]!
 808645c:	f7ff ffce 	bl	80863fc <__aeabi_cdrcmple>
 8086460:	bf94      	ite	ls
 8086462:	2001      	movls	r0, #1
 8086464:	2000      	movhi	r0, #0
 8086466:	f85d fb08 	ldr.w	pc, [sp], #8
 808646a:	bf00      	nop

0808646c <__aeabi_dcmpgt>:
 808646c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8086470:	f7ff ffc4 	bl	80863fc <__aeabi_cdrcmple>
 8086474:	bf34      	ite	cc
 8086476:	2001      	movcc	r0, #1
 8086478:	2000      	movcs	r0, #0
 808647a:	f85d fb08 	ldr.w	pc, [sp], #8
 808647e:	bf00      	nop

08086480 <__aeabi_dcmpun>:
 8086480:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8086484:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8086488:	d102      	bne.n	8086490 <__aeabi_dcmpun+0x10>
 808648a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808648e:	d10a      	bne.n	80864a6 <__aeabi_dcmpun+0x26>
 8086490:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8086494:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8086498:	d102      	bne.n	80864a0 <__aeabi_dcmpun+0x20>
 808649a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808649e:	d102      	bne.n	80864a6 <__aeabi_dcmpun+0x26>
 80864a0:	f04f 0000 	mov.w	r0, #0
 80864a4:	4770      	bx	lr
 80864a6:	f04f 0001 	mov.w	r0, #1
 80864aa:	4770      	bx	lr

080864ac <__aeabi_d2f>:
 80864ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80864b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80864b4:	bf24      	itt	cs
 80864b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80864ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80864be:	d90d      	bls.n	80864dc <__aeabi_d2f+0x30>
 80864c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80864c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80864c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80864cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80864d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80864d4:	bf08      	it	eq
 80864d6:	f020 0001 	biceq.w	r0, r0, #1
 80864da:	4770      	bx	lr
 80864dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80864e0:	d121      	bne.n	8086526 <__aeabi_d2f+0x7a>
 80864e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80864e6:	bfbc      	itt	lt
 80864e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80864ec:	4770      	bxlt	lr
 80864ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80864f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80864f6:	f1c2 0218 	rsb	r2, r2, #24
 80864fa:	f1c2 0c20 	rsb	ip, r2, #32
 80864fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8086502:	fa20 f002 	lsr.w	r0, r0, r2
 8086506:	bf18      	it	ne
 8086508:	f040 0001 	orrne.w	r0, r0, #1
 808650c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8086510:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8086514:	fa03 fc0c 	lsl.w	ip, r3, ip
 8086518:	ea40 000c 	orr.w	r0, r0, ip
 808651c:	fa23 f302 	lsr.w	r3, r3, r2
 8086520:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8086524:	e7cc      	b.n	80864c0 <__aeabi_d2f+0x14>
 8086526:	ea7f 5362 	mvns.w	r3, r2, asr #21
 808652a:	d107      	bne.n	808653c <__aeabi_d2f+0x90>
 808652c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8086530:	bf1e      	ittt	ne
 8086532:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8086536:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808653a:	4770      	bxne	lr
 808653c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8086540:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8086544:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8086548:	4770      	bx	lr
 808654a:	bf00      	nop

0808654c <__aeabi_frsub>:
 808654c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8086550:	e002      	b.n	8086558 <__addsf3>
 8086552:	bf00      	nop

08086554 <__aeabi_fsub>:
 8086554:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08086558 <__addsf3>:
 8086558:	0042      	lsls	r2, r0, #1
 808655a:	bf1f      	itttt	ne
 808655c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8086560:	ea92 0f03 	teqne	r2, r3
 8086564:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8086568:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808656c:	d06a      	beq.n	8086644 <__addsf3+0xec>
 808656e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8086572:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8086576:	bfc1      	itttt	gt
 8086578:	18d2      	addgt	r2, r2, r3
 808657a:	4041      	eorgt	r1, r0
 808657c:	4048      	eorgt	r0, r1
 808657e:	4041      	eorgt	r1, r0
 8086580:	bfb8      	it	lt
 8086582:	425b      	neglt	r3, r3
 8086584:	2b19      	cmp	r3, #25
 8086586:	bf88      	it	hi
 8086588:	4770      	bxhi	lr
 808658a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808658e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8086592:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8086596:	bf18      	it	ne
 8086598:	4240      	negne	r0, r0
 808659a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808659e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80865a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80865a6:	bf18      	it	ne
 80865a8:	4249      	negne	r1, r1
 80865aa:	ea92 0f03 	teq	r2, r3
 80865ae:	d03f      	beq.n	8086630 <__addsf3+0xd8>
 80865b0:	f1a2 0201 	sub.w	r2, r2, #1
 80865b4:	fa41 fc03 	asr.w	ip, r1, r3
 80865b8:	eb10 000c 	adds.w	r0, r0, ip
 80865bc:	f1c3 0320 	rsb	r3, r3, #32
 80865c0:	fa01 f103 	lsl.w	r1, r1, r3
 80865c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80865c8:	d502      	bpl.n	80865d0 <__addsf3+0x78>
 80865ca:	4249      	negs	r1, r1
 80865cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80865d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80865d4:	d313      	bcc.n	80865fe <__addsf3+0xa6>
 80865d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80865da:	d306      	bcc.n	80865ea <__addsf3+0x92>
 80865dc:	0840      	lsrs	r0, r0, #1
 80865de:	ea4f 0131 	mov.w	r1, r1, rrx
 80865e2:	f102 0201 	add.w	r2, r2, #1
 80865e6:	2afe      	cmp	r2, #254	; 0xfe
 80865e8:	d251      	bcs.n	808668e <__addsf3+0x136>
 80865ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80865ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80865f2:	bf08      	it	eq
 80865f4:	f020 0001 	biceq.w	r0, r0, #1
 80865f8:	ea40 0003 	orr.w	r0, r0, r3
 80865fc:	4770      	bx	lr
 80865fe:	0049      	lsls	r1, r1, #1
 8086600:	eb40 0000 	adc.w	r0, r0, r0
 8086604:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8086608:	f1a2 0201 	sub.w	r2, r2, #1
 808660c:	d1ed      	bne.n	80865ea <__addsf3+0x92>
 808660e:	fab0 fc80 	clz	ip, r0
 8086612:	f1ac 0c08 	sub.w	ip, ip, #8
 8086616:	ebb2 020c 	subs.w	r2, r2, ip
 808661a:	fa00 f00c 	lsl.w	r0, r0, ip
 808661e:	bfaa      	itet	ge
 8086620:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8086624:	4252      	neglt	r2, r2
 8086626:	4318      	orrge	r0, r3
 8086628:	bfbc      	itt	lt
 808662a:	40d0      	lsrlt	r0, r2
 808662c:	4318      	orrlt	r0, r3
 808662e:	4770      	bx	lr
 8086630:	f092 0f00 	teq	r2, #0
 8086634:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8086638:	bf06      	itte	eq
 808663a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 808663e:	3201      	addeq	r2, #1
 8086640:	3b01      	subne	r3, #1
 8086642:	e7b5      	b.n	80865b0 <__addsf3+0x58>
 8086644:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8086648:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808664c:	bf18      	it	ne
 808664e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8086652:	d021      	beq.n	8086698 <__addsf3+0x140>
 8086654:	ea92 0f03 	teq	r2, r3
 8086658:	d004      	beq.n	8086664 <__addsf3+0x10c>
 808665a:	f092 0f00 	teq	r2, #0
 808665e:	bf08      	it	eq
 8086660:	4608      	moveq	r0, r1
 8086662:	4770      	bx	lr
 8086664:	ea90 0f01 	teq	r0, r1
 8086668:	bf1c      	itt	ne
 808666a:	2000      	movne	r0, #0
 808666c:	4770      	bxne	lr
 808666e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8086672:	d104      	bne.n	808667e <__addsf3+0x126>
 8086674:	0040      	lsls	r0, r0, #1
 8086676:	bf28      	it	cs
 8086678:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 808667c:	4770      	bx	lr
 808667e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8086682:	bf3c      	itt	cc
 8086684:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8086688:	4770      	bxcc	lr
 808668a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808668e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8086692:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8086696:	4770      	bx	lr
 8086698:	ea7f 6222 	mvns.w	r2, r2, asr #24
 808669c:	bf16      	itet	ne
 808669e:	4608      	movne	r0, r1
 80866a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80866a4:	4601      	movne	r1, r0
 80866a6:	0242      	lsls	r2, r0, #9
 80866a8:	bf06      	itte	eq
 80866aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80866ae:	ea90 0f01 	teqeq	r0, r1
 80866b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80866b6:	4770      	bx	lr

080866b8 <__aeabi_ui2f>:
 80866b8:	f04f 0300 	mov.w	r3, #0
 80866bc:	e004      	b.n	80866c8 <__aeabi_i2f+0x8>
 80866be:	bf00      	nop

080866c0 <__aeabi_i2f>:
 80866c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80866c4:	bf48      	it	mi
 80866c6:	4240      	negmi	r0, r0
 80866c8:	ea5f 0c00 	movs.w	ip, r0
 80866cc:	bf08      	it	eq
 80866ce:	4770      	bxeq	lr
 80866d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80866d4:	4601      	mov	r1, r0
 80866d6:	f04f 0000 	mov.w	r0, #0
 80866da:	e01c      	b.n	8086716 <__aeabi_l2f+0x2a>

080866dc <__aeabi_ul2f>:
 80866dc:	ea50 0201 	orrs.w	r2, r0, r1
 80866e0:	bf08      	it	eq
 80866e2:	4770      	bxeq	lr
 80866e4:	f04f 0300 	mov.w	r3, #0
 80866e8:	e00a      	b.n	8086700 <__aeabi_l2f+0x14>
 80866ea:	bf00      	nop

080866ec <__aeabi_l2f>:
 80866ec:	ea50 0201 	orrs.w	r2, r0, r1
 80866f0:	bf08      	it	eq
 80866f2:	4770      	bxeq	lr
 80866f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80866f8:	d502      	bpl.n	8086700 <__aeabi_l2f+0x14>
 80866fa:	4240      	negs	r0, r0
 80866fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8086700:	ea5f 0c01 	movs.w	ip, r1
 8086704:	bf02      	ittt	eq
 8086706:	4684      	moveq	ip, r0
 8086708:	4601      	moveq	r1, r0
 808670a:	2000      	moveq	r0, #0
 808670c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8086710:	bf08      	it	eq
 8086712:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8086716:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808671a:	fabc f28c 	clz	r2, ip
 808671e:	3a08      	subs	r2, #8
 8086720:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8086724:	db10      	blt.n	8086748 <__aeabi_l2f+0x5c>
 8086726:	fa01 fc02 	lsl.w	ip, r1, r2
 808672a:	4463      	add	r3, ip
 808672c:	fa00 fc02 	lsl.w	ip, r0, r2
 8086730:	f1c2 0220 	rsb	r2, r2, #32
 8086734:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8086738:	fa20 f202 	lsr.w	r2, r0, r2
 808673c:	eb43 0002 	adc.w	r0, r3, r2
 8086740:	bf08      	it	eq
 8086742:	f020 0001 	biceq.w	r0, r0, #1
 8086746:	4770      	bx	lr
 8086748:	f102 0220 	add.w	r2, r2, #32
 808674c:	fa01 fc02 	lsl.w	ip, r1, r2
 8086750:	f1c2 0220 	rsb	r2, r2, #32
 8086754:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8086758:	fa21 f202 	lsr.w	r2, r1, r2
 808675c:	eb43 0002 	adc.w	r0, r3, r2
 8086760:	bf08      	it	eq
 8086762:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8086766:	4770      	bx	lr

08086768 <__aeabi_fmul>:
 8086768:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808676c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8086770:	bf1e      	ittt	ne
 8086772:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8086776:	ea92 0f0c 	teqne	r2, ip
 808677a:	ea93 0f0c 	teqne	r3, ip
 808677e:	d06f      	beq.n	8086860 <__aeabi_fmul+0xf8>
 8086780:	441a      	add	r2, r3
 8086782:	ea80 0c01 	eor.w	ip, r0, r1
 8086786:	0240      	lsls	r0, r0, #9
 8086788:	bf18      	it	ne
 808678a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 808678e:	d01e      	beq.n	80867ce <__aeabi_fmul+0x66>
 8086790:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8086794:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8086798:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 808679c:	fba0 3101 	umull	r3, r1, r0, r1
 80867a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80867a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80867a8:	bf3e      	ittt	cc
 80867aa:	0049      	lslcc	r1, r1, #1
 80867ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80867b0:	005b      	lslcc	r3, r3, #1
 80867b2:	ea40 0001 	orr.w	r0, r0, r1
 80867b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80867ba:	2afd      	cmp	r2, #253	; 0xfd
 80867bc:	d81d      	bhi.n	80867fa <__aeabi_fmul+0x92>
 80867be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80867c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80867c6:	bf08      	it	eq
 80867c8:	f020 0001 	biceq.w	r0, r0, #1
 80867cc:	4770      	bx	lr
 80867ce:	f090 0f00 	teq	r0, #0
 80867d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80867d6:	bf08      	it	eq
 80867d8:	0249      	lsleq	r1, r1, #9
 80867da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80867de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80867e2:	3a7f      	subs	r2, #127	; 0x7f
 80867e4:	bfc2      	ittt	gt
 80867e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80867ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80867ee:	4770      	bxgt	lr
 80867f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80867f4:	f04f 0300 	mov.w	r3, #0
 80867f8:	3a01      	subs	r2, #1
 80867fa:	dc5d      	bgt.n	80868b8 <__aeabi_fmul+0x150>
 80867fc:	f112 0f19 	cmn.w	r2, #25
 8086800:	bfdc      	itt	le
 8086802:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8086806:	4770      	bxle	lr
 8086808:	f1c2 0200 	rsb	r2, r2, #0
 808680c:	0041      	lsls	r1, r0, #1
 808680e:	fa21 f102 	lsr.w	r1, r1, r2
 8086812:	f1c2 0220 	rsb	r2, r2, #32
 8086816:	fa00 fc02 	lsl.w	ip, r0, r2
 808681a:	ea5f 0031 	movs.w	r0, r1, rrx
 808681e:	f140 0000 	adc.w	r0, r0, #0
 8086822:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8086826:	bf08      	it	eq
 8086828:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808682c:	4770      	bx	lr
 808682e:	f092 0f00 	teq	r2, #0
 8086832:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8086836:	bf02      	ittt	eq
 8086838:	0040      	lsleq	r0, r0, #1
 808683a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808683e:	3a01      	subeq	r2, #1
 8086840:	d0f9      	beq.n	8086836 <__aeabi_fmul+0xce>
 8086842:	ea40 000c 	orr.w	r0, r0, ip
 8086846:	f093 0f00 	teq	r3, #0
 808684a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808684e:	bf02      	ittt	eq
 8086850:	0049      	lsleq	r1, r1, #1
 8086852:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8086856:	3b01      	subeq	r3, #1
 8086858:	d0f9      	beq.n	808684e <__aeabi_fmul+0xe6>
 808685a:	ea41 010c 	orr.w	r1, r1, ip
 808685e:	e78f      	b.n	8086780 <__aeabi_fmul+0x18>
 8086860:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8086864:	ea92 0f0c 	teq	r2, ip
 8086868:	bf18      	it	ne
 808686a:	ea93 0f0c 	teqne	r3, ip
 808686e:	d00a      	beq.n	8086886 <__aeabi_fmul+0x11e>
 8086870:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8086874:	bf18      	it	ne
 8086876:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808687a:	d1d8      	bne.n	808682e <__aeabi_fmul+0xc6>
 808687c:	ea80 0001 	eor.w	r0, r0, r1
 8086880:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8086884:	4770      	bx	lr
 8086886:	f090 0f00 	teq	r0, #0
 808688a:	bf17      	itett	ne
 808688c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8086890:	4608      	moveq	r0, r1
 8086892:	f091 0f00 	teqne	r1, #0
 8086896:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808689a:	d014      	beq.n	80868c6 <__aeabi_fmul+0x15e>
 808689c:	ea92 0f0c 	teq	r2, ip
 80868a0:	d101      	bne.n	80868a6 <__aeabi_fmul+0x13e>
 80868a2:	0242      	lsls	r2, r0, #9
 80868a4:	d10f      	bne.n	80868c6 <__aeabi_fmul+0x15e>
 80868a6:	ea93 0f0c 	teq	r3, ip
 80868aa:	d103      	bne.n	80868b4 <__aeabi_fmul+0x14c>
 80868ac:	024b      	lsls	r3, r1, #9
 80868ae:	bf18      	it	ne
 80868b0:	4608      	movne	r0, r1
 80868b2:	d108      	bne.n	80868c6 <__aeabi_fmul+0x15e>
 80868b4:	ea80 0001 	eor.w	r0, r0, r1
 80868b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80868bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80868c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80868c4:	4770      	bx	lr
 80868c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80868ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80868ce:	4770      	bx	lr

080868d0 <__aeabi_fdiv>:
 80868d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80868d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80868d8:	bf1e      	ittt	ne
 80868da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80868de:	ea92 0f0c 	teqne	r2, ip
 80868e2:	ea93 0f0c 	teqne	r3, ip
 80868e6:	d069      	beq.n	80869bc <__aeabi_fdiv+0xec>
 80868e8:	eba2 0203 	sub.w	r2, r2, r3
 80868ec:	ea80 0c01 	eor.w	ip, r0, r1
 80868f0:	0249      	lsls	r1, r1, #9
 80868f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80868f6:	d037      	beq.n	8086968 <__aeabi_fdiv+0x98>
 80868f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80868fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8086900:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8086904:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8086908:	428b      	cmp	r3, r1
 808690a:	bf38      	it	cc
 808690c:	005b      	lslcc	r3, r3, #1
 808690e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8086912:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8086916:	428b      	cmp	r3, r1
 8086918:	bf24      	itt	cs
 808691a:	1a5b      	subcs	r3, r3, r1
 808691c:	ea40 000c 	orrcs.w	r0, r0, ip
 8086920:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8086924:	bf24      	itt	cs
 8086926:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808692a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808692e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8086932:	bf24      	itt	cs
 8086934:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8086938:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808693c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8086940:	bf24      	itt	cs
 8086942:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8086946:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808694a:	011b      	lsls	r3, r3, #4
 808694c:	bf18      	it	ne
 808694e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8086952:	d1e0      	bne.n	8086916 <__aeabi_fdiv+0x46>
 8086954:	2afd      	cmp	r2, #253	; 0xfd
 8086956:	f63f af50 	bhi.w	80867fa <__aeabi_fmul+0x92>
 808695a:	428b      	cmp	r3, r1
 808695c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8086960:	bf08      	it	eq
 8086962:	f020 0001 	biceq.w	r0, r0, #1
 8086966:	4770      	bx	lr
 8086968:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808696c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8086970:	327f      	adds	r2, #127	; 0x7f
 8086972:	bfc2      	ittt	gt
 8086974:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8086978:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808697c:	4770      	bxgt	lr
 808697e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8086982:	f04f 0300 	mov.w	r3, #0
 8086986:	3a01      	subs	r2, #1
 8086988:	e737      	b.n	80867fa <__aeabi_fmul+0x92>
 808698a:	f092 0f00 	teq	r2, #0
 808698e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8086992:	bf02      	ittt	eq
 8086994:	0040      	lsleq	r0, r0, #1
 8086996:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808699a:	3a01      	subeq	r2, #1
 808699c:	d0f9      	beq.n	8086992 <__aeabi_fdiv+0xc2>
 808699e:	ea40 000c 	orr.w	r0, r0, ip
 80869a2:	f093 0f00 	teq	r3, #0
 80869a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80869aa:	bf02      	ittt	eq
 80869ac:	0049      	lsleq	r1, r1, #1
 80869ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80869b2:	3b01      	subeq	r3, #1
 80869b4:	d0f9      	beq.n	80869aa <__aeabi_fdiv+0xda>
 80869b6:	ea41 010c 	orr.w	r1, r1, ip
 80869ba:	e795      	b.n	80868e8 <__aeabi_fdiv+0x18>
 80869bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80869c0:	ea92 0f0c 	teq	r2, ip
 80869c4:	d108      	bne.n	80869d8 <__aeabi_fdiv+0x108>
 80869c6:	0242      	lsls	r2, r0, #9
 80869c8:	f47f af7d 	bne.w	80868c6 <__aeabi_fmul+0x15e>
 80869cc:	ea93 0f0c 	teq	r3, ip
 80869d0:	f47f af70 	bne.w	80868b4 <__aeabi_fmul+0x14c>
 80869d4:	4608      	mov	r0, r1
 80869d6:	e776      	b.n	80868c6 <__aeabi_fmul+0x15e>
 80869d8:	ea93 0f0c 	teq	r3, ip
 80869dc:	d104      	bne.n	80869e8 <__aeabi_fdiv+0x118>
 80869de:	024b      	lsls	r3, r1, #9
 80869e0:	f43f af4c 	beq.w	808687c <__aeabi_fmul+0x114>
 80869e4:	4608      	mov	r0, r1
 80869e6:	e76e      	b.n	80868c6 <__aeabi_fmul+0x15e>
 80869e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80869ec:	bf18      	it	ne
 80869ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80869f2:	d1ca      	bne.n	808698a <__aeabi_fdiv+0xba>
 80869f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80869f8:	f47f af5c 	bne.w	80868b4 <__aeabi_fmul+0x14c>
 80869fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8086a00:	f47f af3c 	bne.w	808687c <__aeabi_fmul+0x114>
 8086a04:	e75f      	b.n	80868c6 <__aeabi_fmul+0x15e>
 8086a06:	bf00      	nop

08086a08 <__gesf2>:
 8086a08:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8086a0c:	e006      	b.n	8086a1c <__cmpsf2+0x4>
 8086a0e:	bf00      	nop

08086a10 <__lesf2>:
 8086a10:	f04f 0c01 	mov.w	ip, #1
 8086a14:	e002      	b.n	8086a1c <__cmpsf2+0x4>
 8086a16:	bf00      	nop

08086a18 <__cmpsf2>:
 8086a18:	f04f 0c01 	mov.w	ip, #1
 8086a1c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8086a20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8086a24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8086a28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8086a2c:	bf18      	it	ne
 8086a2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8086a32:	d011      	beq.n	8086a58 <__cmpsf2+0x40>
 8086a34:	b001      	add	sp, #4
 8086a36:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8086a3a:	bf18      	it	ne
 8086a3c:	ea90 0f01 	teqne	r0, r1
 8086a40:	bf58      	it	pl
 8086a42:	ebb2 0003 	subspl.w	r0, r2, r3
 8086a46:	bf88      	it	hi
 8086a48:	17c8      	asrhi	r0, r1, #31
 8086a4a:	bf38      	it	cc
 8086a4c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8086a50:	bf18      	it	ne
 8086a52:	f040 0001 	orrne.w	r0, r0, #1
 8086a56:	4770      	bx	lr
 8086a58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8086a5c:	d102      	bne.n	8086a64 <__cmpsf2+0x4c>
 8086a5e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8086a62:	d105      	bne.n	8086a70 <__cmpsf2+0x58>
 8086a64:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8086a68:	d1e4      	bne.n	8086a34 <__cmpsf2+0x1c>
 8086a6a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8086a6e:	d0e1      	beq.n	8086a34 <__cmpsf2+0x1c>
 8086a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8086a74:	4770      	bx	lr
 8086a76:	bf00      	nop

08086a78 <__aeabi_cfrcmple>:
 8086a78:	4684      	mov	ip, r0
 8086a7a:	4608      	mov	r0, r1
 8086a7c:	4661      	mov	r1, ip
 8086a7e:	e7ff      	b.n	8086a80 <__aeabi_cfcmpeq>

08086a80 <__aeabi_cfcmpeq>:
 8086a80:	b50f      	push	{r0, r1, r2, r3, lr}
 8086a82:	f7ff ffc9 	bl	8086a18 <__cmpsf2>
 8086a86:	2800      	cmp	r0, #0
 8086a88:	bf48      	it	mi
 8086a8a:	f110 0f00 	cmnmi.w	r0, #0
 8086a8e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08086a90 <__aeabi_fcmpeq>:
 8086a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8086a94:	f7ff fff4 	bl	8086a80 <__aeabi_cfcmpeq>
 8086a98:	bf0c      	ite	eq
 8086a9a:	2001      	moveq	r0, #1
 8086a9c:	2000      	movne	r0, #0
 8086a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8086aa2:	bf00      	nop

08086aa4 <__aeabi_fcmplt>:
 8086aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8086aa8:	f7ff ffea 	bl	8086a80 <__aeabi_cfcmpeq>
 8086aac:	bf34      	ite	cc
 8086aae:	2001      	movcc	r0, #1
 8086ab0:	2000      	movcs	r0, #0
 8086ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8086ab6:	bf00      	nop

08086ab8 <__aeabi_fcmple>:
 8086ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8086abc:	f7ff ffe0 	bl	8086a80 <__aeabi_cfcmpeq>
 8086ac0:	bf94      	ite	ls
 8086ac2:	2001      	movls	r0, #1
 8086ac4:	2000      	movhi	r0, #0
 8086ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8086aca:	bf00      	nop

08086acc <__aeabi_fcmpge>:
 8086acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8086ad0:	f7ff ffd2 	bl	8086a78 <__aeabi_cfrcmple>
 8086ad4:	bf94      	ite	ls
 8086ad6:	2001      	movls	r0, #1
 8086ad8:	2000      	movhi	r0, #0
 8086ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8086ade:	bf00      	nop

08086ae0 <__aeabi_fcmpgt>:
 8086ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8086ae4:	f7ff ffc8 	bl	8086a78 <__aeabi_cfrcmple>
 8086ae8:	bf34      	ite	cc
 8086aea:	2001      	movcc	r0, #1
 8086aec:	2000      	movcs	r0, #0
 8086aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8086af2:	bf00      	nop

08086af4 <__aeabi_f2iz>:
 8086af4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8086af8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8086afc:	d30f      	bcc.n	8086b1e <__aeabi_f2iz+0x2a>
 8086afe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8086b02:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8086b06:	d90d      	bls.n	8086b24 <__aeabi_f2iz+0x30>
 8086b08:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8086b0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8086b10:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8086b14:	fa23 f002 	lsr.w	r0, r3, r2
 8086b18:	bf18      	it	ne
 8086b1a:	4240      	negne	r0, r0
 8086b1c:	4770      	bx	lr
 8086b1e:	f04f 0000 	mov.w	r0, #0
 8086b22:	4770      	bx	lr
 8086b24:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8086b28:	d101      	bne.n	8086b2e <__aeabi_f2iz+0x3a>
 8086b2a:	0242      	lsls	r2, r0, #9
 8086b2c:	d105      	bne.n	8086b3a <__aeabi_f2iz+0x46>
 8086b2e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8086b32:	bf08      	it	eq
 8086b34:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8086b38:	4770      	bx	lr
 8086b3a:	f04f 0000 	mov.w	r0, #0
 8086b3e:	4770      	bx	lr

08086b40 <__aeabi_ldivmod>:
 8086b40:	b97b      	cbnz	r3, 8086b62 <__aeabi_ldivmod+0x22>
 8086b42:	b972      	cbnz	r2, 8086b62 <__aeabi_ldivmod+0x22>
 8086b44:	2900      	cmp	r1, #0
 8086b46:	bfbe      	ittt	lt
 8086b48:	2000      	movlt	r0, #0
 8086b4a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8086b4e:	e006      	blt.n	8086b5e <__aeabi_ldivmod+0x1e>
 8086b50:	bf08      	it	eq
 8086b52:	2800      	cmpeq	r0, #0
 8086b54:	bf1c      	itt	ne
 8086b56:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8086b5a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8086b5e:	f000 b9b5 	b.w	8086ecc <__aeabi_idiv0>
 8086b62:	f1ad 0c08 	sub.w	ip, sp, #8
 8086b66:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8086b6a:	2900      	cmp	r1, #0
 8086b6c:	db09      	blt.n	8086b82 <__aeabi_ldivmod+0x42>
 8086b6e:	2b00      	cmp	r3, #0
 8086b70:	db1a      	blt.n	8086ba8 <__aeabi_ldivmod+0x68>
 8086b72:	f000 f835 	bl	8086be0 <__udivmoddi4>
 8086b76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8086b7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8086b7e:	b004      	add	sp, #16
 8086b80:	4770      	bx	lr
 8086b82:	4240      	negs	r0, r0
 8086b84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8086b88:	2b00      	cmp	r3, #0
 8086b8a:	db1b      	blt.n	8086bc4 <__aeabi_ldivmod+0x84>
 8086b8c:	f000 f828 	bl	8086be0 <__udivmoddi4>
 8086b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8086b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8086b98:	b004      	add	sp, #16
 8086b9a:	4240      	negs	r0, r0
 8086b9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8086ba0:	4252      	negs	r2, r2
 8086ba2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8086ba6:	4770      	bx	lr
 8086ba8:	4252      	negs	r2, r2
 8086baa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8086bae:	f000 f817 	bl	8086be0 <__udivmoddi4>
 8086bb2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8086bb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8086bba:	b004      	add	sp, #16
 8086bbc:	4240      	negs	r0, r0
 8086bbe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8086bc2:	4770      	bx	lr
 8086bc4:	4252      	negs	r2, r2
 8086bc6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8086bca:	f000 f809 	bl	8086be0 <__udivmoddi4>
 8086bce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8086bd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8086bd6:	b004      	add	sp, #16
 8086bd8:	4252      	negs	r2, r2
 8086bda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8086bde:	4770      	bx	lr

08086be0 <__udivmoddi4>:
 8086be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086be4:	468c      	mov	ip, r1
 8086be6:	460c      	mov	r4, r1
 8086be8:	4605      	mov	r5, r0
 8086bea:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8086bec:	2b00      	cmp	r3, #0
 8086bee:	d14f      	bne.n	8086c90 <__udivmoddi4+0xb0>
 8086bf0:	428a      	cmp	r2, r1
 8086bf2:	4617      	mov	r7, r2
 8086bf4:	d96b      	bls.n	8086cce <__udivmoddi4+0xee>
 8086bf6:	fab2 fe82 	clz	lr, r2
 8086bfa:	f1be 0f00 	cmp.w	lr, #0
 8086bfe:	d00b      	beq.n	8086c18 <__udivmoddi4+0x38>
 8086c00:	f1ce 0520 	rsb	r5, lr, #32
 8086c04:	fa20 f505 	lsr.w	r5, r0, r5
 8086c08:	fa01 f30e 	lsl.w	r3, r1, lr
 8086c0c:	ea45 0c03 	orr.w	ip, r5, r3
 8086c10:	fa02 f70e 	lsl.w	r7, r2, lr
 8086c14:	fa00 f50e 	lsl.w	r5, r0, lr
 8086c18:	0c39      	lsrs	r1, r7, #16
 8086c1a:	fbbc f0f1 	udiv	r0, ip, r1
 8086c1e:	b2ba      	uxth	r2, r7
 8086c20:	fb01 c310 	mls	r3, r1, r0, ip
 8086c24:	fb00 f802 	mul.w	r8, r0, r2
 8086c28:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8086c2c:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 8086c30:	45a0      	cmp	r8, r4
 8086c32:	d909      	bls.n	8086c48 <__udivmoddi4+0x68>
 8086c34:	19e4      	adds	r4, r4, r7
 8086c36:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8086c3a:	f080 8128 	bcs.w	8086e8e <__udivmoddi4+0x2ae>
 8086c3e:	45a0      	cmp	r8, r4
 8086c40:	f240 8125 	bls.w	8086e8e <__udivmoddi4+0x2ae>
 8086c44:	3802      	subs	r0, #2
 8086c46:	443c      	add	r4, r7
 8086c48:	ebc8 0404 	rsb	r4, r8, r4
 8086c4c:	fbb4 f3f1 	udiv	r3, r4, r1
 8086c50:	fb01 4c13 	mls	ip, r1, r3, r4
 8086c54:	fb03 f202 	mul.w	r2, r3, r2
 8086c58:	b2ac      	uxth	r4, r5
 8086c5a:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 8086c5e:	428a      	cmp	r2, r1
 8086c60:	d909      	bls.n	8086c76 <__udivmoddi4+0x96>
 8086c62:	19c9      	adds	r1, r1, r7
 8086c64:	f103 34ff 	add.w	r4, r3, #4294967295	; 0xffffffff
 8086c68:	f080 810f 	bcs.w	8086e8a <__udivmoddi4+0x2aa>
 8086c6c:	428a      	cmp	r2, r1
 8086c6e:	f240 810c 	bls.w	8086e8a <__udivmoddi4+0x2aa>
 8086c72:	3b02      	subs	r3, #2
 8086c74:	4439      	add	r1, r7
 8086c76:	1a8a      	subs	r2, r1, r2
 8086c78:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8086c7c:	2100      	movs	r1, #0
 8086c7e:	2e00      	cmp	r6, #0
 8086c80:	d063      	beq.n	8086d4a <__udivmoddi4+0x16a>
 8086c82:	fa22 f20e 	lsr.w	r2, r2, lr
 8086c86:	2300      	movs	r3, #0
 8086c88:	e886 000c 	stmia.w	r6, {r2, r3}
 8086c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8086c90:	428b      	cmp	r3, r1
 8086c92:	d907      	bls.n	8086ca4 <__udivmoddi4+0xc4>
 8086c94:	2e00      	cmp	r6, #0
 8086c96:	d056      	beq.n	8086d46 <__udivmoddi4+0x166>
 8086c98:	2100      	movs	r1, #0
 8086c9a:	e886 0011 	stmia.w	r6, {r0, r4}
 8086c9e:	4608      	mov	r0, r1
 8086ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8086ca4:	fab3 f183 	clz	r1, r3
 8086ca8:	2900      	cmp	r1, #0
 8086caa:	f040 8093 	bne.w	8086dd4 <__udivmoddi4+0x1f4>
 8086cae:	42a3      	cmp	r3, r4
 8086cb0:	d302      	bcc.n	8086cb8 <__udivmoddi4+0xd8>
 8086cb2:	4282      	cmp	r2, r0
 8086cb4:	f200 80fe 	bhi.w	8086eb4 <__udivmoddi4+0x2d4>
 8086cb8:	1a85      	subs	r5, r0, r2
 8086cba:	eb64 0303 	sbc.w	r3, r4, r3
 8086cbe:	469c      	mov	ip, r3
 8086cc0:	2001      	movs	r0, #1
 8086cc2:	2e00      	cmp	r6, #0
 8086cc4:	d041      	beq.n	8086d4a <__udivmoddi4+0x16a>
 8086cc6:	e886 1020 	stmia.w	r6, {r5, ip}
 8086cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8086cce:	b912      	cbnz	r2, 8086cd6 <__udivmoddi4+0xf6>
 8086cd0:	2701      	movs	r7, #1
 8086cd2:	fbb7 f7f2 	udiv	r7, r7, r2
 8086cd6:	fab7 fe87 	clz	lr, r7
 8086cda:	f1be 0f00 	cmp.w	lr, #0
 8086cde:	d136      	bne.n	8086d4e <__udivmoddi4+0x16e>
 8086ce0:	1be4      	subs	r4, r4, r7
 8086ce2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8086ce6:	fa1f f987 	uxth.w	r9, r7
 8086cea:	2101      	movs	r1, #1
 8086cec:	fbb4 f3f8 	udiv	r3, r4, r8
 8086cf0:	fb08 4413 	mls	r4, r8, r3, r4
 8086cf4:	fb09 f203 	mul.w	r2, r9, r3
 8086cf8:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8086cfc:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 8086d00:	42a2      	cmp	r2, r4
 8086d02:	d907      	bls.n	8086d14 <__udivmoddi4+0x134>
 8086d04:	19e4      	adds	r4, r4, r7
 8086d06:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8086d0a:	d202      	bcs.n	8086d12 <__udivmoddi4+0x132>
 8086d0c:	42a2      	cmp	r2, r4
 8086d0e:	f200 80d3 	bhi.w	8086eb8 <__udivmoddi4+0x2d8>
 8086d12:	4603      	mov	r3, r0
 8086d14:	1aa4      	subs	r4, r4, r2
 8086d16:	fbb4 f0f8 	udiv	r0, r4, r8
 8086d1a:	fb08 4810 	mls	r8, r8, r0, r4
 8086d1e:	fb09 f900 	mul.w	r9, r9, r0
 8086d22:	b2ac      	uxth	r4, r5
 8086d24:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 8086d28:	4591      	cmp	r9, r2
 8086d2a:	d907      	bls.n	8086d3c <__udivmoddi4+0x15c>
 8086d2c:	19d2      	adds	r2, r2, r7
 8086d2e:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8086d32:	d202      	bcs.n	8086d3a <__udivmoddi4+0x15a>
 8086d34:	4591      	cmp	r9, r2
 8086d36:	f200 80ba 	bhi.w	8086eae <__udivmoddi4+0x2ce>
 8086d3a:	4620      	mov	r0, r4
 8086d3c:	ebc9 0202 	rsb	r2, r9, r2
 8086d40:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8086d44:	e79b      	b.n	8086c7e <__udivmoddi4+0x9e>
 8086d46:	4631      	mov	r1, r6
 8086d48:	4630      	mov	r0, r6
 8086d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8086d4e:	fa07 f70e 	lsl.w	r7, r7, lr
 8086d52:	f1ce 0c20 	rsb	ip, lr, #32
 8086d56:	fa24 f30c 	lsr.w	r3, r4, ip
 8086d5a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8086d5e:	fbb3 faf8 	udiv	sl, r3, r8
 8086d62:	fa1f f987 	uxth.w	r9, r7
 8086d66:	fb08 351a 	mls	r5, r8, sl, r3
 8086d6a:	fa20 fc0c 	lsr.w	ip, r0, ip
 8086d6e:	fa04 f40e 	lsl.w	r4, r4, lr
 8086d72:	fb0a fb09 	mul.w	fp, sl, r9
 8086d76:	ea4c 0c04 	orr.w	ip, ip, r4
 8086d7a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8086d7e:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 8086d82:	459b      	cmp	fp, r3
 8086d84:	fa00 f50e 	lsl.w	r5, r0, lr
 8086d88:	d90a      	bls.n	8086da0 <__udivmoddi4+0x1c0>
 8086d8a:	19db      	adds	r3, r3, r7
 8086d8c:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 8086d90:	f080 808b 	bcs.w	8086eaa <__udivmoddi4+0x2ca>
 8086d94:	459b      	cmp	fp, r3
 8086d96:	f240 8088 	bls.w	8086eaa <__udivmoddi4+0x2ca>
 8086d9a:	f1aa 0a02 	sub.w	sl, sl, #2
 8086d9e:	443b      	add	r3, r7
 8086da0:	ebcb 0303 	rsb	r3, fp, r3
 8086da4:	fbb3 f0f8 	udiv	r0, r3, r8
 8086da8:	fb08 3310 	mls	r3, r8, r0, r3
 8086dac:	fb00 f409 	mul.w	r4, r0, r9
 8086db0:	fa1f fc8c 	uxth.w	ip, ip
 8086db4:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 8086db8:	429c      	cmp	r4, r3
 8086dba:	d907      	bls.n	8086dcc <__udivmoddi4+0x1ec>
 8086dbc:	19db      	adds	r3, r3, r7
 8086dbe:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8086dc2:	d26e      	bcs.n	8086ea2 <__udivmoddi4+0x2c2>
 8086dc4:	429c      	cmp	r4, r3
 8086dc6:	d96c      	bls.n	8086ea2 <__udivmoddi4+0x2c2>
 8086dc8:	3802      	subs	r0, #2
 8086dca:	443b      	add	r3, r7
 8086dcc:	1b1c      	subs	r4, r3, r4
 8086dce:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 8086dd2:	e78b      	b.n	8086cec <__udivmoddi4+0x10c>
 8086dd4:	f1c1 0e20 	rsb	lr, r1, #32
 8086dd8:	408b      	lsls	r3, r1
 8086dda:	fa22 fc0e 	lsr.w	ip, r2, lr
 8086dde:	ea4c 0c03 	orr.w	ip, ip, r3
 8086de2:	fa24 f70e 	lsr.w	r7, r4, lr
 8086de6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8086dea:	fbb7 faf9 	udiv	sl, r7, r9
 8086dee:	fa1f f38c 	uxth.w	r3, ip
 8086df2:	fb09 771a 	mls	r7, r9, sl, r7
 8086df6:	fa20 f80e 	lsr.w	r8, r0, lr
 8086dfa:	408c      	lsls	r4, r1
 8086dfc:	fb0a f503 	mul.w	r5, sl, r3
 8086e00:	ea48 0404 	orr.w	r4, r8, r4
 8086e04:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8086e08:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 8086e0c:	42bd      	cmp	r5, r7
 8086e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8086e12:	fa00 fb01 	lsl.w	fp, r0, r1
 8086e16:	d909      	bls.n	8086e2c <__udivmoddi4+0x24c>
 8086e18:	eb17 070c 	adds.w	r7, r7, ip
 8086e1c:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
 8086e20:	d241      	bcs.n	8086ea6 <__udivmoddi4+0x2c6>
 8086e22:	42bd      	cmp	r5, r7
 8086e24:	d93f      	bls.n	8086ea6 <__udivmoddi4+0x2c6>
 8086e26:	f1aa 0a02 	sub.w	sl, sl, #2
 8086e2a:	4467      	add	r7, ip
 8086e2c:	1b7f      	subs	r7, r7, r5
 8086e2e:	fbb7 f5f9 	udiv	r5, r7, r9
 8086e32:	fb09 7715 	mls	r7, r9, r5, r7
 8086e36:	fb05 f303 	mul.w	r3, r5, r3
 8086e3a:	b2a4      	uxth	r4, r4
 8086e3c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8086e40:	42bb      	cmp	r3, r7
 8086e42:	d908      	bls.n	8086e56 <__udivmoddi4+0x276>
 8086e44:	eb17 070c 	adds.w	r7, r7, ip
 8086e48:	f105 30ff 	add.w	r0, r5, #4294967295	; 0xffffffff
 8086e4c:	d227      	bcs.n	8086e9e <__udivmoddi4+0x2be>
 8086e4e:	42bb      	cmp	r3, r7
 8086e50:	d925      	bls.n	8086e9e <__udivmoddi4+0x2be>
 8086e52:	3d02      	subs	r5, #2
 8086e54:	4467      	add	r7, ip
 8086e56:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 8086e5a:	fba0 8902 	umull	r8, r9, r0, r2
 8086e5e:	1aff      	subs	r7, r7, r3
 8086e60:	454f      	cmp	r7, r9
 8086e62:	4645      	mov	r5, r8
 8086e64:	464c      	mov	r4, r9
 8086e66:	d314      	bcc.n	8086e92 <__udivmoddi4+0x2b2>
 8086e68:	d029      	beq.n	8086ebe <__udivmoddi4+0x2de>
 8086e6a:	b366      	cbz	r6, 8086ec6 <__udivmoddi4+0x2e6>
 8086e6c:	ebbb 0305 	subs.w	r3, fp, r5
 8086e70:	eb67 0704 	sbc.w	r7, r7, r4
 8086e74:	fa07 fe0e 	lsl.w	lr, r7, lr
 8086e78:	40cb      	lsrs	r3, r1
 8086e7a:	40cf      	lsrs	r7, r1
 8086e7c:	ea4e 0303 	orr.w	r3, lr, r3
 8086e80:	e886 0088 	stmia.w	r6, {r3, r7}
 8086e84:	2100      	movs	r1, #0
 8086e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8086e8a:	4623      	mov	r3, r4
 8086e8c:	e6f3      	b.n	8086c76 <__udivmoddi4+0x96>
 8086e8e:	4618      	mov	r0, r3
 8086e90:	e6da      	b.n	8086c48 <__udivmoddi4+0x68>
 8086e92:	ebb8 0502 	subs.w	r5, r8, r2
 8086e96:	eb69 040c 	sbc.w	r4, r9, ip
 8086e9a:	3801      	subs	r0, #1
 8086e9c:	e7e5      	b.n	8086e6a <__udivmoddi4+0x28a>
 8086e9e:	4605      	mov	r5, r0
 8086ea0:	e7d9      	b.n	8086e56 <__udivmoddi4+0x276>
 8086ea2:	4610      	mov	r0, r2
 8086ea4:	e792      	b.n	8086dcc <__udivmoddi4+0x1ec>
 8086ea6:	4682      	mov	sl, r0
 8086ea8:	e7c0      	b.n	8086e2c <__udivmoddi4+0x24c>
 8086eaa:	4692      	mov	sl, r2
 8086eac:	e778      	b.n	8086da0 <__udivmoddi4+0x1c0>
 8086eae:	3802      	subs	r0, #2
 8086eb0:	443a      	add	r2, r7
 8086eb2:	e743      	b.n	8086d3c <__udivmoddi4+0x15c>
 8086eb4:	4608      	mov	r0, r1
 8086eb6:	e704      	b.n	8086cc2 <__udivmoddi4+0xe2>
 8086eb8:	3b02      	subs	r3, #2
 8086eba:	443c      	add	r4, r7
 8086ebc:	e72a      	b.n	8086d14 <__udivmoddi4+0x134>
 8086ebe:	45c3      	cmp	fp, r8
 8086ec0:	d3e7      	bcc.n	8086e92 <__udivmoddi4+0x2b2>
 8086ec2:	463c      	mov	r4, r7
 8086ec4:	e7d1      	b.n	8086e6a <__udivmoddi4+0x28a>
 8086ec6:	4631      	mov	r1, r6
 8086ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08086ecc <__aeabi_idiv0>:
 8086ecc:	4770      	bx	lr
 8086ece:	bf00      	nop

08086ed0 <asctime>:
 8086ed0:	4b09      	ldr	r3, [pc, #36]	; (8086ef8 <asctime+0x28>)
 8086ed2:	b570      	push	{r4, r5, r6, lr}
 8086ed4:	681c      	ldr	r4, [r3, #0]
 8086ed6:	4606      	mov	r6, r0
 8086ed8:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8086eda:	b93d      	cbnz	r5, 8086eec <asctime+0x1c>
 8086edc:	201a      	movs	r0, #26
 8086ede:	f7fb fe09 	bl	8082af4 <malloc>
 8086ee2:	221a      	movs	r2, #26
 8086ee4:	6420      	str	r0, [r4, #64]	; 0x40
 8086ee6:	4629      	mov	r1, r5
 8086ee8:	f000 f943 	bl	8087172 <memset>
 8086eec:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8086eee:	4630      	mov	r0, r6
 8086ef0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8086ef4:	f000 b802 	b.w	8086efc <asctime_r>
 8086ef8:	20000104 	.word	0x20000104

08086efc <asctime_r>:
 8086efc:	b510      	push	{r4, lr}
 8086efe:	460c      	mov	r4, r1
 8086f00:	6941      	ldr	r1, [r0, #20]
 8086f02:	b086      	sub	sp, #24
 8086f04:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8086f08:	6903      	ldr	r3, [r0, #16]
 8086f0a:	6982      	ldr	r2, [r0, #24]
 8086f0c:	9104      	str	r1, [sp, #16]
 8086f0e:	6801      	ldr	r1, [r0, #0]
 8086f10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8086f14:	9103      	str	r1, [sp, #12]
 8086f16:	6841      	ldr	r1, [r0, #4]
 8086f18:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8086f1c:	9102      	str	r1, [sp, #8]
 8086f1e:	6881      	ldr	r1, [r0, #8]
 8086f20:	9101      	str	r1, [sp, #4]
 8086f22:	68c1      	ldr	r1, [r0, #12]
 8086f24:	4620      	mov	r0, r4
 8086f26:	9100      	str	r1, [sp, #0]
 8086f28:	4904      	ldr	r1, [pc, #16]	; (8086f3c <asctime_r+0x40>)
 8086f2a:	440b      	add	r3, r1
 8086f2c:	4904      	ldr	r1, [pc, #16]	; (8086f40 <asctime_r+0x44>)
 8086f2e:	440a      	add	r2, r1
 8086f30:	4904      	ldr	r1, [pc, #16]	; (8086f44 <asctime_r+0x48>)
 8086f32:	f7fb fdf7 	bl	8082b24 <siprintf>
 8086f36:	4620      	mov	r0, r4
 8086f38:	b006      	add	sp, #24
 8086f3a:	bd10      	pop	{r4, pc}
 8086f3c:	0808820d 	.word	0x0808820d
 8086f40:	080881f8 	.word	0x080881f8
 8086f44:	08088231 	.word	0x08088231

08086f48 <atoi>:
 8086f48:	220a      	movs	r2, #10
 8086f4a:	2100      	movs	r1, #0
 8086f4c:	f000 ba26 	b.w	808739c <strtol>

08086f50 <__cxa_atexit>:
 8086f50:	b510      	push	{r4, lr}
 8086f52:	4c05      	ldr	r4, [pc, #20]	; (8086f68 <__cxa_atexit+0x18>)
 8086f54:	4613      	mov	r3, r2
 8086f56:	b12c      	cbz	r4, 8086f64 <__cxa_atexit+0x14>
 8086f58:	460a      	mov	r2, r1
 8086f5a:	4601      	mov	r1, r0
 8086f5c:	2002      	movs	r0, #2
 8086f5e:	f3af 8000 	nop.w
 8086f62:	bd10      	pop	{r4, pc}
 8086f64:	4620      	mov	r0, r4
 8086f66:	bd10      	pop	{r4, pc}
 8086f68:	00000000 	.word	0x00000000

08086f6c <localtime>:
 8086f6c:	b538      	push	{r3, r4, r5, lr}
 8086f6e:	4b07      	ldr	r3, [pc, #28]	; (8086f8c <localtime+0x20>)
 8086f70:	4605      	mov	r5, r0
 8086f72:	681c      	ldr	r4, [r3, #0]
 8086f74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8086f76:	b91b      	cbnz	r3, 8086f80 <localtime+0x14>
 8086f78:	2024      	movs	r0, #36	; 0x24
 8086f7a:	f7fb fdbb 	bl	8082af4 <malloc>
 8086f7e:	63e0      	str	r0, [r4, #60]	; 0x3c
 8086f80:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8086f82:	4628      	mov	r0, r5
 8086f84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8086f88:	f000 b802 	b.w	8086f90 <localtime_r>
 8086f8c:	20000104 	.word	0x20000104

08086f90 <localtime_r>:
 8086f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8086f94:	460c      	mov	r4, r1
 8086f96:	4680      	mov	r8, r0
 8086f98:	f000 fd06 	bl	80879a8 <__gettzinfo>
 8086f9c:	4621      	mov	r1, r4
 8086f9e:	4607      	mov	r7, r0
 8086fa0:	4640      	mov	r0, r8
 8086fa2:	f000 fd05 	bl	80879b0 <gmtime_r>
 8086fa6:	6946      	ldr	r6, [r0, #20]
 8086fa8:	4604      	mov	r4, r0
 8086faa:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8086fae:	07b3      	lsls	r3, r6, #30
 8086fb0:	d105      	bne.n	8086fbe <localtime_r+0x2e>
 8086fb2:	2264      	movs	r2, #100	; 0x64
 8086fb4:	fb96 f3f2 	sdiv	r3, r6, r2
 8086fb8:	fb02 6313 	mls	r3, r2, r3, r6
 8086fbc:	b94b      	cbnz	r3, 8086fd2 <localtime_r+0x42>
 8086fbe:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8086fc2:	fb96 f3f5 	sdiv	r3, r6, r5
 8086fc6:	fb05 6513 	mls	r5, r5, r3, r6
 8086fca:	fab5 f385 	clz	r3, r5
 8086fce:	095b      	lsrs	r3, r3, #5
 8086fd0:	e000      	b.n	8086fd4 <localtime_r+0x44>
 8086fd2:	2301      	movs	r3, #1
 8086fd4:	4a5f      	ldr	r2, [pc, #380]	; (8087154 <localtime_r+0x1c4>)
 8086fd6:	2530      	movs	r5, #48	; 0x30
 8086fd8:	fb05 2503 	mla	r5, r5, r3, r2
 8086fdc:	f000 fb18 	bl	8087610 <__tz_lock>
 8086fe0:	f000 fb18 	bl	8087614 <_tzset_unlocked>
 8086fe4:	4b5c      	ldr	r3, [pc, #368]	; (8087158 <localtime_r+0x1c8>)
 8086fe6:	681b      	ldr	r3, [r3, #0]
 8086fe8:	b1f3      	cbz	r3, 8087028 <localtime_r+0x98>
 8086fea:	687b      	ldr	r3, [r7, #4]
 8086fec:	429e      	cmp	r6, r3
 8086fee:	d105      	bne.n	8086ffc <localtime_r+0x6c>
 8086ff0:	6839      	ldr	r1, [r7, #0]
 8086ff2:	f8d8 3000 	ldr.w	r3, [r8]
 8086ff6:	69fa      	ldr	r2, [r7, #28]
 8086ff8:	b941      	cbnz	r1, 808700c <localtime_r+0x7c>
 8086ffa:	e00a      	b.n	8087012 <localtime_r+0x82>
 8086ffc:	4630      	mov	r0, r6
 8086ffe:	f000 fa5f 	bl	80874c0 <__tzcalc_limits>
 8087002:	2800      	cmp	r0, #0
 8087004:	d1f4      	bne.n	8086ff0 <localtime_r+0x60>
 8087006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 808700a:	e00d      	b.n	8087028 <localtime_r+0x98>
 808700c:	4293      	cmp	r3, r2
 808700e:	db08      	blt.n	8087022 <localtime_r+0x92>
 8087010:	e001      	b.n	8087016 <localtime_r+0x86>
 8087012:	4293      	cmp	r3, r2
 8087014:	da07      	bge.n	8087026 <localtime_r+0x96>
 8087016:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8087018:	4293      	cmp	r3, r2
 808701a:	bfac      	ite	ge
 808701c:	2300      	movge	r3, #0
 808701e:	2301      	movlt	r3, #1
 8087020:	e002      	b.n	8087028 <localtime_r+0x98>
 8087022:	2300      	movs	r3, #0
 8087024:	e000      	b.n	8087028 <localtime_r+0x98>
 8087026:	2301      	movs	r3, #1
 8087028:	6223      	str	r3, [r4, #32]
 808702a:	6a23      	ldr	r3, [r4, #32]
 808702c:	203c      	movs	r0, #60	; 0x3c
 808702e:	2b01      	cmp	r3, #1
 8087030:	bf0c      	ite	eq
 8087032:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 8087034:	6a39      	ldrne	r1, [r7, #32]
 8087036:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808703a:	fb91 f6f3 	sdiv	r6, r1, r3
 808703e:	fb03 1316 	mls	r3, r3, r6, r1
 8087042:	fb93 f2f0 	sdiv	r2, r3, r0
 8087046:	fb00 3012 	mls	r0, r0, r2, r3
 808704a:	6861      	ldr	r1, [r4, #4]
 808704c:	6823      	ldr	r3, [r4, #0]
 808704e:	1a89      	subs	r1, r1, r2
 8087050:	68a2      	ldr	r2, [r4, #8]
 8087052:	1a1b      	subs	r3, r3, r0
 8087054:	1b92      	subs	r2, r2, r6
 8087056:	2b3b      	cmp	r3, #59	; 0x3b
 8087058:	6023      	str	r3, [r4, #0]
 808705a:	6061      	str	r1, [r4, #4]
 808705c:	60a2      	str	r2, [r4, #8]
 808705e:	dd03      	ble.n	8087068 <localtime_r+0xd8>
 8087060:	3101      	adds	r1, #1
 8087062:	6061      	str	r1, [r4, #4]
 8087064:	3b3c      	subs	r3, #60	; 0x3c
 8087066:	e004      	b.n	8087072 <localtime_r+0xe2>
 8087068:	2b00      	cmp	r3, #0
 808706a:	da03      	bge.n	8087074 <localtime_r+0xe4>
 808706c:	3901      	subs	r1, #1
 808706e:	6061      	str	r1, [r4, #4]
 8087070:	333c      	adds	r3, #60	; 0x3c
 8087072:	6023      	str	r3, [r4, #0]
 8087074:	6863      	ldr	r3, [r4, #4]
 8087076:	2b3b      	cmp	r3, #59	; 0x3b
 8087078:	dd03      	ble.n	8087082 <localtime_r+0xf2>
 808707a:	3201      	adds	r2, #1
 808707c:	60a2      	str	r2, [r4, #8]
 808707e:	3b3c      	subs	r3, #60	; 0x3c
 8087080:	e004      	b.n	808708c <localtime_r+0xfc>
 8087082:	2b00      	cmp	r3, #0
 8087084:	da03      	bge.n	808708e <localtime_r+0xfe>
 8087086:	3a01      	subs	r2, #1
 8087088:	60a2      	str	r2, [r4, #8]
 808708a:	333c      	adds	r3, #60	; 0x3c
 808708c:	6063      	str	r3, [r4, #4]
 808708e:	68a3      	ldr	r3, [r4, #8]
 8087090:	2b17      	cmp	r3, #23
 8087092:	dd22      	ble.n	80870da <localtime_r+0x14a>
 8087094:	69e2      	ldr	r2, [r4, #28]
 8087096:	3b18      	subs	r3, #24
 8087098:	3201      	adds	r2, #1
 808709a:	61e2      	str	r2, [r4, #28]
 808709c:	69a2      	ldr	r2, [r4, #24]
 808709e:	60a3      	str	r3, [r4, #8]
 80870a0:	3201      	adds	r2, #1
 80870a2:	2a06      	cmp	r2, #6
 80870a4:	bfc8      	it	gt
 80870a6:	2200      	movgt	r2, #0
 80870a8:	61a2      	str	r2, [r4, #24]
 80870aa:	68e2      	ldr	r2, [r4, #12]
 80870ac:	6923      	ldr	r3, [r4, #16]
 80870ae:	3201      	adds	r2, #1
 80870b0:	60e2      	str	r2, [r4, #12]
 80870b2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80870b6:	428a      	cmp	r2, r1
 80870b8:	dd46      	ble.n	8087148 <localtime_r+0x1b8>
 80870ba:	3301      	adds	r3, #1
 80870bc:	2b0c      	cmp	r3, #12
 80870be:	bf08      	it	eq
 80870c0:	6963      	ldreq	r3, [r4, #20]
 80870c2:	eba2 0201 	sub.w	r2, r2, r1
 80870c6:	60e2      	str	r2, [r4, #12]
 80870c8:	bf05      	ittet	eq
 80870ca:	3301      	addeq	r3, #1
 80870cc:	2200      	moveq	r2, #0
 80870ce:	6123      	strne	r3, [r4, #16]
 80870d0:	6122      	streq	r2, [r4, #16]
 80870d2:	bf04      	itt	eq
 80870d4:	6163      	streq	r3, [r4, #20]
 80870d6:	61e2      	streq	r2, [r4, #28]
 80870d8:	e036      	b.n	8087148 <localtime_r+0x1b8>
 80870da:	2b00      	cmp	r3, #0
 80870dc:	da34      	bge.n	8087148 <localtime_r+0x1b8>
 80870de:	69e2      	ldr	r2, [r4, #28]
 80870e0:	3318      	adds	r3, #24
 80870e2:	3a01      	subs	r2, #1
 80870e4:	61e2      	str	r2, [r4, #28]
 80870e6:	69a2      	ldr	r2, [r4, #24]
 80870e8:	60a3      	str	r3, [r4, #8]
 80870ea:	3a01      	subs	r2, #1
 80870ec:	bf48      	it	mi
 80870ee:	2206      	movmi	r2, #6
 80870f0:	61a2      	str	r2, [r4, #24]
 80870f2:	68e2      	ldr	r2, [r4, #12]
 80870f4:	3a01      	subs	r2, #1
 80870f6:	60e2      	str	r2, [r4, #12]
 80870f8:	bb32      	cbnz	r2, 8087148 <localtime_r+0x1b8>
 80870fa:	6923      	ldr	r3, [r4, #16]
 80870fc:	3b01      	subs	r3, #1
 80870fe:	d401      	bmi.n	8087104 <localtime_r+0x174>
 8087100:	6123      	str	r3, [r4, #16]
 8087102:	e01d      	b.n	8087140 <localtime_r+0x1b0>
 8087104:	230b      	movs	r3, #11
 8087106:	6123      	str	r3, [r4, #16]
 8087108:	6963      	ldr	r3, [r4, #20]
 808710a:	1e5a      	subs	r2, r3, #1
 808710c:	f012 0f03 	tst.w	r2, #3
 8087110:	6162      	str	r2, [r4, #20]
 8087112:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8087116:	d105      	bne.n	8087124 <localtime_r+0x194>
 8087118:	2164      	movs	r1, #100	; 0x64
 808711a:	fb93 f2f1 	sdiv	r2, r3, r1
 808711e:	fb01 3212 	mls	r2, r1, r2, r3
 8087122:	b94a      	cbnz	r2, 8087138 <localtime_r+0x1a8>
 8087124:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8087128:	fb93 f2f1 	sdiv	r2, r3, r1
 808712c:	fb01 3312 	mls	r3, r1, r2, r3
 8087130:	fab3 f383 	clz	r3, r3
 8087134:	095b      	lsrs	r3, r3, #5
 8087136:	e000      	b.n	808713a <localtime_r+0x1aa>
 8087138:	2301      	movs	r3, #1
 808713a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 808713e:	61e3      	str	r3, [r4, #28]
 8087140:	6923      	ldr	r3, [r4, #16]
 8087142:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8087146:	60e3      	str	r3, [r4, #12]
 8087148:	f000 fa63 	bl	8087612 <__tz_unlock>
 808714c:	4620      	mov	r0, r4
 808714e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8087152:	bf00      	nop
 8087154:	080883b4 	.word	0x080883b4
 8087158:	20000938 	.word	0x20000938

0808715c <memcpy>:
 808715c:	b510      	push	{r4, lr}
 808715e:	1e43      	subs	r3, r0, #1
 8087160:	440a      	add	r2, r1
 8087162:	4291      	cmp	r1, r2
 8087164:	d004      	beq.n	8087170 <memcpy+0x14>
 8087166:	f811 4b01 	ldrb.w	r4, [r1], #1
 808716a:	f803 4f01 	strb.w	r4, [r3, #1]!
 808716e:	e7f8      	b.n	8087162 <memcpy+0x6>
 8087170:	bd10      	pop	{r4, pc}

08087172 <memset>:
 8087172:	4603      	mov	r3, r0
 8087174:	4402      	add	r2, r0
 8087176:	4293      	cmp	r3, r2
 8087178:	d002      	beq.n	8087180 <memset+0xe>
 808717a:	f803 1b01 	strb.w	r1, [r3], #1
 808717e:	e7fa      	b.n	8087176 <memset+0x4>
 8087180:	4770      	bx	lr
	...

08087184 <srand>:
 8087184:	b538      	push	{r3, r4, r5, lr}
 8087186:	4b12      	ldr	r3, [pc, #72]	; (80871d0 <srand+0x4c>)
 8087188:	4605      	mov	r5, r0
 808718a:	681c      	ldr	r4, [r3, #0]
 808718c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808718e:	b9d3      	cbnz	r3, 80871c6 <srand+0x42>
 8087190:	2018      	movs	r0, #24
 8087192:	f7fb fcaf 	bl	8082af4 <malloc>
 8087196:	f243 330e 	movw	r3, #13070	; 0x330e
 808719a:	63a0      	str	r0, [r4, #56]	; 0x38
 808719c:	8003      	strh	r3, [r0, #0]
 808719e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80871a2:	8043      	strh	r3, [r0, #2]
 80871a4:	f241 2334 	movw	r3, #4660	; 0x1234
 80871a8:	8083      	strh	r3, [r0, #4]
 80871aa:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80871ae:	80c3      	strh	r3, [r0, #6]
 80871b0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80871b4:	8103      	strh	r3, [r0, #8]
 80871b6:	2305      	movs	r3, #5
 80871b8:	8143      	strh	r3, [r0, #10]
 80871ba:	230b      	movs	r3, #11
 80871bc:	8183      	strh	r3, [r0, #12]
 80871be:	2201      	movs	r2, #1
 80871c0:	2300      	movs	r3, #0
 80871c2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80871c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80871c8:	2200      	movs	r2, #0
 80871ca:	611d      	str	r5, [r3, #16]
 80871cc:	615a      	str	r2, [r3, #20]
 80871ce:	bd38      	pop	{r3, r4, r5, pc}
 80871d0:	20000104 	.word	0x20000104

080871d4 <strcmp>:
 80871d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80871d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80871dc:	2a01      	cmp	r2, #1
 80871de:	bf28      	it	cs
 80871e0:	429a      	cmpcs	r2, r3
 80871e2:	d0f7      	beq.n	80871d4 <strcmp>
 80871e4:	1ad0      	subs	r0, r2, r3
 80871e6:	4770      	bx	lr

080871e8 <strcpy>:
 80871e8:	4603      	mov	r3, r0
 80871ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80871ee:	f803 2b01 	strb.w	r2, [r3], #1
 80871f2:	2a00      	cmp	r2, #0
 80871f4:	d1f9      	bne.n	80871ea <strcpy+0x2>
 80871f6:	4770      	bx	lr

080871f8 <strdup>:
 80871f8:	4b02      	ldr	r3, [pc, #8]	; (8087204 <strdup+0xc>)
 80871fa:	4601      	mov	r1, r0
 80871fc:	6818      	ldr	r0, [r3, #0]
 80871fe:	f000 b803 	b.w	8087208 <_strdup_r>
 8087202:	bf00      	nop
 8087204:	20000104 	.word	0x20000104

08087208 <_strdup_r>:
 8087208:	b570      	push	{r4, r5, r6, lr}
 808720a:	4606      	mov	r6, r0
 808720c:	4608      	mov	r0, r1
 808720e:	460c      	mov	r4, r1
 8087210:	f000 f80d 	bl	808722e <strlen>
 8087214:	1c45      	adds	r5, r0, #1
 8087216:	4629      	mov	r1, r5
 8087218:	4630      	mov	r0, r6
 808721a:	f7fb fca3 	bl	8082b64 <_malloc_r>
 808721e:	4606      	mov	r6, r0
 8087220:	b118      	cbz	r0, 808722a <_strdup_r+0x22>
 8087222:	462a      	mov	r2, r5
 8087224:	4621      	mov	r1, r4
 8087226:	f7ff ff99 	bl	808715c <memcpy>
 808722a:	4630      	mov	r0, r6
 808722c:	bd70      	pop	{r4, r5, r6, pc}

0808722e <strlen>:
 808722e:	4603      	mov	r3, r0
 8087230:	f813 2b01 	ldrb.w	r2, [r3], #1
 8087234:	2a00      	cmp	r2, #0
 8087236:	d1fb      	bne.n	8087230 <strlen+0x2>
 8087238:	1a18      	subs	r0, r3, r0
 808723a:	3801      	subs	r0, #1
 808723c:	4770      	bx	lr

0808723e <strncmp>:
 808723e:	b530      	push	{r4, r5, lr}
 8087240:	b182      	cbz	r2, 8087264 <strncmp+0x26>
 8087242:	1e45      	subs	r5, r0, #1
 8087244:	3901      	subs	r1, #1
 8087246:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 808724a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808724e:	42a3      	cmp	r3, r4
 8087250:	d106      	bne.n	8087260 <strncmp+0x22>
 8087252:	43ec      	mvns	r4, r5
 8087254:	4414      	add	r4, r2
 8087256:	42e0      	cmn	r0, r4
 8087258:	d001      	beq.n	808725e <strncmp+0x20>
 808725a:	2b00      	cmp	r3, #0
 808725c:	d1f3      	bne.n	8087246 <strncmp+0x8>
 808725e:	461c      	mov	r4, r3
 8087260:	1b18      	subs	r0, r3, r4
 8087262:	bd30      	pop	{r4, r5, pc}
 8087264:	4610      	mov	r0, r2
 8087266:	bd30      	pop	{r4, r5, pc}

08087268 <strncpy>:
 8087268:	4603      	mov	r3, r0
 808726a:	b510      	push	{r4, lr}
 808726c:	b142      	cbz	r2, 8087280 <strncpy+0x18>
 808726e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8087272:	3a01      	subs	r2, #1
 8087274:	f803 4b01 	strb.w	r4, [r3], #1
 8087278:	2c00      	cmp	r4, #0
 808727a:	d1f7      	bne.n	808726c <strncpy+0x4>
 808727c:	441a      	add	r2, r3
 808727e:	e000      	b.n	8087282 <strncpy+0x1a>
 8087280:	bd10      	pop	{r4, pc}
 8087282:	4293      	cmp	r3, r2
 8087284:	d002      	beq.n	808728c <strncpy+0x24>
 8087286:	f803 4b01 	strb.w	r4, [r3], #1
 808728a:	e7fa      	b.n	8087282 <strncpy+0x1a>
 808728c:	bd10      	pop	{r4, pc}
	...

08087290 <_strtol_r>:
 8087290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8087294:	460f      	mov	r7, r1
 8087296:	4680      	mov	r8, r0
 8087298:	483f      	ldr	r0, [pc, #252]	; (8087398 <_strtol_r+0x108>)
 808729a:	f8d0 9000 	ldr.w	r9, [r0]
 808729e:	463d      	mov	r5, r7
 80872a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80872a4:	eb09 0004 	add.w	r0, r9, r4
 80872a8:	7840      	ldrb	r0, [r0, #1]
 80872aa:	f000 0008 	and.w	r0, r0, #8
 80872ae:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80872b2:	b108      	cbz	r0, 80872b8 <_strtol_r+0x28>
 80872b4:	462f      	mov	r7, r5
 80872b6:	e7f2      	b.n	808729e <_strtol_r+0xe>
 80872b8:	2c2d      	cmp	r4, #45	; 0x2d
 80872ba:	d103      	bne.n	80872c4 <_strtol_r+0x34>
 80872bc:	1cbd      	adds	r5, r7, #2
 80872be:	787c      	ldrb	r4, [r7, #1]
 80872c0:	2601      	movs	r6, #1
 80872c2:	e003      	b.n	80872cc <_strtol_r+0x3c>
 80872c4:	2c2b      	cmp	r4, #43	; 0x2b
 80872c6:	bf04      	itt	eq
 80872c8:	787c      	ldrbeq	r4, [r7, #1]
 80872ca:	1cbd      	addeq	r5, r7, #2
 80872cc:	b113      	cbz	r3, 80872d4 <_strtol_r+0x44>
 80872ce:	2b10      	cmp	r3, #16
 80872d0:	d10a      	bne.n	80872e8 <_strtol_r+0x58>
 80872d2:	e05b      	b.n	808738c <_strtol_r+0xfc>
 80872d4:	2c30      	cmp	r4, #48	; 0x30
 80872d6:	d157      	bne.n	8087388 <_strtol_r+0xf8>
 80872d8:	7828      	ldrb	r0, [r5, #0]
 80872da:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80872de:	2858      	cmp	r0, #88	; 0x58
 80872e0:	d14d      	bne.n	808737e <_strtol_r+0xee>
 80872e2:	786c      	ldrb	r4, [r5, #1]
 80872e4:	2310      	movs	r3, #16
 80872e6:	3502      	adds	r5, #2
 80872e8:	2e00      	cmp	r6, #0
 80872ea:	bf14      	ite	ne
 80872ec:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80872f0:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80872f4:	fbbc faf3 	udiv	sl, ip, r3
 80872f8:	2700      	movs	r7, #0
 80872fa:	4638      	mov	r0, r7
 80872fc:	fb03 cc1a 	mls	ip, r3, sl, ip
 8087300:	eb09 0e04 	add.w	lr, r9, r4
 8087304:	f89e e001 	ldrb.w	lr, [lr, #1]
 8087308:	f01e 0f04 	tst.w	lr, #4
 808730c:	d001      	beq.n	8087312 <_strtol_r+0x82>
 808730e:	3c30      	subs	r4, #48	; 0x30
 8087310:	e00b      	b.n	808732a <_strtol_r+0x9a>
 8087312:	f01e 0e03 	ands.w	lr, lr, #3
 8087316:	d01b      	beq.n	8087350 <_strtol_r+0xc0>
 8087318:	f1be 0f01 	cmp.w	lr, #1
 808731c:	bf0c      	ite	eq
 808731e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8087322:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8087326:	ebce 0404 	rsb	r4, lr, r4
 808732a:	42a3      	cmp	r3, r4
 808732c:	dd10      	ble.n	8087350 <_strtol_r+0xc0>
 808732e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8087332:	d00a      	beq.n	808734a <_strtol_r+0xba>
 8087334:	4550      	cmp	r0, sl
 8087336:	d806      	bhi.n	8087346 <_strtol_r+0xb6>
 8087338:	d101      	bne.n	808733e <_strtol_r+0xae>
 808733a:	4564      	cmp	r4, ip
 808733c:	dc03      	bgt.n	8087346 <_strtol_r+0xb6>
 808733e:	fb03 4000 	mla	r0, r3, r0, r4
 8087342:	2701      	movs	r7, #1
 8087344:	e001      	b.n	808734a <_strtol_r+0xba>
 8087346:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 808734a:	f815 4b01 	ldrb.w	r4, [r5], #1
 808734e:	e7d7      	b.n	8087300 <_strtol_r+0x70>
 8087350:	1c7b      	adds	r3, r7, #1
 8087352:	d10c      	bne.n	808736e <_strtol_r+0xde>
 8087354:	2e00      	cmp	r6, #0
 8087356:	f04f 0322 	mov.w	r3, #34	; 0x22
 808735a:	bf14      	ite	ne
 808735c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8087360:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8087364:	f8c8 3000 	str.w	r3, [r8]
 8087368:	b92a      	cbnz	r2, 8087376 <_strtol_r+0xe6>
 808736a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808736e:	b106      	cbz	r6, 8087372 <_strtol_r+0xe2>
 8087370:	4240      	negs	r0, r0
 8087372:	b172      	cbz	r2, 8087392 <_strtol_r+0x102>
 8087374:	b107      	cbz	r7, 8087378 <_strtol_r+0xe8>
 8087376:	1e69      	subs	r1, r5, #1
 8087378:	6011      	str	r1, [r2, #0]
 808737a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808737e:	2430      	movs	r4, #48	; 0x30
 8087380:	2b00      	cmp	r3, #0
 8087382:	d1b1      	bne.n	80872e8 <_strtol_r+0x58>
 8087384:	2308      	movs	r3, #8
 8087386:	e7af      	b.n	80872e8 <_strtol_r+0x58>
 8087388:	230a      	movs	r3, #10
 808738a:	e7ad      	b.n	80872e8 <_strtol_r+0x58>
 808738c:	2c30      	cmp	r4, #48	; 0x30
 808738e:	d0a3      	beq.n	80872d8 <_strtol_r+0x48>
 8087390:	e7aa      	b.n	80872e8 <_strtol_r+0x58>
 8087392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8087396:	bf00      	nop
 8087398:	200000a0 	.word	0x200000a0

0808739c <strtol>:
 808739c:	4613      	mov	r3, r2
 808739e:	460a      	mov	r2, r1
 80873a0:	4601      	mov	r1, r0
 80873a2:	4802      	ldr	r0, [pc, #8]	; (80873ac <strtol+0x10>)
 80873a4:	6800      	ldr	r0, [r0, #0]
 80873a6:	f7ff bf73 	b.w	8087290 <_strtol_r>
 80873aa:	bf00      	nop
 80873ac:	20000104 	.word	0x20000104

080873b0 <_strtoul_r>:
 80873b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80873b4:	460e      	mov	r6, r1
 80873b6:	4680      	mov	r8, r0
 80873b8:	483b      	ldr	r0, [pc, #236]	; (80874a8 <_strtoul_r+0xf8>)
 80873ba:	f8d0 9000 	ldr.w	r9, [r0]
 80873be:	4635      	mov	r5, r6
 80873c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80873c4:	eb09 0004 	add.w	r0, r9, r4
 80873c8:	7840      	ldrb	r0, [r0, #1]
 80873ca:	f000 0008 	and.w	r0, r0, #8
 80873ce:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80873d2:	b108      	cbz	r0, 80873d8 <_strtoul_r+0x28>
 80873d4:	462e      	mov	r6, r5
 80873d6:	e7f2      	b.n	80873be <_strtoul_r+0xe>
 80873d8:	2c2d      	cmp	r4, #45	; 0x2d
 80873da:	d103      	bne.n	80873e4 <_strtoul_r+0x34>
 80873dc:	1cb5      	adds	r5, r6, #2
 80873de:	7874      	ldrb	r4, [r6, #1]
 80873e0:	2701      	movs	r7, #1
 80873e2:	e003      	b.n	80873ec <_strtoul_r+0x3c>
 80873e4:	2c2b      	cmp	r4, #43	; 0x2b
 80873e6:	bf04      	itt	eq
 80873e8:	7874      	ldrbeq	r4, [r6, #1]
 80873ea:	1cb5      	addeq	r5, r6, #2
 80873ec:	b113      	cbz	r3, 80873f4 <_strtoul_r+0x44>
 80873ee:	2b10      	cmp	r3, #16
 80873f0:	d10a      	bne.n	8087408 <_strtoul_r+0x58>
 80873f2:	e053      	b.n	808749c <_strtoul_r+0xec>
 80873f4:	2c30      	cmp	r4, #48	; 0x30
 80873f6:	d14f      	bne.n	8087498 <_strtoul_r+0xe8>
 80873f8:	7828      	ldrb	r0, [r5, #0]
 80873fa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80873fe:	2858      	cmp	r0, #88	; 0x58
 8087400:	d145      	bne.n	808748e <_strtoul_r+0xde>
 8087402:	786c      	ldrb	r4, [r5, #1]
 8087404:	2310      	movs	r3, #16
 8087406:	3502      	adds	r5, #2
 8087408:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 808740c:	fbbc fcf3 	udiv	ip, ip, r3
 8087410:	fb03 fa0c 	mul.w	sl, r3, ip
 8087414:	2600      	movs	r6, #0
 8087416:	ea6f 0a0a 	mvn.w	sl, sl
 808741a:	4630      	mov	r0, r6
 808741c:	eb09 0e04 	add.w	lr, r9, r4
 8087420:	f89e e001 	ldrb.w	lr, [lr, #1]
 8087424:	f01e 0f04 	tst.w	lr, #4
 8087428:	d001      	beq.n	808742e <_strtoul_r+0x7e>
 808742a:	3c30      	subs	r4, #48	; 0x30
 808742c:	e00b      	b.n	8087446 <_strtoul_r+0x96>
 808742e:	f01e 0e03 	ands.w	lr, lr, #3
 8087432:	d01a      	beq.n	808746a <_strtoul_r+0xba>
 8087434:	f1be 0f01 	cmp.w	lr, #1
 8087438:	bf0c      	ite	eq
 808743a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 808743e:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8087442:	ebce 0404 	rsb	r4, lr, r4
 8087446:	42a3      	cmp	r3, r4
 8087448:	dd0f      	ble.n	808746a <_strtoul_r+0xba>
 808744a:	2e00      	cmp	r6, #0
 808744c:	db08      	blt.n	8087460 <_strtoul_r+0xb0>
 808744e:	4560      	cmp	r0, ip
 8087450:	d806      	bhi.n	8087460 <_strtoul_r+0xb0>
 8087452:	d101      	bne.n	8087458 <_strtoul_r+0xa8>
 8087454:	4554      	cmp	r4, sl
 8087456:	dc03      	bgt.n	8087460 <_strtoul_r+0xb0>
 8087458:	fb03 4000 	mla	r0, r3, r0, r4
 808745c:	2601      	movs	r6, #1
 808745e:	e001      	b.n	8087464 <_strtoul_r+0xb4>
 8087460:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8087464:	f815 4b01 	ldrb.w	r4, [r5], #1
 8087468:	e7d8      	b.n	808741c <_strtoul_r+0x6c>
 808746a:	2e00      	cmp	r6, #0
 808746c:	da07      	bge.n	808747e <_strtoul_r+0xce>
 808746e:	2322      	movs	r3, #34	; 0x22
 8087470:	f8c8 3000 	str.w	r3, [r8]
 8087474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8087478:	b92a      	cbnz	r2, 8087486 <_strtoul_r+0xd6>
 808747a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808747e:	b107      	cbz	r7, 8087482 <_strtoul_r+0xd2>
 8087480:	4240      	negs	r0, r0
 8087482:	b172      	cbz	r2, 80874a2 <_strtoul_r+0xf2>
 8087484:	b106      	cbz	r6, 8087488 <_strtoul_r+0xd8>
 8087486:	1e69      	subs	r1, r5, #1
 8087488:	6011      	str	r1, [r2, #0]
 808748a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808748e:	2430      	movs	r4, #48	; 0x30
 8087490:	2b00      	cmp	r3, #0
 8087492:	d1b9      	bne.n	8087408 <_strtoul_r+0x58>
 8087494:	2308      	movs	r3, #8
 8087496:	e7b7      	b.n	8087408 <_strtoul_r+0x58>
 8087498:	230a      	movs	r3, #10
 808749a:	e7b5      	b.n	8087408 <_strtoul_r+0x58>
 808749c:	2c30      	cmp	r4, #48	; 0x30
 808749e:	d0ab      	beq.n	80873f8 <_strtoul_r+0x48>
 80874a0:	e7b2      	b.n	8087408 <_strtoul_r+0x58>
 80874a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80874a6:	bf00      	nop
 80874a8:	200000a0 	.word	0x200000a0

080874ac <strtoul>:
 80874ac:	4613      	mov	r3, r2
 80874ae:	460a      	mov	r2, r1
 80874b0:	4601      	mov	r1, r0
 80874b2:	4802      	ldr	r0, [pc, #8]	; (80874bc <strtoul+0x10>)
 80874b4:	6800      	ldr	r0, [r0, #0]
 80874b6:	f7ff bf7b 	b.w	80873b0 <_strtoul_r>
 80874ba:	bf00      	nop
 80874bc:	20000104 	.word	0x20000104

080874c0 <__tzcalc_limits>:
 80874c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80874c4:	4604      	mov	r4, r0
 80874c6:	f000 fa6f 	bl	80879a8 <__gettzinfo>
 80874ca:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80874ce:	429c      	cmp	r4, r3
 80874d0:	f340 8096 	ble.w	8087600 <__tzcalc_limits+0x140>
 80874d4:	f240 156d 	movw	r5, #365	; 0x16d
 80874d8:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80874dc:	18e3      	adds	r3, r4, r3
 80874de:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80874e2:	109b      	asrs	r3, r3, #2
 80874e4:	fb05 3502 	mla	r5, r5, r2, r3
 80874e8:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80874ec:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80874f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80874f4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80874f8:	442b      	add	r3, r5
 80874fa:	18a5      	adds	r5, r4, r2
 80874fc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8087500:	fb94 f7f2 	sdiv	r7, r4, r2
 8087504:	fb95 f5f2 	sdiv	r5, r5, r2
 8087508:	fb02 4717 	mls	r7, r2, r7, r4
 808750c:	441d      	add	r5, r3
 808750e:	2364      	movs	r3, #100	; 0x64
 8087510:	fb94 f6f3 	sdiv	r6, r4, r3
 8087514:	fab7 fe87 	clz	lr, r7
 8087518:	4601      	mov	r1, r0
 808751a:	fb03 4616 	mls	r6, r3, r6, r4
 808751e:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8087522:	9301      	str	r3, [sp, #4]
 8087524:	f004 0303 	and.w	r3, r4, #3
 8087528:	6044      	str	r4, [r0, #4]
 808752a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 808752e:	9300      	str	r3, [sp, #0]
 8087530:	f04f 0c07 	mov.w	ip, #7
 8087534:	7a0b      	ldrb	r3, [r1, #8]
 8087536:	2b4a      	cmp	r3, #74	; 0x4a
 8087538:	d10e      	bne.n	8087558 <__tzcalc_limits+0x98>
 808753a:	694b      	ldr	r3, [r1, #20]
 808753c:	9a00      	ldr	r2, [sp, #0]
 808753e:	18ec      	adds	r4, r5, r3
 8087540:	b902      	cbnz	r2, 8087544 <__tzcalc_limits+0x84>
 8087542:	b906      	cbnz	r6, 8087546 <__tzcalc_limits+0x86>
 8087544:	b927      	cbnz	r7, 8087550 <__tzcalc_limits+0x90>
 8087546:	2b3b      	cmp	r3, #59	; 0x3b
 8087548:	bfd4      	ite	le
 808754a:	2300      	movle	r3, #0
 808754c:	2301      	movgt	r3, #1
 808754e:	e000      	b.n	8087552 <__tzcalc_limits+0x92>
 8087550:	2300      	movs	r3, #0
 8087552:	4423      	add	r3, r4
 8087554:	3b01      	subs	r3, #1
 8087556:	e03f      	b.n	80875d8 <__tzcalc_limits+0x118>
 8087558:	2b44      	cmp	r3, #68	; 0x44
 808755a:	d102      	bne.n	8087562 <__tzcalc_limits+0xa2>
 808755c:	694b      	ldr	r3, [r1, #20]
 808755e:	442b      	add	r3, r5
 8087560:	e03a      	b.n	80875d8 <__tzcalc_limits+0x118>
 8087562:	9b00      	ldr	r3, [sp, #0]
 8087564:	b92b      	cbnz	r3, 8087572 <__tzcalc_limits+0xb2>
 8087566:	2e00      	cmp	r6, #0
 8087568:	bf0c      	ite	eq
 808756a:	46f0      	moveq	r8, lr
 808756c:	f04f 0801 	movne.w	r8, #1
 8087570:	e000      	b.n	8087574 <__tzcalc_limits+0xb4>
 8087572:	46f0      	mov	r8, lr
 8087574:	46a9      	mov	r9, r5
 8087576:	4b24      	ldr	r3, [pc, #144]	; (8087608 <__tzcalc_limits+0x148>)
 8087578:	2230      	movs	r2, #48	; 0x30
 808757a:	fb02 3808 	mla	r8, r2, r8, r3
 808757e:	68cc      	ldr	r4, [r1, #12]
 8087580:	f1a8 0a04 	sub.w	sl, r8, #4
 8087584:	2301      	movs	r3, #1
 8087586:	42a3      	cmp	r3, r4
 8087588:	da04      	bge.n	8087594 <__tzcalc_limits+0xd4>
 808758a:	f85a bf04 	ldr.w	fp, [sl, #4]!
 808758e:	3301      	adds	r3, #1
 8087590:	44d9      	add	r9, fp
 8087592:	e7f8      	b.n	8087586 <__tzcalc_limits+0xc6>
 8087594:	f109 0304 	add.w	r3, r9, #4
 8087598:	fb93 fbfc 	sdiv	fp, r3, ip
 808759c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80875a0:	ebca 0a03 	rsb	sl, sl, r3
 80875a4:	694b      	ldr	r3, [r1, #20]
 80875a6:	2c01      	cmp	r4, #1
 80875a8:	bfb8      	it	lt
 80875aa:	2401      	movlt	r4, #1
 80875ac:	ebb3 0a0a 	subs.w	sl, r3, sl
 80875b0:	690b      	ldr	r3, [r1, #16]
 80875b2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80875b6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80875ba:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80875be:	bf48      	it	mi
 80875c0:	f10a 0a07 	addmi.w	sl, sl, #7
 80875c4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80875c8:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80875cc:	4453      	add	r3, sl
 80875ce:	42a3      	cmp	r3, r4
 80875d0:	db01      	blt.n	80875d6 <__tzcalc_limits+0x116>
 80875d2:	3b07      	subs	r3, #7
 80875d4:	e7fb      	b.n	80875ce <__tzcalc_limits+0x10e>
 80875d6:	444b      	add	r3, r9
 80875d8:	698c      	ldr	r4, [r1, #24]
 80875da:	4a0c      	ldr	r2, [pc, #48]	; (808760c <__tzcalc_limits+0x14c>)
 80875dc:	fb02 4303 	mla	r3, r2, r3, r4
 80875e0:	6a0c      	ldr	r4, [r1, #32]
 80875e2:	4423      	add	r3, r4
 80875e4:	f841 3f1c 	str.w	r3, [r1, #28]!
 80875e8:	9b01      	ldr	r3, [sp, #4]
 80875ea:	4299      	cmp	r1, r3
 80875ec:	d1a2      	bne.n	8087534 <__tzcalc_limits+0x74>
 80875ee:	69c3      	ldr	r3, [r0, #28]
 80875f0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80875f2:	4293      	cmp	r3, r2
 80875f4:	bfac      	ite	ge
 80875f6:	2300      	movge	r3, #0
 80875f8:	2301      	movlt	r3, #1
 80875fa:	6003      	str	r3, [r0, #0]
 80875fc:	2001      	movs	r0, #1
 80875fe:	e000      	b.n	8087602 <__tzcalc_limits+0x142>
 8087600:	2000      	movs	r0, #0
 8087602:	b003      	add	sp, #12
 8087604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8087608:	080883b4 	.word	0x080883b4
 808760c:	00015180 	.word	0x00015180

08087610 <__tz_lock>:
 8087610:	4770      	bx	lr

08087612 <__tz_unlock>:
 8087612:	4770      	bx	lr

08087614 <_tzset_unlocked>:
 8087614:	4b01      	ldr	r3, [pc, #4]	; (808761c <_tzset_unlocked+0x8>)
 8087616:	6818      	ldr	r0, [r3, #0]
 8087618:	f000 b802 	b.w	8087620 <_tzset_unlocked_r>
 808761c:	20000104 	.word	0x20000104

08087620 <_tzset_unlocked_r>:
 8087620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087624:	b08d      	sub	sp, #52	; 0x34
 8087626:	4607      	mov	r7, r0
 8087628:	f000 f9be 	bl	80879a8 <__gettzinfo>
 808762c:	49b0      	ldr	r1, [pc, #704]	; (80878f0 <_tzset_unlocked_r+0x2d0>)
 808762e:	4604      	mov	r4, r0
 8087630:	4638      	mov	r0, r7
 8087632:	f000 f9b1 	bl	8087998 <_getenv_r>
 8087636:	4eaf      	ldr	r6, [pc, #700]	; (80878f4 <_tzset_unlocked_r+0x2d4>)
 8087638:	4605      	mov	r5, r0
 808763a:	b960      	cbnz	r0, 8087656 <_tzset_unlocked_r+0x36>
 808763c:	4bae      	ldr	r3, [pc, #696]	; (80878f8 <_tzset_unlocked_r+0x2d8>)
 808763e:	4aaf      	ldr	r2, [pc, #700]	; (80878fc <_tzset_unlocked_r+0x2dc>)
 8087640:	6018      	str	r0, [r3, #0]
 8087642:	4baf      	ldr	r3, [pc, #700]	; (8087900 <_tzset_unlocked_r+0x2e0>)
 8087644:	6018      	str	r0, [r3, #0]
 8087646:	4baf      	ldr	r3, [pc, #700]	; (8087904 <_tzset_unlocked_r+0x2e4>)
 8087648:	6830      	ldr	r0, [r6, #0]
 808764a:	601a      	str	r2, [r3, #0]
 808764c:	605a      	str	r2, [r3, #4]
 808764e:	f7fb fa59 	bl	8082b04 <free>
 8087652:	6035      	str	r5, [r6, #0]
 8087654:	e148      	b.n	80878e8 <_tzset_unlocked_r+0x2c8>
 8087656:	6831      	ldr	r1, [r6, #0]
 8087658:	b979      	cbnz	r1, 808767a <_tzset_unlocked_r+0x5a>
 808765a:	6830      	ldr	r0, [r6, #0]
 808765c:	f7fb fa52 	bl	8082b04 <free>
 8087660:	4628      	mov	r0, r5
 8087662:	f7ff fde4 	bl	808722e <strlen>
 8087666:	1c41      	adds	r1, r0, #1
 8087668:	4638      	mov	r0, r7
 808766a:	f7fb fa7b 	bl	8082b64 <_malloc_r>
 808766e:	6030      	str	r0, [r6, #0]
 8087670:	b148      	cbz	r0, 8087686 <_tzset_unlocked_r+0x66>
 8087672:	4629      	mov	r1, r5
 8087674:	f7ff fdb8 	bl	80871e8 <strcpy>
 8087678:	e005      	b.n	8087686 <_tzset_unlocked_r+0x66>
 808767a:	f7ff fdab 	bl	80871d4 <strcmp>
 808767e:	2800      	cmp	r0, #0
 8087680:	f000 8132 	beq.w	80878e8 <_tzset_unlocked_r+0x2c8>
 8087684:	e7e9      	b.n	808765a <_tzset_unlocked_r+0x3a>
 8087686:	782b      	ldrb	r3, [r5, #0]
 8087688:	ae0a      	add	r6, sp, #40	; 0x28
 808768a:	2b3a      	cmp	r3, #58	; 0x3a
 808768c:	bf08      	it	eq
 808768e:	3501      	addeq	r5, #1
 8087690:	4633      	mov	r3, r6
 8087692:	4a9d      	ldr	r2, [pc, #628]	; (8087908 <_tzset_unlocked_r+0x2e8>)
 8087694:	499d      	ldr	r1, [pc, #628]	; (808790c <_tzset_unlocked_r+0x2ec>)
 8087696:	4628      	mov	r0, r5
 8087698:	f7fb fa4c 	bl	8082b34 <siscanf>
 808769c:	2800      	cmp	r0, #0
 808769e:	f340 8123 	ble.w	80878e8 <_tzset_unlocked_r+0x2c8>
 80876a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80876a4:	18ef      	adds	r7, r5, r3
 80876a6:	5ceb      	ldrb	r3, [r5, r3]
 80876a8:	2b2d      	cmp	r3, #45	; 0x2d
 80876aa:	d103      	bne.n	80876b4 <_tzset_unlocked_r+0x94>
 80876ac:	3701      	adds	r7, #1
 80876ae:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80876b2:	e003      	b.n	80876bc <_tzset_unlocked_r+0x9c>
 80876b4:	2b2b      	cmp	r3, #43	; 0x2b
 80876b6:	bf08      	it	eq
 80876b8:	3701      	addeq	r7, #1
 80876ba:	2501      	movs	r5, #1
 80876bc:	f10d 0a20 	add.w	sl, sp, #32
 80876c0:	f10d 0b1e 	add.w	fp, sp, #30
 80876c4:	f04f 0800 	mov.w	r8, #0
 80876c8:	9603      	str	r6, [sp, #12]
 80876ca:	f8cd a008 	str.w	sl, [sp, #8]
 80876ce:	9601      	str	r6, [sp, #4]
 80876d0:	f8cd b000 	str.w	fp, [sp]
 80876d4:	4633      	mov	r3, r6
 80876d6:	aa07      	add	r2, sp, #28
 80876d8:	498d      	ldr	r1, [pc, #564]	; (8087910 <_tzset_unlocked_r+0x2f0>)
 80876da:	4638      	mov	r0, r7
 80876dc:	f8ad 801e 	strh.w	r8, [sp, #30]
 80876e0:	f8ad 8020 	strh.w	r8, [sp, #32]
 80876e4:	f7fb fa26 	bl	8082b34 <siscanf>
 80876e8:	4540      	cmp	r0, r8
 80876ea:	f340 80fd 	ble.w	80878e8 <_tzset_unlocked_r+0x2c8>
 80876ee:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80876f2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80876f6:	213c      	movs	r1, #60	; 0x3c
 80876f8:	fb01 3302 	mla	r3, r1, r2, r3
 80876fc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8087700:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8087704:	fb01 3302 	mla	r3, r1, r2, r3
 8087708:	435d      	muls	r5, r3
 808770a:	4b7f      	ldr	r3, [pc, #508]	; (8087908 <_tzset_unlocked_r+0x2e8>)
 808770c:	6225      	str	r5, [r4, #32]
 808770e:	4d7d      	ldr	r5, [pc, #500]	; (8087904 <_tzset_unlocked_r+0x2e4>)
 8087710:	f8df 9208 	ldr.w	r9, [pc, #520]	; 808791c <_tzset_unlocked_r+0x2fc>
 8087714:	602b      	str	r3, [r5, #0]
 8087716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8087718:	464a      	mov	r2, r9
 808771a:	441f      	add	r7, r3
 808771c:	497b      	ldr	r1, [pc, #492]	; (808790c <_tzset_unlocked_r+0x2ec>)
 808771e:	4633      	mov	r3, r6
 8087720:	4638      	mov	r0, r7
 8087722:	f7fb fa07 	bl	8082b34 <siscanf>
 8087726:	4540      	cmp	r0, r8
 8087728:	dc08      	bgt.n	808773c <_tzset_unlocked_r+0x11c>
 808772a:	682b      	ldr	r3, [r5, #0]
 808772c:	6a22      	ldr	r2, [r4, #32]
 808772e:	606b      	str	r3, [r5, #4]
 8087730:	4b71      	ldr	r3, [pc, #452]	; (80878f8 <_tzset_unlocked_r+0x2d8>)
 8087732:	601a      	str	r2, [r3, #0]
 8087734:	4b72      	ldr	r3, [pc, #456]	; (8087900 <_tzset_unlocked_r+0x2e0>)
 8087736:	f8c3 8000 	str.w	r8, [r3]
 808773a:	e0d5      	b.n	80878e8 <_tzset_unlocked_r+0x2c8>
 808773c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808773e:	f8c5 9004 	str.w	r9, [r5, #4]
 8087742:	18fd      	adds	r5, r7, r3
 8087744:	5cfb      	ldrb	r3, [r7, r3]
 8087746:	2b2d      	cmp	r3, #45	; 0x2d
 8087748:	d103      	bne.n	8087752 <_tzset_unlocked_r+0x132>
 808774a:	3501      	adds	r5, #1
 808774c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8087750:	e003      	b.n	808775a <_tzset_unlocked_r+0x13a>
 8087752:	2b2b      	cmp	r3, #43	; 0x2b
 8087754:	bf08      	it	eq
 8087756:	3501      	addeq	r5, #1
 8087758:	2701      	movs	r7, #1
 808775a:	2300      	movs	r3, #0
 808775c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8087760:	f8ad 301e 	strh.w	r3, [sp, #30]
 8087764:	f8ad 3020 	strh.w	r3, [sp, #32]
 8087768:	930a      	str	r3, [sp, #40]	; 0x28
 808776a:	9603      	str	r6, [sp, #12]
 808776c:	f8cd a008 	str.w	sl, [sp, #8]
 8087770:	9601      	str	r6, [sp, #4]
 8087772:	f8cd b000 	str.w	fp, [sp]
 8087776:	4633      	mov	r3, r6
 8087778:	aa07      	add	r2, sp, #28
 808777a:	4965      	ldr	r1, [pc, #404]	; (8087910 <_tzset_unlocked_r+0x2f0>)
 808777c:	4628      	mov	r0, r5
 808777e:	f7fb f9d9 	bl	8082b34 <siscanf>
 8087782:	2800      	cmp	r0, #0
 8087784:	dc04      	bgt.n	8087790 <_tzset_unlocked_r+0x170>
 8087786:	6a23      	ldr	r3, [r4, #32]
 8087788:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 808778c:	63e3      	str	r3, [r4, #60]	; 0x3c
 808778e:	e00e      	b.n	80877ae <_tzset_unlocked_r+0x18e>
 8087790:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8087794:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8087798:	213c      	movs	r1, #60	; 0x3c
 808779a:	fb01 3302 	mla	r3, r1, r2, r3
 808779e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80877a2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80877a6:	fb01 3302 	mla	r3, r1, r2, r3
 80877aa:	435f      	muls	r7, r3
 80877ac:	63e7      	str	r7, [r4, #60]	; 0x3c
 80877ae:	4627      	mov	r7, r4
 80877b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80877b2:	f04f 0900 	mov.w	r9, #0
 80877b6:	441d      	add	r5, r3
 80877b8:	782b      	ldrb	r3, [r5, #0]
 80877ba:	2b2c      	cmp	r3, #44	; 0x2c
 80877bc:	bf08      	it	eq
 80877be:	3501      	addeq	r5, #1
 80877c0:	f895 8000 	ldrb.w	r8, [r5]
 80877c4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80877c8:	d126      	bne.n	8087818 <_tzset_unlocked_r+0x1f8>
 80877ca:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80877ce:	9302      	str	r3, [sp, #8]
 80877d0:	ab09      	add	r3, sp, #36	; 0x24
 80877d2:	9300      	str	r3, [sp, #0]
 80877d4:	9603      	str	r6, [sp, #12]
 80877d6:	9601      	str	r6, [sp, #4]
 80877d8:	4633      	mov	r3, r6
 80877da:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80877de:	494d      	ldr	r1, [pc, #308]	; (8087914 <_tzset_unlocked_r+0x2f4>)
 80877e0:	4628      	mov	r0, r5
 80877e2:	f7fb f9a7 	bl	8082b34 <siscanf>
 80877e6:	2803      	cmp	r0, #3
 80877e8:	d17e      	bne.n	80878e8 <_tzset_unlocked_r+0x2c8>
 80877ea:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80877ee:	1e4b      	subs	r3, r1, #1
 80877f0:	2b0b      	cmp	r3, #11
 80877f2:	d879      	bhi.n	80878e8 <_tzset_unlocked_r+0x2c8>
 80877f4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80877f8:	1e53      	subs	r3, r2, #1
 80877fa:	2b04      	cmp	r3, #4
 80877fc:	d874      	bhi.n	80878e8 <_tzset_unlocked_r+0x2c8>
 80877fe:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8087802:	2b06      	cmp	r3, #6
 8087804:	d870      	bhi.n	80878e8 <_tzset_unlocked_r+0x2c8>
 8087806:	f887 8008 	strb.w	r8, [r7, #8]
 808780a:	60f9      	str	r1, [r7, #12]
 808780c:	613a      	str	r2, [r7, #16]
 808780e:	617b      	str	r3, [r7, #20]
 8087810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8087812:	eb05 0803 	add.w	r8, r5, r3
 8087816:	e02a      	b.n	808786e <_tzset_unlocked_r+0x24e>
 8087818:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 808781c:	bf06      	itte	eq
 808781e:	4643      	moveq	r3, r8
 8087820:	3501      	addeq	r5, #1
 8087822:	2344      	movne	r3, #68	; 0x44
 8087824:	220a      	movs	r2, #10
 8087826:	a90b      	add	r1, sp, #44	; 0x2c
 8087828:	4628      	mov	r0, r5
 808782a:	9305      	str	r3, [sp, #20]
 808782c:	f7ff fe3e 	bl	80874ac <strtoul>
 8087830:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8087834:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8087838:	4545      	cmp	r5, r8
 808783a:	9b05      	ldr	r3, [sp, #20]
 808783c:	d114      	bne.n	8087868 <_tzset_unlocked_r+0x248>
 808783e:	234d      	movs	r3, #77	; 0x4d
 8087840:	f1b9 0f00 	cmp.w	r9, #0
 8087844:	d107      	bne.n	8087856 <_tzset_unlocked_r+0x236>
 8087846:	7223      	strb	r3, [r4, #8]
 8087848:	2303      	movs	r3, #3
 808784a:	60e3      	str	r3, [r4, #12]
 808784c:	2302      	movs	r3, #2
 808784e:	6123      	str	r3, [r4, #16]
 8087850:	f8c4 9014 	str.w	r9, [r4, #20]
 8087854:	e00b      	b.n	808786e <_tzset_unlocked_r+0x24e>
 8087856:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 808785a:	230b      	movs	r3, #11
 808785c:	62a3      	str	r3, [r4, #40]	; 0x28
 808785e:	2301      	movs	r3, #1
 8087860:	62e3      	str	r3, [r4, #44]	; 0x2c
 8087862:	2300      	movs	r3, #0
 8087864:	6323      	str	r3, [r4, #48]	; 0x30
 8087866:	e002      	b.n	808786e <_tzset_unlocked_r+0x24e>
 8087868:	b280      	uxth	r0, r0
 808786a:	723b      	strb	r3, [r7, #8]
 808786c:	6178      	str	r0, [r7, #20]
 808786e:	2302      	movs	r3, #2
 8087870:	f8ad 301c 	strh.w	r3, [sp, #28]
 8087874:	2300      	movs	r3, #0
 8087876:	f8ad 301e 	strh.w	r3, [sp, #30]
 808787a:	f8ad 3020 	strh.w	r3, [sp, #32]
 808787e:	930a      	str	r3, [sp, #40]	; 0x28
 8087880:	f898 3000 	ldrb.w	r3, [r8]
 8087884:	2b2f      	cmp	r3, #47	; 0x2f
 8087886:	d10b      	bne.n	80878a0 <_tzset_unlocked_r+0x280>
 8087888:	9603      	str	r6, [sp, #12]
 808788a:	f8cd a008 	str.w	sl, [sp, #8]
 808788e:	9601      	str	r6, [sp, #4]
 8087890:	f8cd b000 	str.w	fp, [sp]
 8087894:	4633      	mov	r3, r6
 8087896:	aa07      	add	r2, sp, #28
 8087898:	491f      	ldr	r1, [pc, #124]	; (8087918 <_tzset_unlocked_r+0x2f8>)
 808789a:	4640      	mov	r0, r8
 808789c:	f7fb f94a 	bl	8082b34 <siscanf>
 80878a0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80878a4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80878a8:	213c      	movs	r1, #60	; 0x3c
 80878aa:	fb01 3302 	mla	r3, r1, r2, r3
 80878ae:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80878b2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80878b6:	fb01 3302 	mla	r3, r1, r2, r3
 80878ba:	61bb      	str	r3, [r7, #24]
 80878bc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80878be:	f109 0901 	add.w	r9, r9, #1
 80878c2:	f1b9 0f02 	cmp.w	r9, #2
 80878c6:	4445      	add	r5, r8
 80878c8:	f107 071c 	add.w	r7, r7, #28
 80878cc:	f47f af74 	bne.w	80877b8 <_tzset_unlocked_r+0x198>
 80878d0:	6860      	ldr	r0, [r4, #4]
 80878d2:	f7ff fdf5 	bl	80874c0 <__tzcalc_limits>
 80878d6:	6a22      	ldr	r2, [r4, #32]
 80878d8:	4b07      	ldr	r3, [pc, #28]	; (80878f8 <_tzset_unlocked_r+0x2d8>)
 80878da:	601a      	str	r2, [r3, #0]
 80878dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80878de:	1a9b      	subs	r3, r3, r2
 80878e0:	4a07      	ldr	r2, [pc, #28]	; (8087900 <_tzset_unlocked_r+0x2e0>)
 80878e2:	bf18      	it	ne
 80878e4:	2301      	movne	r3, #1
 80878e6:	6013      	str	r3, [r2, #0]
 80878e8:	b00d      	add	sp, #52	; 0x34
 80878ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80878ee:	bf00      	nop
 80878f0:	08088414 	.word	0x08088414
 80878f4:	20000934 	.word	0x20000934
 80878f8:	2000093c 	.word	0x2000093c
 80878fc:	08088417 	.word	0x08088417
 8087900:	20000938 	.word	0x20000938
 8087904:	20000108 	.word	0x20000108
 8087908:	20000927 	.word	0x20000927
 808790c:	0808841b 	.word	0x0808841b
 8087910:	0808843e 	.word	0x0808843e
 8087914:	0808842a 	.word	0x0808842a
 8087918:	0808843d 	.word	0x0808843d
 808791c:	2000091c 	.word	0x2000091c

08087920 <_findenv_r>:
 8087920:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087924:	4607      	mov	r7, r0
 8087926:	468b      	mov	fp, r1
 8087928:	4690      	mov	r8, r2
 808792a:	f000 f8d7 	bl	8087adc <__env_lock>
 808792e:	4b19      	ldr	r3, [pc, #100]	; (8087994 <_findenv_r+0x74>)
 8087930:	681d      	ldr	r5, [r3, #0]
 8087932:	469a      	mov	sl, r3
 8087934:	b13d      	cbz	r5, 8087946 <_findenv_r+0x26>
 8087936:	465c      	mov	r4, fp
 8087938:	4623      	mov	r3, r4
 808793a:	f813 2b01 	ldrb.w	r2, [r3], #1
 808793e:	b142      	cbz	r2, 8087952 <_findenv_r+0x32>
 8087940:	2a3d      	cmp	r2, #61	; 0x3d
 8087942:	461c      	mov	r4, r3
 8087944:	d1f8      	bne.n	8087938 <_findenv_r+0x18>
 8087946:	4638      	mov	r0, r7
 8087948:	f000 f8c9 	bl	8087ade <__env_unlock>
 808794c:	2000      	movs	r0, #0
 808794e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8087952:	ebcb 0404 	rsb	r4, fp, r4
 8087956:	46a9      	mov	r9, r5
 8087958:	f859 0b04 	ldr.w	r0, [r9], #4
 808795c:	2800      	cmp	r0, #0
 808795e:	d0f2      	beq.n	8087946 <_findenv_r+0x26>
 8087960:	4622      	mov	r2, r4
 8087962:	4659      	mov	r1, fp
 8087964:	f7ff fc6b 	bl	808723e <strncmp>
 8087968:	b988      	cbnz	r0, 808798e <_findenv_r+0x6e>
 808796a:	f859 3c04 	ldr.w	r3, [r9, #-4]
 808796e:	191e      	adds	r6, r3, r4
 8087970:	5d1b      	ldrb	r3, [r3, r4]
 8087972:	2b3d      	cmp	r3, #61	; 0x3d
 8087974:	d10b      	bne.n	808798e <_findenv_r+0x6e>
 8087976:	f8da 3000 	ldr.w	r3, [sl]
 808797a:	4638      	mov	r0, r7
 808797c:	1aed      	subs	r5, r5, r3
 808797e:	10ad      	asrs	r5, r5, #2
 8087980:	f8c8 5000 	str.w	r5, [r8]
 8087984:	f000 f8ab 	bl	8087ade <__env_unlock>
 8087988:	1c70      	adds	r0, r6, #1
 808798a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808798e:	464d      	mov	r5, r9
 8087990:	e7e1      	b.n	8087956 <_findenv_r+0x36>
 8087992:	bf00      	nop
 8087994:	20000150 	.word	0x20000150

08087998 <_getenv_r>:
 8087998:	b507      	push	{r0, r1, r2, lr}
 808799a:	aa01      	add	r2, sp, #4
 808799c:	f7ff ffc0 	bl	8087920 <_findenv_r>
 80879a0:	b003      	add	sp, #12
 80879a2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080879a8 <__gettzinfo>:
 80879a8:	4800      	ldr	r0, [pc, #0]	; (80879ac <__gettzinfo+0x4>)
 80879aa:	4770      	bx	lr
 80879ac:	20000110 	.word	0x20000110

080879b0 <gmtime_r>:
 80879b0:	6802      	ldr	r2, [r0, #0]
 80879b2:	4b46      	ldr	r3, [pc, #280]	; (8087acc <gmtime_r+0x11c>)
 80879b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80879b6:	fb92 f4f3 	sdiv	r4, r2, r3
 80879ba:	fb03 2214 	mls	r2, r3, r4, r2
 80879be:	2a00      	cmp	r2, #0
 80879c0:	bfbc      	itt	lt
 80879c2:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80879c6:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80879ca:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80879ce:	fb92 f3f0 	sdiv	r3, r2, r0
 80879d2:	fb00 2213 	mls	r2, r0, r3, r2
 80879d6:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80879da:	608b      	str	r3, [r1, #8]
 80879dc:	fb92 f3f0 	sdiv	r3, r2, r0
 80879e0:	fb00 2213 	mls	r2, r0, r3, r2
 80879e4:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 80879e8:	bfac      	ite	ge
 80879ea:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 80879ee:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 80879f2:	604b      	str	r3, [r1, #4]
 80879f4:	600a      	str	r2, [r1, #0]
 80879f6:	2307      	movs	r3, #7
 80879f8:	1ce2      	adds	r2, r4, #3
 80879fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80879fe:	4d34      	ldr	r5, [pc, #208]	; (8087ad0 <gmtime_r+0x120>)
 8087a00:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8087a04:	fb94 f5f5 	sdiv	r5, r4, r5
 8087a08:	1ad3      	subs	r3, r2, r3
 8087a0a:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8087a0e:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8087a12:	618b      	str	r3, [r1, #24]
 8087a14:	4b2f      	ldr	r3, [pc, #188]	; (8087ad4 <gmtime_r+0x124>)
 8087a16:	4830      	ldr	r0, [pc, #192]	; (8087ad8 <gmtime_r+0x128>)
 8087a18:	fb03 4405 	mla	r4, r3, r5, r4
 8087a1c:	fbb4 f2f2 	udiv	r2, r4, r2
 8087a20:	fbb4 f3f7 	udiv	r3, r4, r7
 8087a24:	fbb4 f0f0 	udiv	r0, r4, r0
 8087a28:	4422      	add	r2, r4
 8087a2a:	1ad2      	subs	r2, r2, r3
 8087a2c:	f648 6694 	movw	r6, #36500	; 0x8e94
 8087a30:	1a13      	subs	r3, r2, r0
 8087a32:	f240 126d 	movw	r2, #365	; 0x16d
 8087a36:	fbb3 f6f6 	udiv	r6, r3, r6
 8087a3a:	fbb3 f0f2 	udiv	r0, r3, r2
 8087a3e:	fbb3 f3f7 	udiv	r3, r3, r7
 8087a42:	4434      	add	r4, r6
 8087a44:	1ae3      	subs	r3, r4, r3
 8087a46:	fb02 3310 	mls	r3, r2, r0, r3
 8087a4a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8087a4e:	2499      	movs	r4, #153	; 0x99
 8087a50:	3202      	adds	r2, #2
 8087a52:	fbb2 f2f4 	udiv	r2, r2, r4
 8087a56:	4354      	muls	r4, r2
 8087a58:	1ca6      	adds	r6, r4, #2
 8087a5a:	2405      	movs	r4, #5
 8087a5c:	fbb6 f4f4 	udiv	r4, r6, r4
 8087a60:	2a0a      	cmp	r2, #10
 8087a62:	bf34      	ite	cc
 8087a64:	2602      	movcc	r6, #2
 8087a66:	f06f 0609 	mvncs.w	r6, #9
 8087a6a:	4416      	add	r6, r2
 8087a6c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8087a70:	fb02 0505 	mla	r5, r2, r5, r0
 8087a74:	1c5f      	adds	r7, r3, #1
 8087a76:	2e01      	cmp	r6, #1
 8087a78:	bf98      	it	ls
 8087a7a:	3501      	addls	r5, #1
 8087a7c:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8087a80:	eba7 0704 	sub.w	r7, r7, r4
 8087a84:	d302      	bcc.n	8087a8c <gmtime_r+0xdc>
 8087a86:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 8087a8a:	e014      	b.n	8087ab6 <gmtime_r+0x106>
 8087a8c:	0782      	lsls	r2, r0, #30
 8087a8e:	d105      	bne.n	8087a9c <gmtime_r+0xec>
 8087a90:	2464      	movs	r4, #100	; 0x64
 8087a92:	fbb0 f2f4 	udiv	r2, r0, r4
 8087a96:	fb04 0212 	mls	r2, r4, r2, r0
 8087a9a:	b94a      	cbnz	r2, 8087ab0 <gmtime_r+0x100>
 8087a9c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8087aa0:	fbb0 f4f2 	udiv	r4, r0, r2
 8087aa4:	fb02 0014 	mls	r0, r2, r4, r0
 8087aa8:	fab0 f280 	clz	r2, r0
 8087aac:	0952      	lsrs	r2, r2, #5
 8087aae:	e000      	b.n	8087ab2 <gmtime_r+0x102>
 8087ab0:	2201      	movs	r2, #1
 8087ab2:	333b      	adds	r3, #59	; 0x3b
 8087ab4:	441a      	add	r2, r3
 8087ab6:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8087aba:	2300      	movs	r3, #0
 8087abc:	61ca      	str	r2, [r1, #28]
 8087abe:	614d      	str	r5, [r1, #20]
 8087ac0:	610e      	str	r6, [r1, #16]
 8087ac2:	60cf      	str	r7, [r1, #12]
 8087ac4:	620b      	str	r3, [r1, #32]
 8087ac6:	4608      	mov	r0, r1
 8087ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8087aca:	bf00      	nop
 8087acc:	00015180 	.word	0x00015180
 8087ad0:	00023ab1 	.word	0x00023ab1
 8087ad4:	fffdc54f 	.word	0xfffdc54f
 8087ad8:	00023ab0 	.word	0x00023ab0

08087adc <__env_lock>:
 8087adc:	4770      	bx	lr

08087ade <__env_unlock>:
 8087ade:	4770      	bx	lr

08087ae0 <dynalib_user>:
 8087ae0:	0021 0808 0061 0808 008d 0808 0091 0808     !...a...........
 8087af0:	0000 0000 0100 0402 1008 0000 ffff 7fff     ................
 8087b00:	ffff 7fff ffff 7fff ffff 7fff ffff 7fff     ................
 8087b10:	51ea 7eb8 ffff 7fff db21 7ef9 ffff 7fff     .Q.~....!..~....
 8087b20:	ffff 7fff 76c7 7fbe 28f4 7f5c ffff 7fff     .....v...(\.....
 8087b30:	51ea 7eb8 ffff 7fff ffff 7fff 0000 f424     .Q.~..........$.
 8087b40:	0000 7a12 0000 3d09 8000 1e84 58ff 0f3e     ...z...=.....X>.
 8087b50:	8c54 0793 9000 03d0 3810 01ec 6290 00f4     T........8...b..
 8087b60:	1200 007a 0900 003d 8480 001e 4240 000f     ..z...=.....@B..
 8087b70:	a120 0007 d090 0003 e848 0001 7453 7261      .......H...Star
 8087b80:	7574 2070 7553 6363 7365 6673 6c75 0000     tup Successful..
	...
 8087bbc:	7325 5320 253a 2e32 6630 2525 202c 3a51     %s S:%2.0f%%, Q:
 8087bcc:	3225 302e 2566 2025 2500 2e34 6631 432a     %2.0f%% .%4.1f*C
 8087bdc:	2500 2e34 6631 2525 2500 2e34 6631 5048     .%4.1f%%.%4.1fHP
 8087bec:	0061 3425 312e 6b66 684f 006d 3425 312e     a.%4.1fkOhm.%4.1
 8087bfc:	6d66 2500 2569 0025 5441 432b 5546 3d4e     fm.%i%%.AT+CFUN=
 8087c0c:	3631 0a0d 7b00 5422 6d65 6570 6172 7574     16...{"Temperatu
 8087c1c:	6572 3a22 3425 312e 2c66 2220 7548 696d     re":%4.1f, "Humi
 8087c2c:	6964 7974 3a22 3425 312e 2c66 2220 7250     dity":%4.1f, "Pr
 8087c3c:	7365 7573 6572 3a22 3425 312e 2c66 2220     essure":%4.1f, "
 8087c4c:	6548 7461 6e49 6564 2278 253a 2e34 6631     HeatIndex":%4.1f
 8087c5c:	202c 5422 4f56 6c43 7665 6c65 3a22 3525     , "TVOClevel":%5
 8087c6c:	312e 2c66 2220 6c41 6974 7574 6564 3a22     .1f, "Altitude":
 8087c7c:	3425 312e 2c66 2220 6142 7474 7265 2279     %4.1f, "Battery"
 8087c8c:	253a 2c69 2220 6552 6573 7374 3a22 6925     :%i, "Resets":%i
 8087c9c:	202c 4122 656c 7472 2273 253a 7d69 4500     , "Alerts":%i}.E
 8087cac:	766e 7269 6e6f 656d 746e 6c61 485f 6f6f     nvironmental_Hoo
 8087cbc:	006b 6f4e 4420 7461 0061 6255 6469 746f     k.No Data.Ubidot
 8087ccc:	2073 6f48 6b6f 5200 7365 6f70 736e 2065     s Hook.Response 
 8087cdc:	6552 6563 7669 6465 5300 6174 6574 5300     Received.State.S
 8087cec:	7465 5320 6c6f 7261 5020 776f 7265 6465     et Solar Powered
 8087cfc:	4d20 646f 0065 6c43 6165 6572 2064 6f53      Mode.Cleared So
 8087d0c:	616c 2072 6f50 6577 6572 2064 6f4d 6564     lar Powered Mode
 8087d1c:	5300 7465 5620 7265 6f62 6573 4d20 646f     .Set Verbose Mod
 8087d2c:	0065 6c43 6165 6572 2064 6556 6272 736f     e.Cleared Verbos
 8087d3c:	2065 6f4d 6564 5400 6d69 2065 6f7a 656e     e Mode.Time zone
 8087d4c:	6f20 6666 6573 2074 6925 5400 6d69 0065      offset %i.Time.
 8087d5c:	6f4c 2077 6f50 6577 0072 6f4e 6d72 6c61     Low Power.Normal
 8087d6c:	4f20 6570 6172 6974 6e6f 0073 7246 6d6f      Operations.From
 8087d7c:	2520 2073 6f74 2520 0073 7453 7461 2065      %s to %s.State 
 8087d8c:	7254 6e61 6973 6974 6e6f 4500 7272 726f     Transition.Error
 8087d9c:	7420 6b61 6e69 2067 654d 7361 7275 6d65      taking Measurem
 8087dac:	6e65 7374 7300 6170 6b72 642f 7665 6369     ents.spark/devic
 8087dbc:	2f65 6573 7373 6f69 2f6e 6e65 0064 6f47     e/session/end.Go
 8087dcc:	6e69 2067 6f74 5320 656c 7065 4c00 776f     ing to Sleep.Low
 8087ddc:	4220 7461 6574 7972 2d20 5320 656c 7065      Battery - Sleep
 8087dec:	6e69 0067 7245 6f72 2072 7453 7461 2065     ing.Error State 
 8087dfc:	202d 6552 6573 0074 7245 6f72 2072 7453     - Reset.Error St
 8087e0c:	7461 2065 202d 6f50 6577 2072 7943 6c63     ate - Power Cycl
 8087e1c:	0065 7245 6f72 2072 7453 7461 2065 202d     e.Error State - 
 8087e2c:	7546 6c6c 4d20 646f 6d65 5220 7365 7465     Full Modem Reset
 8087e3c:	4800 7261 2064 6552 6573 0074 6953 6e67     .Hard Reset.Sign
 8087e4c:	6c61 5200 7365 7465 6f43 6e75 0074 6552     al.ResetCount.Re
 8087e5c:	656c 7361 0065 7473 7461 4f65 4366 6768     lease.stateOfChg
 8087e6c:	6c00 776f 6f50 6577 4d72 646f 0065 6574     .lowPowerMode.te
 8087e7c:	706d 7265 7461 7275 0065 7568 696d 6964     mperature.humidi
 8087e8c:	7974 7000 6572 7373 7275 0065 6167 0073     ty.pressure.gas.
 8087e9c:	6c61 6974 7574 6564 4800 6165 2d74 6e49     altitude.Heat-In
 8087eac:	6564 0078 654d 7361 7275 2d65 6f4e 0077     dex.Measure-Now.
 8087ebc:	6148 6472 6552 6573 0074 6f4c 5077 776f     HardReset.LowPow
 8087ecc:	7265 6f4d 6564 5300 6c6f 7261 4d2d 646f     erMode.Solar-Mod
 8087edc:	0065 6556 6272 736f 2d65 6f4d 6564 5300     e.Verbose-Mode.S
 8087eec:	7465 6954 656d 6f5a 656e 4500 7272 726f     etTimeZone.Error
 8087efc:	2d20 4220 454d 3836 2030 6e49 7469 6169      - BME680 Initia
 8087f0c:	696c 617a 6974 6e6f 4600 6961 656c 2064     lization.Failed 
 8087f1c:	6f74 6320 6e6f 656e 7463 5300 6174 7472     to connect.Start
 8087f2c:	7075 5500 6b6e 6f6e 6e77 4e00 6e6f 0065     up.Unknown.None.
 8087f3c:	6957 6946 4700 4d53 5500 544d 0053 4443     WiFi.GSM.UMTS.CD
 8087f4c:	414d 4c00 4554 4900 4545 3845 3230 3531     MA.LTE.IEEE80215
 8087f5c:	0034 2e31 3031 0000                         4.1.10..

08087f64 <_ZTVN5spark13CellularClassE>:
	...
 8087f6c:	2c55 0808 2c4b 0808 2c41 0808 2bb3 0808     U,..K,..A,...+..
 8087f7c:	2c35 0808 2c29 0808 2c1d 0808 2c15 0808     5,..),...,...,..
 8087f8c:	2c0b 0808 2c01 0808 2bbd 0808               .,...,...+..

08087f98 <_ZTV14CellularSignal>:
	...
 8087fa0:	2d05 0808 2d87 0808 2d07 0808 2dc5 0808     .-...-...-...-..
 8087fb0:	2d0d 0808 2d95 0808 2d31 0808 2d55 0808     .-...-..1-..U-..
 8087fc0:	fffc ffff 0000 0000 2d7f 0808               .........-..

08087fcc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8087fd4:	2e0d 0808 2e13 0808 2e69 0808 2e21 0808     ........i...!...
 8087fe4:	2e0f 0808                                   ....

08087fe8 <_ZTV7TwoWire>:
	...
 8087ff0:	350d 0808 3557 0808 352f 0808 350f 0808     .5..W5../5...5..
 8088000:	3537 0808 353f 0808 3547 0808 354f 0808     75..?5..G5..O5..

08088010 <_ZTV9IPAddress>:
	...
 8088018:	3661 0808 3651 0808 3653 0808 6162 6475     a6..Q6..S6..baud
 8088028:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 8088038:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 8088048:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 8088058:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 8088068:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 8088078:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 8088088:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 8088098:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80880a8:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80880b8:	6564 3d20 0020 6564 6174 6c69 2073 203d     de = .details = 
 80880c8:	6600 6c00 006e 6e66 6300 646f 0065 6564     .f.ln.fn.code.de
 80880d8:	6174 6c69 6e00 6e6f 0065 7274 6361 0065     tail.none.trace.
 80880e8:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
 80880f8:	6170 696e 0063 6c61 006c 0000               panic.all...

08088104 <_ZTVN5spark12NetworkClassE>:
	...
 808810c:	3701 0808 370b 0808 3715 0808 371f 0808     .7...7...7...7..
 808811c:	3729 0808 3735 0808 3741 0808 374d 0808     )7..57..A7..M7..
 808812c:	3755 0808 375f 0808 3769 0808               U7.._7..i7..

08088138 <_ZTV8SPIClass>:
	...
 8088140:	3c99 0808 3c9b 0808                         .<...<..

08088148 <_ZL14clock_divisors>:
 8088148:	0800 1810 2820 3830 2b25 3330 3a64 3025     .... (08%+03d:%0
 8088158:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 8088168:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

08088178 <_ZTV11USARTSerial>:
	...
 8088180:	40e5 0808 4135 0808 4143 0808 3b51 0808     .@..5A..CA..Q;..
 8088190:	40f9 0808 411b 0808 4107 0808 412f 0808     .@...A...A../A..
 80881a0:	40e7 0808 40eb 0808                         .@...@..

080881a8 <_ZTV9USBSerial>:
	...
 80881b0:	41ed 0808 423d 0808 424b 0808 3b51 0808     .A..=B..KB..Q;..
 80881c0:	4229 0808 41ef 0808 4205 0808 4237 0808     )B...A...B..7B..
 80881d0:	421b 0808 41e9 0808 6f70 0077 7173 7472     .B...A..pow.sqrt
	...

080881e8 <TWO52>:
 80881e8:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

080881f8 <day_name.4723>:
 80881f8:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 8088208:	6972 6153 4a74                                   riSat

0808820d <mon_name.4724>:
 808820d:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 808821d:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 808822d:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 808823d:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 808824d:	6425 000a                                   %d..

08088251 <_ctype_>:
 8088251:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8088261:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8088271:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8088281:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8088291:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80882a1:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80882b1:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80882c1:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80882d1:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

08088354 <__sf_fake_stdin>:
	...

08088374 <__sf_fake_stdout>:
	...

08088394 <__sf_fake_stderr>:
	...

080883b4 <__month_lengths>:
 80883b4:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80883c4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80883d4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80883e4:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80883f4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8088404:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8088414:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 8088424:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 8088434:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 8088444:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

08088450 <link_const_variable_data_end>:
 8088450:	08081f29 	.word	0x08081f29
 8088454:	08082539 	.word	0x08082539
 8088458:	08082cd5 	.word	0x08082cd5
 808845c:	080836f1 	.word	0x080836f1
 8088460:	080837b5 	.word	0x080837b5
 8088464:	08083c7d 	.word	0x08083c7d
 8088468:	08083f31 	.word	0x08083f31
 808846c:	080840d1 	.word	0x080840d1
 8088470:	08084641 	.word	0x08084641
 8088474:	08084671 	.word	0x08084671
 8088478:	080846e1 	.word	0x080846e1
 808847c:	080847a5 	.word	0x080847a5
 8088480:	08084829 	.word	0x08084829
 8088484:	080848ad 	.word	0x080848ad

08088488 <link_constructors_end>:
	...
