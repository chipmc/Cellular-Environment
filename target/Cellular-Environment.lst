
/Users/chipmc/Documents/Maker/Particle/Projects/Cellular-Environment/target/Cellular-Environment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080a8  08080018  08080018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  080880c0  080880c0  000180c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000004  40024000  080880c8  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000f4  20000400  080880cc  00030400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000810  200004f8  200004f8  000404f8  2**3
                  ALLOC
  6 .module_info_suffix 00000028  080881c0  080881c0  000381c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080881e8  080881e8  000381e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b8767  00000000  00000000  000381ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011976  00000000  00000000  000f0953  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00018874  00000000  00000000  001022c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002410  00000000  00000000  0011ab3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003a28  00000000  00000000  0011cf4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000280f9  00000000  00000000  00120975  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00028c1a  00000000  00000000  00148a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a82ff  00000000  00000000  00171688  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ccfc  00000000  00000000  00219988  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080018 <user_part_module>:
 8080018:	80 77 08 08                                         .w..

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <module_user_pre_init+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <module_user_pre_init+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f006 fee5 	bl	8086dfc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <module_user_pre_init+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <module_user_pre_init+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f006 feea 	bl	8086e12 <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <module_user_pre_init+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000400 	.word	0x20000400
 8080048:	080880cc 	.word	0x080880cc
 808004c:	200004f4 	.word	0x200004f4
 8080050:	200004f8 	.word	0x200004f8
 8080054:	20000d08 	.word	0x20000d08
 8080058:	20000d08 	.word	0x20000d08

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f004 f85d 	bl	808411c <module_user_init_hook>
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	08088088 	.word	0x08088088
 8080084:	080880c0 	.word	0x080880c0

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f001 bc76 	b.w	8081978 <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f001 f92d 	bl	80812ec <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 8080096:	f004 b803 	b.w	80840a0 <_post_loop>

0808009a <_Znwj>:
 808009a:	f002 bbfb 	b.w	8082894 <malloc>

0808009e <_ZdlPv>:
 808009e:	f002 bc01 	b.w	80828a4 <free>

080800a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a2:	7800      	ldrb	r0, [r0, #0]
 80800a4:	fab0 f080 	clz	r0, r0
 80800a8:	0940      	lsrs	r0, r0, #5
 80800aa:	4770      	bx	lr

080800ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800ac:	2301      	movs	r3, #1
 80800ae:	7003      	strb	r3, [r0, #0]
 80800b0:	4770      	bx	lr

080800b2 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80800b2:	b148      	cbz	r0, 80800c8 <null_ptr_check+0x16>
 80800b4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80800b6:	b13b      	cbz	r3, 80800c8 <null_ptr_check+0x16>
 80800b8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80800ba:	b12b      	cbz	r3, 80800c8 <null_ptr_check+0x16>
 80800bc:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80800be:	fab0 f080 	clz	r0, r0
 80800c2:	0940      	lsrs	r0, r0, #5
 80800c4:	4240      	negs	r0, r0
 80800c6:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 80800c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		/* Device structure is fine */
		rslt = BME680_OK;
	}

	return rslt;
}
 80800cc:	4770      	bx	lr

080800ce <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 80800ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80800d0:	4602      	mov	r2, r0
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 80800d2:	4608      	mov	r0, r1

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 80800d4:	460c      	mov	r4, r1
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 80800d6:	f7ff ffec 	bl	80800b2 <null_ptr_check>
	if (rslt == BME680_OK) {
 80800da:	4605      	mov	r5, r0
 80800dc:	bb50      	cbnz	r0, 8080134 <set_mem_page+0x66>
		if (reg_addr > 0x7f)
			mem_page = BME680_MEM_PAGE1;
		else
			mem_page = BME680_MEM_PAGE0;
 80800de:	f012 0f80 	tst.w	r2, #128	; 0x80

		if (mem_page != dev->mem_page) {
 80800e2:	78ca      	ldrb	r2, [r1, #3]
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (reg_addr > 0x7f)
			mem_page = BME680_MEM_PAGE1;
		else
			mem_page = BME680_MEM_PAGE0;
 80800e4:	bf14      	ite	ne
 80800e6:	2300      	movne	r3, #0
 80800e8:	2310      	moveq	r3, #16

		if (mem_page != dev->mem_page) {
 80800ea:	429a      	cmp	r2, r3
 80800ec:	d022      	beq.n	8080134 <set_mem_page+0x66>
			dev->mem_page = mem_page;
 80800ee:	70cb      	strb	r3, [r1, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 80800f0:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 80800f2:	2301      	movs	r3, #1
 80800f4:	f10d 0207 	add.w	r2, sp, #7
 80800f8:	21f3      	movs	r1, #243	; 0xf3
 80800fa:	7860      	ldrb	r0, [r4, #1]
 80800fc:	47b0      	blx	r6
 80800fe:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
 8080102:	b110      	cbz	r0, 808010a <set_mem_page+0x3c>
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
					&reg, 1);
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 8080104:	f06f 0501 	mvn.w	r5, #1
 8080108:	e014      	b.n	8080134 <set_mem_page+0x66>
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 808010a:	78e3      	ldrb	r3, [r4, #3]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 808010c:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 808010e:	f003 0210 	and.w	r2, r3, #16
 8080112:	f89d 3007 	ldrb.w	r3, [sp, #7]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8080116:	2173      	movs	r1, #115	; 0x73
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8080118:	f023 0310 	bic.w	r3, r3, #16
 808011c:	4313      	orrs	r3, r2
 808011e:	f88d 3007 	strb.w	r3, [sp, #7]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8080122:	f10d 0207 	add.w	r2, sp, #7
 8080126:	2301      	movs	r3, #1
 8080128:	7860      	ldrb	r0, [r4, #1]
 808012a:	47b0      	blx	r6
 808012c:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
					&reg, 1);
				if (dev->com_rslt != 0)
 8080130:	2800      	cmp	r0, #0
 8080132:	d1e7      	bne.n	8080104 <set_mem_page+0x36>
			}
		}
	}

	return rslt;
}
 8080134:	4628      	mov	r0, r5
 8080136:	b002      	add	sp, #8
 8080138:	bd70      	pop	{r4, r5, r6, pc}

0808013a <get_mem_page>:

/*!
 * @brief This internal API is used to get the memory page based on register address.
 */
static int8_t get_mem_page(struct bme680_dev *dev)
{
 808013a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 808013c:	4604      	mov	r4, r0
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 808013e:	f7ff ffb8 	bl	80800b2 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080142:	4605      	mov	r5, r0
 8080144:	b988      	cbnz	r0, 808016a <get_mem_page+0x30>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8080146:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8080148:	2301      	movs	r3, #1
 808014a:	f10d 0207 	add.w	r2, sp, #7
 808014e:	21f3      	movs	r1, #243	; 0xf3
 8080150:	7860      	ldrb	r0, [r4, #1]
 8080152:	47b0      	blx	r6
 8080154:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
		if (dev->com_rslt != 0)
 8080158:	b928      	cbnz	r0, 8080166 <get_mem_page+0x2c>
			rslt = BME680_E_COM_FAIL;
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 808015a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 808015e:	f003 0310 	and.w	r3, r3, #16
 8080162:	70e3      	strb	r3, [r4, #3]
 8080164:	e001      	b.n	808016a <get_mem_page+0x30>
	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
		if (dev->com_rslt != 0)
			rslt = BME680_E_COM_FAIL;
 8080166:	f06f 0501 	mvn.w	r5, #1
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
	}

	return rslt;
}
 808016a:	4628      	mov	r0, r5
 808016c:	b002      	add	sp, #8
 808016e:	bd70      	pop	{r4, r5, r6, pc}

08080170 <boundary_check.isra.1.constprop.2>:
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;

	if (value != NULL) {
 8080170:	b140      	cbz	r0, 8080184 <boundary_check.isra.1.constprop.2+0x14>
			/* Auto correct the invalid value to minimum value */
			*value = min;
			dev->info_msg |= BME680_I_MIN_CORRECTION;
		}
		/* Check if value is above maximum value */
		if (*value > max) {
 8080172:	7803      	ldrb	r3, [r0, #0]
 8080174:	428b      	cmp	r3, r1
 8080176:	d908      	bls.n	808018a <boundary_check.isra.1.constprop.2+0x1a>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 8080178:	7001      	strb	r1, [r0, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 808017a:	7813      	ldrb	r3, [r2, #0]
 808017c:	f043 0302 	orr.w	r3, r3, #2
 8080180:	7013      	strb	r3, [r2, #0]
 8080182:	e002      	b.n	808018a <boundary_check.isra.1.constprop.2+0x1a>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
 8080184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8080188:	4770      	bx	lr
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;
 808018a:	2000      	movs	r0, #0
	} else {
		rslt = BME680_E_NULL_PTR;
	}

	return rslt;
}
 808018c:	4770      	bx	lr

0808018e <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 808018e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8080192:	4606      	mov	r6, r0
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080194:	4618      	mov	r0, r3

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 8080196:	4688      	mov	r8, r1
 8080198:	4691      	mov	r9, r2
 808019a:	461d      	mov	r5, r3
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 808019c:	f7ff ff89 	bl	80800b2 <null_ptr_check>
	if (rslt == BME680_OK) {
 80801a0:	4604      	mov	r4, r0
 80801a2:	b9a8      	cbnz	r0, 80801d0 <bme680_get_regs+0x42>
		if (dev->intf == BME680_SPI_INTF) {
 80801a4:	78ab      	ldrb	r3, [r5, #2]
 80801a6:	b93b      	cbnz	r3, 80801b8 <bme680_get_regs+0x2a>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
 80801a8:	4629      	mov	r1, r5
 80801aa:	4630      	mov	r0, r6
 80801ac:	f7ff ff8f 	bl	80800ce <set_mem_page>
			if (rslt == BME680_OK)
 80801b0:	4604      	mov	r4, r0
 80801b2:	b908      	cbnz	r0, 80801b8 <bme680_get_regs+0x2a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 80801b4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80801b8:	6caf      	ldr	r7, [r5, #72]	; 0x48
 80801ba:	464b      	mov	r3, r9
 80801bc:	4642      	mov	r2, r8
 80801be:	4631      	mov	r1, r6
 80801c0:	7868      	ldrb	r0, [r5, #1]
 80801c2:	47b8      	blx	r7
		if (dev->com_rslt != 0)
 80801c4:	2800      	cmp	r0, #0
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
			if (rslt == BME680_OK)
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80801c6:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
		if (dev->com_rslt != 0)
			rslt = BME680_E_COM_FAIL;
 80801ca:	bf18      	it	ne
 80801cc:	f06f 0401 	mvnne.w	r4, #1
	}

	return rslt;
}
 80801d0:	4620      	mov	r0, r4
 80801d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080801d6 <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
 80801d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80801da:	461e      	mov	r6, r3
 80801dc:	b08b      	sub	sp, #44	; 0x2c
 80801de:	4683      	mov	fp, r0
 80801e0:	468a      	mov	sl, r1
 80801e2:	4614      	mov	r4, r2
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 80801e4:	2100      	movs	r1, #0
 80801e6:	2228      	movs	r2, #40	; 0x28
 80801e8:	4668      	mov	r0, sp
 80801ea:	f006 fe12 	bl	8086e12 <memset>
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80801ee:	4630      	mov	r0, r6
 80801f0:	f7ff ff5f 	bl	80800b2 <null_ptr_check>
	if (rslt == BME680_OK) {
 80801f4:	4605      	mov	r5, r0
 80801f6:	bba8      	cbnz	r0, 8080264 <bme680_set_regs+0x8e>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 80801f8:	1e63      	subs	r3, r4, #1
 80801fa:	2b12      	cmp	r3, #18
 80801fc:	d830      	bhi.n	8080260 <bme680_set_regs+0x8a>
 80801fe:	f10d 0801 	add.w	r8, sp, #1
 8080202:	465f      	mov	r7, fp
 8080204:	46c1      	mov	r9, r8
 8080206:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
 808020a:	b2a4      	uxth	r4, r4
 808020c:	ebcb 0307 	rsb	r3, fp, r7
 8080210:	b29b      	uxth	r3, r3
 8080212:	429c      	cmp	r4, r3
 8080214:	d913      	bls.n	808023e <bme680_set_regs+0x68>
				if (dev->intf == BME680_SPI_INTF) {
 8080216:	78b3      	ldrb	r3, [r6, #2]
 8080218:	b943      	cbnz	r3, 808022c <bme680_set_regs+0x56>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 808021a:	4631      	mov	r1, r6
 808021c:	7838      	ldrb	r0, [r7, #0]
 808021e:	f7ff ff56 	bl	80800ce <set_mem_page>
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 8080222:	783b      	ldrb	r3, [r7, #0]
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
				if (dev->intf == BME680_SPI_INTF) {
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 8080224:	4605      	mov	r5, r0
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 8080226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 808022a:	e000      	b.n	808022e <bme680_set_regs+0x58>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
 808022c:	783b      	ldrb	r3, [r7, #0]
 808022e:	f808 3c01 	strb.w	r3, [r8, #-1]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8080232:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8080236:	3701      	adds	r7, #1
 8080238:	f808 3b02 	strb.w	r3, [r8], #2
 808023c:	e7e6      	b.n	808020c <bme680_set_regs+0x36>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
 808023e:	b98d      	cbnz	r5, 8080264 <bme680_set_regs+0x8e>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8080240:	0063      	lsls	r3, r4, #1
 8080242:	3b01      	subs	r3, #1
 8080244:	6cf4      	ldr	r4, [r6, #76]	; 0x4c
 8080246:	b29b      	uxth	r3, r3
 8080248:	464a      	mov	r2, r9
 808024a:	f89d 1000 	ldrb.w	r1, [sp]
 808024e:	7870      	ldrb	r0, [r6, #1]
 8080250:	47a0      	blx	r4
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 8080252:	2800      	cmp	r0, #0
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8080254:	f886 0054 	strb.w	r0, [r6, #84]	; 0x54
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 8080258:	bf18      	it	ne
 808025a:	f06f 0501 	mvnne.w	r5, #1
 808025e:	e001      	b.n	8080264 <bme680_set_regs+0x8e>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
 8080260:	f06f 0503 	mvn.w	r5, #3
		}
	}

	return rslt;
}
 8080264:	4628      	mov	r0, r5
 8080266:	b00b      	add	sp, #44	; 0x2c
 8080268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808026c <bme680_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
 808026c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 808026e:	23e0      	movs	r3, #224	; 0xe0
 8080270:	f88d 3006 	strb.w	r3, [sp, #6]
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 8080274:	23b6      	movs	r3, #182	; 0xb6

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
 8080276:	4605      	mov	r5, r0
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 8080278:	f88d 3007 	strb.w	r3, [sp, #7]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 808027c:	f7ff ff19 	bl	80800b2 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080280:	4604      	mov	r4, r0
 8080282:	b9d8      	cbnz	r0, 80802bc <bme680_soft_reset+0x50>
		if (dev->intf == BME680_SPI_INTF)
 8080284:	78ab      	ldrb	r3, [r5, #2]
 8080286:	b16b      	cbz	r3, 80802a4 <bme680_soft_reset+0x38>
			rslt = get_mem_page(dev);

		/* Reset the device */
		if (rslt == BME680_OK) {
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8080288:	462b      	mov	r3, r5
 808028a:	2201      	movs	r2, #1
 808028c:	f10d 0107 	add.w	r1, sp, #7
 8080290:	f10d 0006 	add.w	r0, sp, #6
 8080294:	f7ff ff9f 	bl	80801d6 <bme680_set_regs>
 8080298:	4604      	mov	r4, r0
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);
 808029a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 808029c:	200a      	movs	r0, #10
 808029e:	4798      	blx	r3

			if (rslt == BME680_OK) {
 80802a0:	b134      	cbz	r4, 80802b0 <bme680_soft_reset+0x44>
 80802a2:	e00b      	b.n	80802bc <bme680_soft_reset+0x50>

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (dev->intf == BME680_SPI_INTF)
			rslt = get_mem_page(dev);
 80802a4:	4628      	mov	r0, r5
 80802a6:	f7ff ff48 	bl	808013a <get_mem_page>

		/* Reset the device */
		if (rslt == BME680_OK) {
 80802aa:	4604      	mov	r4, r0
 80802ac:	b930      	cbnz	r0, 80802bc <bme680_soft_reset+0x50>
 80802ae:	e7eb      	b.n	8080288 <bme680_soft_reset+0x1c>
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);

			if (rslt == BME680_OK) {
				/* After reset get the memory page */
				if (dev->intf == BME680_SPI_INTF)
 80802b0:	78ab      	ldrb	r3, [r5, #2]
 80802b2:	b91b      	cbnz	r3, 80802bc <bme680_soft_reset+0x50>
					rslt = get_mem_page(dev);
 80802b4:	4628      	mov	r0, r5
 80802b6:	f7ff ff40 	bl	808013a <get_mem_page>
 80802ba:	4604      	mov	r4, r0
			}
		}
	}

	return rslt;
}
 80802bc:	4620      	mov	r0, r4
 80802be:	b003      	add	sp, #12
 80802c0:	bd30      	pop	{r4, r5, pc}

080802c2 <bme680_init>:
/*!
 *@brief This API is the entry point.
 *It reads the chip-id and calibration data from the sensor.
 */
int8_t bme680_init(struct bme680_dev *dev)
{
 80802c2:	b530      	push	{r4, r5, lr}
 80802c4:	b08d      	sub	sp, #52	; 0x34
 80802c6:	4604      	mov	r4, r0
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80802c8:	f7ff fef3 	bl	80800b2 <null_ptr_check>
	if (rslt == BME680_OK) {
 80802cc:	4605      	mov	r5, r0
 80802ce:	2800      	cmp	r0, #0
 80802d0:	f040 80d5 	bne.w	808047e <bme680_init+0x1bc>
		/* Soft reset to restore it to default values*/
		rslt = bme680_soft_reset(dev);
 80802d4:	4620      	mov	r0, r4
 80802d6:	f7ff ffc9 	bl	808026c <bme680_soft_reset>
		if (rslt == BME680_OK) {
 80802da:	4605      	mov	r5, r0
 80802dc:	2800      	cmp	r0, #0
 80802de:	f040 80ce 	bne.w	808047e <bme680_init+0x1bc>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 80802e2:	4623      	mov	r3, r4
 80802e4:	2201      	movs	r2, #1
 80802e6:	4621      	mov	r1, r4
 80802e8:	20d0      	movs	r0, #208	; 0xd0
 80802ea:	f7ff ff50 	bl	808018e <bme680_get_regs>
			if (rslt == BME680_OK) {
 80802ee:	4605      	mov	r5, r0
 80802f0:	2800      	cmp	r0, #0
 80802f2:	f040 80c4 	bne.w	808047e <bme680_init+0x1bc>
				if (dev->chip_id == BME680_CHIP_ID) {
 80802f6:	7823      	ldrb	r3, [r4, #0]
 80802f8:	2b61      	cmp	r3, #97	; 0x61
 80802fa:	f040 80be 	bne.w	808047a <bme680_init+0x1b8>
 * @brief This internal API is used to read the calibrated data from the sensor.
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 80802fe:	4601      	mov	r1, r0
 8080300:	2229      	movs	r2, #41	; 0x29
 8080302:	a801      	add	r0, sp, #4
 8080304:	f006 fd85 	bl	8086e12 <memset>
	uint8_t temp_var = 0; /* Temporary variable */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080308:	4620      	mov	r0, r4
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
	uint8_t temp_var = 0; /* Temporary variable */
 808030a:	f88d 5003 	strb.w	r5, [sp, #3]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 808030e:	f7ff fed0 	bl	80800b2 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080312:	4605      	mov	r5, r0
 8080314:	2800      	cmp	r0, #0
 8080316:	f040 80b2 	bne.w	808047e <bme680_init+0x1bc>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 808031a:	4623      	mov	r3, r4
 808031c:	2219      	movs	r2, #25
 808031e:	a901      	add	r1, sp, #4
 8080320:	2089      	movs	r0, #137	; 0x89
 8080322:	f7ff ff34 	bl	808018e <bme680_get_regs>
		/* Append the second half in the same array */
		if (rslt == BME680_OK)
 8080326:	4605      	mov	r5, r0
 8080328:	b938      	cbnz	r0, 808033a <bme680_init+0x78>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 808032a:	4623      	mov	r3, r4
 808032c:	2210      	movs	r2, #16
 808032e:	f10d 011d 	add.w	r1, sp, #29
 8080332:	20e1      	movs	r0, #225	; 0xe1
 8080334:	f7ff ff2b 	bl	808018e <bme680_get_regs>
 8080338:	4605      	mov	r5, r0
			, BME680_COEFF_ADDR2_LEN, dev);

		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 808033a:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 808033e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8080342:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080346:	82e3      	strh	r3, [r4, #22]
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 8080348:	f89d 2006 	ldrb.w	r2, [sp, #6]
 808034c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8080350:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080354:	8323      	strh	r3, [r4, #24]
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 8080356:	f89d 3007 	ldrb.w	r3, [sp, #7]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 808035a:	f89d 200a 	ldrb.w	r2, [sp, #10]
		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 808035e:	76a3      	strb	r3, [r4, #26]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 8080360:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8080364:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080368:	83a3      	strh	r3, [r4, #28]
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 808036a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 808036e:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8080372:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080376:	83e3      	strh	r3, [r4, #30]
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 8080378:	f89d 300d 	ldrb.w	r3, [sp, #13]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 808037c:	f89d 2010 	ldrb.w	r2, [sp, #16]
		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 8080380:	f884 3020 	strb.w	r3, [r4, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 8080384:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8080388:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808038c:	8463      	strh	r3, [r4, #34]	; 0x22
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 808038e:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8080392:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8080396:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808039a:	84a3      	strh	r3, [r4, #36]	; 0x24
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 808039c:	f89d 3014 	ldrb.w	r3, [sp, #20]
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 80803a0:	f89d 2018 	ldrb.w	r2, [sp, #24]
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 80803a4:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 80803a8:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80803ac:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 80803b0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80803b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80803b8:	8523      	strh	r3, [r4, #40]	; 0x28
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 80803ba:	f89d 201a 	ldrb.w	r2, [sp, #26]
 80803be:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80803c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80803c6:	8563      	strh	r3, [r4, #42]	; 0x2a
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 80803c8:	f89d 301b 	ldrb.w	r3, [sp, #27]

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80803cc:	f89d 101f 	ldrb.w	r1, [sp, #31]
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 80803d0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 80803d4:	f89d 301e 	ldrb.w	r3, [sp, #30]
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80803d8:	f003 020f 	and.w	r2, r3, #15
 80803dc:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 80803e0:	8122      	strh	r2, [r4, #8]
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80803e2:	f89d 201d 	ldrb.w	r2, [sp, #29]
 80803e6:	091b      	lsrs	r3, r3, #4
 80803e8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80803ec:	8163      	strh	r3, [r4, #10]
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 80803ee:	f89d 3020 	ldrb.w	r3, [sp, #32]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 80803f2:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 80803f6:	7323      	strb	r3, [r4, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
 80803f8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80803fc:	7363      	strb	r3, [r4, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
 80803fe:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8080402:	73a3      	strb	r3, [r4, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
 8080404:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8080408:	73e3      	strb	r3, [r4, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 808040a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 808040e:	7423      	strb	r3, [r4, #16]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 8080410:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8080414:	7463      	strb	r3, [r4, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 8080416:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 808041a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808041e:	8263      	strh	r3, [r4, #18]
			coeff_array[BME680_GH2_LSB_REG]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 8080420:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 8080424:	7523      	strb	r3, [r4, #20]

		/* Other coefficients */
		if (rslt == BME680_OK) {
 8080426:	bb15      	cbnz	r5, 808046e <bme680_init+0x1ac>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 8080428:	4623      	mov	r3, r4
 808042a:	2201      	movs	r2, #1
 808042c:	f10d 0103 	add.w	r1, sp, #3
 8080430:	2002      	movs	r0, #2
 8080432:	f7ff feac 	bl	808018e <bme680_get_regs>

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 8080436:	f89d 3003 	ldrb.w	r3, [sp, #3]
			if (rslt == BME680_OK) {
 808043a:	4605      	mov	r5, r0

		/* Other coefficients */
		if (rslt == BME680_OK) {
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 808043c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8080440:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if (rslt == BME680_OK) {
 8080444:	b998      	cbnz	r0, 808046e <bme680_init+0x1ac>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 8080446:	4623      	mov	r3, r4
 8080448:	2201      	movs	r2, #1
 808044a:	f10d 0103 	add.w	r1, sp, #3
 808044e:	f7ff fe9e 	bl	808018e <bme680_get_regs>

				dev->calib.res_heat_val = (int8_t) temp_var;
 8080452:	f89d 3003 	ldrb.w	r3, [sp, #3]
				if (rslt == BME680_OK)
 8080456:	4605      	mov	r5, r0

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
			if (rslt == BME680_OK) {
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);

				dev->calib.res_heat_val = (int8_t) temp_var;
 8080458:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
				if (rslt == BME680_OK)
 808045c:	b938      	cbnz	r0, 808046e <bme680_init+0x1ac>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 808045e:	4623      	mov	r3, r4
 8080460:	2201      	movs	r2, #1
 8080462:	f10d 0103 	add.w	r1, sp, #3
 8080466:	2004      	movs	r0, #4
 8080468:	f7ff fe91 	bl	808018e <bme680_get_regs>
 808046c:	4605      	mov	r5, r0
			}
		}
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 808046e:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 8080472:	111b      	asrs	r3, r3, #4
 8080474:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 8080478:	e001      	b.n	808047e <bme680_init+0x1bc>
			if (rslt == BME680_OK) {
				if (dev->chip_id == BME680_CHIP_ID) {
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
				} else {
					rslt = BME680_E_DEV_NOT_FOUND;
 808047a:	f06f 0502 	mvn.w	r5, #2
			}
		}
	}

	return rslt;
}
 808047e:	4628      	mov	r0, r5
 8080480:	b00d      	add	sp, #52	; 0x34
 8080482:	bd30      	pop	{r4, r5, pc}

08080484 <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 8080484:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8080486:	2374      	movs	r3, #116	; 0x74

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 8080488:	4604      	mov	r4, r0
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 808048a:	f88d 3007 	strb.w	r3, [sp, #7]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 808048e:	f7ff fe10 	bl	80800b2 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080492:	bba0      	cbnz	r0, 80804fe <bme680_set_sensor_mode+0x7a>
 8080494:	4605      	mov	r5, r0
		/* Call repeatedly until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 8080496:	4623      	mov	r3, r4
 8080498:	2201      	movs	r2, #1
 808049a:	f10d 0106 	add.w	r1, sp, #6
 808049e:	2074      	movs	r0, #116	; 0x74
 80804a0:	f7ff fe75 	bl	808018e <bme680_get_regs>
			if (rslt == BME680_OK) {
 80804a4:	b9a0      	cbnz	r0, 80804d0 <bme680_set_sensor_mode+0x4c>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 80804a6:	f89d 3006 	ldrb.w	r3, [sp, #6]

				if (pow_mode != BME680_SLEEP_MODE) {
 80804aa:	f013 0503 	ands.w	r5, r3, #3
 80804ae:	d011      	beq.n	80804d4 <bme680_set_sensor_mode+0x50>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 80804b0:	f023 0303 	bic.w	r3, r3, #3
 80804b4:	f88d 3006 	strb.w	r3, [sp, #6]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80804b8:	2201      	movs	r2, #1
 80804ba:	4623      	mov	r3, r4
 80804bc:	f10d 0106 	add.w	r1, sp, #6
 80804c0:	f10d 0007 	add.w	r0, sp, #7
 80804c4:	f7ff fe87 	bl	80801d6 <bme680_set_regs>
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 80804c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80804ca:	200a      	movs	r0, #10
 80804cc:	4798      	blx	r3
 80804ce:	e7e2      	b.n	8080496 <bme680_set_sensor_mode+0x12>
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
 80804d0:	2d00      	cmp	r5, #0
 80804d2:	d1e0      	bne.n	8080496 <bme680_set_sensor_mode+0x12>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
 80804d4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80804d8:	b18b      	cbz	r3, 80804fe <bme680_set_sensor_mode+0x7a>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 80804da:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80804de:	f003 0303 	and.w	r3, r3, #3
 80804e2:	f022 0203 	bic.w	r2, r2, #3
 80804e6:	4313      	orrs	r3, r2
 80804e8:	f88d 3006 	strb.w	r3, [sp, #6]
			if (rslt == BME680_OK)
 80804ec:	b938      	cbnz	r0, 80804fe <bme680_set_sensor_mode+0x7a>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80804ee:	4623      	mov	r3, r4
 80804f0:	2201      	movs	r2, #1
 80804f2:	f10d 0106 	add.w	r1, sp, #6
 80804f6:	f10d 0007 	add.w	r0, sp, #7
 80804fa:	f7ff fe6c 	bl	80801d6 <bme680_set_regs>
		}
	}

	return rslt;
}
 80804fe:	b003      	add	sp, #12
 8080500:	bd30      	pop	{r4, r5, pc}

08080502 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 8080502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 8080506:	2300      	movs	r3, #0
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 8080508:	b088      	sub	sp, #32
 808050a:	4606      	mov	r6, r0
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 808050c:	4608      	mov	r0, r1
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 808050e:	460c      	mov	r4, r1
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 8080510:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t count = 0;
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8080514:	9304      	str	r3, [sp, #16]
 8080516:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 808051a:	9306      	str	r3, [sp, #24]
 808051c:	f8ad 301c 	strh.w	r3, [sp, #28]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080520:	f7ff fdc7 	bl	80800b2 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080524:	2800      	cmp	r0, #0
 8080526:	f040 815f 	bne.w	80807e8 <bme680_set_sensor_settings+0x2e6>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 808052a:	0732      	lsls	r2, r6, #28
	uint8_t reg_addr;
	uint8_t data = 0;
	uint8_t count = 0;
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 808052c:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (desired_settings & BME680_GAS_MEAS_SEL)
 8080530:	d565      	bpl.n	80805fe <bme680_set_sensor_settings+0xfc>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
 8080532:	2f01      	cmp	r7, #1

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
 8080534:	f8ad 0008 	strh.w	r0, [sp, #8]
		uint8_t reg_data[2] = {0};
 8080538:	f8ad 000c 	strh.w	r0, [sp, #12]

		if (dev->power_mode == BME680_FORCED_MODE) {
 808053c:	d15e      	bne.n	80805fc <bme680_set_sensor_settings+0xfa>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 808053e:	235a      	movs	r3, #90	; 0x5a
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 8080540:	f8b1 5040 	ldrh.w	r5, [r1, #64]	; 0x40

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 8080544:	f88d 3008 	strb.w	r3, [sp, #8]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 8080548:	f9b1 3012 	ldrsh.w	r3, [r1, #18]
 808054c:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
 8080550:	f503 3316 	add.w	r3, r3, #153600	; 0x25800
 8080554:	f203 1399 	addw	r3, r3, #409	; 0x199
 8080558:	bf28      	it	cs
 808055a:	f44f 75c8 	movcs.w	r5, #400	; 0x190
 808055e:	435d      	muls	r5, r3
 8080560:	2314      	movs	r3, #20
 8080562:	fb95 f5f3 	sdiv	r5, r5, r3
 8080566:	f505 1348 	add.w	r3, r5, #3276800	; 0x320000
 808056a:	250a      	movs	r5, #10
 808056c:	fb93 f5f5 	sdiv	r5, r3, r5
 8080570:	f991 2011 	ldrsb.w	r2, [r1, #17]
 8080574:	f991 3004 	ldrsb.w	r3, [r1, #4]
 8080578:	f502 7244 	add.w	r2, r2, #784	; 0x310
 808057c:	436a      	muls	r2, r5
 808057e:	f991 5014 	ldrsb.w	r5, [r1, #20]
 8080582:	435d      	muls	r5, r3
 8080584:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080588:	fb95 f3f3 	sdiv	r3, r5, r3
 808058c:	021b      	lsls	r3, r3, #8
 808058e:	eb03 0162 	add.w	r1, r3, r2, asr #1
 8080592:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8080596:	3304      	adds	r3, #4
 8080598:	fb91 f2f3 	sdiv	r2, r1, r3
 808059c:	f994 1035 	ldrsb.w	r1, [r4, #53]	; 0x35
 80805a0:	2383      	movs	r3, #131	; 0x83
 80805a2:	434b      	muls	r3, r1
 80805a4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80805a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80805ac:	2222      	movs	r2, #34	; 0x22
 80805ae:	3bfa      	subs	r3, #250	; 0xfa
 80805b0:	4353      	muls	r3, r2
 80805b2:	2264      	movs	r2, #100	; 0x64
 80805b4:	3332      	adds	r3, #50	; 0x32
 80805b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80805ba:	f88d 300c 	strb.w	r3, [sp, #12]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80805be:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 80805c2:	f88d 2009 	strb.w	r2, [sp, #9]
static uint8_t calc_heater_dur(uint16_t dur)
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
 80805c6:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 80805ca:	d20a      	bcs.n	80805e2 <bme680_set_sensor_settings+0xe0>
		durval = 0xff; /* Max duration*/
	} else {
		while (dur > 0x3F) {
 80805cc:	2b3f      	cmp	r3, #63	; 0x3f
 80805ce:	b2c2      	uxtb	r2, r0
 80805d0:	f100 0001 	add.w	r0, r0, #1
 80805d4:	d901      	bls.n	80805da <bme680_set_sensor_settings+0xd8>
			dur = dur / 4;
 80805d6:	089b      	lsrs	r3, r3, #2
 80805d8:	e7f8      	b.n	80805cc <bme680_set_sensor_settings+0xca>
			factor += 1;
		}
		durval = (uint8_t) (dur + (factor * 64));
 80805da:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 80805de:	b2db      	uxtb	r3, r3
 80805e0:	e000      	b.n	80805e4 <bme680_set_sensor_settings+0xe2>
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
		durval = 0xff; /* Max duration*/
 80805e2:	23ff      	movs	r3, #255	; 0xff

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80805e4:	f88d 300d 	strb.w	r3, [sp, #13]
			dev->gas_sett.nb_conv = 0;
 80805e8:	2300      	movs	r3, #0
 80805ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
		}
		if (rslt == BME680_OK)
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80805ee:	2202      	movs	r2, #2
 80805f0:	4623      	mov	r3, r4
 80805f2:	a903      	add	r1, sp, #12
 80805f4:	a802      	add	r0, sp, #8
 80805f6:	f7ff fdee 	bl	80801d6 <bme680_set_regs>
 80805fa:	e000      	b.n	80805fe <bme680_set_sensor_settings+0xfc>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
 80805fc:	2001      	movs	r0, #1
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (desired_settings & BME680_GAS_MEAS_SEL)
			rslt = set_gas_config(dev);

		dev->power_mode = BME680_SLEEP_MODE;
 80805fe:	2300      	movs	r3, #0
 8080600:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
 8080604:	b910      	cbnz	r0, 808060c <bme680_set_sensor_settings+0x10a>
			rslt = bme680_set_sensor_mode(dev);
 8080606:	4620      	mov	r0, r4
 8080608:	f7ff ff3c 	bl	8080484 <bme680_set_sensor_mode>

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
 808060c:	f006 0510 	and.w	r5, r6, #16
 8080610:	b2ad      	uxth	r5, r5
 8080612:	b305      	cbz	r5, 8080656 <bme680_set_sensor_settings+0x154>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 8080614:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080618:	2107      	movs	r1, #7
 808061a:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 808061e:	f7ff fda7 	bl	8080170 <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_ODR_FILT_ADDR;

			if (rslt == BME680_OK)
 8080622:	b930      	cbnz	r0, 8080632 <bme680_set_sensor_settings+0x130>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080624:	4623      	mov	r3, r4
 8080626:	2201      	movs	r2, #1
 8080628:	f10d 0107 	add.w	r1, sp, #7
 808062c:	2075      	movs	r0, #117	; 0x75
 808062e:	f7ff fdae 	bl	808018e <bme680_get_regs>

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8080632:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b

			reg_array[count] = reg_addr; /* Append configuration */
			data_array[count] = data;
			count++;
 8080636:	2501      	movs	r5, #1

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8080638:	009b      	lsls	r3, r3, #2
 808063a:	f003 021c 	and.w	r2, r3, #28
 808063e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8080642:	f023 031c 	bic.w	r3, r3, #28
 8080646:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 8080648:	2275      	movs	r2, #117	; 0x75

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 808064a:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 808064e:	f88d 2010 	strb.w	r2, [sp, #16]
			data_array[count] = data;
 8080652:	f88d 3018 	strb.w	r3, [sp, #24]
			count++;
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
 8080656:	06b3      	lsls	r3, r6, #26
 8080658:	d522      	bpl.n	80806a0 <bme680_set_sensor_settings+0x19e>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 808065a:	f104 0246 	add.w	r2, r4, #70	; 0x46
 808065e:	2108      	movs	r1, #8
 8080660:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 8080664:	f7ff fd84 	bl	8080170 <boundary_check.isra.1.constprop.2>
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
 8080668:	b930      	cbnz	r0, 8080678 <bme680_set_sensor_settings+0x176>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 808066a:	4623      	mov	r3, r4
 808066c:	2201      	movs	r2, #1
 808066e:	f10d 0107 	add.w	r1, sp, #7
 8080672:	2070      	movs	r0, #112	; 0x70
 8080674:	f7ff fd8b 	bl	808018e <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8080678:	f89d 3007 	ldrb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 808067c:	2170      	movs	r1, #112	; 0x70
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 808067e:	f023 0208 	bic.w	r2, r3, #8
 8080682:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8080686:	f003 0308 	and.w	r3, r3, #8
 808068a:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 808068c:	aa08      	add	r2, sp, #32
 808068e:	442a      	add	r2, r5
			data_array[count] = data;
			count++;
 8080690:	3501      	adds	r5, #1
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8080692:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 8080696:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 808069a:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 808069e:	b2ed      	uxtb	r5, r5
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 80806a0:	07b1      	lsls	r1, r6, #30
 80806a2:	d033      	beq.n	808070c <bme680_set_sensor_settings+0x20a>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 80806a4:	f104 0246 	add.w	r2, r4, #70	; 0x46
 80806a8:	2105      	movs	r1, #5
 80806aa:	f104 0039 	add.w	r0, r4, #57	; 0x39
 80806ae:	f7ff fd5f 	bl	8080170 <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_T_P_MODE_ADDR;

			if (rslt == BME680_OK)
 80806b2:	b930      	cbnz	r0, 80806c2 <bme680_set_sensor_settings+0x1c0>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80806b4:	4623      	mov	r3, r4
 80806b6:	2201      	movs	r2, #1
 80806b8:	f10d 0107 	add.w	r1, sp, #7
 80806bc:	2074      	movs	r0, #116	; 0x74
 80806be:	f7ff fd66 	bl	808018e <bme680_get_regs>

			if (desired_settings & BME680_OST_SEL)
 80806c2:	07f2      	lsls	r2, r6, #31
 80806c4:	d509      	bpl.n	80806da <bme680_set_sensor_settings+0x1d8>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 80806c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80806ca:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80806ce:	f003 031f 	and.w	r3, r3, #31
 80806d2:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80806d6:	f88d 3007 	strb.w	r3, [sp, #7]

			if (desired_settings & BME680_OSP_SEL)
 80806da:	07b3      	lsls	r3, r6, #30
 80806dc:	d50b      	bpl.n	80806f6 <bme680_set_sensor_settings+0x1f4>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 80806de:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 80806e2:	009b      	lsls	r3, r3, #2
 80806e4:	f003 021c 	and.w	r2, r3, #28
 80806e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80806ec:	f023 031c 	bic.w	r3, r3, #28
 80806f0:	4313      	orrs	r3, r2
 80806f2:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr;
 80806f6:	ab08      	add	r3, sp, #32
 80806f8:	442b      	add	r3, r5
 80806fa:	2274      	movs	r2, #116	; 0x74
 80806fc:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 8080700:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 8080704:	3501      	adds	r5, #1

			if (desired_settings & BME680_OSP_SEL)
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);

			reg_array[count] = reg_addr;
			data_array[count] = data;
 8080706:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 808070a:	b2ed      	uxtb	r5, r5
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
 808070c:	0771      	lsls	r1, r6, #29
 808070e:	d522      	bpl.n	8080756 <bme680_set_sensor_settings+0x254>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 8080710:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080714:	2105      	movs	r1, #5
 8080716:	f104 0038 	add.w	r0, r4, #56	; 0x38
 808071a:	f7ff fd29 	bl	8080170 <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
 808071e:	b930      	cbnz	r0, 808072e <bme680_set_sensor_settings+0x22c>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080720:	4623      	mov	r3, r4
 8080722:	2201      	movs	r2, #1
 8080724:	f10d 0107 	add.w	r1, sp, #7
 8080728:	2072      	movs	r0, #114	; 0x72
 808072a:	f7ff fd30 	bl	808018e <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 808072e:	f89d 3007 	ldrb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 8080732:	2172      	movs	r1, #114	; 0x72
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8080734:	f023 0207 	bic.w	r2, r3, #7
 8080738:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 808073c:	f003 0307 	and.w	r3, r3, #7
 8080740:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 8080742:	aa08      	add	r2, sp, #32
 8080744:	442a      	add	r2, r5
			data_array[count] = data;
			count++;
 8080746:	3501      	adds	r5, #1
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8080748:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 808074c:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 8080750:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 8080754:	b2ed      	uxtb	r5, r5
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 8080756:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 808075a:	d03c      	beq.n	80807d6 <bme680_set_sensor_settings+0x2d4>
 808075c:	f104 0846 	add.w	r8, r4, #70	; 0x46
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 8080760:	4642      	mov	r2, r8
 8080762:	2101      	movs	r1, #1
 8080764:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 8080768:	f7ff fd02 	bl	8080170 <boundary_check.isra.1.constprop.2>
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
 808076c:	b968      	cbnz	r0, 808078a <bme680_set_sensor_settings+0x288>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 808076e:	4642      	mov	r2, r8
 8080770:	210a      	movs	r1, #10
 8080772:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8080776:	f7ff fcfb 	bl	8080170 <boundary_check.isra.1.constprop.2>
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;

			if (rslt == BME680_OK)
 808077a:	b930      	cbnz	r0, 808078a <bme680_set_sensor_settings+0x288>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 808077c:	4623      	mov	r3, r4
 808077e:	2201      	movs	r2, #1
 8080780:	f10d 0107 	add.w	r1, sp, #7
 8080784:	2071      	movs	r0, #113	; 0x71
 8080786:	f7ff fd02 	bl	808018e <bme680_get_regs>

			if (desired_settings & BME680_RUN_GAS_SEL)
 808078a:	0672      	lsls	r2, r6, #25
 808078c:	d50b      	bpl.n	80807a6 <bme680_set_sensor_settings+0x2a4>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 808078e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8080792:	011b      	lsls	r3, r3, #4
 8080794:	f003 0210 	and.w	r2, r3, #16
 8080798:	f89d 3007 	ldrb.w	r3, [sp, #7]
 808079c:	f023 0310 	bic.w	r3, r3, #16
 80807a0:	4313      	orrs	r3, r2
 80807a2:	f88d 3007 	strb.w	r3, [sp, #7]

			if (desired_settings & BME680_NBCONV_SEL)
 80807a6:	0633      	lsls	r3, r6, #24
 80807a8:	d50a      	bpl.n	80807c0 <bme680_set_sensor_settings+0x2be>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 80807aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80807ae:	f023 020f 	bic.w	r2, r3, #15
 80807b2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80807b6:	f003 030f 	and.w	r3, r3, #15
 80807ba:	4313      	orrs	r3, r2
 80807bc:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 80807c0:	ab08      	add	r3, sp, #32
 80807c2:	442b      	add	r3, r5
 80807c4:	2271      	movs	r2, #113	; 0x71
 80807c6:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 80807ca:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 80807ce:	3501      	adds	r5, #1

			if (desired_settings & BME680_NBCONV_SEL)
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);

			reg_array[count] = reg_addr; /* Append configuration */
			data_array[count] = data;
 80807d0:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 80807d4:	b2ed      	uxtb	r5, r5
		}

		if (rslt == BME680_OK)
 80807d6:	b928      	cbnz	r0, 80807e4 <bme680_set_sensor_settings+0x2e2>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 80807d8:	4623      	mov	r3, r4
 80807da:	462a      	mov	r2, r5
 80807dc:	a906      	add	r1, sp, #24
 80807de:	a804      	add	r0, sp, #16
 80807e0:	f7ff fcf9 	bl	80801d6 <bme680_set_regs>

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
 80807e4:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
	}

	return rslt;
}
 80807e8:	b008      	add	sp, #32
 80807ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080807f0 <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 80807f0:	b513      	push	{r0, r1, r4, lr}
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80807f2:	4b18      	ldr	r3, [pc, #96]	; (8080854 <bme680_get_profile_dur+0x64>)

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 80807f4:	4604      	mov	r4, r0
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80807f6:	6818      	ldr	r0, [r3, #0]
 80807f8:	889b      	ldrh	r3, [r3, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80807fa:	aa02      	add	r2, sp, #8
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80807fc:	f8ad 3004 	strh.w	r3, [sp, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8080800:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8080804:	9000      	str	r0, [sp, #0]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8080806:	4413      	add	r3, r2
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 8080808:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 808080c:	a802      	add	r0, sp, #8
 808080e:	4402      	add	r2, r0
 8080810:	f812 2c08 	ldrb.w	r2, [r2, #-8]
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8080814:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 8080818:	4413      	add	r3, r2
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 808081a:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
 808081e:	4402      	add	r2, r0

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
 8080820:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8080824:	4413      	add	r3, r2
 8080826:	f240 72ab 	movw	r2, #1963	; 0x7ab
 808082a:	4353      	muls	r3, r2
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 808082c:	f503 5395 	add.w	r3, r3, #4768	; 0x12a0
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 8080830:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8080834:	3319      	adds	r3, #25
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 8080836:	fbb3 f3f2 	udiv	r3, r3, r2

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */

	*duration = (uint16_t) tph_dur;
 808083a:	3301      	adds	r3, #1
 808083c:	b29b      	uxth	r3, r3
 808083e:	8023      	strh	r3, [r4, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
 8080840:	f891 203e 	ldrb.w	r2, [r1, #62]	; 0x3e
 8080844:	b11a      	cbz	r2, 808084e <bme680_get_profile_dur+0x5e>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
 8080846:	f8b1 2042 	ldrh.w	r2, [r1, #66]	; 0x42
 808084a:	4413      	add	r3, r2
 808084c:	8023      	strh	r3, [r4, #0]
	}
}
 808084e:	b002      	add	sp, #8
 8080850:	bd10      	pop	{r4, pc}
 8080852:	bf00      	nop
 8080854:	08087794 	.word	0x08087794

08080858 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8080858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808085c:	4680      	mov	r8, r0
 808085e:	b0a9      	sub	sp, #164	; 0xa4
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080860:	4608      	mov	r0, r1
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8080862:	460c      	mov	r4, r1
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080864:	f7ff fc25 	bl	80800b2 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080868:	4605      	mov	r5, r0
 808086a:	2800      	cmp	r0, #0
 808086c:	f040 8185 	bne.w	8080b7a <bme680_get_sensor_data+0x322>
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 8080870:	af04      	add	r7, sp, #16
 8080872:	4601      	mov	r1, r0
 8080874:	220f      	movs	r2, #15
 8080876:	4638      	mov	r0, r7
 8080878:	f006 facb 	bl	8086e12 <memset>
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 808087c:	4620      	mov	r0, r4
 808087e:	f7ff fc18 	bl	80800b2 <null_ptr_check>
 8080882:	4605      	mov	r5, r0
 8080884:	260a      	movs	r6, #10
	do {
		if (rslt == BME680_OK) {
 8080886:	2d00      	cmp	r5, #0
 8080888:	f040 8171 	bne.w	8080b6e <bme680_get_sensor_data+0x316>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 808088c:	4623      	mov	r3, r4
 808088e:	220f      	movs	r2, #15
 8080890:	4639      	mov	r1, r7
 8080892:	201d      	movs	r0, #29
 8080894:	f7ff fc7b 	bl	808018e <bme680_get_regs>
 8080898:	4605      	mov	r5, r0
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
 808089a:	f89d 0010 	ldrb.w	r0, [sp, #16]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 808089e:	f89d e01e 	ldrb.w	lr, [sp, #30]
		if (rslt == BME680_OK) {
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 80808a2:	f000 030f 	and.w	r3, r0, #15
 80808a6:	f888 3001 	strb.w	r3, [r8, #1]
			data->meas_index = buff[1];
 80808aa:	f89d 3011 	ldrb.w	r3, [sp, #17]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80808ae:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
			data->meas_index = buff[1];
 80808b2:	f888 3002 	strb.w	r3, [r8, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80808b6:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80808ba:	f89d 9013 	ldrb.w	r9, [sp, #19]
 80808be:	9300      	str	r3, [sp, #0]
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80808c0:	f89d 3018 	ldrb.w	r3, [sp, #24]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
 80808c4:	f89d c014 	ldrb.w	ip, [sp, #20]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80808c8:	9301      	str	r3, [sp, #4]
 80808ca:	f89d 3019 	ldrb.w	r3, [sp, #25]
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80808ce:	f89d b015 	ldrb.w	fp, [sp, #21]
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80808d2:	9302      	str	r3, [sp, #8]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80808d4:	f89d 301d 	ldrb.w	r3, [sp, #29]
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80808d8:	f89d 1016 	ldrb.w	r1, [sp, #22]
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80808dc:	9303      	str	r3, [sp, #12]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 80808de:	fa4f f38e 	sxtb.w	r3, lr
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80808e2:	f003 0a20 	and.w	sl, r3, #32
 80808e6:	ea40 000a 	orr.w	r0, r0, sl
 80808ea:	f003 0310 	and.w	r3, r3, #16
 80808ee:	4318      	orrs	r0, r3
 80808f0:	b240      	sxtb	r0, r0

			if (data->status & BME680_NEW_DATA_MSK) {
 80808f2:	2800      	cmp	r0, #0

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
 80808f4:	f89d 2017 	ldrb.w	r2, [sp, #23]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80808f8:	f888 0000 	strb.w	r0, [r8]

			if (data->status & BME680_NEW_DATA_MSK) {
 80808fc:	f280 8134 	bge.w	8080b68 <bme680_get_sensor_data+0x310>
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 8080900:	0912      	lsrs	r2, r2, #4
 8080902:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
 8080906:	ea41 3b0b 	orr.w	fp, r1, fp, lsl #12
 808090a:	8ae1      	ldrh	r1, [r4, #22]
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 808090c:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 8080910:	0049      	lsls	r1, r1, #1
 8080912:	ebc1 01db 	rsb	r1, r1, fp, lsr #3
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8080916:	460a      	mov	r2, r1
 8080918:	17cb      	asrs	r3, r1, #31
 808091a:	105b      	asrs	r3, r3, #1
 808091c:	ea4f 0232 	mov.w	r2, r2, rrx
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080920:	fb02 f603 	mul.w	r6, r2, r3
 8080924:	fba2 2302 	umull	r2, r3, r2, r2
 8080928:	ea4f 3a12 	mov.w	sl, r2, lsr #12
 808092c:	f994 201a 	ldrsb.w	r2, [r4, #26]
 8080930:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8080934:	ea4a 5a03 	orr.w	sl, sl, r3, lsl #20
 8080938:	ea4f 3b23 	mov.w	fp, r3, asr #12
 808093c:	0113      	lsls	r3, r2, #4
 808093e:	17df      	asrs	r7, r3, #31
 8080940:	fb0a f607 	mul.w	r6, sl, r7
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080944:	fb80 0101 	smull	r0, r1, r0, r1
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080948:	fb03 660b 	mla	r6, r3, fp, r6
 808094c:	fbaa 2303 	umull	r2, r3, sl, r3
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080950:	0ac0      	lsrs	r0, r0, #11
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080952:	4433      	add	r3, r6
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080954:	0b92      	lsrs	r2, r2, #14
 8080956:	ea40 5041 	orr.w	r0, r0, r1, lsl #21
 808095a:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 808095e:	1883      	adds	r3, r0, r2
 8080960:	6323      	str	r3, [r4, #48]	; 0x30

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
 8080962:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8080966:	3380      	adds	r3, #128	; 0x80
 8080968:	121b      	asrs	r3, r3, #8
 808096a:	f8a8 3004 	strh.w	r3, [r8, #4]
	int32_t var1;
	int32_t var2;
	int32_t var3;
	int32_t pressure_comp;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 808096e:	6b23      	ldr	r3, [r4, #48]	; 0x30
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8080970:	f994 1026 	ldrsb.w	r1, [r4, #38]	; 0x26
	int32_t var1;
	int32_t var2;
	int32_t var3;
	int32_t pressure_comp;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8080974:	105b      	asrs	r3, r3, #1
 8080976:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 808097a:	1098      	asrs	r0, r3, #2
 808097c:	4340      	muls	r0, r0
 808097e:	12c2      	asrs	r2, r0, #11
 8080980:	4351      	muls	r1, r2
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8080982:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8080986:	1340      	asrs	r0, r0, #13

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8080988:	435a      	muls	r2, r3
 808098a:	0052      	lsls	r2, r2, #1
 808098c:	eb02 02a1 	add.w	r2, r2, r1, asr #2
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8080990:	f9b4 101e 	ldrsh.w	r1, [r4, #30]
	var1 = var1 >> 18;
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 8080994:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8080998:	434b      	muls	r3, r1
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 808099a:	f994 1020 	ldrsb.w	r1, [r4, #32]
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
	var1 = var1 >> 18;
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 808099e:	ea4c 1909 	orr.w	r9, ip, r9, lsl #4
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 80809a2:	0149      	lsls	r1, r1, #5
 80809a4:	4341      	muls	r1, r0
 80809a6:	10c9      	asrs	r1, r1, #3
 80809a8:	eb01 0363 	add.w	r3, r1, r3, asr #1
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
	var1 = var1 >> 18;
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80809ac:	149b      	asrs	r3, r3, #18
 80809ae:	8ba1      	ldrh	r1, [r4, #28]
 80809b0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80809b4:	434b      	muls	r3, r1
 80809b6:	13d9      	asrs	r1, r3, #15
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 80809b8:	9b00      	ldr	r3, [sp, #0]
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 80809ba:	f9b4 0028 	ldrsh.w	r0, [r4, #40]	; 0x28
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
	var1 = var1 >> 18;
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 80809be:	ea49 3903 	orr.w	r9, r9, r3, lsl #12
 80809c2:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 80809c6:	f5c9 1980 	rsb	r9, r9, #1048576	; 0x100000
 80809ca:	041b      	lsls	r3, r3, #16
 80809cc:	eb03 02a2 	add.w	r2, r3, r2, asr #2
 80809d0:	f640 4335 	movw	r3, #3125	; 0xc35
 80809d4:	eba9 3222 	sub.w	r2, r9, r2, asr #12
 80809d8:	435a      	muls	r2, r3
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
 80809da:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
		pressure_comp = ((pressure_comp / var1) << 1);
 80809de:	bfad      	iteet	ge
 80809e0:	fb92 f3f1 	sdivge	r3, r2, r1
	else
		pressure_comp = ((pressure_comp << 1) / var1);
 80809e4:	0052      	lsllt	r2, r2, #1
 80809e6:	fb92 f3f1 	sdivlt	r3, r2, r1
	var1 = var1 >> 18;
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
		pressure_comp = ((pressure_comp / var1) << 1);
 80809ea:	005b      	lslge	r3, r3, #1
	else
		pressure_comp = ((pressure_comp << 1) / var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
		(pressure_comp >> 3)) >> 13)) >> 12;
 80809ec:	10d9      	asrs	r1, r3, #3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 80809ee:	4349      	muls	r1, r1
 80809f0:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
 80809f4:	1349      	asrs	r1, r1, #13
 80809f6:	434a      	muls	r2, r1
 80809f8:	1099      	asrs	r1, r3, #2
 80809fa:	4341      	muls	r1, r0
		pressure_comp = ((pressure_comp << 1) / var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
		(pressure_comp >> 3)) >> 13)) >> 12;
	var2 = ((int32_t)(pressure_comp >> 2) *
		(int32_t)dev->calib.par_p8) >> 13;
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 80809fc:	121e      	asrs	r6, r3, #8
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 80809fe:	1349      	asrs	r1, r1, #13
 8080a00:	eb01 3122 	add.w	r1, r1, r2, asr #12
 8080a04:	fb06 f206 	mul.w	r2, r6, r6
 8080a08:	4356      	muls	r6, r2
 8080a0a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8080a0e:	af08      	add	r7, sp, #32
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8080a10:	4372      	muls	r2, r6
 8080a12:	eb01 4262 	add.w	r2, r1, r2, asr #17
 8080a16:	f994 1027 	ldrsb.w	r1, [r4, #39]	; 0x27
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
 8080a1a:	9e01      	ldr	r6, [sp, #4]
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8080a1c:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
 8080a20:	eb03 1322 	add.w	r3, r3, r2, asr #4
 8080a24:	f8c8 3008 	str.w	r3, [r8, #8]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8080a28:	6b23      	ldr	r3, [r4, #48]	; 0x30
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
 8080a2a:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8080a2e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8080a32:	3380      	adds	r3, #128	; 0x80
 8080a34:	121b      	asrs	r3, r3, #8
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
 8080a36:	4359      	muls	r1, r3
 8080a38:	2264      	movs	r2, #100	; 0x64
 8080a3a:	fb91 f1f2 	sdiv	r1, r1, r2
 8080a3e:	f994 000d 	ldrsb.w	r0, [r4, #13]
 8080a42:	4359      	muls	r1, r3
 8080a44:	4358      	muls	r0, r3
 8080a46:	1189      	asrs	r1, r1, #6
 8080a48:	fb90 f0f2 	sdiv	r0, r0, r2
 8080a4c:	fb91 f1f2 	sdiv	r1, r1, r2
 8080a50:	4401      	add	r1, r0
 8080a52:	8960      	ldrh	r0, [r4, #10]
 8080a54:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8080a58:	4341      	muls	r1, r0
 8080a5a:	9802      	ldr	r0, [sp, #8]
 8080a5c:	1289      	asrs	r1, r1, #10
 8080a5e:	ea40 2606 	orr.w	r6, r0, r6, lsl #8
 8080a62:	8920      	ldrh	r0, [r4, #8]
 8080a64:	eba6 1600 	sub.w	r6, r6, r0, lsl #4
 8080a68:	f994 000c 	ldrsb.w	r0, [r4, #12]
 8080a6c:	4358      	muls	r0, r3
 8080a6e:	fb90 f0f2 	sdiv	r0, r0, r2
 8080a72:	eba6 0060 	sub.w	r0, r6, r0, asr #1
 8080a76:	4348      	muls	r0, r1
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a78:	f994 1010 	ldrsb.w	r1, [r4, #16]
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8080a7c:	4e41      	ldr	r6, [pc, #260]	; (8080b84 <bme680_get_sensor_data+0x32c>)
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a7e:	434b      	muls	r3, r1
 8080a80:	fb93 f2f2 	sdiv	r2, r3, r2
 8080a84:	7be3      	ldrb	r3, [r4, #15]
 8080a86:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8080a8a:	1383      	asrs	r3, r0, #14
	var6 = (var4 * var5) >> 1;
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8080a8c:	435b      	muls	r3, r3
 8080a8e:	1112      	asrs	r2, r2, #4
 8080a90:	129b      	asrs	r3, r3, #10
 8080a92:	4353      	muls	r3, r2
 8080a94:	eb00 0363 	add.w	r3, r0, r3, asr #1
 8080a98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8080a9c:	129b      	asrs	r3, r3, #10
 8080a9e:	4353      	muls	r3, r2
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
 8080aa0:	4a39      	ldr	r2, [pc, #228]	; (8080b88 <bme680_get_sensor_data+0x330>)
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
	var6 = (var4 * var5) >> 1;
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8080aa2:	131b      	asrs	r3, r3, #12
 8080aa4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
 8080aa8:	4293      	cmp	r3, r2
 8080aaa:	bfd4      	ite	le
 8080aac:	f8c8 300c 	strle.w	r3, [r8, #12]
 8080ab0:	f8c8 200c 	strgt.w	r2, [r8, #12]
 8080ab4:	f994 c036 	ldrsb.w	ip, [r4, #54]	; 0x36
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8080ab8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8080aba:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8080abc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8080abe:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8080ac0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8080ac2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8080ac4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2130303777),
		UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2143188679), UINT32_C(2136746228),
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2147483647) };
	/**Look up table 2 for the possible gas range values */
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 8080ac8:	3610      	adds	r6, #16
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8080aca:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2130303777),
		UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2143188679), UINT32_C(2136746228),
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2147483647) };
	/**Look up table 2 for the possible gas range values */
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 8080ace:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8080ad0:	af18      	add	r7, sp, #96	; 0x60
 8080ad2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8080ad4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8080ad6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8080ad8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8080ada:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8080adc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8080ae0:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
		UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080ae4:	f240 503c 	movw	r0, #1340	; 0x53c
 8080ae8:	2305      	movs	r3, #5
 8080aea:	2100      	movs	r1, #0
 8080aec:	fbcc 0103 	smlal	r0, r1, ip, r3
		((int64_t) lookupTable1[gas_range])) >> 16;
 8080af0:	f00e 060f 	and.w	r6, lr, #15
 8080af4:	ab28      	add	r3, sp, #160	; 0xa0
 8080af6:	eb03 0686 	add.w	r6, r3, r6, lsl #2
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
		UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080afa:	f856 7c80 	ldr.w	r7, [r6, #-128]
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080afe:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
		UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080b02:	fba0 2307 	umull	r2, r3, r0, r7
 8080b06:	fb07 3301 	mla	r3, r7, r1, r3
 8080b0a:	0c10      	lsrs	r0, r2, #16
 8080b0c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8080b10:	1419      	asrs	r1, r3, #16
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080b12:	9b03      	ldr	r3, [sp, #12]
 8080b14:	ea4e 0e83 	orr.w	lr, lr, r3, lsl #2
 8080b18:	ea4f 32ce 	mov.w	r2, lr, lsl #15
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8080b1c:	f856 ec40 	ldr.w	lr, [r6, #-64]
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080b20:	f112 427f 	adds.w	r2, r2, #4278190080	; 0xff000000
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8080b24:	fbae 6700 	umull	r6, r7, lr, r0
 8080b28:	fb0e 7701 	mla	r7, lr, r1, r7
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080b2c:	f04f 0300 	mov.w	r3, #0
 8080b30:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 8080b34:	1812      	adds	r2, r2, r0
 8080b36:	414b      	adcs	r3, r1
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8080b38:	0a70      	lsrs	r0, r6, #9
 8080b3a:	ea40 50c7 	orr.w	r0, r0, r7, lsl #23
 8080b3e:	1279      	asrs	r1, r7, #9
 8080b40:	105f      	asrs	r7, r3, #1
 8080b42:	ea4f 0632 	mov.w	r6, r2, rrx
 8080b46:	1980      	adds	r0, r0, r6
 8080b48:	4179      	adcs	r1, r7
 8080b4a:	f005 fe49 	bl	80867e0 <__aeabi_ldivmod>

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8080b4e:	f8c8 0010 	str.w	r0, [r8, #16]
	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
		if (rslt == BME680_OK) {
 8080b52:	b995      	cbnz	r5, 8080b7a <bme680_get_sensor_data+0x322>
			if (data->status & BME680_NEW_DATA_MSK)
 8080b54:	f998 3000 	ldrsb.w	r3, [r8]
 8080b58:	2b00      	cmp	r3, #0
				dev->new_fields = 1;
 8080b5a:	bfba      	itte	lt
 8080b5c:	2301      	movlt	r3, #1
 8080b5e:	f884 3045 	strblt.w	r3, [r4, #69]	; 0x45
			else
				dev->new_fields = 0;
 8080b62:	f884 5045 	strbge.w	r5, [r4, #69]	; 0x45
 8080b66:	e008      	b.n	8080b7a <bme680_get_sensor_data+0x322>
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
				break;
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 8080b68:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8080b6a:	200a      	movs	r0, #10
 8080b6c:	4798      	blx	r3
 8080b6e:	3e01      	subs	r6, #1
		}
		tries--;
	} while (tries);
 8080b70:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8080b74:	f47f ae87 	bne.w	8080886 <bme680_get_sensor_data+0x2e>

	if (!tries)
		rslt = BME680_W_NO_NEW_DATA;
 8080b78:	2502      	movs	r5, #2
				dev->new_fields = 0;
		}
	}

	return rslt;
}
 8080b7a:	4628      	mov	r0, r5
 8080b7c:	b029      	add	sp, #164	; 0xa4
 8080b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080b82:	bf00      	nop
 8080b84:	0808779c 	.word	0x0808779c
 8080b88:	000186a0 	.word	0x000186a0

08080b8c <_Z11watchdogISRv>:
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}

void watchdogISR() {
  watchDogFlag = true;
 8080b8c:	4b01      	ldr	r3, [pc, #4]	; (8080b94 <_Z11watchdogISRv+0x8>)
 8080b8e:	2201      	movs	r2, #1
 8080b90:	701a      	strb	r2, [r3, #0]
 8080b92:	4770      	bx	lr
 8080b94:	20000679 	.word	0x20000679

08080b98 <_Z10measureNow6String>:
// They are intended to allow for customization and control during installations
// and to allow for management.


int measureNow(String command) // Function to force sending data in current hour
{
 8080b98:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8080b9a:	4904      	ldr	r1, [pc, #16]	; (8080bac <_Z10measureNow6String+0x14>)
 8080b9c:	f002 fffd 	bl	8083b9a <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080ba0:	b118      	cbz	r0, 8080baa <_Z10measureNow6String+0x12>
  {
    state = MEASURING_STATE;
 8080ba2:	4b03      	ldr	r3, [pc, #12]	; (8080bb0 <_Z10measureNow6String+0x18>)
 8080ba4:	2203      	movs	r2, #3
 8080ba6:	701a      	strb	r2, [r3, #0]
    return 1;
 8080ba8:	2001      	movs	r0, #1
  }
  else return 0;
}
 8080baa:	bd08      	pop	{r3, pc}
 8080bac:	08087cb0 	.word	0x08087cb0
 8080bb0:	200005ad 	.word	0x200005ad

08080bb4 <_ZN11EEPROMClass4readEi.isra.15>:

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
 8080bb4:	f001 bbfa 	b.w	80823ac <HAL_EEPROM_Read>

08080bb8 <_ZN11EEPROMClass5writeEih.isra.16>:
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
 8080bb8:	f001 bc00 	b.w	80823bc <HAL_EEPROM_Write>

08080bbc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 8080bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080bbe:	4605      	mov	r5, r0
 8080bc0:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8080bc4:	4323      	orrs	r3, r4
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8080bc6:	f88d 3000 	strb.w	r3, [sp]
 8080bca:	233c      	movs	r3, #60	; 0x3c
 8080bcc:	f002 f960 	bl	8082e90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, 60, flags1, flags2);
    }
 8080bd0:	4628      	mov	r0, r5
 8080bd2:	b003      	add	sp, #12
 8080bd4:	bd30      	pop	{r4, r5, pc}
	...

08080bd8 <_Z17getSignalStrengthv>:

  return 1;
}

void getSignalStrength()
{
 8080bd8:	b530      	push	{r4, r5, lr}
 8080bda:	b08f      	sub	sp, #60	; 0x3c
  // New Boron capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
 8080bdc:	4910      	ldr	r1, [pc, #64]	; (8080c20 <_Z17getSignalStrengthv+0x48>)
 8080bde:	a804      	add	r0, sp, #16
 8080be0:	f001 ff0c 	bl	80829fc <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
 8080be4:	a804      	add	r0, sp, #16
 8080be6:	f001 ff64 	bl	8082ab2 <_ZNK14CellularSignal19getAccessTechnologyEv>
 8080bea:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
 8080bec:	a804      	add	r0, sp, #16
 8080bee:	f001 ffbf 	bl	8082b70 <_ZNK14CellularSignal11getStrengthEv>
 8080bf2:	4605      	mov	r5, r0

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
 8080bf4:	a804      	add	r0, sp, #16
 8080bf6:	f001 ffa3 	bl	8082b40 <_ZNK14CellularSignal10getQualityEv>

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
 8080bfa:	f004 ffa3 	bl	8085b44 <__aeabi_f2d>
 8080bfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8080c02:	4628      	mov	r0, r5
 8080c04:	f004 ff9e 	bl	8085b44 <__aeabi_f2d>
 8080c08:	e9cd 0100 	strd	r0, r1, [sp]
 8080c0c:	4b05      	ldr	r3, [pc, #20]	; (8080c24 <_Z17getSignalStrengthv+0x4c>)
 8080c0e:	4a06      	ldr	r2, [pc, #24]	; (8080c28 <_Z17getSignalStrengthv+0x50>)
 8080c10:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8080c14:	2140      	movs	r1, #64	; 0x40
 8080c16:	4805      	ldr	r0, [pc, #20]	; (8080c2c <_Z17getSignalStrengthv+0x54>)
 8080c18:	f001 fe64 	bl	80828e4 <snprintf>
}
 8080c1c:	b00f      	add	sp, #60	; 0x3c
 8080c1e:	bd30      	pop	{r4, r5, pc}
 8080c20:	200006b4 	.word	0x200006b4
 8080c24:	20000418 	.word	0x20000418
 8080c28:	0808785c 	.word	0x0808785c
 8080c2c:	200005d4 	.word	0x200005d4

08080c30 <_Z17connectToParticlev>:


// These functions control the connection and disconnection from Particle
bool connectToParticle() {
 8080c30:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8080c34:	481a      	ldr	r0, [pc, #104]	; (8080ca0 <_Z17connectToParticlev+0x70>)
 8080c36:	2300      	movs	r3, #0
 8080c38:	461a      	mov	r2, r3
 8080c3a:	4619      	mov	r1, r3
 8080c3c:	6840      	ldr	r0, [r0, #4]
 8080c3e:	f001 fdf9 	bl	8082834 <network_on>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080c42:	f240 36e7 	movw	r6, #999	; 0x3e7
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 8080c46:	f001 fd95 	bl	8082774 <spark_cloud_flag_connect>
 8080c4a:	f44f 7496 	mov.w	r4, #300	; 0x12c
 8080c4e:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080c50:	2000      	movs	r0, #0
 8080c52:	f001 fbcb 	bl	80823ec <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080c56:	4680      	mov	r8, r0
 8080c58:	f04f 0900 	mov.w	r9, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080c5c:	2000      	movs	r0, #0
 8080c5e:	f001 fbc5 	bl	80823ec <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080c62:	ebb0 0008 	subs.w	r0, r0, r8
 8080c66:	eb61 0109 	sbc.w	r1, r1, r9
 8080c6a:	428f      	cmp	r7, r1
 8080c6c:	bf08      	it	eq
 8080c6e:	4286      	cmpeq	r6, r0
 8080c70:	d305      	bcc.n	8080c7e <_Z17connectToParticlev+0x4e>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080c72:	f001 fd8f 	bl	8082794 <spark_cloud_flag_connected>
 8080c76:	b910      	cbnz	r0, 8080c7e <_Z17connectToParticlev+0x4e>
            spark_process();
 8080c78:	f001 fd74 	bl	8082764 <spark_process>
 8080c7c:	e7ee      	b.n	8080c5c <_Z17connectToParticlev+0x2c>
 8080c7e:	f001 fd89 	bl	8082794 <spark_cloud_flag_connected>
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 8080c82:	b118      	cbz	r0, 8080c8c <_Z17connectToParticlev+0x5c>
    Particle.process();
  }
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}
 8080c84:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
 8080c88:	f001 bd84 	b.w	8082794 <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8080c8c:	f001 fb76 	bl	808237c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080c90:	4b04      	ldr	r3, [pc, #16]	; (8080ca4 <_Z17connectToParticlev+0x74>)
 8080c92:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8080c94:	f001 fd66 	bl	8082764 <spark_process>
// These functions control the connection and disconnection from Particle
bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 8080c98:	3c01      	subs	r4, #1
 8080c9a:	d0f3      	beq.n	8080c84 <_Z17connectToParticlev+0x54>
 8080c9c:	e7d8      	b.n	8080c50 <_Z17connectToParticlev+0x20>
 8080c9e:	bf00      	nop
 8080ca0:	200006b4 	.word	0x200006b4
 8080ca4:	20000bcc 	.word	0x20000bcc

08080ca8 <_Z22disconnectFromParticlev>:
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}

bool disconnectFromParticle()
{
 8080ca8:	b508      	push	{r3, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
 8080caa:	f001 fd6b 	bl	8082784 <spark_cloud_flag_disconnect>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8080cae:	4806      	ldr	r0, [pc, #24]	; (8080cc8 <_Z22disconnectFromParticlev+0x20>)
 8080cb0:	2300      	movs	r3, #0
 8080cb2:	461a      	mov	r2, r3
 8080cb4:	4619      	mov	r1, r3
 8080cb6:	6840      	ldr	r0, [r0, #4]
 8080cb8:	f001 fdc4 	bl	8082844 <network_off>
  Particle.disconnect();                                          // Otherwise Electron will attempt to reconnect on wake
  Cellular.off();
  delay(1000);                                                    // Bummer but only should happen once an hour
 8080cbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080cc0:	f001 fe30 	bl	8082924 <delay>
  return true;
}
 8080cc4:	2001      	movs	r0, #1
 8080cc6:	bd08      	pop	{r3, pc}
 8080cc8:	200006b4 	.word	0x200006b4

08080ccc <_Z9PMICresetv>:
bool notConnected() {
  return !Particle.connected();                             // This is a requirement to use waitFor
}

// Power Management function
void PMICreset() {
 8080ccc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  power.begin();                                            // Settings for Solar powered power management
 8080cce:	481f      	ldr	r0, [pc, #124]	; (8080d4c <_Z9PMICresetv+0x80>)
 8080cd0:	f002 fc10 	bl	80834f4 <_ZN4PMIC5beginEv>
  power.disableWatchdog();
 8080cd4:	481d      	ldr	r0, [pc, #116]	; (8080d4c <_Z9PMICresetv+0x80>)
 8080cd6:	f002 fdba 	bl	808384e <_ZN4PMIC15disableWatchdogEv>
  if (solarPowerMode) {
 8080cda:	4b1d      	ldr	r3, [pc, #116]	; (8080d50 <_Z9PMICresetv+0x84>)
 8080cdc:	781c      	ldrb	r4, [r3, #0]
 8080cde:	4b1d      	ldr	r3, [pc, #116]	; (8080d54 <_Z9PMICresetv+0x88>)
 8080ce0:	b1bc      	cbz	r4, 8080d12 <_Z9PMICresetv+0x46>
    lowBattLimit = 20;                                      // Trigger for Low Batt State
 8080ce2:	2214      	movs	r2, #20
    power.setInputVoltageLimit(4840);                       // Set the lowest input voltage to 4.84 volts best setting for 6V solar panels
 8080ce4:	f241 21e8 	movw	r1, #4840	; 0x12e8
 8080ce8:	4818      	ldr	r0, [pc, #96]	; (8080d4c <_Z9PMICresetv+0x80>)
// Power Management function
void PMICreset() {
  power.begin();                                            // Settings for Solar powered power management
  power.disableWatchdog();
  if (solarPowerMode) {
    lowBattLimit = 20;                                      // Trigger for Low Batt State
 8080cea:	601a      	str	r2, [r3, #0]
    power.setInputVoltageLimit(4840);                       // Set the lowest input voltage to 4.84 volts best setting for 6V solar panels
 8080cec:	f002 fc84 	bl	80835f8 <_ZN4PMIC20setInputVoltageLimitEt>
    power.setInputCurrentLimit(900);                        // default is 900mA
 8080cf0:	f44f 7161 	mov.w	r1, #900	; 0x384
 8080cf4:	4815      	ldr	r0, [pc, #84]	; (8080d4c <_Z9PMICresetv+0x80>)
 8080cf6:	f002 fd09 	bl	808370c <_ZN4PMIC20setInputCurrentLimitEt>
    power.setChargeCurrent(0,0,1,0,0,0);                    // default is 512mA matches my 3W panel
 8080cfa:	2200      	movs	r2, #0
 8080cfc:	4611      	mov	r1, r2
 8080cfe:	9202      	str	r2, [sp, #8]
 8080d00:	9201      	str	r2, [sp, #4]
 8080d02:	9200      	str	r2, [sp, #0]
 8080d04:	2301      	movs	r3, #1
 8080d06:	4811      	ldr	r0, [pc, #68]	; (8080d4c <_Z9PMICresetv+0x80>)
 8080d08:	f002 fd48 	bl	808379c <_ZN4PMIC16setChargeCurrentEbbbbbb>
    power.setChargeVoltage(4208);                           // Allows us to charge cloe to 100% - battery can't go over 45 celcius
 8080d0c:	f241 0170 	movw	r1, #4208	; 0x1070
 8080d10:	e016      	b.n	8080d40 <_Z9PMICresetv+0x74>
  }
  else  {
    lowBattLimit = 30;                                      // Trigger for Low Batt State
 8080d12:	221e      	movs	r2, #30
    power.setInputVoltageLimit(4208);                       // This is the default value for the Electron
 8080d14:	f241 0170 	movw	r1, #4208	; 0x1070
 8080d18:	480c      	ldr	r0, [pc, #48]	; (8080d4c <_Z9PMICresetv+0x80>)
    power.setInputCurrentLimit(900);                        // default is 900mA
    power.setChargeCurrent(0,0,1,0,0,0);                    // default is 512mA matches my 3W panel
    power.setChargeVoltage(4208);                           // Allows us to charge cloe to 100% - battery can't go over 45 celcius
  }
  else  {
    lowBattLimit = 30;                                      // Trigger for Low Batt State
 8080d1a:	601a      	str	r2, [r3, #0]
    power.setInputVoltageLimit(4208);                       // This is the default value for the Electron
 8080d1c:	f002 fc6c 	bl	80835f8 <_ZN4PMIC20setInputVoltageLimitEt>
    power.setInputCurrentLimit(1500);                       // default is 900mA this let's me charge faster
 8080d20:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8080d24:	4809      	ldr	r0, [pc, #36]	; (8080d4c <_Z9PMICresetv+0x80>)
 8080d26:	f002 fcf1 	bl	808370c <_ZN4PMIC20setInputCurrentLimitEt>
    power.setChargeCurrent(0,1,1,0,0,0);                    // default is 2048mA (011000) = 512mA+1024mA+512mA)
 8080d2a:	2301      	movs	r3, #1
 8080d2c:	4621      	mov	r1, r4
 8080d2e:	9402      	str	r4, [sp, #8]
 8080d30:	9401      	str	r4, [sp, #4]
 8080d32:	9400      	str	r4, [sp, #0]
 8080d34:	461a      	mov	r2, r3
 8080d36:	4805      	ldr	r0, [pc, #20]	; (8080d4c <_Z9PMICresetv+0x80>)
 8080d38:	f002 fd30 	bl	808379c <_ZN4PMIC16setChargeCurrentEbbbbbb>
    power.setChargeVoltage(4112);                           // default is 4.112V termination voltage
 8080d3c:	f241 0110 	movw	r1, #4112	; 0x1010
 8080d40:	4802      	ldr	r0, [pc, #8]	; (8080d4c <_Z9PMICresetv+0x80>)
  }
}
 8080d42:	b004      	add	sp, #16
 8080d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  else  {
    lowBattLimit = 30;                                      // Trigger for Low Batt State
    power.setInputVoltageLimit(4208);                       // This is the default value for the Electron
    power.setInputCurrentLimit(1500);                       // default is 900mA this let's me charge faster
    power.setChargeCurrent(0,1,1,0,0,0);                    // default is 2048mA (011000) = 512mA+1024mA+512mA)
    power.setChargeVoltage(4112);                           // default is 4.112V termination voltage
 8080d48:	f002 bd5b 	b.w	8083802 <_ZN4PMIC16setChargeVoltageEt>
 8080d4c:	200005ae 	.word	0x200005ae
 8080d50:	2000068a 	.word	0x2000068a
 8080d54:	2000050c 	.word	0x2000050c

08080d58 <_Z9heatIndexff>:
// I have tested the results against this table and found this to be within 1%
// https://www.weather.gov/safety/heat-index
// TF = temp in F  -  R = humidity in %
// My starting point was: https://github.com/RobTillaart/Arduino/blob/master/libraries/Temperature/temperature.h
float heatIndex(float TC, float R)
{
 8080d58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080d5c:	460d      	mov	r5, r1
    float TF = (TC * 1.8) + 32.0;                // Need to convert to Farenheit for the calculations
 8080d5e:	f004 fef1 	bl	8085b44 <__aeabi_f2d>
 8080d62:	a37f      	add	r3, pc, #508	; (adr r3, 8080f60 <_Z9heatIndexff+0x208>)
 8080d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080d68:	f004 ff40 	bl	8085bec <__aeabi_dmul>
 8080d6c:	2200      	movs	r2, #0
 8080d6e:	4b7e      	ldr	r3, [pc, #504]	; (8080f68 <_Z9heatIndexff+0x210>)
 8080d70:	f004 fd8a 	bl	8085888 <__adddf3>
 8080d74:	f005 f9ea 	bl	808614c <__aeabi_d2f>
    const float c11 = 61.0;
    const float c12 = 68.0;
    const float c13 = 1.2;
    const float c14 = 0.094;

    float simpleHeatIndex = ((c10 * ((TF+c11+(TF-c12)*c13) + (R*c14))) -32.0) / 1.8;
 8080d78:	497c      	ldr	r1, [pc, #496]	; (8080f6c <_Z9heatIndexff+0x214>)
// https://www.weather.gov/safety/heat-index
// TF = temp in F  -  R = humidity in %
// My starting point was: https://github.com/RobTillaart/Arduino/blob/master/libraries/Temperature/temperature.h
float heatIndex(float TC, float R)
{
    float TF = (TC * 1.8) + 32.0;                // Need to convert to Farenheit for the calculations
 8080d7a:	4604      	mov	r4, r0
    const float c11 = 61.0;
    const float c12 = 68.0;
    const float c13 = 1.2;
    const float c14 = 0.094;

    float simpleHeatIndex = ((c10 * ((TF+c11+(TF-c12)*c13) + (R*c14))) -32.0) / 1.8;
 8080d7c:	f005 fa3a 	bl	80861f4 <__aeabi_fsub>
 8080d80:	497b      	ldr	r1, [pc, #492]	; (8080f70 <_Z9heatIndexff+0x218>)
 8080d82:	f005 fb41 	bl	8086408 <__aeabi_fmul>
 8080d86:	497b      	ldr	r1, [pc, #492]	; (8080f74 <_Z9heatIndexff+0x21c>)
 8080d88:	4606      	mov	r6, r0
 8080d8a:	4620      	mov	r0, r4
 8080d8c:	f005 fa34 	bl	80861f8 <__addsf3>
 8080d90:	4601      	mov	r1, r0
 8080d92:	4630      	mov	r0, r6
 8080d94:	f005 fa30 	bl	80861f8 <__addsf3>
 8080d98:	4977      	ldr	r1, [pc, #476]	; (8080f78 <_Z9heatIndexff+0x220>)
 8080d9a:	4606      	mov	r6, r0
 8080d9c:	4628      	mov	r0, r5
 8080d9e:	f005 fb33 	bl	8086408 <__aeabi_fmul>
 8080da2:	4601      	mov	r1, r0
 8080da4:	4630      	mov	r0, r6
 8080da6:	f005 fa27 	bl	80861f8 <__addsf3>
 8080daa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8080dae:	f005 fb2b 	bl	8086408 <__aeabi_fmul>
 8080db2:	f004 fec7 	bl	8085b44 <__aeabi_f2d>
 8080db6:	2200      	movs	r2, #0
 8080db8:	4b6b      	ldr	r3, [pc, #428]	; (8080f68 <_Z9heatIndexff+0x210>)
 8080dba:	f004 fd63 	bl	8085884 <__aeabi_dsub>
 8080dbe:	a368      	add	r3, pc, #416	; (adr r3, 8080f60 <_Z9heatIndexff+0x208>)
 8080dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080dc4:	f005 f83c 	bl	8085e40 <__aeabi_ddiv>
 8080dc8:	f005 f9c0 	bl	808614c <__aeabi_d2f>

    if (((TF+simpleHeatIndex)/2) > 80.0) {
 8080dcc:	4601      	mov	r1, r0
    const float c11 = 61.0;
    const float c12 = 68.0;
    const float c13 = 1.2;
    const float c14 = 0.094;

    float simpleHeatIndex = ((c10 * ((TF+c11+(TF-c12)*c13) + (R*c14))) -32.0) / 1.8;
 8080dce:	4606      	mov	r6, r0

    if (((TF+simpleHeatIndex)/2) > 80.0) {
 8080dd0:	4620      	mov	r0, r4
 8080dd2:	f005 fa11 	bl	80861f8 <__addsf3>
 8080dd6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8080dda:	f005 fb15 	bl	8086408 <__aeabi_fmul>
 8080dde:	4967      	ldr	r1, [pc, #412]	; (8080f7c <_Z9heatIndexff+0x224>)
 8080de0:	f005 fcce 	bl	8086780 <__aeabi_fcmpgt>
 8080de4:	2800      	cmp	r0, #0
 8080de6:	f000 80b3 	beq.w	8080f50 <_Z9heatIndexff+0x1f8>
      float A = (( c5 * TF) + c2) * TF + c1;
 8080dea:	4965      	ldr	r1, [pc, #404]	; (8080f80 <_Z9heatIndexff+0x228>)
 8080dec:	4620      	mov	r0, r4
 8080dee:	f005 fb0b 	bl	8086408 <__aeabi_fmul>
 8080df2:	4964      	ldr	r1, [pc, #400]	; (8080f84 <_Z9heatIndexff+0x22c>)
 8080df4:	f005 fa00 	bl	80861f8 <__addsf3>
 8080df8:	4621      	mov	r1, r4
 8080dfa:	f005 fb05 	bl	8086408 <__aeabi_fmul>
 8080dfe:	4962      	ldr	r1, [pc, #392]	; (8080f88 <_Z9heatIndexff+0x230>)
 8080e00:	f005 f9f8 	bl	80861f4 <__aeabi_fsub>
      float B = (((c7 * TF) + c4) * TF + c3) * R;
 8080e04:	4961      	ldr	r1, [pc, #388]	; (8080f8c <_Z9heatIndexff+0x234>)
    const float c14 = 0.094;

    float simpleHeatIndex = ((c10 * ((TF+c11+(TF-c12)*c13) + (R*c14))) -32.0) / 1.8;

    if (((TF+simpleHeatIndex)/2) > 80.0) {
      float A = (( c5 * TF) + c2) * TF + c1;
 8080e06:	4607      	mov	r7, r0
      float B = (((c7 * TF) + c4) * TF + c3) * R;
 8080e08:	4620      	mov	r0, r4
 8080e0a:	f005 fafd 	bl	8086408 <__aeabi_fmul>
 8080e0e:	4960      	ldr	r1, [pc, #384]	; (8080f90 <_Z9heatIndexff+0x238>)
 8080e10:	f005 f9f0 	bl	80861f4 <__aeabi_fsub>
 8080e14:	4621      	mov	r1, r4
 8080e16:	f005 faf7 	bl	8086408 <__aeabi_fmul>
 8080e1a:	495e      	ldr	r1, [pc, #376]	; (8080f94 <_Z9heatIndexff+0x23c>)
 8080e1c:	f005 f9ec 	bl	80861f8 <__addsf3>
 8080e20:	4629      	mov	r1, r5
 8080e22:	f005 faf1 	bl	8086408 <__aeabi_fmul>
      float C = (((c9 * TF) + c8) * TF + c6) * R * R;
 8080e26:	495c      	ldr	r1, [pc, #368]	; (8080f98 <_Z9heatIndexff+0x240>)

    float simpleHeatIndex = ((c10 * ((TF+c11+(TF-c12)*c13) + (R*c14))) -32.0) / 1.8;

    if (((TF+simpleHeatIndex)/2) > 80.0) {
      float A = (( c5 * TF) + c2) * TF + c1;
      float B = (((c7 * TF) + c4) * TF + c3) * R;
 8080e28:	4682      	mov	sl, r0
      float C = (((c9 * TF) + c8) * TF + c6) * R * R;
 8080e2a:	4620      	mov	r0, r4
 8080e2c:	f005 faec 	bl	8086408 <__aeabi_fmul>
 8080e30:	495a      	ldr	r1, [pc, #360]	; (8080f9c <_Z9heatIndexff+0x244>)
 8080e32:	f005 f9e1 	bl	80861f8 <__addsf3>
 8080e36:	4621      	mov	r1, r4
 8080e38:	f005 fae6 	bl	8086408 <__aeabi_fmul>
 8080e3c:	4958      	ldr	r1, [pc, #352]	; (8080fa0 <_Z9heatIndexff+0x248>)
 8080e3e:	f005 f9d9 	bl	80861f4 <__aeabi_fsub>
 8080e42:	4629      	mov	r1, r5
 8080e44:	f005 fae0 	bl	8086408 <__aeabi_fmul>
 8080e48:	4629      	mov	r1, r5
 8080e4a:	f005 fadd 	bl	8086408 <__aeabi_fmul>
      if (TF > 80 && TF < 112 && R < 13) {   // Low humidity adjustment
 8080e4e:	494b      	ldr	r1, [pc, #300]	; (8080f7c <_Z9heatIndexff+0x224>)
    float simpleHeatIndex = ((c10 * ((TF+c11+(TF-c12)*c13) + (R*c14))) -32.0) / 1.8;

    if (((TF+simpleHeatIndex)/2) > 80.0) {
      float A = (( c5 * TF) + c2) * TF + c1;
      float B = (((c7 * TF) + c4) * TF + c3) * R;
      float C = (((c9 * TF) + c8) * TF + c6) * R * R;
 8080e50:	4683      	mov	fp, r0
      if (TF > 80 && TF < 112 && R < 13) {   // Low humidity adjustment
 8080e52:	4620      	mov	r0, r4
 8080e54:	f005 fc94 	bl	8086780 <__aeabi_fcmpgt>
 8080e58:	2800      	cmp	r0, #0
 8080e5a:	d035      	beq.n	8080ec8 <_Z9heatIndexff+0x170>
 8080e5c:	4951      	ldr	r1, [pc, #324]	; (8080fa4 <_Z9heatIndexff+0x24c>)
 8080e5e:	4620      	mov	r0, r4
 8080e60:	f005 fc70 	bl	8086744 <__aeabi_fcmplt>
 8080e64:	2800      	cmp	r0, #0
 8080e66:	d076      	beq.n	8080f56 <_Z9heatIndexff+0x1fe>
 8080e68:	494f      	ldr	r1, [pc, #316]	; (8080fa8 <_Z9heatIndexff+0x250>)
 8080e6a:	4628      	mov	r0, r5
 8080e6c:	f005 fc6a 	bl	8086744 <__aeabi_fcmplt>
 8080e70:	2800      	cmp	r0, #0
 8080e72:	d070      	beq.n	8080f56 <_Z9heatIndexff+0x1fe>
        D = ((hl1-R)/hl2)*sqrt((hl3-abs(TF-hl4))/17);
 8080e74:	494d      	ldr	r1, [pc, #308]	; (8080fac <_Z9heatIndexff+0x254>)
 8080e76:	4620      	mov	r0, r4
 8080e78:	f005 f9bc 	bl	80861f4 <__aeabi_fsub>
 8080e7c:	f005 fc8a 	bl	8086794 <__aeabi_f2iz>
 8080e80:	2800      	cmp	r0, #0
 8080e82:	bfb8      	it	lt
 8080e84:	4240      	neglt	r0, r0
 8080e86:	f005 fa6b 	bl	8086360 <__aeabi_i2f>
 8080e8a:	4601      	mov	r1, r0
 8080e8c:	4848      	ldr	r0, [pc, #288]	; (8080fb0 <_Z9heatIndexff+0x258>)
 8080e8e:	f005 f9b1 	bl	80861f4 <__aeabi_fsub>
 8080e92:	4947      	ldr	r1, [pc, #284]	; (8080fb0 <_Z9heatIndexff+0x258>)
 8080e94:	f005 fb6c 	bl	8086570 <__aeabi_fdiv>
 8080e98:	f004 fe54 	bl	8085b44 <__aeabi_f2d>
 8080e9c:	f003 fd4e 	bl	808493c <sqrt>
 8080ea0:	4680      	mov	r8, r0
 8080ea2:	4689      	mov	r9, r1
 8080ea4:	4840      	ldr	r0, [pc, #256]	; (8080fa8 <_Z9heatIndexff+0x250>)
 8080ea6:	4629      	mov	r1, r5
 8080ea8:	f005 f9a4 	bl	80861f4 <__aeabi_fsub>
 8080eac:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8080eb0:	f005 faaa 	bl	8086408 <__aeabi_fmul>
 8080eb4:	f004 fe46 	bl	8085b44 <__aeabi_f2d>
 8080eb8:	4642      	mov	r2, r8
 8080eba:	464b      	mov	r3, r9
 8080ebc:	f004 fe96 	bl	8085bec <__aeabi_dmul>
 8080ec0:	f005 f944 	bl	808614c <__aeabi_d2f>
 8080ec4:	4606      	mov	r6, r0
 8080ec6:	e005      	b.n	8080ed4 <_Z9heatIndexff+0x17c>
      }
      if (TF > 80 && TF < 87 && R > 85) {  // High humidity adjustment
 8080ec8:	492c      	ldr	r1, [pc, #176]	; (8080f7c <_Z9heatIndexff+0x224>)
 8080eca:	4620      	mov	r0, r4
 8080ecc:	f005 fc58 	bl	8086780 <__aeabi_fcmpgt>
    // Constants for the high heat and low humidity adjustment (hl or high/low)
    const float hl1 = 13.0;
    const float hl2 = 4.0;
    const float hl3 = 17.0;
    const float hl4 = 95.0;
    float D = 0;
 8080ed0:	2600      	movs	r6, #0
      float B = (((c7 * TF) + c4) * TF + c3) * R;
      float C = (((c9 * TF) + c8) * TF + c6) * R * R;
      if (TF > 80 && TF < 112 && R < 13) {   // Low humidity adjustment
        D = ((hl1-R)/hl2)*sqrt((hl3-abs(TF-hl4))/17);
      }
      if (TF > 80 && TF < 87 && R > 85) {  // High humidity adjustment
 8080ed2:	b1f0      	cbz	r0, 8080f12 <_Z9heatIndexff+0x1ba>
 8080ed4:	4937      	ldr	r1, [pc, #220]	; (8080fb4 <_Z9heatIndexff+0x25c>)
 8080ed6:	4620      	mov	r0, r4
 8080ed8:	f005 fc34 	bl	8086744 <__aeabi_fcmplt>
 8080edc:	b1d8      	cbz	r0, 8080f16 <_Z9heatIndexff+0x1be>
 8080ede:	4936      	ldr	r1, [pc, #216]	; (8080fb8 <_Z9heatIndexff+0x260>)
 8080ee0:	4628      	mov	r0, r5
 8080ee2:	f005 fc4d 	bl	8086780 <__aeabi_fcmpgt>
 8080ee6:	b1b0      	cbz	r0, 8080f16 <_Z9heatIndexff+0x1be>
        E = ((R-hh1)/hh2)*((hh3-TF)/hh4);
 8080ee8:	4933      	ldr	r1, [pc, #204]	; (8080fb8 <_Z9heatIndexff+0x260>)
 8080eea:	4628      	mov	r0, r5
 8080eec:	f005 f982 	bl	80861f4 <__aeabi_fsub>
 8080ef0:	4932      	ldr	r1, [pc, #200]	; (8080fbc <_Z9heatIndexff+0x264>)
 8080ef2:	f005 fb3d 	bl	8086570 <__aeabi_fdiv>
 8080ef6:	4621      	mov	r1, r4
 8080ef8:	4605      	mov	r5, r0
 8080efa:	482e      	ldr	r0, [pc, #184]	; (8080fb4 <_Z9heatIndexff+0x25c>)
 8080efc:	f005 f97a 	bl	80861f4 <__aeabi_fsub>
 8080f00:	492f      	ldr	r1, [pc, #188]	; (8080fc0 <_Z9heatIndexff+0x268>)
 8080f02:	f005 fb35 	bl	8086570 <__aeabi_fdiv>
 8080f06:	4601      	mov	r1, r0
 8080f08:	4628      	mov	r0, r5
 8080f0a:	f005 fa7d 	bl	8086408 <__aeabi_fmul>
 8080f0e:	4604      	mov	r4, r0
 8080f10:	e002      	b.n	8080f18 <_Z9heatIndexff+0x1c0>
    // Constants for the high heat and high humidity adjustment (hh or high/high)
    const float hh1 = 85.0;
    const float hh2 = 10.0;
    const float hh3 = 87.0;
    const float hh4 = 5.0;
    float E = 0;
 8080f12:	4634      	mov	r4, r6
 8080f14:	e000      	b.n	8080f18 <_Z9heatIndexff+0x1c0>
 8080f16:	2400      	movs	r4, #0
        D = ((hl1-R)/hl2)*sqrt((hl3-abs(TF-hl4))/17);
      }
      if (TF > 80 && TF < 87 && R > 85) {  // High humidity adjustment
        E = ((R-hh1)/hh2)*((hh3-TF)/hh4);
      }
      return ((A + B + C - D + E) - 32.0) / 1.8;
 8080f18:	4651      	mov	r1, sl
 8080f1a:	4638      	mov	r0, r7
 8080f1c:	f005 f96c 	bl	80861f8 <__addsf3>
 8080f20:	4659      	mov	r1, fp
 8080f22:	f005 f969 	bl	80861f8 <__addsf3>
 8080f26:	4631      	mov	r1, r6
 8080f28:	f005 f964 	bl	80861f4 <__aeabi_fsub>
 8080f2c:	4621      	mov	r1, r4
 8080f2e:	f005 f963 	bl	80861f8 <__addsf3>
 8080f32:	f004 fe07 	bl	8085b44 <__aeabi_f2d>
 8080f36:	2200      	movs	r2, #0
 8080f38:	4b0b      	ldr	r3, [pc, #44]	; (8080f68 <_Z9heatIndexff+0x210>)
 8080f3a:	f004 fca3 	bl	8085884 <__aeabi_dsub>
 8080f3e:	a308      	add	r3, pc, #32	; (adr r3, 8080f60 <_Z9heatIndexff+0x208>)
 8080f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080f44:	f004 ff7c 	bl	8085e40 <__aeabi_ddiv>
 8080f48:	f005 f900 	bl	808614c <__aeabi_d2f>
 8080f4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
    else return simpleHeatIndex;
 8080f50:	4630      	mov	r0, r6
 8080f52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    // Constants for the high heat and low humidity adjustment (hl or high/low)
    const float hl1 = 13.0;
    const float hl2 = 4.0;
    const float hl3 = 17.0;
    const float hl4 = 95.0;
    float D = 0;
 8080f56:	2600      	movs	r6, #0
 8080f58:	e7bc      	b.n	8080ed4 <_Z9heatIndexff+0x17c>
 8080f5a:	bf00      	nop
 8080f5c:	f3af 8000 	nop.w
 8080f60:	cccccccd 	.word	0xcccccccd
 8080f64:	3ffccccc 	.word	0x3ffccccc
 8080f68:	40400000 	.word	0x40400000
 8080f6c:	42880000 	.word	0x42880000
 8080f70:	3f99999a 	.word	0x3f99999a
 8080f74:	42740000 	.word	0x42740000
 8080f78:	3dc08312 	.word	0x3dc08312
 8080f7c:	42a00000 	.word	0x42a00000
 8080f80:	bbe00fe0 	.word	0xbbe00fe0
 8080f84:	40032311 	.word	0x40032311
 8080f88:	42298419 	.word	0x42298419
 8080f8c:	3aa10dac 	.word	0x3aa10dac
 8080f90:	3e662648 	.word	0x3e662648
 8080f94:	41224b16 	.word	0x41224b16
 8080f98:	b6058bf1 	.word	0xb6058bf1
 8080f9c:	3a5f8fc8 	.word	0x3a5f8fc8
 8080fa0:	3d6087f8 	.word	0x3d6087f8
 8080fa4:	42e00000 	.word	0x42e00000
 8080fa8:	41500000 	.word	0x41500000
 8080fac:	42be0000 	.word	0x42be0000
 8080fb0:	41880000 	.word	0x41880000
 8080fb4:	42ae0000 	.word	0x42ae0000
 8080fb8:	42aa0000 	.word	0x42aa0000
 8080fbc:	41200000 	.word	0x41200000
 8080fc0:	40a00000 	.word	0x40a00000

08080fc4 <_Z16takeMeasurementsv>:
  else Particle.publish("Ubidots Hook", dataCopy,PRIVATE);       // Publish the response code
}

// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() {
 8080fc4:	b573      	push	{r0, r1, r4, r5, r6, lr}

  bme.setGasHeater(320, 150); // 320*C for 150 ms
 8080fc6:	2296      	movs	r2, #150	; 0x96
 8080fc8:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8080fcc:	4841      	ldr	r0, [pc, #260]	; (80810d4 <_Z16takeMeasurementsv+0x110>)
 8080fce:	f001 f943 	bl	8082258 <_ZN15Adafruit_BME68012setGasHeaterEtt>
  bme.performReading();                                     // Take measurement from all the sensors
 8080fd2:	4840      	ldr	r0, [pc, #256]	; (80810d4 <_Z16takeMeasurementsv+0x110>)
 8080fd4:	f001 f90c 	bl	80821f0 <_ZN15Adafruit_BME68014performReadingEv>
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8080fd8:	4b3f      	ldr	r3, [pc, #252]	; (80810d8 <_Z16takeMeasurementsv+0x114>)
 8080fda:	2200      	movs	r2, #0
 8080fdc:	4611      	mov	r1, r2
 8080fde:	6858      	ldr	r0, [r3, #4]
 8080fe0:	f001 fc20 	bl	8082824 <network_ready>

  if (Cellular.ready()) getSignalStrength();                // Test signal strength if the cellular modem is on and ready
 8080fe4:	b108      	cbz	r0, 8080fea <_Z16takeMeasurementsv+0x26>
 8080fe6:	f7ff fdf7 	bl	8080bd8 <_Z17getSignalStrengthv>

  temperatureInC = bme.temperature;
 8080fea:	4c3a      	ldr	r4, [pc, #232]	; (80810d4 <_Z16takeMeasurementsv+0x110>)
 8080fec:	4d3b      	ldr	r5, [pc, #236]	; (80810dc <_Z16takeMeasurementsv+0x118>)
 8080fee:	6820      	ldr	r0, [r4, #0]
 8080ff0:	f004 fda8 	bl	8085b44 <__aeabi_f2d>
  snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", temperatureInC);
 8080ff4:	4a3a      	ldr	r2, [pc, #232]	; (80810e0 <_Z16takeMeasurementsv+0x11c>)
  bme.setGasHeater(320, 150); // 320*C for 150 ms
  bme.performReading();                                     // Take measurement from all the sensors

  if (Cellular.ready()) getSignalStrength();                // Test signal strength if the cellular modem is on and ready

  temperatureInC = bme.temperature;
 8080ff6:	e9c5 0100 	strd	r0, r1, [r5]
  snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", temperatureInC);
 8080ffa:	e9cd 0100 	strd	r0, r1, [sp]
 8080ffe:	2110      	movs	r1, #16
 8081000:	4838      	ldr	r0, [pc, #224]	; (80810e4 <_Z16takeMeasurementsv+0x120>)
 8081002:	f001 fc6f 	bl	80828e4 <snprintf>

  relativeHumidity = bme.humidity;
 8081006:	68a0      	ldr	r0, [r4, #8]
 8081008:	f004 fd9c 	bl	8085b44 <__aeabi_f2d>
 808100c:	4e36      	ldr	r6, [pc, #216]	; (80810e8 <_Z16takeMeasurementsv+0x124>)
  snprintf(humidityString,sizeof(humidityString),"%4.1f%%", relativeHumidity);
 808100e:	e9cd 0100 	strd	r0, r1, [sp]
  if (Cellular.ready()) getSignalStrength();                // Test signal strength if the cellular modem is on and ready

  temperatureInC = bme.temperature;
  snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", temperatureInC);

  relativeHumidity = bme.humidity;
 8081012:	e9c6 0100 	strd	r0, r1, [r6]
  snprintf(humidityString,sizeof(humidityString),"%4.1f%%", relativeHumidity);
 8081016:	4a35      	ldr	r2, [pc, #212]	; (80810ec <_Z16takeMeasurementsv+0x128>)
 8081018:	2110      	movs	r1, #16
 808101a:	4835      	ldr	r0, [pc, #212]	; (80810f0 <_Z16takeMeasurementsv+0x12c>)
 808101c:	f001 fc62 	bl	80828e4 <snprintf>

  pressureHpa = bme.pressure / 100.0;
 8081020:	6860      	ldr	r0, [r4, #4]
 8081022:	f004 fd8f 	bl	8085b44 <__aeabi_f2d>
 8081026:	2200      	movs	r2, #0
 8081028:	4b32      	ldr	r3, [pc, #200]	; (80810f4 <_Z16takeMeasurementsv+0x130>)
 808102a:	f004 ff09 	bl	8085e40 <__aeabi_ddiv>
 808102e:	4b32      	ldr	r3, [pc, #200]	; (80810f8 <_Z16takeMeasurementsv+0x134>)
  snprintf(pressureString,sizeof(pressureString),"%4.1fHPa", pressureHpa);
 8081030:	4a32      	ldr	r2, [pc, #200]	; (80810fc <_Z16takeMeasurementsv+0x138>)
  snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", temperatureInC);

  relativeHumidity = bme.humidity;
  snprintf(humidityString,sizeof(humidityString),"%4.1f%%", relativeHumidity);

  pressureHpa = bme.pressure / 100.0;
 8081032:	e9c3 0100 	strd	r0, r1, [r3]
  snprintf(pressureString,sizeof(pressureString),"%4.1fHPa", pressureHpa);
 8081036:	e9cd 0100 	strd	r0, r1, [sp]
 808103a:	2110      	movs	r1, #16
 808103c:	4830      	ldr	r0, [pc, #192]	; (8081100 <_Z16takeMeasurementsv+0x13c>)
 808103e:	f001 fc51 	bl	80828e4 <snprintf>

  gasResistanceKOhms = bme.gas_resistance / 1000.0;
 8081042:	68e0      	ldr	r0, [r4, #12]
 8081044:	f004 fd7e 	bl	8085b44 <__aeabi_f2d>
 8081048:	2200      	movs	r2, #0
 808104a:	4b2e      	ldr	r3, [pc, #184]	; (8081104 <_Z16takeMeasurementsv+0x140>)
 808104c:	f004 fef8 	bl	8085e40 <__aeabi_ddiv>
 8081050:	4b2d      	ldr	r3, [pc, #180]	; (8081108 <_Z16takeMeasurementsv+0x144>)
  snprintf(TVOCString,sizeof(TVOCString),"%4.1fkOhm", gasResistanceKOhms);
 8081052:	4a2e      	ldr	r2, [pc, #184]	; (808110c <_Z16takeMeasurementsv+0x148>)
  snprintf(humidityString,sizeof(humidityString),"%4.1f%%", relativeHumidity);

  pressureHpa = bme.pressure / 100.0;
  snprintf(pressureString,sizeof(pressureString),"%4.1fHPa", pressureHpa);

  gasResistanceKOhms = bme.gas_resistance / 1000.0;
 8081054:	e9c3 0100 	strd	r0, r1, [r3]
  snprintf(TVOCString,sizeof(TVOCString),"%4.1fkOhm", gasResistanceKOhms);
 8081058:	e9cd 0100 	strd	r0, r1, [sp]
 808105c:	2110      	movs	r1, #16
 808105e:	482c      	ldr	r0, [pc, #176]	; (8081110 <_Z16takeMeasurementsv+0x14c>)
 8081060:	f001 fc40 	bl	80828e4 <snprintf>

  approxAltitudeInM = bme.readAltitude(SEALEVELPRESSURE_HPA);
 8081064:	492b      	ldr	r1, [pc, #172]	; (8081114 <_Z16takeMeasurementsv+0x150>)
 8081066:	4620      	mov	r0, r4
 8081068:	f001 f8c6 	bl	80821f8 <_ZN15Adafruit_BME68012readAltitudeEf>
 808106c:	f004 fd6a 	bl	8085b44 <__aeabi_f2d>
 8081070:	4b29      	ldr	r3, [pc, #164]	; (8081118 <_Z16takeMeasurementsv+0x154>)
  snprintf(altitudeString,sizeof(altitudeString),"%4.1fm", approxAltitudeInM);
 8081072:	4a2a      	ldr	r2, [pc, #168]	; (808111c <_Z16takeMeasurementsv+0x158>)
  snprintf(pressureString,sizeof(pressureString),"%4.1fHPa", pressureHpa);

  gasResistanceKOhms = bme.gas_resistance / 1000.0;
  snprintf(TVOCString,sizeof(TVOCString),"%4.1fkOhm", gasResistanceKOhms);

  approxAltitudeInM = bme.readAltitude(SEALEVELPRESSURE_HPA);
 8081074:	e9c3 0100 	strd	r0, r1, [r3]
  snprintf(altitudeString,sizeof(altitudeString),"%4.1fm", approxAltitudeInM);
 8081078:	e9cd 0100 	strd	r0, r1, [sp]
 808107c:	2110      	movs	r1, #16
 808107e:	4828      	ldr	r0, [pc, #160]	; (8081120 <_Z16takeMeasurementsv+0x15c>)
 8081080:	f001 fc30 	bl	80828e4 <snprintf>

  stateOfCharge = int(batteryMonitor.getSoC());             // Percentage of full charge
 8081084:	4827      	ldr	r0, [pc, #156]	; (8081124 <_Z16takeMeasurementsv+0x160>)
 8081086:	f002 f8b3 	bl	80831f0 <_ZN9FuelGauge6getSoCEv>
 808108a:	f005 fb83 	bl	8086794 <__aeabi_f2iz>
 808108e:	4a26      	ldr	r2, [pc, #152]	; (8081128 <_Z16takeMeasurementsv+0x164>)
 8081090:	4603      	mov	r3, r0
 8081092:	6010      	str	r0, [r2, #0]
  snprintf(batteryString,sizeof(batteryString),"%i%%", stateOfCharge);
 8081094:	2110      	movs	r1, #16
 8081096:	4a25      	ldr	r2, [pc, #148]	; (808112c <_Z16takeMeasurementsv+0x168>)
 8081098:	4825      	ldr	r0, [pc, #148]	; (8081130 <_Z16takeMeasurementsv+0x16c>)
 808109a:	f001 fc23 	bl	80828e4 <snprintf>

  heatIndexC = heatIndex(temperatureInC,relativeHumidity);    // Calcualte the heat index when it is hot AND humid
 808109e:	e9d6 0100 	ldrd	r0, r1, [r6]
 80810a2:	f005 f853 	bl	808614c <__aeabi_d2f>
 80810a6:	4604      	mov	r4, r0
 80810a8:	e9d5 0100 	ldrd	r0, r1, [r5]
 80810ac:	f005 f84e 	bl	808614c <__aeabi_d2f>
 80810b0:	4621      	mov	r1, r4
 80810b2:	f7ff fe51 	bl	8080d58 <_Z9heatIndexff>
 80810b6:	4b1f      	ldr	r3, [pc, #124]	; (8081134 <_Z16takeMeasurementsv+0x170>)
 80810b8:	6018      	str	r0, [r3, #0]
  snprintf(heatIndexString,sizeof(heatIndexString),"%4.1f*C",heatIndexC);
 80810ba:	f004 fd43 	bl	8085b44 <__aeabi_f2d>
 80810be:	4a08      	ldr	r2, [pc, #32]	; (80810e0 <_Z16takeMeasurementsv+0x11c>)
 80810c0:	e9cd 0100 	strd	r0, r1, [sp]
 80810c4:	2110      	movs	r1, #16
 80810c6:	481c      	ldr	r0, [pc, #112]	; (8081138 <_Z16takeMeasurementsv+0x174>)
 80810c8:	f001 fc0c 	bl	80828e4 <snprintf>

  return 1;
}
 80810cc:	2001      	movs	r0, #1
 80810ce:	b002      	add	sp, #8
 80810d0:	bd70      	pop	{r4, r5, r6, pc}
 80810d2:	bf00      	nop
 80810d4:	20000514 	.word	0x20000514
 80810d8:	200006b4 	.word	0x200006b4
 80810dc:	20000668 	.word	0x20000668
 80810e0:	08087875 	.word	0x08087875
 80810e4:	200004fc 	.word	0x200004fc
 80810e8:	20000598 	.word	0x20000598
 80810ec:	0808787d 	.word	0x0808787d
 80810f0:	2000067a 	.word	0x2000067a
 80810f4:	40590000 	.word	0x40590000
 80810f8:	20000618 	.word	0x20000618
 80810fc:	08087885 	.word	0x08087885
 8081100:	20000628 	.word	0x20000628
 8081104:	408f4000 	.word	0x408f4000
 8081108:	200005b0 	.word	0x200005b0
 808110c:	0808788e 	.word	0x0808788e
 8081110:	20000638 	.word	0x20000638
 8081114:	447d5000 	.word	0x447d5000
 8081118:	200006a0 	.word	0x200006a0
 808111c:	08087898 	.word	0x08087898
 8081120:	20000651 	.word	0x20000651
 8081124:	200005a4 	.word	0x200005a4
 8081128:	200005d0 	.word	0x200005d0
 808112c:	0808789f 	.word	0x0808789f
 8081130:	2000068b 	.word	0x2000068b
 8081134:	20000624 	.word	0x20000624
 8081138:	200005c0 	.word	0x200005c0

0808113c <_Z20meterParticlePublishv>:
  return 1;
}


bool meterParticlePublish(void)
{
 808113c:	b508      	push	{r3, lr}
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808113e:	f001 f91d 	bl	808237c <HAL_Timer_Get_Milli_Seconds>
  if(millis() - lastPublish >= publishFrequency) return 1;
 8081142:	4b05      	ldr	r3, [pc, #20]	; (8081158 <_Z20meterParticlePublishv+0x1c>)
 8081144:	681b      	ldr	r3, [r3, #0]
 8081146:	1ac0      	subs	r0, r0, r3
 8081148:	4b04      	ldr	r3, [pc, #16]	; (808115c <_Z20meterParticlePublishv+0x20>)
 808114a:	681b      	ldr	r3, [r3, #0]
  else return 0;
}
 808114c:	4298      	cmp	r0, r3
 808114e:	bf34      	ite	cc
 8081150:	2000      	movcc	r0, #0
 8081152:	2001      	movcs	r0, #1
 8081154:	bd08      	pop	{r3, pc}
 8081156:	bf00      	nop
 8081158:	200005b8 	.word	0x200005b8
 808115c:	20000410 	.word	0x20000410

08081160 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.23>:
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
 8081160:	b508      	push	{r3, lr}
    }
    else if (waiting && millis() >= (webhookTimeStamp + webhookWaitTime))
    {
      state = ERROR_STATE;
      if (verboseMode) {
        waitUntil(meterParticlePublish);
 8081162:	f7ff ffeb 	bl	808113c <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8081166:	b118      	cbz	r0, 8081170 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.23+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
 8081168:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 808116c:	f7ff bfe6 	b.w	808113c <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
 8081170:	f001 faf8 	bl	8082764 <spark_process>
 8081174:	e7f5      	b.n	8081162 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.23+0x2>
	...

08081178 <_Z14fullModemResetv>:
{
  if(millis() - lastPublish >= publishFrequency) return 1;
  else return 0;
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
 8081178:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808117a:	f001 fb03 	bl	8082784 <spark_cloud_flag_disconnect>
 808117e:	f001 f8fd 	bl	808237c <HAL_Timer_Get_Milli_Seconds>

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 8081182:	f643 2597 	movw	r5, #14999	; 0x3a97
 8081186:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8081188:	f001 fb04 	bl	8082794 <spark_cloud_flag_connected>
 808118c:	b140      	cbz	r0, 80811a0 <_Z14fullModemResetv+0x28>
 808118e:	f001 f8f5 	bl	808237c <HAL_Timer_Get_Milli_Seconds>
 8081192:	1b00      	subs	r0, r0, r4
 8081194:	42a8      	cmp	r0, r5
 8081196:	d803      	bhi.n	80811a0 <_Z14fullModemResetv+0x28>
		delay(100);
 8081198:	2064      	movs	r0, #100	; 0x64
 808119a:	f001 fbc3 	bl	8082924 <delay>

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 808119e:	e7f3      	b.n	8081188 <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 80811a0:	2100      	movs	r1, #0
 80811a2:	4b09      	ldr	r3, [pc, #36]	; (80811c8 <_Z14fullModemResetv+0x50>)
 80811a4:	f247 5230 	movw	r2, #30000	; 0x7530
 80811a8:	4608      	mov	r0, r1
 80811aa:	f001 f8af 	bl	808230c <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
 80811ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80811b2:	f001 fbb7 	bl	8082924 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
 80811b6:	4b05      	ldr	r3, [pc, #20]	; (80811cc <_Z14fullModemResetv+0x54>)
 80811b8:	220a      	movs	r2, #10
 80811ba:	681b      	ldr	r3, [r3, #0]
 80811bc:	2101      	movs	r1, #1
 80811be:	4668      	mov	r0, sp
 80811c0:	f002 fd1e 	bl	8083c00 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
 80811c4:	b003      	add	sp, #12
 80811c6:	bd30      	pop	{r4, r5, pc}
 80811c8:	080878a4 	.word	0x080878a4
 80811cc:	200006ac 	.word	0x200006ac

080811d0 <_Z11petWatchdogv>:

void watchdogISR() {
  watchDogFlag = true;
}

void petWatchdog() {
 80811d0:	b508      	push	{r3, lr}
  digitalWrite(donePin,HIGH);
 80811d2:	2101      	movs	r1, #1
 80811d4:	2006      	movs	r0, #6
 80811d6:	f003 f802 	bl	80841de <digitalWrite>
  digitalWrite(donePin,LOW);
 80811da:	2100      	movs	r1, #0
 80811dc:	2006      	movs	r0, #6
 80811de:	f002 fffe 	bl	80841de <digitalWrite>
  watchDogFlag = false;
 80811e2:	4b02      	ldr	r3, [pc, #8]	; (80811ec <_Z11petWatchdogv+0x1c>)
 80811e4:	2200      	movs	r2, #0
 80811e6:	701a      	strb	r2, [r3, #0]
 80811e8:	bd08      	pop	{r3, pc}
 80811ea:	bf00      	nop
 80811ec:	20000679 	.word	0x20000679

080811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80811f0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80811f2:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80811f4:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80811f6:	b17c      	cbz	r4, 8081218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80811f8:	6863      	ldr	r3, [r4, #4]
 80811fa:	3b01      	subs	r3, #1
 80811fc:	6063      	str	r3, [r4, #4]
 80811fe:	b95b      	cbnz	r3, 8081218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 8081200:	6823      	ldr	r3, [r4, #0]
 8081202:	4620      	mov	r0, r4
 8081204:	689b      	ldr	r3, [r3, #8]
 8081206:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8081208:	68a3      	ldr	r3, [r4, #8]
 808120a:	3b01      	subs	r3, #1
 808120c:	60a3      	str	r3, [r4, #8]
 808120e:	b91b      	cbnz	r3, 8081218 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8081210:	6823      	ldr	r3, [r4, #0]
 8081212:	4620      	mov	r0, r4
 8081214:	68db      	ldr	r3, [r3, #12]
 8081216:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 8081218:	4628      	mov	r0, r5
 808121a:	bd38      	pop	{r3, r4, r5, pc}

0808121c <_Z9sendEventv>:
    break;
  }
}

void sendEvent()
{
 808121c:	b510      	push	{r4, lr}
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"Pressure\":%4.1f, \"HeatIndex\":%4.1f, \"TVOClevel\":%5.1f, \"Altitude\":%4.1f, \"Battery\":%i, \"Resets\":%i, \"Alerts\":%i}", temperatureInC, relativeHumidity, pressureHpa, heatIndexC, gasResistanceKOhms,approxAltitudeInM, stateOfCharge,resetCount, alertCount);
 808121e:	4b24      	ldr	r3, [pc, #144]	; (80812b0 <_Z9sendEventv+0x94>)
    break;
  }
}

void sendEvent()
{
 8081220:	b0d2      	sub	sp, #328	; 0x148
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"Pressure\":%4.1f, \"HeatIndex\":%4.1f, \"TVOClevel\":%5.1f, \"Altitude\":%4.1f, \"Battery\":%i, \"Resets\":%i, \"Alerts\":%i}", temperatureInC, relativeHumidity, pressureHpa, heatIndexC, gasResistanceKOhms,approxAltitudeInM, stateOfCharge,resetCount, alertCount);
 8081222:	681b      	ldr	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8081224:	2400      	movs	r4, #0
 8081226:	930e      	str	r3, [sp, #56]	; 0x38
 8081228:	4b22      	ldr	r3, [pc, #136]	; (80812b4 <_Z9sendEventv+0x98>)
 808122a:	681b      	ldr	r3, [r3, #0]
 808122c:	930d      	str	r3, [sp, #52]	; 0x34
 808122e:	4b22      	ldr	r3, [pc, #136]	; (80812b8 <_Z9sendEventv+0x9c>)
 8081230:	681b      	ldr	r3, [r3, #0]
 8081232:	930c      	str	r3, [sp, #48]	; 0x30
 8081234:	4b21      	ldr	r3, [pc, #132]	; (80812bc <_Z9sendEventv+0xa0>)
 8081236:	e9d3 2300 	ldrd	r2, r3, [r3]
 808123a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 808123e:	4b20      	ldr	r3, [pc, #128]	; (80812c0 <_Z9sendEventv+0xa4>)
 8081240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081244:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8081248:	4b1e      	ldr	r3, [pc, #120]	; (80812c4 <_Z9sendEventv+0xa8>)
 808124a:	6818      	ldr	r0, [r3, #0]
 808124c:	f004 fc7a 	bl	8085b44 <__aeabi_f2d>
 8081250:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8081254:	4b1c      	ldr	r3, [pc, #112]	; (80812c8 <_Z9sendEventv+0xac>)
 8081256:	f44f 7180 	mov.w	r1, #256	; 0x100
 808125a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808125e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8081262:	4b1a      	ldr	r3, [pc, #104]	; (80812cc <_Z9sendEventv+0xb0>)
 8081264:	a812      	add	r0, sp, #72	; 0x48
 8081266:	e9d3 2300 	ldrd	r2, r3, [r3]
 808126a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 808126e:	4b18      	ldr	r3, [pc, #96]	; (80812d0 <_Z9sendEventv+0xb4>)
 8081270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081274:	e9cd 2300 	strd	r2, r3, [sp]
 8081278:	4a16      	ldr	r2, [pc, #88]	; (80812d4 <_Z9sendEventv+0xb8>)
 808127a:	f001 fb33 	bl	80828e4 <snprintf>
 808127e:	4b16      	ldr	r3, [pc, #88]	; (80812d8 <_Z9sendEventv+0xbc>)
  Particle.publish("Environmental_Hook", data, PRIVATE);
 8081280:	aa12      	add	r2, sp, #72	; 0x48
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8081282:	781b      	ldrb	r3, [r3, #0]
 8081284:	4915      	ldr	r1, [pc, #84]	; (80812dc <_Z9sendEventv+0xc0>)
 8081286:	a810      	add	r0, sp, #64	; 0x40
 8081288:	f88d 4000 	strb.w	r4, [sp]
 808128c:	f7ff fc96 	bl	8080bbc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081290:	a811      	add	r0, sp, #68	; 0x44
 8081292:	f7ff ffad 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  currentHourlyPeriod = Time.hour();                                      // Change the time period
 8081296:	f002 fd7d 	bl	8083d94 <_ZN9TimeClass4hourEv>
 808129a:	4b11      	ldr	r3, [pc, #68]	; (80812e0 <_Z9sendEventv+0xc4>)
 808129c:	7018      	strb	r0, [r3, #0]
  currentDailyPeriod = Time.day();
 808129e:	f002 fd8d 	bl	8083dbc <_ZN9TimeClass3dayEv>
 80812a2:	4b10      	ldr	r3, [pc, #64]	; (80812e4 <_Z9sendEventv+0xc8>)
 80812a4:	7018      	strb	r0, [r3, #0]
  doneEnabled = false;
 80812a6:	4b10      	ldr	r3, [pc, #64]	; (80812e8 <_Z9sendEventv+0xcc>)
 80812a8:	701c      	strb	r4, [r3, #0]
}
 80812aa:	b052      	add	sp, #328	; 0x148
 80812ac:	bd10      	pop	{r4, pc}
 80812ae:	bf00      	nop
 80812b0:	200005bc 	.word	0x200005bc
 80812b4:	20000614 	.word	0x20000614
 80812b8:	200005d0 	.word	0x200005d0
 80812bc:	200006a0 	.word	0x200006a0
 80812c0:	200005b0 	.word	0x200005b0
 80812c4:	20000624 	.word	0x20000624
 80812c8:	20000618 	.word	0x20000618
 80812cc:	20000598 	.word	0x20000598
 80812d0:	20000668 	.word	0x20000668
 80812d4:	080878b1 	.word	0x080878b1
 80812d8:	20000590 	.word	0x20000590
 80812dc:	0808794b 	.word	0x0808794b
 80812e0:	20000620 	.word	0x20000620
 80812e4:	200005af 	.word	0x200005af
 80812e8:	20000400 	.word	0x20000400

080812ec <loop>:
  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
  lastPublish = millis();
}

void loop()
{
 80812ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  switch(state) {
 80812ee:	4ca1      	ldr	r4, [pc, #644]	; (8081574 <loop+0x288>)
 80812f0:	7823      	ldrb	r3, [r4, #0]
 80812f2:	3b01      	subs	r3, #1
 80812f4:	2b05      	cmp	r3, #5
 80812f6:	f200 8183 	bhi.w	8081600 <loop+0x314>
 80812fa:	e8df f013 	tbh	[pc, r3, lsl #1]
 80812fe:	0119      	.short	0x0119
 8081300:	002c0006 	.word	0x002c0006
 8081304:	007d0042 	.word	0x007d0042
 8081308:	00af      	.short	0x00af
  case IDLE_STATE:
    if (watchDogFlag) petWatchdog();
 808130a:	4b9b      	ldr	r3, [pc, #620]	; (8081578 <loop+0x28c>)
 808130c:	781b      	ldrb	r3, [r3, #0]
 808130e:	b10b      	cbz	r3, 8081314 <loop+0x28>
 8081310:	f7ff ff5e 	bl	80811d0 <_Z11petWatchdogv>
    if (!waiting && lowPowerMode && millis() > (keepAwakeTimeStamp+sleepWait)) state = SLEEPING_STATE;
 8081314:	4b99      	ldr	r3, [pc, #612]	; (808157c <loop+0x290>)
 8081316:	781b      	ldrb	r3, [r3, #0]
 8081318:	b963      	cbnz	r3, 8081334 <loop+0x48>
 808131a:	4b99      	ldr	r3, [pc, #612]	; (8081580 <loop+0x294>)
 808131c:	781b      	ldrb	r3, [r3, #0]
 808131e:	b14b      	cbz	r3, 8081334 <loop+0x48>
 8081320:	f001 f82c 	bl	808237c <HAL_Timer_Get_Milli_Seconds>
 8081324:	4b97      	ldr	r3, [pc, #604]	; (8081584 <loop+0x298>)
 8081326:	681a      	ldr	r2, [r3, #0]
 8081328:	4b97      	ldr	r3, [pc, #604]	; (8081588 <loop+0x29c>)
 808132a:	681b      	ldr	r3, [r3, #0]
 808132c:	4413      	add	r3, r2
 808132e:	4283      	cmp	r3, r0
 8081330:	f0c0 8163 	bcc.w	80815fa <loop+0x30e>
    if (Time.hour() != currentHourlyPeriod) state = MEASURING_STATE;    // We want to report on the hour but not after bedtime
 8081334:	f002 fd2e 	bl	8083d94 <_ZN9TimeClass4hourEv>
 8081338:	4b94      	ldr	r3, [pc, #592]	; (808158c <loop+0x2a0>)
 808133a:	781b      	ldrb	r3, [r3, #0]
 808133c:	4298      	cmp	r0, r3
 808133e:	bf1c      	itt	ne
 8081340:	2303      	movne	r3, #3
 8081342:	7023      	strbne	r3, [r4, #0]
    if (stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;               // The battery is low - sleep
 8081344:	4b92      	ldr	r3, [pc, #584]	; (8081590 <loop+0x2a4>)
 8081346:	681a      	ldr	r2, [r3, #0]
 8081348:	4b92      	ldr	r3, [pc, #584]	; (8081594 <loop+0x2a8>)
 808134a:	681b      	ldr	r3, [r3, #0]
 808134c:	429a      	cmp	r2, r3
 808134e:	f300 8157 	bgt.w	8081600 <loop+0x314>
 8081352:	2305      	movs	r3, #5
 8081354:	e013      	b.n	808137e <loop+0x92>
    break;

  case MEASURING_STATE:
    if (!takeMeasurements())
 8081356:	f7ff fe35 	bl	8080fc4 <_Z16takeMeasurementsv>
 808135a:	4605      	mov	r5, r0
 808135c:	b970      	cbnz	r0, 808137c <loop+0x90>
    {
      state = ERROR_STATE;
 808135e:	2301      	movs	r3, #1
 8081360:	7023      	strb	r3, [r4, #0]
      if (verboseMode) {
 8081362:	4b8d      	ldr	r3, [pc, #564]	; (8081598 <loop+0x2ac>)
 8081364:	781b      	ldrb	r3, [r3, #0]
 8081366:	2b00      	cmp	r3, #0
 8081368:	f000 814a 	beq.w	8081600 <loop+0x314>
        waitUntil(meterParticlePublish);
 808136c:	f7ff fef8 	bl	8081160 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.23>
 8081370:	4b8a      	ldr	r3, [pc, #552]	; (808159c <loop+0x2b0>)
        Particle.publish("State","Error taking Measurements",PRIVATE);
 8081372:	4a8b      	ldr	r2, [pc, #556]	; (80815a0 <loop+0x2b4>)
 8081374:	781b      	ldrb	r3, [r3, #0]
 8081376:	f88d 5000 	strb.w	r5, [sp]
 808137a:	e0ce      	b.n	808151a <loop+0x22e>
        lastPublish = millis();
      }
    }
    else state = REPORTING_STATE;
 808137c:	2306      	movs	r3, #6
 808137e:	7023      	strb	r3, [r4, #0]
 8081380:	e13e      	b.n	8081600 <loop+0x314>
    break;

  case SLEEPING_STATE: {                                                // This state is triggered once the park closes and runs until it opens
    if (!readyForBed)                                                   // Only do these things once - at bedtime
 8081382:	4b88      	ldr	r3, [pc, #544]	; (80815a4 <loop+0x2b8>)
 8081384:	781c      	ldrb	r4, [r3, #0]
 8081386:	461d      	mov	r5, r3
 8081388:	bb64      	cbnz	r4, 80813e4 <loop+0xf8>
 808138a:	f001 fa03 	bl	8082794 <spark_cloud_flag_connected>
    {
      if (Particle.connected()) {
 808138e:	b1d0      	cbz	r0, 80813c6 <loop+0xda>
        if (verboseMode) {
 8081390:	4b81      	ldr	r3, [pc, #516]	; (8081598 <loop+0x2ac>)
 8081392:	781b      	ldrb	r3, [r3, #0]
 8081394:	b18b      	cbz	r3, 80813ba <loop+0xce>
          waitUntil(meterParticlePublish);
 8081396:	f7ff fee3 	bl	8081160 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.23>
 808139a:	4b80      	ldr	r3, [pc, #512]	; (808159c <loop+0x2b0>)
          Particle.publish("State","Going to Sleep",PRIVATE);
 808139c:	4a82      	ldr	r2, [pc, #520]	; (80815a8 <loop+0x2bc>)
 808139e:	781b      	ldrb	r3, [r3, #0]
 80813a0:	4982      	ldr	r1, [pc, #520]	; (80815ac <loop+0x2c0>)
 80813a2:	a802      	add	r0, sp, #8
 80813a4:	f88d 4000 	strb.w	r4, [sp]
 80813a8:	f7ff fc08 	bl	8080bbc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>
 80813ac:	a803      	add	r0, sp, #12
 80813ae:	f7ff ff1f 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80813b2:	f000 ffe3 	bl	808237c <HAL_Timer_Get_Milli_Seconds>
          lastPublish = millis();
 80813b6:	4b7e      	ldr	r3, [pc, #504]	; (80815b0 <loop+0x2c4>)
 80813b8:	6018      	str	r0, [r3, #0]
        }
        delay(1000);                                                    // Time to send last update
 80813ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80813be:	f001 fab1 	bl	8082924 <delay>
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
 80813c2:	f7ff fc71 	bl	8080ca8 <_Z22disconnectFromParticlev>
      }
      EEPROM.write(MEM_MAP::resetCountAddr,resetCount);
 80813c6:	f002 ff37 	bl	8084238 <_Z21__fetch_global_EEPROMv>
 80813ca:	4b7a      	ldr	r3, [pc, #488]	; (80815b4 <loop+0x2c8>)
 80813cc:	2002      	movs	r0, #2
 80813ce:	7819      	ldrb	r1, [r3, #0]
 80813d0:	f7ff fbf2 	bl	8080bb8 <_ZN11EEPROMClass5writeEih.isra.16>
      ledState = false;
 80813d4:	4b78      	ldr	r3, [pc, #480]	; (80815b8 <loop+0x2cc>)
 80813d6:	2100      	movs	r1, #0
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
 80813d8:	2007      	movs	r0, #7
        }
        delay(1000);                                                    // Time to send last update
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
      }
      EEPROM.write(MEM_MAP::resetCountAddr,resetCount);
      ledState = false;
 80813da:	7019      	strb	r1, [r3, #0]
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
 80813dc:	f002 feff 	bl	80841de <digitalWrite>
      readyForBed = true;                                               // Set the flag for the night
 80813e0:	2301      	movs	r3, #1
 80813e2:	702b      	strb	r3, [r5, #0]
    }
    int secondsToHour = (60*(60 - Time.minute()));                      // Time till the top of the hour
 80813e4:	f002 fce0 	bl	8083da8 <_ZN9TimeClass6minuteEv>
    System.sleep(SLEEP_MODE_SOFTPOWEROFF,secondsToHour);                // Very deep sleep till the next hour - then resets
 80813e8:	4b74      	ldr	r3, [pc, #464]	; (80815bc <loop+0x2d0>)
 80813ea:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 80813ee:	223c      	movs	r2, #60	; 0x3c
 80813f0:	681b      	ldr	r3, [r3, #0]
 80813f2:	4342      	muls	r2, r0
 80813f4:	2102      	movs	r1, #2
 80813f6:	e02d      	b.n	8081454 <loop+0x168>
 80813f8:	f001 f9cc 	bl	8082794 <spark_cloud_flag_connected>
    } break;


  case LOW_BATTERY_STATE: {                                             // Sleep state but leaves the fuel gauge on
      if (Particle.connected()) {
 80813fc:	b1d8      	cbz	r0, 8081436 <loop+0x14a>
        if (verboseMode) {
 80813fe:	4b66      	ldr	r3, [pc, #408]	; (8081598 <loop+0x2ac>)
 8081400:	781b      	ldrb	r3, [r3, #0]
 8081402:	b193      	cbz	r3, 808142a <loop+0x13e>
          waitUntil(meterParticlePublish);
 8081404:	f7ff feac 	bl	8081160 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.23>
 8081408:	4b64      	ldr	r3, [pc, #400]	; (808159c <loop+0x2b0>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 808140a:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 808140c:	781b      	ldrb	r3, [r3, #0]
          Particle.publish("State","Low Battery - Sleeping",PRIVATE);
 808140e:	4967      	ldr	r1, [pc, #412]	; (80815ac <loop+0x2c0>)
 8081410:	f88d 2000 	strb.w	r2, [sp]
 8081414:	a802      	add	r0, sp, #8
 8081416:	4a6a      	ldr	r2, [pc, #424]	; (80815c0 <loop+0x2d4>)
 8081418:	f7ff fbd0 	bl	8080bbc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>
 808141c:	a803      	add	r0, sp, #12
 808141e:	f7ff fee7 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081422:	f000 ffab 	bl	808237c <HAL_Timer_Get_Milli_Seconds>
          lastPublish = millis();
 8081426:	4b62      	ldr	r3, [pc, #392]	; (80815b0 <loop+0x2c4>)
 8081428:	6018      	str	r0, [r3, #0]
        }
        delay(1000);                                                    // Time to send last update
 808142a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808142e:	f001 fa79 	bl	8082924 <delay>
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
 8081432:	f7ff fc39 	bl	8080ca8 <_Z22disconnectFromParticlev>
      }
      ledState = false;
 8081436:	4b60      	ldr	r3, [pc, #384]	; (80815b8 <loop+0x2cc>)
 8081438:	2100      	movs	r1, #0
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
 808143a:	2007      	movs	r0, #7
          lastPublish = millis();
        }
        delay(1000);                                                    // Time to send last update
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
      }
      ledState = false;
 808143c:	7019      	strb	r1, [r3, #0]
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
 808143e:	f002 fece 	bl	80841de <digitalWrite>
      int secondsToHour = (60*(60 - Time.minute()));                    // Time till the top of the hour
 8081442:	f002 fcb1 	bl	8083da8 <_ZN9TimeClass6minuteEv>
      System.sleep(SLEEP_MODE_DEEP,secondsToHour);                      // Very deep sleep till the next hour - then resets
 8081446:	223c      	movs	r2, #60	; 0x3c
 8081448:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 808144c:	4b5b      	ldr	r3, [pc, #364]	; (80815bc <loop+0x2d0>)
 808144e:	4342      	muls	r2, r0
 8081450:	681b      	ldr	r3, [r3, #0]
 8081452:	2101      	movs	r1, #1
 8081454:	a802      	add	r0, sp, #8
 8081456:	f002 fbd3 	bl	8083c00 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
    } break;
 808145a:	e0d1      	b.n	8081600 <loop+0x314>
 808145c:	f001 f99a 	bl	8082794 <spark_cloud_flag_connected>

  case REPORTING_STATE:                                                 // Reporting - hourly or on command
    if (!Particle.connected()) connectToParticle();
 8081460:	b910      	cbnz	r0, 8081468 <loop+0x17c>
 8081462:	f7ff fbe5 	bl	8080c30 <_Z17connectToParticlev>
 8081466:	e0cb      	b.n	8081600 <loop+0x314>
    else if (!waiting)
 8081468:	4d44      	ldr	r5, [pc, #272]	; (808157c <loop+0x290>)
 808146a:	782b      	ldrb	r3, [r5, #0]
 808146c:	b9eb      	cbnz	r3, 80814aa <loop+0x1be>
    {
      if (verboseMode) {
 808146e:	4b4a      	ldr	r3, [pc, #296]	; (8081598 <loop+0x2ac>)
 8081470:	781b      	ldrb	r3, [r3, #0]
 8081472:	b18b      	cbz	r3, 8081498 <loop+0x1ac>
        waitUntil(meterParticlePublish);
 8081474:	f7ff fe74 	bl	8081160 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.23>
 8081478:	4b48      	ldr	r3, [pc, #288]	; (808159c <loop+0x2b0>)
        Particle.publish("State","Reporting",PRIVATE,PRIVATE);
 808147a:	4a52      	ldr	r2, [pc, #328]	; (80815c4 <loop+0x2d8>)
 808147c:	781b      	ldrb	r3, [r3, #0]
 808147e:	494b      	ldr	r1, [pc, #300]	; (80815ac <loop+0x2c0>)
 8081480:	f88d 3000 	strb.w	r3, [sp]
 8081484:	a802      	add	r0, sp, #8
 8081486:	f7ff fb99 	bl	8080bbc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>
 808148a:	a803      	add	r0, sp, #12
 808148c:	f7ff feb0 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081490:	f000 ff74 	bl	808237c <HAL_Timer_Get_Milli_Seconds>
        lastPublish = millis();
 8081494:	4b46      	ldr	r3, [pc, #280]	; (80815b0 <loop+0x2c4>)
 8081496:	6018      	str	r0, [r3, #0]
 8081498:	f000 ff70 	bl	808237c <HAL_Timer_Get_Milli_Seconds>
      }
      webhookTimeStamp = millis();
 808149c:	4b4a      	ldr	r3, [pc, #296]	; (80815c8 <loop+0x2dc>)
 808149e:	6018      	str	r0, [r3, #0]
      waiting = true;                                                   // Make sure we set the flag for flow through this case
 80814a0:	2301      	movs	r3, #1
 80814a2:	702b      	strb	r3, [r5, #0]
      sendEvent();                                                      // Send the data to Ubidots
 80814a4:	f7ff feba 	bl	808121c <_Z9sendEventv>
 80814a8:	e0aa      	b.n	8081600 <loop+0x314>
    }
    else if (waiting && doneEnabled)
 80814aa:	4b48      	ldr	r3, [pc, #288]	; (80815cc <loop+0x2e0>)
 80814ac:	781e      	ldrb	r6, [r3, #0]
 80814ae:	b1f6      	cbz	r6, 80814ee <loop+0x202>
    {
      if (verboseMode) {
 80814b0:	4b39      	ldr	r3, [pc, #228]	; (8081598 <loop+0x2ac>)
 80814b2:	781b      	ldrb	r3, [r3, #0]
 80814b4:	b193      	cbz	r3, 80814dc <loop+0x1f0>
        waitUntil(meterParticlePublish);
 80814b6:	f7ff fe53 	bl	8081160 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.23>
 80814ba:	4b38      	ldr	r3, [pc, #224]	; (808159c <loop+0x2b0>)
        Particle.publish("State","Idle",PRIVATE);
 80814bc:	2200      	movs	r2, #0
 80814be:	781b      	ldrb	r3, [r3, #0]
 80814c0:	493a      	ldr	r1, [pc, #232]	; (80815ac <loop+0x2c0>)
 80814c2:	f88d 2000 	strb.w	r2, [sp]
 80814c6:	a802      	add	r0, sp, #8
 80814c8:	4a41      	ldr	r2, [pc, #260]	; (80815d0 <loop+0x2e4>)
 80814ca:	f7ff fb77 	bl	8080bbc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>
 80814ce:	a803      	add	r0, sp, #12
 80814d0:	f7ff fe8e 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80814d4:	f000 ff52 	bl	808237c <HAL_Timer_Get_Milli_Seconds>
        lastPublish = millis();
 80814d8:	4b35      	ldr	r3, [pc, #212]	; (80815b0 <loop+0x2c4>)
 80814da:	6018      	str	r0, [r3, #0]
      }
      state = IDLE_STATE;       // This is how we know if Ubidots got the data
 80814dc:	2302      	movs	r3, #2
 80814de:	7023      	strb	r3, [r4, #0]
      waiting = false;
 80814e0:	2300      	movs	r3, #0
 80814e2:	702b      	strb	r3, [r5, #0]
 80814e4:	f000 ff4a 	bl	808237c <HAL_Timer_Get_Milli_Seconds>
      keepAwakeTimeStamp = millis();
 80814e8:	4b26      	ldr	r3, [pc, #152]	; (8081584 <loop+0x298>)
 80814ea:	6018      	str	r0, [r3, #0]
 80814ec:	e088      	b.n	8081600 <loop+0x314>
 80814ee:	f000 ff45 	bl	808237c <HAL_Timer_Get_Milli_Seconds>
    }
    else if (waiting && millis() >= (webhookTimeStamp + webhookWaitTime))
 80814f2:	4b35      	ldr	r3, [pc, #212]	; (80815c8 <loop+0x2dc>)
 80814f4:	681a      	ldr	r2, [r3, #0]
 80814f6:	4b37      	ldr	r3, [pc, #220]	; (80815d4 <loop+0x2e8>)
 80814f8:	681b      	ldr	r3, [r3, #0]
 80814fa:	4413      	add	r3, r2
 80814fc:	4298      	cmp	r0, r3
 80814fe:	d37f      	bcc.n	8081600 <loop+0x314>
    {
      state = ERROR_STATE;
 8081500:	2301      	movs	r3, #1
 8081502:	7023      	strb	r3, [r4, #0]
      if (verboseMode) {
 8081504:	4b24      	ldr	r3, [pc, #144]	; (8081598 <loop+0x2ac>)
 8081506:	781b      	ldrb	r3, [r3, #0]
 8081508:	2b00      	cmp	r3, #0
 808150a:	d079      	beq.n	8081600 <loop+0x314>
        waitUntil(meterParticlePublish);
 808150c:	f7ff fe28 	bl	8081160 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.23>
 8081510:	4b22      	ldr	r3, [pc, #136]	; (808159c <loop+0x2b0>)
        Particle.publish("State","Error - Reporting Timed Out",PRIVATE);
 8081512:	4a31      	ldr	r2, [pc, #196]	; (80815d8 <loop+0x2ec>)
 8081514:	781b      	ldrb	r3, [r3, #0]
 8081516:	f88d 6000 	strb.w	r6, [sp]
 808151a:	4924      	ldr	r1, [pc, #144]	; (80815ac <loop+0x2c0>)
 808151c:	a802      	add	r0, sp, #8
 808151e:	f7ff fb4d 	bl	8080bbc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>
 8081522:	a803      	add	r0, sp, #12
 8081524:	f7ff fe64 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081528:	f000 ff28 	bl	808237c <HAL_Timer_Get_Milli_Seconds>
        lastPublish = millis();
 808152c:	4b20      	ldr	r3, [pc, #128]	; (80815b0 <loop+0x2c4>)
 808152e:	e7dc      	b.n	80814ea <loop+0x1fe>
 8081530:	f000 ff24 	bl	808237c <HAL_Timer_Get_Milli_Seconds>
      }
    }
    break;

  case ERROR_STATE:                                          // To be enhanced - where we deal with errors
    if (millis() > resetTimeStamp + resetWait)
 8081534:	4b29      	ldr	r3, [pc, #164]	; (80815dc <loop+0x2f0>)
 8081536:	681a      	ldr	r2, [r3, #0]
 8081538:	4b29      	ldr	r3, [pc, #164]	; (80815e0 <loop+0x2f4>)
 808153a:	681b      	ldr	r3, [r3, #0]
 808153c:	4413      	add	r3, r2
 808153e:	4298      	cmp	r0, r3
 8081540:	d95e      	bls.n	8081600 <loop+0x314>
 8081542:	4b16      	ldr	r3, [pc, #88]	; (808159c <loop+0x2b0>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8081544:	2400      	movs	r4, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8081546:	781b      	ldrb	r3, [r3, #0]
    {
      Particle.publish("State","ERROR_STATE - Resetting",PRIVATE);
 8081548:	4a26      	ldr	r2, [pc, #152]	; (80815e4 <loop+0x2f8>)
 808154a:	4918      	ldr	r1, [pc, #96]	; (80815ac <loop+0x2c0>)
 808154c:	a802      	add	r0, sp, #8
 808154e:	f88d 4000 	strb.w	r4, [sp]
 8081552:	f7ff fb33 	bl	8080bbc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>
 8081556:	a803      	add	r0, sp, #12
 8081558:	f7ff fe4a 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      delay(2000);                                          // This makes sure it goes through before reset
 808155c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8081560:	f001 f9e0 	bl	8082924 <delay>
      if (resetCount <= 3)  System.reset();                 // Today, only way out is reset
 8081564:	4b13      	ldr	r3, [pc, #76]	; (80815b4 <loop+0x2c8>)
 8081566:	681b      	ldr	r3, [r3, #0]
 8081568:	2b03      	cmp	r3, #3
 808156a:	dc3d      	bgt.n	80815e8 <loop+0x2fc>
 808156c:	f002 fb44 	bl	8083bf8 <_ZN11SystemClass5resetEv>
 8081570:	e046      	b.n	8081600 <loop+0x314>
 8081572:	bf00      	nop
 8081574:	200005ad 	.word	0x200005ad
 8081578:	20000679 	.word	0x20000679
 808157c:	20000678 	.word	0x20000678
 8081580:	20000648 	.word	0x20000648
 8081584:	20000670 	.word	0x20000670
 8081588:	2000040c 	.word	0x2000040c
 808158c:	20000620 	.word	0x20000620
 8081590:	200005d0 	.word	0x200005d0
 8081594:	2000050c 	.word	0x2000050c
 8081598:	20000650 	.word	0x20000650
 808159c:	20000590 	.word	0x20000590
 80815a0:	0808795e 	.word	0x0808795e
 80815a4:	200006a8 	.word	0x200006a8
 80815a8:	0808797e 	.word	0x0808797e
 80815ac:	08087978 	.word	0x08087978
 80815b0:	200005b8 	.word	0x200005b8
 80815b4:	20000614 	.word	0x20000614
 80815b8:	200005ac 	.word	0x200005ac
 80815bc:	200006ac 	.word	0x200006ac
 80815c0:	0808798d 	.word	0x0808798d
 80815c4:	080879a4 	.word	0x080879a4
 80815c8:	20000510 	.word	0x20000510
 80815cc:	20000400 	.word	0x20000400
 80815d0:	080879ae 	.word	0x080879ae
 80815d4:	20000414 	.word	0x20000414
 80815d8:	080879b3 	.word	0x080879b3
 80815dc:	20000674 	.word	0x20000674
 80815e0:	20000404 	.word	0x20000404
 80815e4:	080879cf 	.word	0x080879cf
      else {
        EEPROM.write(MEM_MAP::resetCountAddr,0);            // Zero the ResetCount
 80815e8:	f002 fe26 	bl	8084238 <_Z21__fetch_global_EEPROMv>
 80815ec:	4621      	mov	r1, r4
 80815ee:	2002      	movs	r0, #2
 80815f0:	f7ff fae2 	bl	8080bb8 <_ZN11EEPROMClass5writeEih.isra.16>
        fullModemReset();                                   // Full Modem reset and reboot
 80815f4:	f7ff fdc0 	bl	8081178 <_Z14fullModemResetv>
      }
    }
    break;
  }
}
 80815f8:	e002      	b.n	8081600 <loop+0x314>
{

  switch(state) {
  case IDLE_STATE:
    if (watchDogFlag) petWatchdog();
    if (!waiting && lowPowerMode && millis() > (keepAwakeTimeStamp+sleepWait)) state = SLEEPING_STATE;
 80815fa:	2304      	movs	r3, #4
 80815fc:	7023      	strb	r3, [r4, #0]
 80815fe:	e699      	b.n	8081334 <loop+0x48>
        fullModemReset();                                   // Full Modem reset and reboot
      }
    }
    break;
  }
}
 8081600:	b004      	add	sp, #16
 8081602:	bd70      	pop	{r4, r5, r6, pc}

08081604 <_Z14UbidotsHandlerPKcS0_>:
  currentDailyPeriod = Time.day();
  doneEnabled = false;
}

void UbidotsHandler(const char *event, const char *data)  // Looks at the response from Ubidots - Will reset Photon if no successful response
{
 8081604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081606:	b085      	sub	sp, #20
  // Response Template: "{{temperature.0.status_code}}" so, I should only get a 3 digit number back
  char dataCopy[strlen(data)+1];                                    // data needs to be copied since Particle.publish() will clear it
 8081608:	4608      	mov	r0, r1
  currentDailyPeriod = Time.day();
  doneEnabled = false;
}

void UbidotsHandler(const char *event, const char *data)  // Looks at the response from Ubidots - Will reset Photon if no successful response
{
 808160a:	af02      	add	r7, sp, #8
 808160c:	460d      	mov	r5, r1
  // Response Template: "{{temperature.0.status_code}}" so, I should only get a 3 digit number back
  char dataCopy[strlen(data)+1];                                    // data needs to be copied since Particle.publish() will clear it
 808160e:	f005 fc5e 	bl	8086ece <strlen>
 8081612:	f100 0308 	add.w	r3, r0, #8
 8081616:	f023 0307 	bic.w	r3, r3, #7
  if ((responseCode == 200) || (responseCode == 201))
  {
    Particle.publish("State","Response Received",PRIVATE);
    doneEnabled = true;                                   // Successful response - can pet the dog again
  }
  else Particle.publish("Ubidots Hook", dataCopy,PRIVATE);       // Publish the response code
 808161a:	466e      	mov	r6, sp
}

void UbidotsHandler(const char *event, const char *data)  // Looks at the response from Ubidots - Will reset Photon if no successful response
{
  // Response Template: "{{temperature.0.status_code}}" so, I should only get a 3 digit number back
  char dataCopy[strlen(data)+1];                                    // data needs to be copied since Particle.publish() will clear it
 808161c:	ebad 0d03 	sub.w	sp, sp, r3
 8081620:	ac02      	add	r4, sp, #8
  strncpy(dataCopy, data, sizeof(dataCopy));                        // Copy - overflow safe
 8081622:	1c42      	adds	r2, r0, #1
 8081624:	4629      	mov	r1, r5
 8081626:	4620      	mov	r0, r4
 8081628:	f005 fc6e 	bl	8086f08 <strncpy>
  if (!strlen(dataCopy)) {                                          // First check to see if there is any data
 808162c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8081630:	4d14      	ldr	r5, [pc, #80]	; (8081684 <_Z14UbidotsHandlerPKcS0_+0x80>)
 8081632:	b922      	cbnz	r2, 808163e <_Z14UbidotsHandlerPKcS0_+0x3a>
 8081634:	782b      	ldrb	r3, [r5, #0]
    Particle.publish("Ubidots Hook", "No Data",PRIVATE);
 8081636:	f88d 2000 	strb.w	r2, [sp]
 808163a:	4a13      	ldr	r2, [pc, #76]	; (8081688 <_Z14UbidotsHandlerPKcS0_+0x84>)
 808163c:	e016      	b.n	808166c <_Z14UbidotsHandlerPKcS0_+0x68>
    return;
  }
  int responseCode = atoi(dataCopy);                    // Response is only a single number thanks to Template
 808163e:	4620      	mov	r0, r4
 8081640:	f005 fad2 	bl	8086be8 <atoi>
  if ((responseCode == 200) || (responseCode == 201))
 8081644:	38c8      	subs	r0, #200	; 0xc8
 8081646:	2200      	movs	r2, #0
 8081648:	2801      	cmp	r0, #1
 808164a:	782b      	ldrb	r3, [r5, #0]
  {
    Particle.publish("State","Response Received",PRIVATE);
 808164c:	f88d 2000 	strb.w	r2, [sp]
  if (!strlen(dataCopy)) {                                          // First check to see if there is any data
    Particle.publish("Ubidots Hook", "No Data",PRIVATE);
    return;
  }
  int responseCode = atoi(dataCopy);                    // Response is only a single number thanks to Template
  if ((responseCode == 200) || (responseCode == 201))
 8081650:	d80b      	bhi.n	808166a <_Z14UbidotsHandlerPKcS0_+0x66>
  {
    Particle.publish("State","Response Received",PRIVATE);
 8081652:	4a0e      	ldr	r2, [pc, #56]	; (808168c <_Z14UbidotsHandlerPKcS0_+0x88>)
 8081654:	490e      	ldr	r1, [pc, #56]	; (8081690 <_Z14UbidotsHandlerPKcS0_+0x8c>)
 8081656:	4638      	mov	r0, r7
 8081658:	f7ff fab0 	bl	8080bbc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>
 808165c:	1d38      	adds	r0, r7, #4
 808165e:	f7ff fdc7 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    doneEnabled = true;                                   // Successful response - can pet the dog again
 8081662:	4b0c      	ldr	r3, [pc, #48]	; (8081694 <_Z14UbidotsHandlerPKcS0_+0x90>)
 8081664:	2201      	movs	r2, #1
 8081666:	701a      	strb	r2, [r3, #0]
 8081668:	e007      	b.n	808167a <_Z14UbidotsHandlerPKcS0_+0x76>
  }
  else Particle.publish("Ubidots Hook", dataCopy,PRIVATE);       // Publish the response code
 808166a:	4622      	mov	r2, r4
 808166c:	4638      	mov	r0, r7
 808166e:	490a      	ldr	r1, [pc, #40]	; (8081698 <_Z14UbidotsHandlerPKcS0_+0x94>)
 8081670:	f7ff faa4 	bl	8080bbc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>
 8081674:	1d38      	adds	r0, r7, #4
 8081676:	f7ff fdbb 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808167a:	46b5      	mov	sp, r6
}
 808167c:	370c      	adds	r7, #12
 808167e:	46bd      	mov	sp, r7
 8081680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081682:	bf00      	nop
 8081684:	20000590 	.word	0x20000590
 8081688:	080879e7 	.word	0x080879e7
 808168c:	080879fc 	.word	0x080879fc
 8081690:	08087978 	.word	0x08087978
 8081694:	20000400 	.word	0x20000400
 8081698:	080879ef 	.word	0x080879ef

0808169c <_Z12setSolarMode6String>:
  }
  else return 0;
}

int setSolarMode(String command) // Function to force sending data in current hour
{
 808169c:	b530      	push	{r4, r5, lr}
 808169e:	4924      	ldr	r1, [pc, #144]	; (8081730 <_Z12setSolarMode6String+0x94>)
 80816a0:	b085      	sub	sp, #20
 80816a2:	4605      	mov	r5, r0
 80816a4:	f002 fa79 	bl	8083b9a <_ZNK6String6equalsEPKc>
  if (command == "1")
 80816a8:	4604      	mov	r4, r0
 80816aa:	b1d0      	cbz	r0, 80816e2 <_Z12setSolarMode6String+0x46>
  {
    solarPowerMode = true;
 80816ac:	4b21      	ldr	r3, [pc, #132]	; (8081734 <_Z12setSolarMode6String+0x98>)
 80816ae:	2401      	movs	r4, #1
 80816b0:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 80816b2:	f002 fdc1 	bl	8084238 <_Z21__fetch_global_EEPROMv>
 80816b6:	2004      	movs	r0, #4
 80816b8:	f7ff fa7c 	bl	8080bb4 <_ZN11EEPROMClass4readEi.isra.15>
    controlRegister = (0b00000100 | controlRegister);          // Turn on solarPowerMode
 80816bc:	4d1e      	ldr	r5, [pc, #120]	; (8081738 <_Z12setSolarMode6String+0x9c>)
 80816be:	f040 0004 	orr.w	r0, r0, #4
 80816c2:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister);// Write it to the register
 80816c4:	f002 fdb8 	bl	8084238 <_Z21__fetch_global_EEPROMv>
 80816c8:	7829      	ldrb	r1, [r5, #0]
 80816ca:	2004      	movs	r0, #4
 80816cc:	f7ff fa74 	bl	8080bb8 <_ZN11EEPROMClass5writeEih.isra.16>
    PMICreset();                                               // Change the power management Settings
 80816d0:	f7ff fafc 	bl	8080ccc <_Z9PMICresetv>
 80816d4:	4b19      	ldr	r3, [pc, #100]	; (808173c <_Z12setSolarMode6String+0xa0>)
    Particle.publish("Mode","Set Solar Powered Mode",PRIVATE);
 80816d6:	2200      	movs	r2, #0
 80816d8:	781b      	ldrb	r3, [r3, #0]
 80816da:	f88d 2000 	strb.w	r2, [sp]
 80816de:	4a18      	ldr	r2, [pc, #96]	; (8081740 <_Z12setSolarMode6String+0xa4>)
 80816e0:	e01c      	b.n	808171c <_Z12setSolarMode6String+0x80>
 80816e2:	4918      	ldr	r1, [pc, #96]	; (8081744 <_Z12setSolarMode6String+0xa8>)
 80816e4:	4628      	mov	r0, r5
 80816e6:	f002 fa58 	bl	8083b9a <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
 80816ea:	b1f8      	cbz	r0, 808172c <_Z12setSolarMode6String+0x90>
  {
    solarPowerMode = false;
 80816ec:	4b11      	ldr	r3, [pc, #68]	; (8081734 <_Z12setSolarMode6String+0x98>)
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
    controlRegister = (0b11111011 & controlRegister);           // Turn off solarPowerMode
 80816ee:	4d12      	ldr	r5, [pc, #72]	; (8081738 <_Z12setSolarMode6String+0x9c>)
    Particle.publish("Mode","Set Solar Powered Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    solarPowerMode = false;
 80816f0:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 80816f2:	f002 fda1 	bl	8084238 <_Z21__fetch_global_EEPROMv>
 80816f6:	2004      	movs	r0, #4
 80816f8:	f7ff fa5c 	bl	8080bb4 <_ZN11EEPROMClass4readEi.isra.15>
    controlRegister = (0b11111011 & controlRegister);           // Turn off solarPowerMode
 80816fc:	f020 0004 	bic.w	r0, r0, #4
 8081700:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
 8081702:	f002 fd99 	bl	8084238 <_Z21__fetch_global_EEPROMv>
 8081706:	7829      	ldrb	r1, [r5, #0]
 8081708:	2004      	movs	r0, #4
 808170a:	f7ff fa55 	bl	8080bb8 <_ZN11EEPROMClass5writeEih.isra.16>
    PMICreset();                                                // Change the power management settings
 808170e:	f7ff fadd 	bl	8080ccc <_Z9PMICresetv>
 8081712:	4b0a      	ldr	r3, [pc, #40]	; (808173c <_Z12setSolarMode6String+0xa0>)
    Particle.publish("Mode","Cleared Solar Powered Mode",PRIVATE);
 8081714:	4a0c      	ldr	r2, [pc, #48]	; (8081748 <_Z12setSolarMode6String+0xac>)
 8081716:	781b      	ldrb	r3, [r3, #0]
 8081718:	f88d 4000 	strb.w	r4, [sp]
 808171c:	490b      	ldr	r1, [pc, #44]	; (808174c <_Z12setSolarMode6String+0xb0>)
 808171e:	a802      	add	r0, sp, #8
 8081720:	f7ff fa4c 	bl	8080bbc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>
 8081724:	a803      	add	r0, sp, #12
 8081726:	f7ff fd63 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
 808172a:	2001      	movs	r0, #1
  }
  else return 0;
}
 808172c:	b005      	add	sp, #20
 808172e:	bd30      	pop	{r4, r5, pc}
 8081730:	08087cb0 	.word	0x08087cb0
 8081734:	2000068a 	.word	0x2000068a
 8081738:	2000069b 	.word	0x2000069b
 808173c:	20000590 	.word	0x20000590
 8081740:	08087a0e 	.word	0x08087a0e
 8081744:	08087a25 	.word	0x08087a25
 8081748:	08087a27 	.word	0x08087a27
 808174c:	08087a3d 	.word	0x08087a3d

08081750 <_Z14setVerboseMode6String>:

int setVerboseMode(String command) // Function to force sending data in current hour
{
 8081750:	b530      	push	{r4, r5, lr}
 8081752:	4922      	ldr	r1, [pc, #136]	; (80817dc <_Z14setVerboseMode6String+0x8c>)
 8081754:	b085      	sub	sp, #20
 8081756:	4605      	mov	r5, r0
 8081758:	f002 fa1f 	bl	8083b9a <_ZNK6String6equalsEPKc>
  if (command == "1")
 808175c:	4604      	mov	r4, r0
 808175e:	b1c0      	cbz	r0, 8081792 <_Z14setVerboseMode6String+0x42>
  {
    verboseMode = true;
 8081760:	4b1f      	ldr	r3, [pc, #124]	; (80817e0 <_Z14setVerboseMode6String+0x90>)
 8081762:	2401      	movs	r4, #1
 8081764:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 8081766:	f002 fd67 	bl	8084238 <_Z21__fetch_global_EEPROMv>
 808176a:	2004      	movs	r0, #4
 808176c:	f7ff fa22 	bl	8080bb4 <_ZN11EEPROMClass4readEi.isra.15>
    controlRegister = (0b00001000 | controlRegister);                    // Turn on verboseMode
 8081770:	4d1c      	ldr	r5, [pc, #112]	; (80817e4 <_Z14setVerboseMode6String+0x94>)
 8081772:	f040 0008 	orr.w	r0, r0, #8
 8081776:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
 8081778:	f002 fd5e 	bl	8084238 <_Z21__fetch_global_EEPROMv>
 808177c:	7829      	ldrb	r1, [r5, #0]
 808177e:	2004      	movs	r0, #4
 8081780:	f7ff fa1a 	bl	8080bb8 <_ZN11EEPROMClass5writeEih.isra.16>
 8081784:	4b18      	ldr	r3, [pc, #96]	; (80817e8 <_Z14setVerboseMode6String+0x98>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
 8081786:	2200      	movs	r2, #0
 8081788:	781b      	ldrb	r3, [r3, #0]
 808178a:	f88d 2000 	strb.w	r2, [sp]
 808178e:	4a17      	ldr	r2, [pc, #92]	; (80817ec <_Z14setVerboseMode6String+0x9c>)
 8081790:	e01a      	b.n	80817c8 <_Z14setVerboseMode6String+0x78>
 8081792:	4917      	ldr	r1, [pc, #92]	; (80817f0 <_Z14setVerboseMode6String+0xa0>)
 8081794:	4628      	mov	r0, r5
 8081796:	f002 fa00 	bl	8083b9a <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
 808179a:	b1e8      	cbz	r0, 80817d8 <_Z14setVerboseMode6String+0x88>
  {
    verboseMode = false;
 808179c:	4b10      	ldr	r3, [pc, #64]	; (80817e0 <_Z14setVerboseMode6String+0x90>)
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
 808179e:	4d11      	ldr	r5, [pc, #68]	; (80817e4 <_Z14setVerboseMode6String+0x94>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    verboseMode = false;
 80817a0:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 80817a2:	f002 fd49 	bl	8084238 <_Z21__fetch_global_EEPROMv>
 80817a6:	2004      	movs	r0, #4
 80817a8:	f7ff fa04 	bl	8080bb4 <_ZN11EEPROMClass4readEi.isra.15>
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
 80817ac:	f020 0008 	bic.w	r0, r0, #8
 80817b0:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
 80817b2:	f002 fd41 	bl	8084238 <_Z21__fetch_global_EEPROMv>
 80817b6:	7829      	ldrb	r1, [r5, #0]
 80817b8:	2004      	movs	r0, #4
 80817ba:	f7ff f9fd 	bl	8080bb8 <_ZN11EEPROMClass5writeEih.isra.16>
 80817be:	4b0a      	ldr	r3, [pc, #40]	; (80817e8 <_Z14setVerboseMode6String+0x98>)
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
 80817c0:	4a0c      	ldr	r2, [pc, #48]	; (80817f4 <_Z14setVerboseMode6String+0xa4>)
 80817c2:	781b      	ldrb	r3, [r3, #0]
 80817c4:	f88d 4000 	strb.w	r4, [sp]
 80817c8:	490b      	ldr	r1, [pc, #44]	; (80817f8 <_Z14setVerboseMode6String+0xa8>)
 80817ca:	a802      	add	r0, sp, #8
 80817cc:	f7ff f9f6 	bl	8080bbc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>
 80817d0:	a803      	add	r0, sp, #12
 80817d2:	f7ff fd0d 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
 80817d6:	2001      	movs	r0, #1
  }
  else return 0;
}
 80817d8:	b005      	add	sp, #20
 80817da:	bd30      	pop	{r4, r5, pc}
 80817dc:	08087cb0 	.word	0x08087cb0
 80817e0:	20000650 	.word	0x20000650
 80817e4:	2000069b 	.word	0x2000069b
 80817e8:	20000590 	.word	0x20000590
 80817ec:	08087a42 	.word	0x08087a42
 80817f0:	08087a25 	.word	0x08087a25
 80817f4:	08087a53 	.word	0x08087a53
 80817f8:	08087a3d 	.word	0x08087a3d

080817fc <_Z11setTimeZone6String>:

int setTimeZone(String command)
{
 80817fc:	b570      	push	{r4, r5, r6, lr}
 80817fe:	b0cc      	sub	sp, #304	; 0x130
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8081800:	220a      	movs	r2, #10
 8081802:	a905      	add	r1, sp, #20
 8081804:	6800      	ldr	r0, [r0, #0]
 8081806:	f005 fc19 	bl	808703c <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 808180a:	b2c5      	uxtb	r5, r0
 808180c:	f105 030c 	add.w	r3, r5, #12
 8081810:	b2db      	uxtb	r3, r3
 8081812:	2b18      	cmp	r3, #24
 8081814:	d83d      	bhi.n	8081892 <_Z11setTimeZone6String+0x96>

int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8081816:	b244      	sxtb	r4, r0
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  Time.zone((float)tempTimeZoneOffset);
 8081818:	4620      	mov	r0, r4
 808181a:	f004 fda1 	bl	8086360 <__aeabi_i2f>
 808181e:	f002 fa53 	bl	8083cc8 <_ZN9TimeClass4zoneEf>
  EEPROM.write(MEM_MAP::timeZoneAddr,tempTimeZoneOffset);                             // Store the new value in FRAMwrite8
 8081822:	f002 fd09 	bl	8084238 <_Z21__fetch_global_EEPROMv>
 8081826:	4629      	mov	r1, r5
 8081828:	2003      	movs	r0, #3
 808182a:	f7ff f9c5 	bl	8080bb8 <_ZN11EEPROMClass5writeEih.isra.16>
  t = Time.now();
 808182e:	f002 faaa 	bl	8083d86 <_ZN9TimeClass3nowEv>
 8081832:	4e19      	ldr	r6, [pc, #100]	; (8081898 <_Z11setTimeZone6String+0x9c>)
 8081834:	4d19      	ldr	r5, [pc, #100]	; (808189c <_Z11setTimeZone6String+0xa0>)
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 8081836:	4623      	mov	r3, r4
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  Time.zone((float)tempTimeZoneOffset);
  EEPROM.write(MEM_MAP::timeZoneAddr,tempTimeZoneOffset);                             // Store the new value in FRAMwrite8
  t = Time.now();
 8081838:	6030      	str	r0, [r6, #0]
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 808183a:	4a19      	ldr	r2, [pc, #100]	; (80818a0 <_Z11setTimeZone6String+0xa4>)
 808183c:	f44f 7180 	mov.w	r1, #256	; 0x100
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8081840:	2400      	movs	r4, #0
 8081842:	a80c      	add	r0, sp, #48	; 0x30
 8081844:	f001 f84e 	bl	80828e4 <snprintf>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8081848:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("Time",data,PRIVATE);
 808184a:	aa0c      	add	r2, sp, #48	; 0x30
 808184c:	4915      	ldr	r1, [pc, #84]	; (80818a4 <_Z11setTimeZone6String+0xa8>)
 808184e:	a808      	add	r0, sp, #32
 8081850:	f88d 4000 	strb.w	r4, [sp]
 8081854:	f7ff f9b2 	bl	8080bbc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>
 8081858:	a809      	add	r0, sp, #36	; 0x24
 808185a:	f7ff fcc9 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 808185e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8081862:	f001 f85f 	bl	8082924 <delay>
  Particle.publish("Time",Time.timeStr(t),PRIVATE);
 8081866:	6831      	ldr	r1, [r6, #0]
 8081868:	a808      	add	r0, sp, #32
 808186a:	f002 fa49 	bl	8083d00 <_ZN9TimeClass7timeStrEl>
 808186e:	9b08      	ldr	r3, [sp, #32]
 8081870:	490c      	ldr	r1, [pc, #48]	; (80818a4 <_Z11setTimeZone6String+0xa8>)
 8081872:	9303      	str	r3, [sp, #12]
 8081874:	9a03      	ldr	r2, [sp, #12]
 8081876:	782b      	ldrb	r3, [r5, #0]
 8081878:	a806      	add	r0, sp, #24
 808187a:	f88d 4000 	strb.w	r4, [sp]
 808187e:	f7ff f99d 	bl	8080bbc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>
 8081882:	a807      	add	r0, sp, #28
 8081884:	f7ff fcb4 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081888:	a808      	add	r0, sp, #32
 808188a:	f002 f912 	bl	8083ab2 <_ZN6StringD1Ev>
  return 1;
 808188e:	2001      	movs	r0, #1
 8081890:	e000      	b.n	8081894 <_Z11setTimeZone6String+0x98>
int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 8081892:	2000      	movs	r0, #0
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
  Particle.publish("Time",data,PRIVATE);
  delay(1000);
  Particle.publish("Time",Time.timeStr(t),PRIVATE);
  return 1;
}
 8081894:	b04c      	add	sp, #304	; 0x130
 8081896:	bd70      	pop	{r4, r5, r6, pc}
 8081898:	200005a0 	.word	0x200005a0
 808189c:	20000590 	.word	0x20000590
 80818a0:	08087a68 	.word	0x08087a68
 80818a4:	08087a7c 	.word	0x08087a7c

080818a8 <_Z15setLowPowerMode6String>:


int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
 80818a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 80818aa:	4926      	ldr	r1, [pc, #152]	; (8081944 <_Z15setLowPowerMode6String+0x9c>)
 80818ac:	4605      	mov	r5, r0
 80818ae:	f002 f974 	bl	8083b9a <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
 80818b2:	b928      	cbnz	r0, 80818c0 <_Z15setLowPowerMode6String+0x18>
 80818b4:	4924      	ldr	r1, [pc, #144]	; (8081948 <_Z15setLowPowerMode6String+0xa0>)
 80818b6:	4628      	mov	r0, r5
 80818b8:	f002 f96f 	bl	8083b9a <_ZNK6String6equalsEPKc>
 80818bc:	2800      	cmp	r0, #0
 80818be:	d03f      	beq.n	8081940 <_Z15setLowPowerMode6String+0x98>
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 80818c0:	f002 fcba 	bl	8084238 <_Z21__fetch_global_EEPROMv>
 80818c4:	2004      	movs	r0, #4
 80818c6:	f7ff f975 	bl	8080bb4 <_ZN11EEPROMClass4readEi.isra.15>
 80818ca:	4c20      	ldr	r4, [pc, #128]	; (808194c <_Z15setLowPowerMode6String+0xa4>)
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80818cc:	491d      	ldr	r1, [pc, #116]	; (8081944 <_Z15setLowPowerMode6String+0x9c>)
 80818ce:	7020      	strb	r0, [r4, #0]
 80818d0:	4628      	mov	r0, r5
 80818d2:	f002 f962 	bl	8083b9a <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
 80818d6:	4606      	mov	r6, r0
 80818d8:	b1a0      	cbz	r0, 8081904 <_Z15setLowPowerMode6String+0x5c>
 80818da:	4b1d      	ldr	r3, [pc, #116]	; (8081950 <_Z15setLowPowerMode6String+0xa8>)
  {
    Particle.publish("Mode","Low Power",PRIVATE);
 80818dc:	2200      	movs	r2, #0
 80818de:	781b      	ldrb	r3, [r3, #0]
 80818e0:	491c      	ldr	r1, [pc, #112]	; (8081954 <_Z15setLowPowerMode6String+0xac>)
 80818e2:	f88d 2000 	strb.w	r2, [sp]
 80818e6:	a802      	add	r0, sp, #8
 80818e8:	4a1b      	ldr	r2, [pc, #108]	; (8081958 <_Z15setLowPowerMode6String+0xb0>)
 80818ea:	f7ff f967 	bl	8080bbc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>
 80818ee:	a803      	add	r0, sp, #12
 80818f0:	f7ff fc7e 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    controlRegister = (0b00000001 | controlRegister);                  // If so, flip the lowPowerMode bit
 80818f4:	7823      	ldrb	r3, [r4, #0]
    lowPowerMode = true;
 80818f6:	2201      	movs	r2, #1
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
  if (command == "1")                                                 // Command calls for setting lowPowerMode
  {
    Particle.publish("Mode","Low Power",PRIVATE);
    controlRegister = (0b00000001 | controlRegister);                  // If so, flip the lowPowerMode bit
 80818f8:	f043 0301 	orr.w	r3, r3, #1
 80818fc:	7023      	strb	r3, [r4, #0]
    lowPowerMode = true;
 80818fe:	4b17      	ldr	r3, [pc, #92]	; (808195c <_Z15setLowPowerMode6String+0xb4>)
 8081900:	701a      	strb	r2, [r3, #0]
 8081902:	e016      	b.n	8081932 <_Z15setLowPowerMode6String+0x8a>
 8081904:	4910      	ldr	r1, [pc, #64]	; (8081948 <_Z15setLowPowerMode6String+0xa0>)
 8081906:	4628      	mov	r0, r5
 8081908:	f002 f947 	bl	8083b9a <_ZNK6String6equalsEPKc>
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
 808190c:	b188      	cbz	r0, 8081932 <_Z15setLowPowerMode6String+0x8a>
 808190e:	4b10      	ldr	r3, [pc, #64]	; (8081950 <_Z15setLowPowerMode6String+0xa8>)
  {
    Particle.publish("Mode","Normal Operations",PRIVATE);
 8081910:	4a13      	ldr	r2, [pc, #76]	; (8081960 <_Z15setLowPowerMode6String+0xb8>)
 8081912:	781b      	ldrb	r3, [r3, #0]
 8081914:	490f      	ldr	r1, [pc, #60]	; (8081954 <_Z15setLowPowerMode6String+0xac>)
 8081916:	a802      	add	r0, sp, #8
 8081918:	f88d 6000 	strb.w	r6, [sp]
 808191c:	f7ff f94e 	bl	8080bbc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>
 8081920:	a803      	add	r0, sp, #12
 8081922:	f7ff fc65 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    controlRegister = (0b1111110 & controlRegister);                  // If so, flip the lowPowerMode bit
 8081926:	7823      	ldrb	r3, [r4, #0]
 8081928:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 808192c:	7023      	strb	r3, [r4, #0]
    lowPowerMode = false;
 808192e:	4b0b      	ldr	r3, [pc, #44]	; (808195c <_Z15setLowPowerMode6String+0xb4>)
 8081930:	701e      	strb	r6, [r3, #0]
  }
  EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
 8081932:	f002 fc81 	bl	8084238 <_Z21__fetch_global_EEPROMv>
 8081936:	2004      	movs	r0, #4
 8081938:	7821      	ldrb	r1, [r4, #0]
 808193a:	f7ff f93d 	bl	8080bb8 <_ZN11EEPROMClass5writeEih.isra.16>
 808193e:	2001      	movs	r0, #1
  return 1;
}
 8081940:	b004      	add	sp, #16
 8081942:	bd70      	pop	{r4, r5, r6, pc}
 8081944:	08087cb0 	.word	0x08087cb0
 8081948:	08087a25 	.word	0x08087a25
 808194c:	2000069b 	.word	0x2000069b
 8081950:	20000590 	.word	0x20000590
 8081954:	08087a3d 	.word	0x08087a3d
 8081958:	08087a81 	.word	0x08087a81
 808195c:	20000648 	.word	0x20000648
 8081960:	08087a8b 	.word	0x08087a8b

08081964 <_ZN10CloudClass8variableIA4_cIA16_cEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 8081964:	2300      	movs	r3, #0
 8081966:	2204      	movs	r2, #4
 8081968:	f000 beec 	b.w	8082744 <spark_variable>

0808196c <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 808196c:	4602      	mov	r2, r0
 808196e:	4801      	ldr	r0, [pc, #4]	; (8081974 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
 8081970:	f001 b96e 	b.w	8082c50 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8081974:	08082c25 	.word	0x08082c25

08081978 <setup>:
double approxAltitudeInM = 0;
float heatIndexC;                                                 // Will cacluate the heat index and report to Ubidots


void setup()                                                      // Note: Disconnected Setup()
{
 8081978:	b5f0      	push	{r4, r5, r6, r7, lr}
 808197a:	b0b9      	sub	sp, #228	; 0xe4
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
 808197c:	aa08      	add	r2, sp, #32
 808197e:	4616      	mov	r6, r2
 8081980:	4ba6      	ldr	r3, [pc, #664]	; (8081c1c <setup+0x2a4>)
 8081982:	f103 0510 	add.w	r5, r3, #16
 8081986:	4614      	mov	r4, r2
 8081988:	6818      	ldr	r0, [r3, #0]
 808198a:	6859      	ldr	r1, [r3, #4]
 808198c:	3308      	adds	r3, #8
 808198e:	c403      	stmia	r4!, {r0, r1}
 8081990:	42ab      	cmp	r3, r5
 8081992:	4622      	mov	r2, r4
 8081994:	d1f7      	bne.n	8081986 <setup+0xe>
 8081996:	8819      	ldrh	r1, [r3, #0]
 8081998:	789b      	ldrb	r3, [r3, #2]
 808199a:	222d      	movs	r2, #45	; 0x2d
 808199c:	70a3      	strb	r3, [r4, #2]
 808199e:	8021      	strh	r1, [r4, #0]
  state = IDLE_STATE;
 80819a0:	4d9f      	ldr	r5, [pc, #636]	; (8081c20 <setup+0x2a8>)
float heatIndexC;                                                 // Will cacluate the heat index and report to Ubidots


void setup()                                                      // Note: Disconnected Setup()
{
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
 80819a2:	2100      	movs	r1, #0
 80819a4:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 80819a8:	f005 fa33 	bl	8086e12 <memset>
  state = IDLE_STATE;
 80819ac:	2702      	movs	r7, #2

  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
 80819ae:	2101      	movs	r1, #1
 80819b0:	2007      	movs	r0, #7


void setup()                                                      // Note: Disconnected Setup()
{
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
  state = IDLE_STATE;
 80819b2:	702f      	strb	r7, [r5, #0]

  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
 80819b4:	f002 fc02 	bl	80841bc <pinMode>
  pinMode(userSwitch,INPUT);                                      // Momentary contact button on board for direct user input
 80819b8:	2100      	movs	r1, #0
 80819ba:	2005      	movs	r0, #5
 80819bc:	f002 fbfe 	bl	80841bc <pinMode>
  pinMode(donePin,OUTPUT);                                        // To pet the watchdog
 80819c0:	2101      	movs	r1, #1
 80819c2:	2006      	movs	r0, #6
 80819c4:	f002 fbfa 	bl	80841bc <pinMode>
  pinMode(wakeUpPin, INPUT);                                      // Watchdog interrrupt
 80819c8:	2100      	movs	r1, #0
 80819ca:	2011      	movs	r0, #17
 80819cc:	f002 fbf6 	bl	80841bc <pinMode>
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
 80819d0:	a804      	add	r0, sp, #16
    particle::Future<bool> publish(const char* name, const char* data) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;
    particle::Future<bool> publish(const char* name, const char* data, int ttl) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
 80819d2:	2400      	movs	r4, #0
 80819d4:	f000 fee6 	bl	80827a4 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
 80819d8:	2300      	movs	r3, #0
 80819da:	227d      	movs	r2, #125	; 0x7d
 80819dc:	a918      	add	r1, sp, #96	; 0x60
 80819de:	a804      	add	r0, sp, #16
 80819e0:	f002 f8ed 	bl	8083bbe <_ZNK6String8getBytesEPhjj>
 80819e4:	4623      	mov	r3, r4
 80819e6:	4622      	mov	r2, r4
 80819e8:	498e      	ldr	r1, [pc, #568]	; (8081c24 <setup+0x2ac>)
 80819ea:	9401      	str	r4, [sp, #4]
 80819ec:	9400      	str	r4, [sp, #0]
 80819ee:	a818      	add	r0, sp, #96	; 0x60
 80819f0:	f000 fee8 	bl	80827c4 <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);  // Subscribe to the integration response event

  Particle.variable("Signal", SignalString);                      // Particle variables that enable monitoring using the mobile app
 80819f4:	498c      	ldr	r1, [pc, #560]	; (8081c28 <setup+0x2b0>)
 80819f6:	488d      	ldr	r0, [pc, #564]	; (8081c2c <setup+0x2b4>)
 80819f8:	f7ff ffb4 	bl	8081964 <_ZN10CloudClass8variableIA4_cIA16_cEEEbRKT_DpRKT0_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 80819fc:	463a      	mov	r2, r7
 80819fe:	4623      	mov	r3, r4
 8081a00:	498b      	ldr	r1, [pc, #556]	; (8081c30 <setup+0x2b8>)
 8081a02:	488c      	ldr	r0, [pc, #560]	; (8081c34 <setup+0x2bc>)
 8081a04:	f000 fe9e 	bl	8082744 <spark_variable>
 8081a08:	498b      	ldr	r1, [pc, #556]	; (8081c38 <setup+0x2c0>)
 8081a0a:	4623      	mov	r3, r4
 8081a0c:	2204      	movs	r2, #4
 8081a0e:	6809      	ldr	r1, [r1, #0]
 8081a10:	488a      	ldr	r0, [pc, #552]	; (8081c3c <setup+0x2c4>)
 8081a12:	f000 fe97 	bl	8082744 <spark_variable>
  Particle.variable("ResetCount", resetCount);
  Particle.variable("Release",releaseNumber);
  Particle.variable("stateOfChg", batteryString);
 8081a16:	498a      	ldr	r1, [pc, #552]	; (8081c40 <setup+0x2c8>)
 8081a18:	488a      	ldr	r0, [pc, #552]	; (8081c44 <setup+0x2cc>)
 8081a1a:	f7ff ffa3 	bl	8081964 <_ZN10CloudClass8variableIA4_cIA16_cEEEbRKT_DpRKT0_>
 8081a1e:	4623      	mov	r3, r4
 8081a20:	2201      	movs	r2, #1
 8081a22:	4989      	ldr	r1, [pc, #548]	; (8081c48 <setup+0x2d0>)
 8081a24:	4889      	ldr	r0, [pc, #548]	; (8081c4c <setup+0x2d4>)
 8081a26:	f000 fe8d 	bl	8082744 <spark_variable>
  Particle.variable("lowPowerMode",lowPowerMode);
  Particle.variable("temperature", temperatureString);
 8081a2a:	4989      	ldr	r1, [pc, #548]	; (8081c50 <setup+0x2d8>)
 8081a2c:	4889      	ldr	r0, [pc, #548]	; (8081c54 <setup+0x2dc>)
 8081a2e:	f7ff ff99 	bl	8081964 <_ZN10CloudClass8variableIA4_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("humidity", humidityString);
 8081a32:	4989      	ldr	r1, [pc, #548]	; (8081c58 <setup+0x2e0>)
 8081a34:	4889      	ldr	r0, [pc, #548]	; (8081c5c <setup+0x2e4>)
 8081a36:	f7ff ff95 	bl	8081964 <_ZN10CloudClass8variableIA4_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("pressure", pressureString);
 8081a3a:	4989      	ldr	r1, [pc, #548]	; (8081c60 <setup+0x2e8>)
 8081a3c:	4889      	ldr	r0, [pc, #548]	; (8081c64 <setup+0x2ec>)
 8081a3e:	f7ff ff91 	bl	8081964 <_ZN10CloudClass8variableIA4_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("gas", TVOCString);
 8081a42:	4989      	ldr	r1, [pc, #548]	; (8081c68 <setup+0x2f0>)
 8081a44:	4889      	ldr	r0, [pc, #548]	; (8081c6c <setup+0x2f4>)
 8081a46:	f7ff ff8d 	bl	8081964 <_ZN10CloudClass8variableIA4_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("altitude", altitudeString);
 8081a4a:	4989      	ldr	r1, [pc, #548]	; (8081c70 <setup+0x2f8>)
 8081a4c:	4889      	ldr	r0, [pc, #548]	; (8081c74 <setup+0x2fc>)
 8081a4e:	f7ff ff89 	bl	8081964 <_ZN10CloudClass8variableIA4_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Heat-Index",heatIndexString);
 8081a52:	4989      	ldr	r1, [pc, #548]	; (8081c78 <setup+0x300>)
 8081a54:	4889      	ldr	r0, [pc, #548]	; (8081c7c <setup+0x304>)
 8081a56:	f7ff ff85 	bl	8081964 <_ZN10CloudClass8variableIA4_cIA16_cEEEbRKT_DpRKT0_>

  Particle.function("Measure-Now",measureNow);
 8081a5a:	4989      	ldr	r1, [pc, #548]	; (8081c80 <setup+0x308>)
 8081a5c:	4889      	ldr	r0, [pc, #548]	; (8081c84 <setup+0x30c>)
 8081a5e:	f7ff ff85 	bl	808196c <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("LowPowerMode",setLowPowerMode);
 8081a62:	4989      	ldr	r1, [pc, #548]	; (8081c88 <setup+0x310>)
 8081a64:	4889      	ldr	r0, [pc, #548]	; (8081c8c <setup+0x314>)
 8081a66:	f7ff ff81 	bl	808196c <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Solar-Mode",setSolarMode);
 8081a6a:	4989      	ldr	r1, [pc, #548]	; (8081c90 <setup+0x318>)
 8081a6c:	4889      	ldr	r0, [pc, #548]	; (8081c94 <setup+0x31c>)
 8081a6e:	f7ff ff7d 	bl	808196c <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setVerboseMode);
 8081a72:	4989      	ldr	r1, [pc, #548]	; (8081c98 <setup+0x320>)
 8081a74:	4889      	ldr	r0, [pc, #548]	; (8081c9c <setup+0x324>)
 8081a76:	f7ff ff79 	bl	808196c <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetTimeZone",setTimeZone);
 8081a7a:	4989      	ldr	r1, [pc, #548]	; (8081ca0 <setup+0x328>)
 8081a7c:	4889      	ldr	r0, [pc, #548]	; (8081ca4 <setup+0x32c>)
 8081a7e:	f7ff ff75 	bl	808196c <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
 8081a82:	f002 fbd9 	bl	8084238 <_Z21__fetch_global_EEPROMv>
 8081a86:	4620      	mov	r0, r4
 8081a88:	f7ff f894 	bl	8080bb4 <_ZN11EEPROMClass4readEi.isra.15>
 8081a8c:	2801      	cmp	r0, #1
 8081a8e:	462f      	mov	r7, r5
 8081a90:	d110      	bne.n	8081ab4 <setup+0x13c>
    for (int i=1; i < 10; i++) {
      EEPROM.put(i,0);                                                 // Zero out the memory - new map or new device
    }
  }

  if (!bme.begin()) {                                                   // Start the BME680 Sensor
 8081a92:	2201      	movs	r2, #1
 8081a94:	2177      	movs	r1, #119	; 0x77
 8081a96:	4884      	ldr	r0, [pc, #528]	; (8081ca8 <setup+0x330>)
 8081a98:	f000 fa92 	bl	8081fc0 <_ZN15Adafruit_BME6805beginEhb>
 8081a9c:	b9f8      	cbnz	r0, 8081ade <setup+0x166>
 8081a9e:	f000 fc6d 	bl	808237c <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
 8081aa2:	4b82      	ldr	r3, [pc, #520]	; (8081cac <setup+0x334>)
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - BME680 Initialization");
 8081aa4:	4982      	ldr	r1, [pc, #520]	; (8081cb0 <setup+0x338>)
      EEPROM.put(i,0);                                                 // Zero out the memory - new map or new device
    }
  }

  if (!bme.begin()) {                                                   // Start the BME680 Sensor
    resetTimeStamp = millis();
 8081aa6:	6018      	str	r0, [r3, #0]
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - BME680 Initialization");
 8081aa8:	4630      	mov	r0, r6
 8081aaa:	f005 f9ed 	bl	8086e88 <strcpy>
    state = ERROR_STATE;
 8081aae:	2301      	movs	r3, #1
 8081ab0:	703b      	strb	r3, [r7, #0]
 8081ab2:	e014      	b.n	8081ade <setup+0x166>
  Particle.function("Solar-Mode",setSolarMode);
  Particle.function("Verbose-Mode",setVerboseMode);
  Particle.function("SetTimeZone",setTimeZone);

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
 8081ab4:	f002 fbc0 	bl	8084238 <_Z21__fetch_global_EEPROMv>
 8081ab8:	2501      	movs	r5, #1
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 8081aba:	2204      	movs	r2, #4
 8081abc:	a902      	add	r1, sp, #8
 8081abe:	4620      	mov	r0, r4
 8081ac0:	9502      	str	r5, [sp, #8]
 8081ac2:	f000 fc83 	bl	80823cc <HAL_EEPROM_Put>
    for (int i=1; i < 10; i++) {
      EEPROM.put(i,0);                                                 // Zero out the memory - new map or new device
 8081ac6:	f002 fbb7 	bl	8084238 <_Z21__fetch_global_EEPROMv>
 8081aca:	4628      	mov	r0, r5
 8081acc:	2204      	movs	r2, #4
 8081ace:	a902      	add	r1, sp, #8
  Particle.function("Verbose-Mode",setVerboseMode);
  Particle.function("SetTimeZone",setTimeZone);

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
    for (int i=1; i < 10; i++) {
 8081ad0:	3501      	adds	r5, #1
      EEPROM.put(i,0);                                                 // Zero out the memory - new map or new device
 8081ad2:	9402      	str	r4, [sp, #8]
 8081ad4:	f000 fc7a 	bl	80823cc <HAL_EEPROM_Put>
  Particle.function("Verbose-Mode",setVerboseMode);
  Particle.function("SetTimeZone",setTimeZone);

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
    for (int i=1; i < 10; i++) {
 8081ad8:	2d0a      	cmp	r5, #10
 8081ada:	d1f4      	bne.n	8081ac6 <setup+0x14e>
 8081adc:	e7d9      	b.n	8081a92 <setup+0x11a>
    state = ERROR_STATE;
  }


  // Set up the smapling paramatures
  bme.setTemperatureOversampling(BME680_OS_8X);
 8081ade:	2104      	movs	r1, #4
 8081ae0:	4871      	ldr	r0, [pc, #452]	; (8081ca8 <setup+0x330>)
 8081ae2:	f000 fbcd 	bl	8082280 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>
  bme.setHumidityOversampling(BME680_OS_2X);
 8081ae6:	2102      	movs	r1, #2
 8081ae8:	486f      	ldr	r0, [pc, #444]	; (8081ca8 <setup+0x330>)
 8081aea:	f000 fbd6 	bl	808229a <_ZN15Adafruit_BME68023setHumidityOversamplingEh>
  bme.setPressureOversampling(BME680_OS_4X);
 8081aee:	2103      	movs	r1, #3
 8081af0:	486d      	ldr	r0, [pc, #436]	; (8081ca8 <setup+0x330>)
 8081af2:	f000 fbdf 	bl	80822b4 <_ZN15Adafruit_BME68023setPressureOversamplingEh>
  bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
 8081af6:	2102      	movs	r1, #2
 8081af8:	486b      	ldr	r0, [pc, #428]	; (8081ca8 <setup+0x330>)
 8081afa:	f000 fbe8 	bl	80822ce <_ZN15Adafruit_BME68016setIIRFilterSizeEh>
  bme.setGasHeater(320, 150); // 320*C for 150 ms
 8081afe:	2296      	movs	r2, #150	; 0x96
 8081b00:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8081b04:	4868      	ldr	r0, [pc, #416]	; (8081ca8 <setup+0x330>)
 8081b06:	f000 fba7 	bl	8082258 <_ZN15Adafruit_BME68012setGasHeaterEtt>

  resetCount = EEPROM.read(MEM_MAP::resetCountAddr);                    // Retrive system recount data from FRAM
 8081b0a:	f002 fb95 	bl	8084238 <_Z21__fetch_global_EEPROMv>
 8081b0e:	2002      	movs	r0, #2
 8081b10:	f7ff f850 	bl	8080bb4 <_ZN11EEPROMClass4readEi.isra.15>
 8081b14:	4c46      	ldr	r4, [pc, #280]	; (8081c30 <setup+0x2b8>)
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 8081b16:	2200      	movs	r2, #0
 8081b18:	6020      	str	r0, [r4, #0]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8081b1a:	4611      	mov	r1, r2
 8081b1c:	a802      	add	r0, sp, #8
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 8081b1e:	9202      	str	r2, [sp, #8]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8081b20:	f000 fc1c 	bl	808235c <HAL_Core_Get_Last_Reset_Info>
        return reason;
 8081b24:	9b02      	ldr	r3, [sp, #8]
  if (System.resetReason() == RESET_REASON_PIN_RESET)                   // Check to see if we are starting from a pin reset
 8081b26:	2b14      	cmp	r3, #20
 8081b28:	d108      	bne.n	8081b3c <setup+0x1c4>
  {
    resetCount++;
 8081b2a:	6823      	ldr	r3, [r4, #0]
 8081b2c:	3301      	adds	r3, #1
 8081b2e:	6023      	str	r3, [r4, #0]
    EEPROM.write(MEM_MAP::resetCountAddr, resetCount);                  // If so, store incremented number - watchdog must have done This
 8081b30:	f002 fb82 	bl	8084238 <_Z21__fetch_global_EEPROMv>
 8081b34:	7821      	ldrb	r1, [r4, #0]
 8081b36:	2002      	movs	r0, #2
 8081b38:	f7ff f83e 	bl	8080bb8 <_ZN11EEPROMClass5writeEih.isra.16>
  }
  if (resetCount >=6) {                                                 // If we get to resetCount 4, we are resetting without entering the main loop
 8081b3c:	6823      	ldr	r3, [r4, #0]
 8081b3e:	2b05      	cmp	r3, #5
 8081b40:	dd07      	ble.n	8081b52 <setup+0x1da>
    EEPROM.write(MEM_MAP::resetCountAddr,4);                                           // The hope here is to get to the main loop and report a value of 4 which will indicate this issue is occuring
 8081b42:	f002 fb79 	bl	8084238 <_Z21__fetch_global_EEPROMv>
 8081b46:	2104      	movs	r1, #4
 8081b48:	2002      	movs	r0, #2
 8081b4a:	f7ff f835 	bl	8080bb8 <_ZN11EEPROMClass5writeEih.isra.16>
    fullModemReset();                                                   // This will reset the modem and the device will reboot
 8081b4e:	f7ff fb13 	bl	8081178 <_Z14fullModemResetv>
  }

  int8_t tempTimeZoneOffset = EEPROM.read(MEM_MAP::timeZoneAddr);                      // Load Time zone data from FRAM
 8081b52:	f002 fb71 	bl	8084238 <_Z21__fetch_global_EEPROMv>
 8081b56:	2003      	movs	r0, #3
 8081b58:	f7ff f82c 	bl	8080bb4 <_ZN11EEPROMClass4readEi.isra.15>
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
 8081b5c:	f100 030c 	add.w	r3, r0, #12
 8081b60:	b2db      	uxtb	r3, r3
 8081b62:	2b18      	cmp	r3, #24
 8081b64:	d803      	bhi.n	8081b6e <setup+0x1f6>
 8081b66:	b240      	sxtb	r0, r0
 8081b68:	f004 fbfa 	bl	8086360 <__aeabi_i2f>
 8081b6c:	e000      	b.n	8081b70 <setup+0x1f8>
  else Time.zone(0);                                                   // Default is GMT in case proper value not in EEPROM
 8081b6e:	2000      	movs	r0, #0
 8081b70:	f002 f8aa 	bl	8083cc8 <_ZN9TimeClass4zoneEf>

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
 8081b74:	f002 fb60 	bl	8084238 <_Z21__fetch_global_EEPROMv>
 8081b78:	2004      	movs	r0, #4
 8081b7a:	f7ff f81b 	bl	8080bb4 <_ZN11EEPROMClass4readEi.isra.15>
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
 8081b7e:	4c32      	ldr	r4, [pc, #200]	; (8081c48 <setup+0x2d0>)
 8081b80:	f000 0301 	and.w	r3, r0, #1
  int8_t tempTimeZoneOffset = EEPROM.read(MEM_MAP::timeZoneAddr);                      // Load Time zone data from FRAM
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
  else Time.zone(0);                                                   // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
 8081b84:	4f4b      	ldr	r7, [pc, #300]	; (8081cb4 <setup+0x33c>)
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
 8081b86:	7023      	strb	r3, [r4, #0]
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode
 8081b88:	4d4b      	ldr	r5, [pc, #300]	; (8081cb8 <setup+0x340>)
  else Time.zone(0);                                                   // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
 8081b8a:	4b4c      	ldr	r3, [pc, #304]	; (8081cbc <setup+0x344>)
 8081b8c:	f3c0 0280 	ubfx	r2, r0, #2, #1
  int8_t tempTimeZoneOffset = EEPROM.read(MEM_MAP::timeZoneAddr);                      // Load Time zone data from FRAM
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
  else Time.zone(0);                                                   // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
 8081b90:	7038      	strb	r0, [r7, #0]
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode
 8081b92:	f3c0 00c0 	ubfx	r0, r0, #3, #1
  else Time.zone(0);                                                   // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
 8081b96:	701a      	strb	r2, [r3, #0]
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode
 8081b98:	7028      	strb	r0, [r5, #0]

  PMICreset();                                                          // Executes commands that set up the PMIC for Solar charging - once we know the Solar Mode
 8081b9a:	f7ff f897 	bl	8080ccc <_Z9PMICresetv>

  takeMeasurements();                                                   // For the benefit of monitoring the device
 8081b9e:	f7ff fa11 	bl	8080fc4 <_Z16takeMeasurementsv>

  if (!digitalRead(userSwitch)) {                                       // Rescue mode to locally take lowPowerMode so you can connect to device
 8081ba2:	2005      	movs	r0, #5
 8081ba4:	f002 fb34 	bl	8084210 <digitalRead>
 8081ba8:	b950      	cbnz	r0, 8081bc0 <setup+0x248>
  lowPowerMode = false;                                                 // Press the user switch while resetting the device
    controlRegister = (0b11111110 & controlRegister);                   // Turn off Low power mode
 8081baa:	783b      	ldrb	r3, [r7, #0]
  PMICreset();                                                          // Executes commands that set up the PMIC for Solar charging - once we know the Solar Mode

  takeMeasurements();                                                   // For the benefit of monitoring the device

  if (!digitalRead(userSwitch)) {                                       // Rescue mode to locally take lowPowerMode so you can connect to device
  lowPowerMode = false;                                                 // Press the user switch while resetting the device
 8081bac:	7020      	strb	r0, [r4, #0]
    controlRegister = (0b11111110 & controlRegister);                   // Turn off Low power mode
 8081bae:	f023 0301 	bic.w	r3, r3, #1
 8081bb2:	703b      	strb	r3, [r7, #0]
    EEPROM.write(controlRegister,MEM_MAP::controlRegisterAddr);         // Write to the EEMPROM
 8081bb4:	f002 fb40 	bl	8084238 <_Z21__fetch_global_EEPROMv>
 8081bb8:	2104      	movs	r1, #4
 8081bba:	7838      	ldrb	r0, [r7, #0]
 8081bbc:	f7fe fffc 	bl	8080bb8 <_ZN11EEPROMClass5writeEih.isra.16>
  }

  if (!lowPowerMode && (stateOfCharge >= lowBattLimit)) connectToParticle();  // If not lowpower or sleeping, we can connect
 8081bc0:	7823      	ldrb	r3, [r4, #0]
 8081bc2:	b93b      	cbnz	r3, 8081bd4 <setup+0x25c>
 8081bc4:	4b3e      	ldr	r3, [pc, #248]	; (8081cc0 <setup+0x348>)
 8081bc6:	681a      	ldr	r2, [r3, #0]
 8081bc8:	4b3e      	ldr	r3, [pc, #248]	; (8081cc4 <setup+0x34c>)
 8081bca:	681b      	ldr	r3, [r3, #0]
 8081bcc:	429a      	cmp	r2, r3
 8081bce:	db01      	blt.n	8081bd4 <setup+0x25c>
 8081bd0:	f7ff f82e 	bl	8080c30 <_Z17connectToParticlev>
  connectToParticle();  // For now, let's just connect

  petWatchdog();                                                        // Need to pet the watchdog as we are waking from sleep
  attachInterrupt(wakeUpPin,watchdogISR,RISING);                        // Attach watchdog interrupt - +1hr watchdog required
 8081bd4:	2400      	movs	r4, #0
    controlRegister = (0b11111110 & controlRegister);                   // Turn off Low power mode
    EEPROM.write(controlRegister,MEM_MAP::controlRegisterAddr);         // Write to the EEMPROM
  }

  if (!lowPowerMode && (stateOfCharge >= lowBattLimit)) connectToParticle();  // If not lowpower or sleeping, we can connect
  connectToParticle();  // For now, let's just connect
 8081bd6:	f7ff f82b 	bl	8080c30 <_Z17connectToParticlev>

  petWatchdog();                                                        // Need to pet the watchdog as we are waking from sleep
 8081bda:	f7ff faf9 	bl	80811d0 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin,watchdogISR,RISING);                        // Attach watchdog interrupt - +1hr watchdog required
 8081bde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8081be2:	9400      	str	r4, [sp, #0]
 8081be4:	2201      	movs	r2, #1
 8081be6:	4938      	ldr	r1, [pc, #224]	; (8081cc8 <setup+0x350>)
 8081be8:	2011      	movs	r0, #17
 8081bea:	f001 fb9f 	bl	808332c <_Z15attachInterrupttPFvvE13InterruptModeah>

  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
 8081bee:	782b      	ldrb	r3, [r5, #0]
 8081bf0:	b15b      	cbz	r3, 8081c0a <setup+0x292>
 8081bf2:	4b36      	ldr	r3, [pc, #216]	; (8081ccc <setup+0x354>)
 8081bf4:	a802      	add	r0, sp, #8
 8081bf6:	781b      	ldrb	r3, [r3, #0]
 8081bf8:	4632      	mov	r2, r6
 8081bfa:	f88d 4000 	strb.w	r4, [sp]
 8081bfe:	4934      	ldr	r1, [pc, #208]	; (8081cd0 <setup+0x358>)
 8081c00:	f7fe ffdc 	bl	8080bbc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>
 8081c04:	a803      	add	r0, sp, #12
 8081c06:	f7ff faf3 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081c0a:	f000 fbb7 	bl	808237c <HAL_Timer_Get_Milli_Seconds>
  lastPublish = millis();
 8081c0e:	4b31      	ldr	r3, [pc, #196]	; (8081cd4 <setup+0x35c>)
 8081c10:	6018      	str	r0, [r3, #0]
  pinMode(userSwitch,INPUT);                                      // Momentary contact button on board for direct user input
  pinMode(donePin,OUTPUT);                                        // To pet the watchdog
  pinMode(wakeUpPin, INPUT);                                      // Watchdog interrrupt

  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
 8081c12:	a804      	add	r0, sp, #16
 8081c14:	f001 ff4d 	bl	8083ab2 <_ZN6StringD1Ev>
  petWatchdog();                                                        // Need to pet the watchdog as we are waking from sleep
  attachInterrupt(wakeUpPin,watchdogISR,RISING);                        // Attach watchdog interrupt - +1hr watchdog required

  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
  lastPublish = millis();
}
 8081c18:	b039      	add	sp, #228	; 0xe4
 8081c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081c1c:	0808781c 	.word	0x0808781c
 8081c20:	200005ad 	.word	0x200005ad
 8081c24:	08081605 	.word	0x08081605
 8081c28:	200005d4 	.word	0x200005d4
 8081c2c:	08087a9d 	.word	0x08087a9d
 8081c30:	20000614 	.word	0x20000614
 8081c34:	08087aa4 	.word	0x08087aa4
 8081c38:	20000408 	.word	0x20000408
 8081c3c:	08087aaf 	.word	0x08087aaf
 8081c40:	2000068b 	.word	0x2000068b
 8081c44:	08087ab7 	.word	0x08087ab7
 8081c48:	20000648 	.word	0x20000648
 8081c4c:	08087ac2 	.word	0x08087ac2
 8081c50:	200004fc 	.word	0x200004fc
 8081c54:	08087acf 	.word	0x08087acf
 8081c58:	2000067a 	.word	0x2000067a
 8081c5c:	08087adb 	.word	0x08087adb
 8081c60:	20000628 	.word	0x20000628
 8081c64:	08087ae4 	.word	0x08087ae4
 8081c68:	20000638 	.word	0x20000638
 8081c6c:	08087aed 	.word	0x08087aed
 8081c70:	20000651 	.word	0x20000651
 8081c74:	08087af1 	.word	0x08087af1
 8081c78:	200005c0 	.word	0x200005c0
 8081c7c:	08087afa 	.word	0x08087afa
 8081c80:	08080b99 	.word	0x08080b99
 8081c84:	08087b05 	.word	0x08087b05
 8081c88:	080818a9 	.word	0x080818a9
 8081c8c:	08087b11 	.word	0x08087b11
 8081c90:	0808169d 	.word	0x0808169d
 8081c94:	08087b1e 	.word	0x08087b1e
 8081c98:	08081751 	.word	0x08081751
 8081c9c:	08087b29 	.word	0x08087b29
 8081ca0:	080817fd 	.word	0x080817fd
 8081ca4:	08087b36 	.word	0x08087b36
 8081ca8:	20000514 	.word	0x20000514
 8081cac:	20000674 	.word	0x20000674
 8081cb0:	08087b42 	.word	0x08087b42
 8081cb4:	2000069b 	.word	0x2000069b
 8081cb8:	20000650 	.word	0x20000650
 8081cbc:	2000068a 	.word	0x2000068a
 8081cc0:	200005d0 	.word	0x200005d0
 8081cc4:	2000050c 	.word	0x2000050c
 8081cc8:	08080b8d 	.word	0x08080b8d
 8081ccc:	20000590 	.word	0x20000590
 8081cd0:	08087b60 	.word	0x08087b60
 8081cd4:	200005b8 	.word	0x200005b8

08081cd8 <_GLOBAL__sub_I_bme>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8081cd8:	4b1a      	ldr	r3, [pc, #104]	; (8081d44 <_GLOBAL__sub_I_bme+0x6c>)

void petWatchdog() {
  digitalWrite(donePin,HIGH);
  digitalWrite(donePin,LOW);
  watchDogFlag = false;
}
 8081cda:	b570      	push	{r4, r5, r6, lr}
 8081cdc:	2400      	movs	r4, #0
 8081cde:	601c      	str	r4, [r3, #0]
 8081ce0:	4b19      	ldr	r3, [pc, #100]	; (8081d48 <_GLOBAL__sub_I_bme+0x70>)
 8081ce2:	2501      	movs	r5, #1
 8081ce4:	701d      	strb	r5, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 8081ce6:	f000 fb89 	bl	80823fc <HAL_Pin_Map>
};

#define SEALEVELPRESSURE_HPA (1013.25)              // Universal variables
#define MEMORYMAPVERSION 1                          // Lets us know if we need to reinitialize the memory map

Adafruit_BME680 bme;                                // Instantiate the I2C library
 8081cea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8081cee:	4817      	ldr	r0, [pc, #92]	; (8081d4c <_GLOBAL__sub_I_bme+0x74>)
 8081cf0:	f000 f94e 	bl	8081f90 <_ZN15Adafruit_BME680C1Ea>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8081cf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8081cf8:	4b15      	ldr	r3, [pc, #84]	; (8081d50 <_GLOBAL__sub_I_bme+0x78>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8081cfa:	2002      	movs	r0, #2
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8081cfc:	701c      	strb	r4, [r3, #0]
 8081cfe:	805c      	strh	r4, [r3, #2]
 8081d00:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8081d02:	f000 fcd3 	bl	80826ac <set_system_mode>

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);          // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
 8081d06:	4621      	mov	r1, r4
 8081d08:	4628      	mov	r0, r5
 8081d0a:	f000 fce7 	bl	80826dc <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
 8081d0e:	4629      	mov	r1, r5
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;             // Prototype for the fuel gauge (included in Particle core library)
 8081d10:	4d10      	ldr	r5, [pc, #64]	; (8081d54 <_GLOBAL__sub_I_bme+0x7c>)
 8081d12:	2004      	movs	r0, #4
 8081d14:	f000 fb12 	bl	808233c <HAL_Feature_Set>
 8081d18:	4e0f      	ldr	r6, [pc, #60]	; (8081d58 <_GLOBAL__sub_I_bme+0x80>)
 8081d1a:	4621      	mov	r1, r4
 8081d1c:	4628      	mov	r0, r5
 8081d1e:	f001 fa27 	bl	8083170 <_ZN9FuelGaugeC1Eb>
 8081d22:	4628      	mov	r0, r5
PMIC power;                           // Initalize the PMIC class so you can call the Power Management functions below.
 8081d24:	4d0d      	ldr	r5, [pc, #52]	; (8081d5c <_GLOBAL__sub_I_bme+0x84>)

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);          // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;             // Prototype for the fuel gauge (included in Particle core library)
 8081d26:	4632      	mov	r2, r6
 8081d28:	490d      	ldr	r1, [pc, #52]	; (8081d60 <_GLOBAL__sub_I_bme+0x88>)
 8081d2a:	f002 fb1f 	bl	808436c <__aeabi_atexit>
PMIC power;                           // Initalize the PMIC class so you can call the Power Management functions below.
 8081d2e:	4621      	mov	r1, r4
 8081d30:	4628      	mov	r0, r5
 8081d32:	f001 fbf6 	bl	8083522 <_ZN4PMICC1Eb>
 8081d36:	4632      	mov	r2, r6
 8081d38:	4628      	mov	r0, r5

void petWatchdog() {
  digitalWrite(donePin,HIGH);
  digitalWrite(donePin,LOW);
  watchDogFlag = false;
}
 8081d3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);          // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;             // Prototype for the fuel gauge (included in Particle core library)
PMIC power;                           // Initalize the PMIC class so you can call the Power Management functions below.
 8081d3e:	4909      	ldr	r1, [pc, #36]	; (8081d64 <_GLOBAL__sub_I_bme+0x8c>)
 8081d40:	f002 bb14 	b.w	808436c <__aeabi_atexit>
 8081d44:	200006ac 	.word	0x200006ac
 8081d48:	20000590 	.word	0x20000590
 8081d4c:	20000514 	.word	0x20000514
 8081d50:	2000064a 	.word	0x2000064a
 8081d54:	200005a4 	.word	0x200005a4
 8081d58:	200004f8 	.word	0x200004f8
 8081d5c:	200005ae 	.word	0x200005ae
 8081d60:	0808318f 	.word	0x0808318f
 8081d64:	08083541 	.word	0x08083541

08081d68 <_ZL10delay_msecm>:
  return reply;
}


static void delay_msec(uint32_t ms){
  delay(ms);
 8081d68:	f000 bddc 	b.w	8082924 <delay>

08081d6c <_ZL9i2c_writehhPht>:
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over I2C
*/
/**************************************************************************/
int8_t i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8081d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081d6e:	4607      	mov	r7, r0
 8081d70:	4614      	mov	r4, r2
 8081d72:	461d      	mov	r5, r3
 8081d74:	460e      	mov	r6, r1
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif
  Wire.beginTransmission((uint8_t)dev_id);
 8081d76:	f002 fa73 	bl	8084260 <_Z19__fetch_global_Wirev>
 8081d7a:	4639      	mov	r1, r7
 8081d7c:	f001 fab1 	bl	80832e2 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg_addr);
 8081d80:	f002 fa6e 	bl	8084260 <_Z19__fetch_global_Wirev>
 8081d84:	6803      	ldr	r3, [r0, #0]
 8081d86:	4631      	mov	r1, r6
 8081d88:	689b      	ldr	r3, [r3, #8]
 8081d8a:	4798      	blx	r3
 8081d8c:	4425      	add	r5, r4
  while (len--) {
 8081d8e:	42ac      	cmp	r4, r5
 8081d90:	d007      	beq.n	8081da2 <_ZL9i2c_writehhPht+0x36>
    Wire.write(*reg_data);
 8081d92:	f002 fa65 	bl	8084260 <_Z19__fetch_global_Wirev>
 8081d96:	6803      	ldr	r3, [r0, #0]
 8081d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8081d9c:	689b      	ldr	r3, [r3, #8]
 8081d9e:	4798      	blx	r3
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif
  Wire.beginTransmission((uint8_t)dev_id);
  Wire.write((uint8_t)reg_addr);
  while (len--) {
 8081da0:	e7f5      	b.n	8081d8e <_ZL9i2c_writehhPht+0x22>
#ifdef BME680_DEBUG
    Serial.print("0x"); Serial.print(*reg_data, HEX); Serial.print(", ");
#endif
    reg_data++;
  }
  Wire.endTransmission();
 8081da2:	f002 fa5d 	bl	8084260 <_Z19__fetch_global_Wirev>
 8081da6:	f001 faa7 	bl	80832f8 <_ZN7TwoWire15endTransmissionEv>
#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
 8081daa:	2000      	movs	r0, #0
 8081dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08081db0 <_ZL12spi_transferh>:
#endif
  return 0;
}


static uint8_t spi_transfer(uint8_t x) {
 8081db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (_BME680_SoftwareSPI_SCK == -1)
 8081db4:	4d1b      	ldr	r5, [pc, #108]	; (8081e24 <_ZL12spi_transferh+0x74>)
#endif
  return 0;
}


static uint8_t spi_transfer(uint8_t x) {
 8081db6:	4680      	mov	r8, r0
  if (_BME680_SoftwareSPI_SCK == -1)
 8081db8:	f995 3000 	ldrsb.w	r3, [r5]
 8081dbc:	3301      	adds	r3, #1
 8081dbe:	d105      	bne.n	8081dcc <_ZL12spi_transferh+0x1c>
    return SPI.transfer(x);
 8081dc0:	4601      	mov	r1, r0
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
      reply |= 1;
  }
  return reply;
}
 8081dc2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
}


static uint8_t spi_transfer(uint8_t x) {
  if (_BME680_SoftwareSPI_SCK == -1)
    return SPI.transfer(x);
 8081dc6:	4818      	ldr	r0, [pc, #96]	; (8081e28 <_ZL12spi_transferh+0x78>)
 8081dc8:	f001 be6a 	b.w	8083aa0 <_ZN8SPIClass8transferEh>
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
 8081dcc:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8081e2c <_ZL12spi_transferh+0x7c>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 8081dd0:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8081e30 <_ZL12spi_transferh+0x80>
 8081dd4:	2607      	movs	r6, #7
 8081dd6:	2400      	movs	r4, #0
  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
 8081dd8:	f995 0000 	ldrsb.w	r0, [r5]
 8081ddc:	2100      	movs	r1, #0
 8081dde:	b280      	uxth	r0, r0
 8081de0:	f002 f9fd 	bl	80841de <digitalWrite>
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
 8081de4:	2701      	movs	r7, #1
 8081de6:	f999 0000 	ldrsb.w	r0, [r9]
 8081dea:	fa07 f106 	lsl.w	r1, r7, r6
 8081dee:	ea01 0108 	and.w	r1, r1, r8
 8081df2:	b280      	uxth	r0, r0
 8081df4:	f002 f9f3 	bl	80841de <digitalWrite>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
 8081df8:	f995 0000 	ldrsb.w	r0, [r5]
 8081dfc:	4639      	mov	r1, r7
 8081dfe:	b280      	uxth	r0, r0
 8081e00:	f002 f9ed 	bl	80841de <digitalWrite>
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 8081e04:	f99a 0000 	ldrsb.w	r0, [sl]

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
 8081e08:	0064      	lsls	r4, r4, #1
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 8081e0a:	b280      	uxth	r0, r0

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
 8081e0c:	b2e4      	uxtb	r4, r4
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 8081e0e:	f002 f9ff 	bl	8084210 <digitalRead>
 8081e12:	b100      	cbz	r0, 8081e16 <_ZL12spi_transferh+0x66>
      reply |= 1;
 8081e14:	433c      	orrs	r4, r7
    return SPI.transfer(x);

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
 8081e16:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 8081e1a:	d2dd      	bcs.n	8081dd8 <_ZL12spi_transferh+0x28>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
      reply |= 1;
  }
  return reply;
}
 8081e1c:	4620      	mov	r0, r4
 8081e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8081e22:	bf00      	nop
 8081e24:	200006b1 	.word	0x200006b1
 8081e28:	20000c10 	.word	0x20000c10
 8081e2c:	200006b2 	.word	0x200006b2
 8081e30:	200006b0 	.word	0x200006b0

08081e34 <_ZL9spi_writehhPht>:
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8081e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081e38:	461f      	mov	r7, r3
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
 8081e3a:	4b1b      	ldr	r3, [pc, #108]	; (8081ea8 <_ZL9spi_writehhPht+0x74>)
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8081e3c:	4616      	mov	r6, r2
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
 8081e3e:	f993 2000 	ldrsb.w	r2, [r3]
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8081e42:	4605      	mov	r5, r0
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
 8081e44:	3201      	adds	r2, #1
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8081e46:	4688      	mov	r8, r1
 8081e48:	461c      	mov	r4, r3
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
 8081e4a:	d10e      	bne.n	8081e6a <_ZL9spi_writehhPht+0x36>
    SPI.begin();
 8081e4c:	4817      	ldr	r0, [pc, #92]	; (8081eac <_ZL9spi_writehhPht+0x78>)
 8081e4e:	f001 fdbf 	bl	80839d0 <_ZN8SPIClass5beginEv>
    SPI.setClockDivider(BME680_DEFAULT_SPIFREQ);
 8081e52:	2140      	movs	r1, #64	; 0x40
 8081e54:	4815      	ldr	r0, [pc, #84]	; (8081eac <_ZL9spi_writehhPht+0x78>)
 8081e56:	f001 fe0f 	bl	8083a78 <_ZN8SPIClass15setClockDividerEh>
    SPI.setBitOrder(MSBFIRST);
 8081e5a:	2101      	movs	r1, #1
 8081e5c:	4813      	ldr	r0, [pc, #76]	; (8081eac <_ZL9spi_writehhPht+0x78>)
 8081e5e:	f001 fdbc 	bl	80839da <_ZN8SPIClass11setBitOrderEh>
    SPI.setDataMode(SPI_MODE0);
 8081e62:	2100      	movs	r1, #0
 8081e64:	4811      	ldr	r0, [pc, #68]	; (8081eac <_ZL9spi_writehhPht+0x78>)
 8081e66:	f001 fdbb 	bl	80839e0 <_ZN8SPIClass11setDataModeEh>
    //SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  digitalWrite(cspin, LOW);
 8081e6a:	b2ad      	uxth	r5, r5
 8081e6c:	2100      	movs	r1, #0
 8081e6e:	4628      	mov	r0, r5
 8081e70:	f002 f9b5 	bl	80841de <digitalWrite>

  spi_transfer(reg_addr);
 8081e74:	4640      	mov	r0, r8
 8081e76:	f7ff ff9b 	bl	8081db0 <_ZL12spi_transferh>
 8081e7a:	4437      	add	r7, r6
  while (len--) {
 8081e7c:	42be      	cmp	r6, r7
 8081e7e:	d004      	beq.n	8081e8a <_ZL9spi_writehhPht+0x56>
    spi_transfer(*reg_data);
 8081e80:	f816 0b01 	ldrb.w	r0, [r6], #1
 8081e84:	f7ff ff94 	bl	8081db0 <_ZL12spi_transferh>
  }

  digitalWrite(cspin, LOW);

  spi_transfer(reg_addr);
  while (len--) {
 8081e88:	e7f8      	b.n	8081e7c <_ZL9spi_writehhPht+0x48>
    Serial.print("0x"); Serial.print(*reg_data, HEX); Serial.print(", ");
#endif
    reg_data++;
  }

  digitalWrite(cspin, HIGH);
 8081e8a:	2101      	movs	r1, #1
 8081e8c:	4628      	mov	r0, r5
 8081e8e:	f002 f9a6 	bl	80841de <digitalWrite>

  if (_BME680_SoftwareSPI_SCK == -1) {
 8081e92:	f994 3000 	ldrsb.w	r3, [r4]
 8081e96:	3301      	adds	r3, #1
 8081e98:	d102      	bne.n	8081ea0 <_ZL9spi_writehhPht+0x6c>
    SPI.endTransaction();
 8081e9a:	4804      	ldr	r0, [pc, #16]	; (8081eac <_ZL9spi_writehhPht+0x78>)
 8081e9c:	f001 fda3 	bl	80839e6 <_ZN8SPIClass14endTransactionEv>

#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
 8081ea0:	2000      	movs	r0, #0
 8081ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081ea6:	bf00      	nop
 8081ea8:	200006b1 	.word	0x200006b1
 8081eac:	20000c10 	.word	0x20000c10

08081eb0 <_ZL8spi_readhhPht>:
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8081eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081eb4:	461f      	mov	r7, r3
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
 8081eb6:	4b1c      	ldr	r3, [pc, #112]	; (8081f28 <_ZL8spi_readhhPht+0x78>)
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8081eb8:	4616      	mov	r6, r2
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
 8081eba:	f993 2000 	ldrsb.w	r2, [r3]
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8081ebe:	4605      	mov	r5, r0
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
 8081ec0:	3201      	adds	r2, #1
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8081ec2:	4688      	mov	r8, r1
 8081ec4:	461c      	mov	r4, r3
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
 8081ec6:	d10e      	bne.n	8081ee6 <_ZL8spi_readhhPht+0x36>
    SPI.begin();
 8081ec8:	4818      	ldr	r0, [pc, #96]	; (8081f2c <_ZL8spi_readhhPht+0x7c>)
 8081eca:	f001 fd81 	bl	80839d0 <_ZN8SPIClass5beginEv>
    SPI.setClockDivider(BME680_DEFAULT_SPIFREQ);
 8081ece:	2140      	movs	r1, #64	; 0x40
 8081ed0:	4816      	ldr	r0, [pc, #88]	; (8081f2c <_ZL8spi_readhhPht+0x7c>)
 8081ed2:	f001 fdd1 	bl	8083a78 <_ZN8SPIClass15setClockDividerEh>
    SPI.setBitOrder(MSBFIRST);
 8081ed6:	2101      	movs	r1, #1
 8081ed8:	4814      	ldr	r0, [pc, #80]	; (8081f2c <_ZL8spi_readhhPht+0x7c>)
 8081eda:	f001 fd7e 	bl	80839da <_ZN8SPIClass11setBitOrderEh>
    SPI.setDataMode(SPI_MODE0);
 8081ede:	2100      	movs	r1, #0
 8081ee0:	4812      	ldr	r0, [pc, #72]	; (8081f2c <_ZL8spi_readhhPht+0x7c>)
 8081ee2:	f001 fd7d 	bl	80839e0 <_ZN8SPIClass11setDataModeEh>
    //SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  digitalWrite(cspin, LOW);
 8081ee6:	b2ad      	uxth	r5, r5
 8081ee8:	2100      	movs	r1, #0
 8081eea:	4628      	mov	r0, r5
 8081eec:	f002 f977 	bl	80841de <digitalWrite>

  spi_transfer(reg_addr | 0x80);
 8081ef0:	f048 0080 	orr.w	r0, r8, #128	; 0x80
 8081ef4:	f7ff ff5c 	bl	8081db0 <_ZL12spi_transferh>
 8081ef8:	4437      	add	r7, r6

  while (len--) {
 8081efa:	42be      	cmp	r6, r7
 8081efc:	d005      	beq.n	8081f0a <_ZL8spi_readhhPht+0x5a>
    *reg_data = spi_transfer(0x00);
 8081efe:	2000      	movs	r0, #0
 8081f00:	f7ff ff56 	bl	8081db0 <_ZL12spi_transferh>
 8081f04:	f806 0b01 	strb.w	r0, [r6], #1

  digitalWrite(cspin, LOW);

  spi_transfer(reg_addr | 0x80);

  while (len--) {
 8081f08:	e7f7      	b.n	8081efa <_ZL8spi_readhhPht+0x4a>
    Serial.print("0x"); Serial.print(*reg_data, HEX); Serial.print(", ");
#endif
    reg_data++;
  }

  digitalWrite(cspin, HIGH);
 8081f0a:	2101      	movs	r1, #1
 8081f0c:	4628      	mov	r0, r5
 8081f0e:	f002 f966 	bl	80841de <digitalWrite>

  if (_BME680_SoftwareSPI_SCK == -1) {
 8081f12:	f994 3000 	ldrsb.w	r3, [r4]
 8081f16:	3301      	adds	r3, #1
 8081f18:	d102      	bne.n	8081f20 <_ZL8spi_readhhPht+0x70>
    SPI.endTransaction();
 8081f1a:	4804      	ldr	r0, [pc, #16]	; (8081f2c <_ZL8spi_readhhPht+0x7c>)
 8081f1c:	f001 fd63 	bl	80839e6 <_ZN8SPIClass14endTransactionEv>

#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
 8081f20:	2000      	movs	r0, #0
 8081f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081f26:	bf00      	nop
 8081f28:	200006b1 	.word	0x200006b1
 8081f2c:	20000c10 	.word	0x20000c10

08081f30 <_ZL8i2c_readhhPht>:
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over I2C
*/
/**************************************************************************/
int8_t i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8081f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081f32:	4604      	mov	r4, r0
 8081f34:	4615      	mov	r5, r2
 8081f36:	461e      	mov	r6, r3
 8081f38:	460f      	mov	r7, r1
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  Wire.beginTransmission((uint8_t)dev_id);
 8081f3a:	f002 f991 	bl	8084260 <_Z19__fetch_global_Wirev>
 8081f3e:	4621      	mov	r1, r4
 8081f40:	f001 f9cf 	bl	80832e2 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg_addr);
 8081f44:	f002 f98c 	bl	8084260 <_Z19__fetch_global_Wirev>
 8081f48:	6803      	ldr	r3, [r0, #0]
 8081f4a:	4639      	mov	r1, r7
 8081f4c:	689b      	ldr	r3, [r3, #8]
 8081f4e:	4798      	blx	r3
  Wire.endTransmission();
 8081f50:	f002 f986 	bl	8084260 <_Z19__fetch_global_Wirev>
 8081f54:	f001 f9d0 	bl	80832f8 <_ZN7TwoWire15endTransmissionEv>
  if (len != Wire.requestFrom((uint8_t)dev_id, (byte)len)) {
 8081f58:	f002 f982 	bl	8084260 <_Z19__fetch_global_Wirev>
 8081f5c:	4621      	mov	r1, r4
 8081f5e:	b2f2      	uxtb	r2, r6
 8081f60:	f001 f9b7 	bl	80832d2 <_ZN7TwoWire11requestFromEhh>
 8081f64:	b284      	uxth	r4, r0
 8081f66:	42a6      	cmp	r6, r4
 8081f68:	d10d      	bne.n	8081f86 <_ZL8i2c_readhhPht+0x56>
#ifdef BME680_DEBUG
    Serial.print("Failed to read "); Serial.print(len); Serial.print(" bytes from "); Serial.println(dev_id, HEX);
#endif
    return 1;
  }
  while (len--) {
 8081f6a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8081f6e:	3c01      	subs	r4, #1
 8081f70:	b2a4      	uxth	r4, r4
 8081f72:	42b4      	cmp	r4, r6
 8081f74:	d009      	beq.n	8081f8a <_ZL8i2c_readhhPht+0x5a>
    *reg_data = (uint8_t)Wire.read();
 8081f76:	f002 f973 	bl	8084260 <_Z19__fetch_global_Wirev>
 8081f7a:	6803      	ldr	r3, [r0, #0]
 8081f7c:	695b      	ldr	r3, [r3, #20]
 8081f7e:	4798      	blx	r3
 8081f80:	f805 0b01 	strb.w	r0, [r5], #1
 8081f84:	e7f3      	b.n	8081f6e <_ZL8i2c_readhhPht+0x3e>
  Wire.endTransmission();
  if (len != Wire.requestFrom((uint8_t)dev_id, (byte)len)) {
#ifdef BME680_DEBUG
    Serial.print("Failed to read "); Serial.print(len); Serial.print(" bytes from "); Serial.println(dev_id, HEX);
#endif
    return 1;
 8081f86:	2001      	movs	r0, #1
 8081f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  while (len--) {
 8081f8a:	2000      	movs	r0, #0
  }
#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
 8081f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08081f90 <_ZN15Adafruit_BME680C1Ea>:
/*!
    @brief  Instantiates sensor with Hardware SPI or I2C.
    @param  cspin SPI chip select. If not passed in, I2C will be used
*/
/**************************************************************************/
Adafruit_BME680::Adafruit_BME680(int8_t cspin)
 8081f90:	b510      	push	{r4, lr}
  : _cs(cspin)
  , _meas_end(0)
{
  _BME680_SoftwareSPI_MOSI = -1;
 8081f92:	4c08      	ldr	r4, [pc, #32]	; (8081fb4 <_ZN15Adafruit_BME680C1Ea+0x24>)
    @param  cspin SPI chip select. If not passed in, I2C will be used
*/
/**************************************************************************/
Adafruit_BME680::Adafruit_BME680(int8_t cspin)
  : _cs(cspin)
  , _meas_end(0)
 8081f94:	7701      	strb	r1, [r0, #28]
{
  _BME680_SoftwareSPI_MOSI = -1;
 8081f96:	21ff      	movs	r1, #255	; 0xff
 8081f98:	7021      	strb	r1, [r4, #0]
  _BME680_SoftwareSPI_MISO = -1;
 8081f9a:	4c07      	ldr	r4, [pc, #28]	; (8081fb8 <_ZN15Adafruit_BME680C1Ea+0x28>)
    @param  cspin SPI chip select. If not passed in, I2C will be used
*/
/**************************************************************************/
Adafruit_BME680::Adafruit_BME680(int8_t cspin)
  : _cs(cspin)
  , _meas_end(0)
 8081f9c:	2200      	movs	r2, #0
{
  _BME680_SoftwareSPI_MOSI = -1;
  _BME680_SoftwareSPI_MISO = -1;
 8081f9e:	7021      	strb	r1, [r4, #0]
  _BME680_SoftwareSPI_SCK = -1;
 8081fa0:	4c06      	ldr	r4, [pc, #24]	; (8081fbc <_ZN15Adafruit_BME680C1Ea+0x2c>)
    @param  cspin SPI chip select. If not passed in, I2C will be used
*/
/**************************************************************************/
Adafruit_BME680::Adafruit_BME680(int8_t cspin)
  : _cs(cspin)
  , _meas_end(0)
 8081fa2:	6202      	str	r2, [r0, #32]
{
  _BME680_SoftwareSPI_MOSI = -1;
  _BME680_SoftwareSPI_MISO = -1;
  _BME680_SoftwareSPI_SCK = -1;
 8081fa4:	7021      	strb	r1, [r4, #0]
  _filterEnabled = _tempEnabled = _humEnabled = _presEnabled = _gasEnabled = false;
 8081fa6:	7502      	strb	r2, [r0, #20]
 8081fa8:	74c2      	strb	r2, [r0, #19]
 8081faa:	7482      	strb	r2, [r0, #18]
 8081fac:	7442      	strb	r2, [r0, #17]
 8081fae:	7402      	strb	r2, [r0, #16]
}
 8081fb0:	bd10      	pop	{r4, pc}
 8081fb2:	bf00      	nop
 8081fb4:	200006b2 	.word	0x200006b2
 8081fb8:	200006b0 	.word	0x200006b0
 8081fbc:	200006b1 	.word	0x200006b1

08081fc0 <_ZN15Adafruit_BME6805beginEhb>:

    @param  addr Optional parameter for the I2C address of BME680. Default is 0x77
    @return True on sensor initialization success. False on failure.
*/
/**************************************************************************/
bool Adafruit_BME680::begin(uint8_t addr, bool initSettings) {
 8081fc0:	b570      	push	{r4, r5, r6, lr}
 8081fc2:	4604      	mov	r4, r0
  _i2caddr = addr;
 8081fc4:	7561      	strb	r1, [r4, #21]

  if (_cs == -1) {
 8081fc6:	f990 001c 	ldrsb.w	r0, [r0, #28]

    @param  addr Optional parameter for the I2C address of BME680. Default is 0x77
    @return True on sensor initialization success. False on failure.
*/
/**************************************************************************/
bool Adafruit_BME680::begin(uint8_t addr, bool initSettings) {
 8081fca:	4615      	mov	r5, r2
  _i2caddr = addr;

  if (_cs == -1) {
 8081fcc:	1c42      	adds	r2, r0, #1

    @param  addr Optional parameter for the I2C address of BME680. Default is 0x77
    @return True on sensor initialization success. False on failure.
*/
/**************************************************************************/
bool Adafruit_BME680::begin(uint8_t addr, bool initSettings) {
 8081fce:	460e      	mov	r6, r1
  _i2caddr = addr;

  if (_cs == -1) {
 8081fd0:	d10c      	bne.n	8081fec <_ZN15Adafruit_BME6805beginEhb+0x2c>
    // i2c
    Wire.begin();
 8081fd2:	f002 f945 	bl	8084260 <_Z19__fetch_global_Wirev>
 8081fd6:	f001 f96d 	bl	80832b4 <_ZN7TwoWire5beginEv>

    gas_sensor.dev_id = addr;
    gas_sensor.intf = BME680_I2C_INTF;
 8081fda:	2301      	movs	r3, #1
 8081fdc:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
    gas_sensor.read = &i2c_read;
 8081fe0:	4b34      	ldr	r3, [pc, #208]	; (80820b4 <_ZN15Adafruit_BME6805beginEhb+0xf4>)

  if (_cs == -1) {
    // i2c
    Wire.begin();

    gas_sensor.dev_id = addr;
 8081fe2:	f884 6025 	strb.w	r6, [r4, #37]	; 0x25
    gas_sensor.intf = BME680_I2C_INTF;
    gas_sensor.read = &i2c_read;
 8081fe6:	66e3      	str	r3, [r4, #108]	; 0x6c
    gas_sensor.write = &i2c_write;
 8081fe8:	4b33      	ldr	r3, [pc, #204]	; (80820b8 <_ZN15Adafruit_BME6805beginEhb+0xf8>)
 8081fea:	e02d      	b.n	8082048 <_ZN15Adafruit_BME6805beginEhb+0x88>
  } else {
    digitalWrite(_cs, HIGH);
 8081fec:	2101      	movs	r1, #1
 8081fee:	b280      	uxth	r0, r0
 8081ff0:	f002 f8f5 	bl	80841de <digitalWrite>
    pinMode(_cs, OUTPUT);
 8081ff4:	f994 001c 	ldrsb.w	r0, [r4, #28]
 8081ff8:	2101      	movs	r1, #1
 8081ffa:	b280      	uxth	r0, r0
 8081ffc:	f002 f8de 	bl	80841bc <pinMode>

    if (_BME680_SoftwareSPI_SCK == -1) {
 8082000:	4b2e      	ldr	r3, [pc, #184]	; (80820bc <_ZN15Adafruit_BME6805beginEhb+0xfc>)
 8082002:	f993 0000 	ldrsb.w	r0, [r3]
 8082006:	1c43      	adds	r3, r0, #1
 8082008:	d103      	bne.n	8082012 <_ZN15Adafruit_BME6805beginEhb+0x52>
      // hardware SPI
      SPI.begin();
 808200a:	482d      	ldr	r0, [pc, #180]	; (80820c0 <_ZN15Adafruit_BME6805beginEhb+0x100>)
 808200c:	f001 fce0 	bl	80839d0 <_ZN8SPIClass5beginEv>
 8082010:	e011      	b.n	8082036 <_ZN15Adafruit_BME6805beginEhb+0x76>
    } else {
      // software SPI
      pinMode(_BME680_SoftwareSPI_SCK, OUTPUT);
 8082012:	2101      	movs	r1, #1
 8082014:	b280      	uxth	r0, r0
 8082016:	f002 f8d1 	bl	80841bc <pinMode>
      pinMode(_BME680_SoftwareSPI_MOSI, OUTPUT);
 808201a:	4b2a      	ldr	r3, [pc, #168]	; (80820c4 <_ZN15Adafruit_BME6805beginEhb+0x104>)
 808201c:	2101      	movs	r1, #1
 808201e:	f993 0000 	ldrsb.w	r0, [r3]
 8082022:	b280      	uxth	r0, r0
 8082024:	f002 f8ca 	bl	80841bc <pinMode>
      pinMode(_BME680_SoftwareSPI_MISO, INPUT);
 8082028:	4b27      	ldr	r3, [pc, #156]	; (80820c8 <_ZN15Adafruit_BME6805beginEhb+0x108>)
 808202a:	2100      	movs	r1, #0
 808202c:	f993 0000 	ldrsb.w	r0, [r3]
 8082030:	b280      	uxth	r0, r0
 8082032:	f002 f8c3 	bl	80841bc <pinMode>
    }

    gas_sensor.dev_id = _cs;
 8082036:	7f23      	ldrb	r3, [r4, #28]
 8082038:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    gas_sensor.intf = BME680_SPI_INTF;
 808203c:	2300      	movs	r3, #0
 808203e:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
    gas_sensor.read = &spi_read;
 8082042:	4b22      	ldr	r3, [pc, #136]	; (80820cc <_ZN15Adafruit_BME6805beginEhb+0x10c>)
 8082044:	66e3      	str	r3, [r4, #108]	; 0x6c
    gas_sensor.write = &spi_write;
 8082046:	4b22      	ldr	r3, [pc, #136]	; (80820d0 <_ZN15Adafruit_BME6805beginEhb+0x110>)
 8082048:	6723      	str	r3, [r4, #112]	; 0x70
  }

  gas_sensor.delay_ms = delay_msec;
 808204a:	4b22      	ldr	r3, [pc, #136]	; (80820d4 <_ZN15Adafruit_BME6805beginEhb+0x114>)

  int8_t rslt = BME680_OK;
  rslt = bme680_init(&gas_sensor);
 808204c:	f104 0024 	add.w	r0, r4, #36	; 0x24
    gas_sensor.intf = BME680_SPI_INTF;
    gas_sensor.read = &spi_read;
    gas_sensor.write = &spi_write;
  }

  gas_sensor.delay_ms = delay_msec;
 8082050:	6763      	str	r3, [r4, #116]	; 0x74

  int8_t rslt = BME680_OK;
  rslt = bme680_init(&gas_sensor);
 8082052:	f7fe f936 	bl	80802c2 <bme680_init>
#ifdef BME680_DEBUG
  Serial.print("Result: "); Serial.println(rslt);
#endif

  if (rslt != BME680_OK)
 8082056:	bb58      	cbnz	r0, 80820b0 <_ZN15Adafruit_BME6805beginEhb+0xf0>
  Serial.print("Heat Range = "); Serial.println(gas_sensor.calib.res_heat_range);
  Serial.print("Heat Val = "); Serial.println(gas_sensor.calib.res_heat_val);
  Serial.print("SW Error = "); Serial.println(gas_sensor.calib.range_sw_err);
#endif

  if (initSettings) {
 8082058:	b1e5      	cbz	r5, 8082094 <_ZN15Adafruit_BME6805beginEhb+0xd4>
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_hum = oversample;
 808205a:	2202      	movs	r2, #2
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_temp = oversample;
 808205c:	2304      	movs	r3, #4
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_hum = oversample;
 808205e:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;

  gas_sensor.tph_sett.filter = filtersize;
 8082062:	f884 205f 	strb.w	r2, [r4, #95]	; 0x5f
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 8082066:	f44f 72a0 	mov.w	r2, #320	; 0x140
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_temp = oversample;
 808206a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_pres = oversample;
 808206e:	2103      	movs	r1, #3
  gas_sensor.tph_sett.os_temp = oversample;

  if (oversample == BME680_OS_NONE)
    _tempEnabled = false;
  else
    _tempEnabled = true;
 8082070:	2301      	movs	r3, #1
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 8082072:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
  gas_sensor.gas_sett.heatr_dur = heaterTime;
 8082076:	2296      	movs	r2, #150	; 0x96
  gas_sensor.tph_sett.os_temp = oversample;

  if (oversample == BME680_OS_NONE)
    _tempEnabled = false;
  else
    _tempEnabled = true;
 8082078:	7463      	strb	r3, [r4, #17]
  gas_sensor.tph_sett.os_hum = oversample;

  if (oversample == BME680_OS_NONE)
    _humEnabled = false;
  else
    _humEnabled = true;
 808207a:	74a3      	strb	r3, [r4, #18]
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_pres = oversample;
 808207c:	f884 105e 	strb.w	r1, [r4, #94]	; 0x5e

  if (oversample == BME680_OS_NONE)
    _presEnabled = false;
  else
    _presEnabled = true;
 8082080:	74e3      	strb	r3, [r4, #19]
  gas_sensor.tph_sett.filter = filtersize;

  if (filtersize == BME680_FILTER_SIZE_0)
    _filterEnabled = false;
  else
    _filterEnabled = true;
 8082082:	7423      	strb	r3, [r4, #16]
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
  gas_sensor.gas_sett.heatr_dur = heaterTime;
 8082084:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
    // disabled!
    gas_sensor.gas_sett.heatr_ctrl = BME680_DISABLE_HEATER;
    gas_sensor.gas_sett.run_gas = BME680_DISABLE_GAS_MEAS;
    _gasEnabled = false;
  } else {
    gas_sensor.gas_sett.heatr_ctrl = BME680_ENABLE_HEATER;
 8082088:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 808208c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    _gasEnabled = true;
 8082090:	7523      	strb	r3, [r4, #20]
 8082092:	e009      	b.n	80820a8 <_ZN15Adafruit_BME6805beginEhb+0xe8>
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
  gas_sensor.gas_sett.heatr_dur = heaterTime;

  if ( (heaterTemp == 0) || (heaterTime == 0) ) {
    // disabled!
    gas_sensor.gas_sett.heatr_ctrl = BME680_DISABLE_HEATER;
 8082094:	2308      	movs	r3, #8
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 8082096:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
  gas_sensor.gas_sett.heatr_dur = heaterTime;
 808209a:	f8a4 5066 	strh.w	r5, [r4, #102]	; 0x66

  if ( (heaterTemp == 0) || (heaterTime == 0) ) {
    // disabled!
    gas_sensor.gas_sett.heatr_ctrl = BME680_DISABLE_HEATER;
 808209e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    gas_sensor.gas_sett.run_gas = BME680_DISABLE_GAS_MEAS;
 80820a2:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
    _gasEnabled = false;
 80820a6:	7525      	strb	r5, [r4, #20]
    setGasHeater(320, 150); // 320*C for 150 ms
  } else {
    setGasHeater(0, 0);
  }
  // don't do anything till we request a reading
  gas_sensor.power_mode = BME680_FORCED_MODE;
 80820a8:	2001      	movs	r0, #1
 80820aa:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

  return true;
 80820ae:	bd70      	pop	{r4, r5, r6, pc}
#ifdef BME680_DEBUG
  Serial.print("Result: "); Serial.println(rslt);
#endif

  if (rslt != BME680_OK)
    return false;
 80820b0:	2000      	movs	r0, #0
  }
  // don't do anything till we request a reading
  gas_sensor.power_mode = BME680_FORCED_MODE;

  return true;
}
 80820b2:	bd70      	pop	{r4, r5, r6, pc}
 80820b4:	08081f31 	.word	0x08081f31
 80820b8:	08081d6d 	.word	0x08081d6d
 80820bc:	200006b1 	.word	0x200006b1
 80820c0:	20000c10 	.word	0x20000c10
 80820c4:	200006b2 	.word	0x200006b2
 80820c8:	200006b0 	.word	0x200006b0
 80820cc:	08081eb1 	.word	0x08081eb1
 80820d0:	08081e35 	.word	0x08081e35
 80820d4:	08081d69 	.word	0x08081d69

080820d8 <_ZN15Adafruit_BME68012beginReadingEv>:
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
  return endReading();
}

unsigned long Adafruit_BME680::beginReading(void) {
 80820d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (_meas_end != 0) {
 80820da:	6a05      	ldr	r5, [r0, #32]
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
  return endReading();
}

unsigned long Adafruit_BME680::beginReading(void) {
 80820dc:	4604      	mov	r4, r0
  if (_meas_end != 0) {
 80820de:	bb45      	cbnz	r5, 8082132 <_ZN15Adafruit_BME68012beginReadingEv+0x5a>
  uint8_t set_required_settings = 0;
  int8_t rslt;

  /* Select the power mode */
  /* Must be set before writing the sensor configuration */
  gas_sensor.power_mode = BME680_FORCED_MODE;
 80820e0:	2301      	movs	r3, #1
 80820e2:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
 80820e6:	7ca3      	ldrb	r3, [r4, #18]
  if (_meas_end != 0) {
    /* A measurement is already in progress */
    return _meas_end;
  }

  uint8_t set_required_settings = 0;
 80820e8:	7c40      	ldrb	r0, [r0, #17]
  gas_sensor.power_mode = BME680_FORCED_MODE;

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
 80820ea:	b10b      	cbz	r3, 80820f0 <_ZN15Adafruit_BME68012beginReadingEv+0x18>
    set_required_settings |= BME680_OSH_SEL;
 80820ec:	f040 0004 	orr.w	r0, r0, #4
  if (_presEnabled)
 80820f0:	7ce3      	ldrb	r3, [r4, #19]
 80820f2:	b10b      	cbz	r3, 80820f8 <_ZN15Adafruit_BME68012beginReadingEv+0x20>
    set_required_settings |= BME680_OSP_SEL;
 80820f4:	f040 0002 	orr.w	r0, r0, #2
  if (_filterEnabled)
 80820f8:	7c23      	ldrb	r3, [r4, #16]
 80820fa:	b10b      	cbz	r3, 8082100 <_ZN15Adafruit_BME68012beginReadingEv+0x28>
    set_required_settings |= BME680_FILTER_SEL;
 80820fc:	f040 0010 	orr.w	r0, r0, #16
  if (_gasEnabled)
 8082100:	7d23      	ldrb	r3, [r4, #20]
 8082102:	b10b      	cbz	r3, 8082108 <_ZN15Adafruit_BME68012beginReadingEv+0x30>
    set_required_settings |= BME680_GAS_SENSOR_SEL;
 8082104:	f040 00c8 	orr.w	r0, r0, #200	; 0xc8

  /* Set the desired sensor configuration */
#ifdef BME680_DEBUG
  Serial.println("Setting sensor settings");
#endif
  rslt = bme680_set_sensor_settings(set_required_settings, &gas_sensor);
 8082108:	f104 0624 	add.w	r6, r4, #36	; 0x24
 808210c:	4631      	mov	r1, r6
 808210e:	f7fe f9f8 	bl	8080502 <bme680_set_sensor_settings>
  if (rslt != BME680_OK)
 8082112:	b970      	cbnz	r0, 8082132 <_ZN15Adafruit_BME68012beginReadingEv+0x5a>

  /* Set the power mode */
#ifdef BME680_DEBUG
  Serial.println("Setting power mode");
#endif
  rslt = bme680_set_sensor_mode(&gas_sensor);
 8082114:	4630      	mov	r0, r6
 8082116:	f7fe f9b5 	bl	8080484 <bme680_set_sensor_mode>
  if (rslt != BME680_OK)
 808211a:	b950      	cbnz	r0, 8082132 <_ZN15Adafruit_BME68012beginReadingEv+0x5a>
    return 0;

  /* Get the total measurement duration so as to sleep or wait till the
   * measurement is complete */
  uint16_t meas_period;
  bme680_get_profile_dur(&meas_period, &gas_sensor);
 808211c:	4631      	mov	r1, r6
 808211e:	f10d 0006 	add.w	r0, sp, #6
 8082122:	f7fe fb65 	bl	80807f0 <bme680_get_profile_dur>
 8082126:	f000 f929 	bl	808237c <HAL_Timer_Get_Milli_Seconds>
  _meas_end = millis() + meas_period;
 808212a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 808212e:	4405      	add	r5, r0
 8082130:	6225      	str	r5, [r4, #32]
  return _meas_end;
}
 8082132:	4628      	mov	r0, r5
 8082134:	b002      	add	sp, #8
 8082136:	bd70      	pop	{r4, r5, r6, pc}

08082138 <_ZN15Adafruit_BME68010endReadingEv>:

bool Adafruit_BME680::endReading(void) {
 8082138:	b530      	push	{r4, r5, lr}
 808213a:	b087      	sub	sp, #28
 808213c:	4605      	mov	r5, r0
  unsigned long meas_end = beginReading();
 808213e:	f7ff ffcb 	bl	80820d8 <_ZN15Adafruit_BME68012beginReadingEv>
  if (meas_end == 0) {
 8082142:	4604      	mov	r4, r0
 8082144:	2800      	cmp	r0, #0
 8082146:	d049      	beq.n	80821dc <_ZN15Adafruit_BME68010endReadingEv+0xa4>
 8082148:	f000 f918 	bl	808237c <HAL_Timer_Get_Milli_Seconds>
    return false;
  }

  unsigned long now = millis();
  if (meas_end > now) {
 808214c:	4284      	cmp	r4, r0
 808214e:	d903      	bls.n	8082158 <_ZN15Adafruit_BME68010endReadingEv+0x20>
    unsigned long meas_period = meas_end - now;
#ifdef BME680_DEBUG
    Serial.print("Waiting (ms) "); Serial.println(meas_period);
#endif
    delay(meas_period * 2); /* Delay till the measurement is ready */
 8082150:	1a20      	subs	r0, r4, r0
 8082152:	0040      	lsls	r0, r0, #1
 8082154:	f000 fbe6 	bl	8082924 <delay>
  }
  _meas_end = 0; /* Allow new measurement to begin */
 8082158:	2400      	movs	r4, #0
 808215a:	622c      	str	r4, [r5, #32]
#endif

  struct bme680_field_data data;

  //Serial.println("Getting sensor data");
  int8_t rslt = bme680_get_sensor_data(&data, &gas_sensor);
 808215c:	f105 0124 	add.w	r1, r5, #36	; 0x24
 8082160:	a801      	add	r0, sp, #4
 8082162:	f7fe fb79 	bl	8080858 <bme680_get_sensor_data>
  if (rslt != BME680_OK)
 8082166:	2800      	cmp	r0, #0
 8082168:	d138      	bne.n	80821dc <_ZN15Adafruit_BME68010endReadingEv+0xa4>
    return false;

  if (_tempEnabled) {
 808216a:	7c6b      	ldrb	r3, [r5, #17]
 808216c:	b15b      	cbz	r3, 8082186 <_ZN15Adafruit_BME68010endReadingEv+0x4e>
    //Serial.print("Temp: "); Serial.println(data.temperature / 100.0, 2);
    temperature = data.temperature / 100.0;
 808216e:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8082172:	f003 fcd5 	bl	8085b20 <__aeabi_i2d>
 8082176:	2200      	movs	r2, #0
 8082178:	4b1a      	ldr	r3, [pc, #104]	; (80821e4 <_ZN15Adafruit_BME68010endReadingEv+0xac>)
 808217a:	f003 fe61 	bl	8085e40 <__aeabi_ddiv>
 808217e:	f003 ffe5 	bl	808614c <__aeabi_d2f>
 8082182:	6028      	str	r0, [r5, #0]
 8082184:	e001      	b.n	808218a <_ZN15Adafruit_BME68010endReadingEv+0x52>
  } else {
    temperature = NAN;
 8082186:	4b18      	ldr	r3, [pc, #96]	; (80821e8 <_ZN15Adafruit_BME68010endReadingEv+0xb0>)
 8082188:	602b      	str	r3, [r5, #0]
  }

  if (_humEnabled) {
 808218a:	7cab      	ldrb	r3, [r5, #18]
 808218c:	b153      	cbz	r3, 80821a4 <_ZN15Adafruit_BME68010endReadingEv+0x6c>
    //Serial.print("Hum:  "); Serial.println(data.humidity / 1000.0, 2);
    humidity = data.humidity / 1000.0;
 808218e:	9804      	ldr	r0, [sp, #16]
 8082190:	f003 fcb6 	bl	8085b00 <__aeabi_ui2d>
 8082194:	2200      	movs	r2, #0
 8082196:	4b15      	ldr	r3, [pc, #84]	; (80821ec <_ZN15Adafruit_BME68010endReadingEv+0xb4>)
 8082198:	f003 fe52 	bl	8085e40 <__aeabi_ddiv>
 808219c:	f003 ffd6 	bl	808614c <__aeabi_d2f>
 80821a0:	60a8      	str	r0, [r5, #8]
 80821a2:	e001      	b.n	80821a8 <_ZN15Adafruit_BME68010endReadingEv+0x70>
  } else {
    humidity = NAN;
 80821a4:	4b10      	ldr	r3, [pc, #64]	; (80821e8 <_ZN15Adafruit_BME68010endReadingEv+0xb0>)
 80821a6:	60ab      	str	r3, [r5, #8]
  }

  if (_presEnabled) {
 80821a8:	7ceb      	ldrb	r3, [r5, #19]
 80821aa:	b123      	cbz	r3, 80821b6 <_ZN15Adafruit_BME68010endReadingEv+0x7e>
    //Serial.print("Pres: "); Serial.println(data.pressure, 2);
    pressure = data.pressure;
 80821ac:	9803      	ldr	r0, [sp, #12]
 80821ae:	f004 f8d3 	bl	8086358 <__aeabi_ui2f>
 80821b2:	6068      	str	r0, [r5, #4]
 80821b4:	e001      	b.n	80821ba <_ZN15Adafruit_BME68010endReadingEv+0x82>
  } else {
    pressure = NAN;
 80821b6:	4b0c      	ldr	r3, [pc, #48]	; (80821e8 <_ZN15Adafruit_BME68010endReadingEv+0xb0>)
 80821b8:	606b      	str	r3, [r5, #4]
  }

  /* Avoid using measurements from an unstable heating setup */
  if (_gasEnabled) {
 80821ba:	7d2c      	ldrb	r4, [r5, #20]
 80821bc:	b15c      	cbz	r4, 80821d6 <_ZN15Adafruit_BME68010endReadingEv+0x9e>
    if (data.status & BME680_HEAT_STAB_MSK) {
 80821be:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80821c2:	06db      	lsls	r3, r3, #27
 80821c4:	d504      	bpl.n	80821d0 <_ZN15Adafruit_BME68010endReadingEv+0x98>
      //Serial.print("Gas resistance: "); Serial.println(data.gas_resistance);
      gas_resistance = data.gas_resistance;
 80821c6:	9805      	ldr	r0, [sp, #20]
 80821c8:	f004 f8c6 	bl	8086358 <__aeabi_ui2f>
 80821cc:	60e8      	str	r0, [r5, #12]
 80821ce:	e005      	b.n	80821dc <_ZN15Adafruit_BME68010endReadingEv+0xa4>
    } else {
      gas_resistance = 0;
 80821d0:	2300      	movs	r3, #0
 80821d2:	60eb      	str	r3, [r5, #12]
 80821d4:	e002      	b.n	80821dc <_ZN15Adafruit_BME68010endReadingEv+0xa4>
      //Serial.println("Gas reading unstable!");
    }
  } else {
    gas_resistance = NAN; 
 80821d6:	4b04      	ldr	r3, [pc, #16]	; (80821e8 <_ZN15Adafruit_BME68010endReadingEv+0xb0>)
  }

  return true;
 80821d8:	2401      	movs	r4, #1
    } else {
      gas_resistance = 0;
      //Serial.println("Gas reading unstable!");
    }
  } else {
    gas_resistance = NAN; 
 80821da:	60eb      	str	r3, [r5, #12]
  }

  return true;
}
 80821dc:	4620      	mov	r0, r4
 80821de:	b007      	add	sp, #28
 80821e0:	bd30      	pop	{r4, r5, pc}
 80821e2:	bf00      	nop
 80821e4:	40590000 	.word	0x40590000
 80821e8:	7fc00000 	.word	0x7fc00000
 80821ec:	408f4000 	.word	0x408f4000

080821f0 <_ZN15Adafruit_BME68014performReadingEv>:

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
  return endReading();
 80821f0:	f7ff bfa2 	b.w	8082138 <_ZN15Adafruit_BME68010endReadingEv>
 80821f4:	0000      	movs	r0, r0
	...

080821f8 <_ZN15Adafruit_BME68012readAltitudeEf>:
    @param  seaLevel      Sea-level pressure in hPa
    @return Altitude in meters
*/
/**************************************************************************/
float Adafruit_BME680::readAltitude(float seaLevel)
{
 80821f8:	b538      	push	{r3, r4, r5, lr}
 80821fa:	4605      	mov	r5, r0
 80821fc:	460c      	mov	r4, r1
    @brief Performs a reading and returns the barometric pressure.
    @return Barometic pressure in Pascals
*/
/**************************************************************************/
float Adafruit_BME680::readPressure(void) {
  performReading();
 80821fe:	f7ff fff7 	bl	80821f0 <_ZN15Adafruit_BME68014performReadingEv>
    // Note that using the equation from wikipedia can give bad results
    // at high altitude. See this thread for more information:
    //  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

    float atmospheric = readPressure() / 100.0F;
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
 8082202:	6868      	ldr	r0, [r5, #4]
 8082204:	4912      	ldr	r1, [pc, #72]	; (8082250 <_ZN15Adafruit_BME68012readAltitudeEf+0x58>)
 8082206:	f004 f9b3 	bl	8086570 <__aeabi_fdiv>
 808220a:	4621      	mov	r1, r4
 808220c:	f004 f9b0 	bl	8086570 <__aeabi_fdiv>
 8082210:	f003 fc98 	bl	8085b44 <__aeabi_f2d>
 8082214:	a30a      	add	r3, pc, #40	; (adr r3, 8082240 <_ZN15Adafruit_BME68012readAltitudeEf+0x48>)
 8082216:	e9d3 2300 	ldrd	r2, r3, [r3]
 808221a:	f002 f9f7 	bl	808460c <pow>
 808221e:	4602      	mov	r2, r0
 8082220:	460b      	mov	r3, r1
 8082222:	2000      	movs	r0, #0
 8082224:	490b      	ldr	r1, [pc, #44]	; (8082254 <_ZN15Adafruit_BME68012readAltitudeEf+0x5c>)
 8082226:	f003 fb2d 	bl	8085884 <__aeabi_dsub>
 808222a:	a307      	add	r3, pc, #28	; (adr r3, 8082248 <_ZN15Adafruit_BME68012readAltitudeEf+0x50>)
 808222c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8082230:	f003 fcdc 	bl	8085bec <__aeabi_dmul>
 8082234:	f003 ff8a 	bl	808614c <__aeabi_d2f>
}
 8082238:	bd38      	pop	{r3, r4, r5, pc}
 808223a:	bf00      	nop
 808223c:	f3af 8000 	nop.w
 8082240:	1a36e2eb 	.word	0x1a36e2eb
 8082244:	3fc85bc0 	.word	0x3fc85bc0
 8082248:	00000000 	.word	0x00000000
 808224c:	40e5a540 	.word	0x40e5a540
 8082250:	42c80000 	.word	0x42c80000
 8082254:	3ff00000 	.word	0x3ff00000

08082258 <_ZN15Adafruit_BME68012setGasHeaterEtt>:
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 8082258:	f8a0 1064 	strh.w	r1, [r0, #100]	; 0x64
  gas_sensor.gas_sett.heatr_dur = heaterTime;
 808225c:	f8a0 2066 	strh.w	r2, [r0, #102]	; 0x66

  if ( (heaterTemp == 0) || (heaterTime == 0) ) {
 8082260:	b101      	cbz	r1, 8082264 <_ZN15Adafruit_BME68012setGasHeaterEtt+0xc>
 8082262:	b922      	cbnz	r2, 808226e <_ZN15Adafruit_BME68012setGasHeaterEtt+0x16>
    // disabled!
    gas_sensor.gas_sett.heatr_ctrl = BME680_DISABLE_HEATER;
 8082264:	2308      	movs	r3, #8
 8082266:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
    gas_sensor.gas_sett.run_gas = BME680_DISABLE_GAS_MEAS;
 808226a:	2300      	movs	r3, #0
 808226c:	e003      	b.n	8082276 <_ZN15Adafruit_BME68012setGasHeaterEtt+0x1e>
    _gasEnabled = false;
  } else {
    gas_sensor.gas_sett.heatr_ctrl = BME680_ENABLE_HEATER;
 808226e:	2300      	movs	r3, #0
 8082270:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 8082274:	2301      	movs	r3, #1
 8082276:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
    _gasEnabled = true;
 808227a:	7503      	strb	r3, [r0, #20]
  }
  return true;
}
 808227c:	2001      	movs	r0, #1
 808227e:	4770      	bx	lr

08082280 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>:
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 8082280:	2905      	cmp	r1, #5
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
 8082282:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 8082284:	d807      	bhi.n	8082296 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x16>

  gas_sensor.tph_sett.os_temp = oversample;
 8082286:	f880 105d 	strb.w	r1, [r0, #93]	; 0x5d
 808228a:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
 808228c:	b909      	cbnz	r1, 8082292 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x12>
    _tempEnabled = false;
 808228e:	7459      	strb	r1, [r3, #17]
 8082290:	4770      	bx	lr
  else
    _tempEnabled = true;
 8082292:	7458      	strb	r0, [r3, #17]
 8082294:	4770      	bx	lr
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 8082296:	2000      	movs	r0, #0
    _tempEnabled = false;
  else
    _tempEnabled = true;

  return true;
}
 8082298:	4770      	bx	lr

0808229a <_ZN15Adafruit_BME68023setHumidityOversamplingEh>:
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 808229a:	2905      	cmp	r1, #5
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
 808229c:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 808229e:	d807      	bhi.n	80822b0 <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x16>

  gas_sensor.tph_sett.os_hum = oversample;
 80822a0:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
 80822a4:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
 80822a6:	b909      	cbnz	r1, 80822ac <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x12>
    _humEnabled = false;
 80822a8:	7499      	strb	r1, [r3, #18]
 80822aa:	4770      	bx	lr
  else
    _humEnabled = true;
 80822ac:	7498      	strb	r0, [r3, #18]
 80822ae:	4770      	bx	lr
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 80822b0:	2000      	movs	r0, #0
    _humEnabled = false;
  else
    _humEnabled = true;

  return true;
}
 80822b2:	4770      	bx	lr

080822b4 <_ZN15Adafruit_BME68023setPressureOversamplingEh>:
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 80822b4:	2905      	cmp	r1, #5
    @param  oversample Oversampling setting, can be BME680_OS_NONE (turn off Pressure reading),
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
 80822b6:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 80822b8:	d807      	bhi.n	80822ca <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x16>

  gas_sensor.tph_sett.os_pres = oversample;
 80822ba:	f880 105e 	strb.w	r1, [r0, #94]	; 0x5e
 80822be:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
 80822c0:	b909      	cbnz	r1, 80822c6 <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x12>
    _presEnabled = false;
 80822c2:	74d9      	strb	r1, [r3, #19]
 80822c4:	4770      	bx	lr
  else
    _presEnabled = true;
 80822c6:	74d8      	strb	r0, [r3, #19]
 80822c8:	4770      	bx	lr
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 80822ca:	2000      	movs	r0, #0
    _presEnabled = false;
  else
    _presEnabled = true;

  return true;
}
 80822cc:	4770      	bx	lr

080822ce <_ZN15Adafruit_BME68016setIIRFilterSizeEh>:
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 80822ce:	2907      	cmp	r1, #7
    @param filtersize Size of the filter (in samples). Can be BME680_FILTER_SIZE_0 (no filtering), BME680_FILTER_SIZE_1, BME680_FILTER_SIZE_3, BME680_FILTER_SIZE_7, BME680_FILTER_SIZE_15, BME680_FILTER_SIZE_31, BME680_FILTER_SIZE_63, BME680_FILTER_SIZE_127
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
 80822d0:	4603      	mov	r3, r0
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 80822d2:	d807      	bhi.n	80822e4 <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x16>

  gas_sensor.tph_sett.filter = filtersize;
 80822d4:	f880 105f 	strb.w	r1, [r0, #95]	; 0x5f
 80822d8:	2001      	movs	r0, #1

  if (filtersize == BME680_FILTER_SIZE_0)
 80822da:	b909      	cbnz	r1, 80822e0 <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x12>
    _filterEnabled = false;
 80822dc:	7419      	strb	r1, [r3, #16]
 80822de:	4770      	bx	lr
  else
    _filterEnabled = true;
 80822e0:	7418      	strb	r0, [r3, #16]
 80822e2:	4770      	bx	lr
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 80822e4:	2000      	movs	r0, #0
    _filterEnabled = false;
  else
    _filterEnabled = true;

  return true;
}
 80822e6:	4770      	bx	lr

080822e8 <_GLOBAL__sub_I__BME680_SoftwareSPI_MOSI>:
 80822e8:	f000 b888 	b.w	80823fc <HAL_Pin_Map>

080822ec <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80822ec:	b508      	push	{r3, lr}
 80822ee:	4b02      	ldr	r3, [pc, #8]	; (80822f8 <inet_gethostbyname+0xc>)
 80822f0:	681b      	ldr	r3, [r3, #0]
 80822f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80822f4:	9301      	str	r3, [sp, #4]
 80822f6:	bd08      	pop	{r3, pc}
 80822f8:	08060020 	.word	0x08060020

080822fc <cellular_signal>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
 80822fc:	b508      	push	{r3, lr}
 80822fe:	4b02      	ldr	r3, [pc, #8]	; (8082308 <cellular_signal+0xc>)
 8082300:	681b      	ldr	r3, [r3, #0]
 8082302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8082304:	9301      	str	r3, [sp, #4]
 8082306:	bd08      	pop	{r3, pc}
 8082308:	08060020 	.word	0x08060020

0808230c <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 808230c:	b508      	push	{r3, lr}
 808230e:	4b02      	ldr	r3, [pc, #8]	; (8082318 <cellular_command+0xc>)
 8082310:	681b      	ldr	r3, [r3, #0]
 8082312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8082314:	9301      	str	r3, [sp, #4]
 8082316:	bd08      	pop	{r3, pc}
 8082318:	08060020 	.word	0x08060020

0808231c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 808231c:	b508      	push	{r3, lr}
 808231e:	4b02      	ldr	r3, [pc, #8]	; (8082328 <os_mutex_create+0xc>)
 8082320:	681b      	ldr	r3, [r3, #0]
 8082322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082324:	9301      	str	r3, [sp, #4]
 8082326:	bd08      	pop	{r3, pc}
 8082328:	080401d0 	.word	0x080401d0

0808232c <os_mutex_unlock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
 808232c:	b508      	push	{r3, lr}
 808232e:	4b02      	ldr	r3, [pc, #8]	; (8082338 <os_mutex_unlock+0xc>)
 8082330:	681b      	ldr	r3, [r3, #0]
 8082332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8082334:	9301      	str	r3, [sp, #4]
 8082336:	bd08      	pop	{r3, pc}
 8082338:	080401d0 	.word	0x080401d0

0808233c <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 808233c:	b508      	push	{r3, lr}
 808233e:	4b02      	ldr	r3, [pc, #8]	; (8082348 <HAL_Feature_Set+0xc>)
 8082340:	681b      	ldr	r3, [r3, #0]
 8082342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8082344:	9301      	str	r3, [sp, #4]
 8082346:	bd08      	pop	{r3, pc}
 8082348:	080401b8 	.word	0x080401b8

0808234c <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 808234c:	b508      	push	{r3, lr}
 808234e:	4b02      	ldr	r3, [pc, #8]	; (8082358 <HAL_Core_System_Reset_Ex+0xc>)
 8082350:	681b      	ldr	r3, [r3, #0]
 8082352:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8082354:	9301      	str	r3, [sp, #4]
 8082356:	bd08      	pop	{r3, pc}
 8082358:	080401b8 	.word	0x080401b8

0808235c <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 808235c:	b508      	push	{r3, lr}
 808235e:	4b02      	ldr	r3, [pc, #8]	; (8082368 <HAL_Core_Get_Last_Reset_Info+0xc>)
 8082360:	681b      	ldr	r3, [r3, #0]
 8082362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8082364:	9301      	str	r3, [sp, #4]
 8082366:	bd08      	pop	{r3, pc}
 8082368:	080401b8 	.word	0x080401b8

0808236c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 808236c:	b508      	push	{r3, lr}
 808236e:	4b02      	ldr	r3, [pc, #8]	; (8082378 <HAL_RNG_GetRandomNumber+0xc>)
 8082370:	681b      	ldr	r3, [r3, #0]
 8082372:	685b      	ldr	r3, [r3, #4]
 8082374:	9301      	str	r3, [sp, #4]
 8082376:	bd08      	pop	{r3, pc}
 8082378:	0804019c 	.word	0x0804019c

0808237c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 808237c:	b508      	push	{r3, lr}
 808237e:	4b02      	ldr	r3, [pc, #8]	; (8082388 <HAL_Timer_Get_Milli_Seconds+0xc>)
 8082380:	681b      	ldr	r3, [r3, #0]
 8082382:	695b      	ldr	r3, [r3, #20]
 8082384:	9301      	str	r3, [sp, #4]
 8082386:	bd08      	pop	{r3, pc}
 8082388:	0804019c 	.word	0x0804019c

0808238c <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 808238c:	b508      	push	{r3, lr}
 808238e:	4b02      	ldr	r3, [pc, #8]	; (8082398 <HAL_RTC_Get_UnixTime+0xc>)
 8082390:	681b      	ldr	r3, [r3, #0]
 8082392:	69db      	ldr	r3, [r3, #28]
 8082394:	9301      	str	r3, [sp, #4]
 8082396:	bd08      	pop	{r3, pc}
 8082398:	0804019c 	.word	0x0804019c

0808239c <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 808239c:	b508      	push	{r3, lr}
 808239e:	4b02      	ldr	r3, [pc, #8]	; (80823a8 <HAL_EEPROM_Init+0xc>)
 80823a0:	681b      	ldr	r3, [r3, #0]
 80823a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80823a4:	9301      	str	r3, [sp, #4]
 80823a6:	bd08      	pop	{r3, pc}
 80823a8:	0804019c 	.word	0x0804019c

080823ac <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
 80823ac:	b508      	push	{r3, lr}
 80823ae:	4b02      	ldr	r3, [pc, #8]	; (80823b8 <HAL_EEPROM_Read+0xc>)
 80823b0:	681b      	ldr	r3, [r3, #0]
 80823b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80823b4:	9301      	str	r3, [sp, #4]
 80823b6:	bd08      	pop	{r3, pc}
 80823b8:	0804019c 	.word	0x0804019c

080823bc <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
 80823bc:	b508      	push	{r3, lr}
 80823be:	4b02      	ldr	r3, [pc, #8]	; (80823c8 <HAL_EEPROM_Write+0xc>)
 80823c0:	681b      	ldr	r3, [r3, #0]
 80823c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80823c4:	9301      	str	r3, [sp, #4]
 80823c6:	bd08      	pop	{r3, pc}
 80823c8:	0804019c 	.word	0x0804019c

080823cc <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 80823cc:	b508      	push	{r3, lr}
 80823ce:	4b02      	ldr	r3, [pc, #8]	; (80823d8 <HAL_EEPROM_Put+0xc>)
 80823d0:	681b      	ldr	r3, [r3, #0]
 80823d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80823d4:	9301      	str	r3, [sp, #4]
 80823d6:	bd08      	pop	{r3, pc}
 80823d8:	0804019c 	.word	0x0804019c

080823dc <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80823dc:	b508      	push	{r3, lr}
 80823de:	4b02      	ldr	r3, [pc, #8]	; (80823e8 <HAL_RTC_Time_Is_Valid+0xc>)
 80823e0:	681b      	ldr	r3, [r3, #0]
 80823e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80823e4:	9301      	str	r3, [sp, #4]
 80823e6:	bd08      	pop	{r3, pc}
 80823e8:	0804019c 	.word	0x0804019c

080823ec <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 80823ec:	b508      	push	{r3, lr}
 80823ee:	4b02      	ldr	r3, [pc, #8]	; (80823f8 <hal_timer_millis+0xc>)
 80823f0:	681b      	ldr	r3, [r3, #0]
 80823f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80823f4:	9301      	str	r3, [sp, #4]
 80823f6:	bd08      	pop	{r3, pc}
 80823f8:	0804019c 	.word	0x0804019c

080823fc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80823fc:	b508      	push	{r3, lr}
 80823fe:	4b02      	ldr	r3, [pc, #8]	; (8082408 <HAL_Pin_Map+0xc>)
 8082400:	681b      	ldr	r3, [r3, #0]
 8082402:	681b      	ldr	r3, [r3, #0]
 8082404:	9301      	str	r3, [sp, #4]
 8082406:	bd08      	pop	{r3, pc}
 8082408:	080401b0 	.word	0x080401b0

0808240c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 808240c:	b508      	push	{r3, lr}
 808240e:	4b02      	ldr	r3, [pc, #8]	; (8082418 <HAL_Pin_Mode+0xc>)
 8082410:	681b      	ldr	r3, [r3, #0]
 8082412:	689b      	ldr	r3, [r3, #8]
 8082414:	9301      	str	r3, [sp, #4]
 8082416:	bd08      	pop	{r3, pc}
 8082418:	080401b0 	.word	0x080401b0

0808241c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 808241c:	b508      	push	{r3, lr}
 808241e:	4b02      	ldr	r3, [pc, #8]	; (8082428 <HAL_Get_Pin_Mode+0xc>)
 8082420:	681b      	ldr	r3, [r3, #0]
 8082422:	68db      	ldr	r3, [r3, #12]
 8082424:	9301      	str	r3, [sp, #4]
 8082426:	bd08      	pop	{r3, pc}
 8082428:	080401b0 	.word	0x080401b0

0808242c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 808242c:	b508      	push	{r3, lr}
 808242e:	4b02      	ldr	r3, [pc, #8]	; (8082438 <HAL_GPIO_Write+0xc>)
 8082430:	681b      	ldr	r3, [r3, #0]
 8082432:	691b      	ldr	r3, [r3, #16]
 8082434:	9301      	str	r3, [sp, #4]
 8082436:	bd08      	pop	{r3, pc}
 8082438:	080401b0 	.word	0x080401b0

0808243c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 808243c:	b508      	push	{r3, lr}
 808243e:	4b02      	ldr	r3, [pc, #8]	; (8082448 <HAL_GPIO_Read+0xc>)
 8082440:	681b      	ldr	r3, [r3, #0]
 8082442:	695b      	ldr	r3, [r3, #20]
 8082444:	9301      	str	r3, [sp, #4]
 8082446:	bd08      	pop	{r3, pc}
 8082448:	080401b0 	.word	0x080401b0

0808244c <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 808244c:	b508      	push	{r3, lr}
 808244e:	4b02      	ldr	r3, [pc, #8]	; (8082458 <HAL_Interrupts_Attach+0xc>)
 8082450:	681b      	ldr	r3, [r3, #0]
 8082452:	699b      	ldr	r3, [r3, #24]
 8082454:	9301      	str	r3, [sp, #4]
 8082456:	bd08      	pop	{r3, pc}
 8082458:	080401b0 	.word	0x080401b0

0808245c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
 808245c:	b508      	push	{r3, lr}
 808245e:	4b02      	ldr	r3, [pc, #8]	; (8082468 <HAL_Interrupts_Detach+0xc>)
 8082460:	681b      	ldr	r3, [r3, #0]
 8082462:	69db      	ldr	r3, [r3, #28]
 8082464:	9301      	str	r3, [sp, #4]
 8082466:	bd08      	pop	{r3, pc}
 8082468:	080401b0 	.word	0x080401b0

0808246c <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 808246c:	b508      	push	{r3, lr}
 808246e:	4b02      	ldr	r3, [pc, #8]	; (8082478 <HAL_I2C_Begin+0xc>)
 8082470:	681b      	ldr	r3, [r3, #0]
 8082472:	68db      	ldr	r3, [r3, #12]
 8082474:	9301      	str	r3, [sp, #4]
 8082476:	bd08      	pop	{r3, pc}
 8082478:	080401ac 	.word	0x080401ac

0808247c <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 808247c:	b508      	push	{r3, lr}
 808247e:	4b02      	ldr	r3, [pc, #8]	; (8082488 <HAL_I2C_Request_Data+0xc>)
 8082480:	681b      	ldr	r3, [r3, #0]
 8082482:	695b      	ldr	r3, [r3, #20]
 8082484:	9301      	str	r3, [sp, #4]
 8082486:	bd08      	pop	{r3, pc}
 8082488:	080401ac 	.word	0x080401ac

0808248c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 808248c:	b508      	push	{r3, lr}
 808248e:	4b02      	ldr	r3, [pc, #8]	; (8082498 <HAL_I2C_Begin_Transmission+0xc>)
 8082490:	681b      	ldr	r3, [r3, #0]
 8082492:	699b      	ldr	r3, [r3, #24]
 8082494:	9301      	str	r3, [sp, #4]
 8082496:	bd08      	pop	{r3, pc}
 8082498:	080401ac 	.word	0x080401ac

0808249c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 808249c:	b508      	push	{r3, lr}
 808249e:	4b02      	ldr	r3, [pc, #8]	; (80824a8 <HAL_I2C_End_Transmission+0xc>)
 80824a0:	681b      	ldr	r3, [r3, #0]
 80824a2:	69db      	ldr	r3, [r3, #28]
 80824a4:	9301      	str	r3, [sp, #4]
 80824a6:	bd08      	pop	{r3, pc}
 80824a8:	080401ac 	.word	0x080401ac

080824ac <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80824ac:	b508      	push	{r3, lr}
 80824ae:	4b02      	ldr	r3, [pc, #8]	; (80824b8 <HAL_I2C_Write_Data+0xc>)
 80824b0:	681b      	ldr	r3, [r3, #0]
 80824b2:	6a1b      	ldr	r3, [r3, #32]
 80824b4:	9301      	str	r3, [sp, #4]
 80824b6:	bd08      	pop	{r3, pc}
 80824b8:	080401ac 	.word	0x080401ac

080824bc <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80824bc:	b508      	push	{r3, lr}
 80824be:	4b02      	ldr	r3, [pc, #8]	; (80824c8 <HAL_I2C_Available_Data+0xc>)
 80824c0:	681b      	ldr	r3, [r3, #0]
 80824c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80824c4:	9301      	str	r3, [sp, #4]
 80824c6:	bd08      	pop	{r3, pc}
 80824c8:	080401ac 	.word	0x080401ac

080824cc <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80824cc:	b508      	push	{r3, lr}
 80824ce:	4b02      	ldr	r3, [pc, #8]	; (80824d8 <HAL_I2C_Read_Data+0xc>)
 80824d0:	681b      	ldr	r3, [r3, #0]
 80824d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80824d4:	9301      	str	r3, [sp, #4]
 80824d6:	bd08      	pop	{r3, pc}
 80824d8:	080401ac 	.word	0x080401ac

080824dc <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80824dc:	b508      	push	{r3, lr}
 80824de:	4b02      	ldr	r3, [pc, #8]	; (80824e8 <HAL_I2C_Peek_Data+0xc>)
 80824e0:	681b      	ldr	r3, [r3, #0]
 80824e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80824e4:	9301      	str	r3, [sp, #4]
 80824e6:	bd08      	pop	{r3, pc}
 80824e8:	080401ac 	.word	0x080401ac

080824ec <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80824ec:	b508      	push	{r3, lr}
 80824ee:	4b02      	ldr	r3, [pc, #8]	; (80824f8 <HAL_I2C_Flush_Data+0xc>)
 80824f0:	681b      	ldr	r3, [r3, #0]
 80824f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80824f4:	9301      	str	r3, [sp, #4]
 80824f6:	bd08      	pop	{r3, pc}
 80824f8:	080401ac 	.word	0x080401ac

080824fc <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80824fc:	b508      	push	{r3, lr}
 80824fe:	4b02      	ldr	r3, [pc, #8]	; (8082508 <HAL_I2C_Is_Enabled+0xc>)
 8082500:	681b      	ldr	r3, [r3, #0]
 8082502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8082504:	9301      	str	r3, [sp, #4]
 8082506:	bd08      	pop	{r3, pc}
 8082508:	080401ac 	.word	0x080401ac

0808250c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 808250c:	b508      	push	{r3, lr}
 808250e:	4b02      	ldr	r3, [pc, #8]	; (8082518 <HAL_I2C_Init+0xc>)
 8082510:	681b      	ldr	r3, [r3, #0]
 8082512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8082514:	9301      	str	r3, [sp, #4]
 8082516:	bd08      	pop	{r3, pc}
 8082518:	080401ac 	.word	0x080401ac

0808251c <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 808251c:	b508      	push	{r3, lr}
 808251e:	4b02      	ldr	r3, [pc, #8]	; (8082528 <HAL_I2C_Acquire+0xc>)
 8082520:	681b      	ldr	r3, [r3, #0]
 8082522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8082524:	9301      	str	r3, [sp, #4]
 8082526:	bd08      	pop	{r3, pc}
 8082528:	080401ac 	.word	0x080401ac

0808252c <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 808252c:	b508      	push	{r3, lr}
 808252e:	4b02      	ldr	r3, [pc, #8]	; (8082538 <HAL_I2C_Release+0xc>)
 8082530:	681b      	ldr	r3, [r3, #0]
 8082532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8082534:	9301      	str	r3, [sp, #4]
 8082536:	bd08      	pop	{r3, pc}
 8082538:	080401ac 	.word	0x080401ac

0808253c <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 808253c:	b508      	push	{r3, lr}
 808253e:	4b02      	ldr	r3, [pc, #8]	; (8082548 <HAL_SPI_Begin+0xc>)
 8082540:	681b      	ldr	r3, [r3, #0]
 8082542:	681b      	ldr	r3, [r3, #0]
 8082544:	9301      	str	r3, [sp, #4]
 8082546:	bd08      	pop	{r3, pc}
 8082548:	080401b4 	.word	0x080401b4

0808254c <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 808254c:	b508      	push	{r3, lr}
 808254e:	4b02      	ldr	r3, [pc, #8]	; (8082558 <HAL_SPI_Set_Bit_Order+0xc>)
 8082550:	681b      	ldr	r3, [r3, #0]
 8082552:	689b      	ldr	r3, [r3, #8]
 8082554:	9301      	str	r3, [sp, #4]
 8082556:	bd08      	pop	{r3, pc}
 8082558:	080401b4 	.word	0x080401b4

0808255c <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 808255c:	b508      	push	{r3, lr}
 808255e:	4b02      	ldr	r3, [pc, #8]	; (8082568 <HAL_SPI_Set_Data_Mode+0xc>)
 8082560:	681b      	ldr	r3, [r3, #0]
 8082562:	68db      	ldr	r3, [r3, #12]
 8082564:	9301      	str	r3, [sp, #4]
 8082566:	bd08      	pop	{r3, pc}
 8082568:	080401b4 	.word	0x080401b4

0808256c <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 808256c:	b508      	push	{r3, lr}
 808256e:	4b02      	ldr	r3, [pc, #8]	; (8082578 <HAL_SPI_Set_Clock_Divider+0xc>)
 8082570:	681b      	ldr	r3, [r3, #0]
 8082572:	691b      	ldr	r3, [r3, #16]
 8082574:	9301      	str	r3, [sp, #4]
 8082576:	bd08      	pop	{r3, pc}
 8082578:	080401b4 	.word	0x080401b4

0808257c <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 808257c:	b508      	push	{r3, lr}
 808257e:	4b02      	ldr	r3, [pc, #8]	; (8082588 <HAL_SPI_Send_Receive_Data+0xc>)
 8082580:	681b      	ldr	r3, [r3, #0]
 8082582:	695b      	ldr	r3, [r3, #20]
 8082584:	9301      	str	r3, [sp, #4]
 8082586:	bd08      	pop	{r3, pc}
 8082588:	080401b4 	.word	0x080401b4

0808258c <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 808258c:	b508      	push	{r3, lr}
 808258e:	4b02      	ldr	r3, [pc, #8]	; (8082598 <HAL_SPI_Init+0xc>)
 8082590:	681b      	ldr	r3, [r3, #0]
 8082592:	69db      	ldr	r3, [r3, #28]
 8082594:	9301      	str	r3, [sp, #4]
 8082596:	bd08      	pop	{r3, pc}
 8082598:	080401b4 	.word	0x080401b4

0808259c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 808259c:	b508      	push	{r3, lr}
 808259e:	4b02      	ldr	r3, [pc, #8]	; (80825a8 <HAL_SPI_Is_Enabled+0xc>)
 80825a0:	681b      	ldr	r3, [r3, #0]
 80825a2:	6a1b      	ldr	r3, [r3, #32]
 80825a4:	9301      	str	r3, [sp, #4]
 80825a6:	bd08      	pop	{r3, pc}
 80825a8:	080401b4 	.word	0x080401b4

080825ac <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80825ac:	b508      	push	{r3, lr}
 80825ae:	4b02      	ldr	r3, [pc, #8]	; (80825b8 <HAL_SPI_Info+0xc>)
 80825b0:	681b      	ldr	r3, [r3, #0]
 80825b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80825b4:	9301      	str	r3, [sp, #4]
 80825b6:	bd08      	pop	{r3, pc}
 80825b8:	080401b4 	.word	0x080401b4

080825bc <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80825bc:	b508      	push	{r3, lr}
 80825be:	4b02      	ldr	r3, [pc, #8]	; (80825c8 <HAL_USART_Init+0xc>)
 80825c0:	681b      	ldr	r3, [r3, #0]
 80825c2:	699b      	ldr	r3, [r3, #24]
 80825c4:	9301      	str	r3, [sp, #4]
 80825c6:	bd08      	pop	{r3, pc}
 80825c8:	080401c4 	.word	0x080401c4

080825cc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80825cc:	b508      	push	{r3, lr}
 80825ce:	4b02      	ldr	r3, [pc, #8]	; (80825d8 <HAL_USART_Write_Data+0xc>)
 80825d0:	681b      	ldr	r3, [r3, #0]
 80825d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80825d4:	9301      	str	r3, [sp, #4]
 80825d6:	bd08      	pop	{r3, pc}
 80825d8:	080401c4 	.word	0x080401c4

080825dc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80825dc:	b508      	push	{r3, lr}
 80825de:	4b02      	ldr	r3, [pc, #8]	; (80825e8 <HAL_USART_Available_Data+0xc>)
 80825e0:	681b      	ldr	r3, [r3, #0]
 80825e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80825e4:	9301      	str	r3, [sp, #4]
 80825e6:	bd08      	pop	{r3, pc}
 80825e8:	080401c4 	.word	0x080401c4

080825ec <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80825ec:	b508      	push	{r3, lr}
 80825ee:	4b02      	ldr	r3, [pc, #8]	; (80825f8 <HAL_USART_Read_Data+0xc>)
 80825f0:	681b      	ldr	r3, [r3, #0]
 80825f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80825f4:	9301      	str	r3, [sp, #4]
 80825f6:	bd08      	pop	{r3, pc}
 80825f8:	080401c4 	.word	0x080401c4

080825fc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80825fc:	b508      	push	{r3, lr}
 80825fe:	4b02      	ldr	r3, [pc, #8]	; (8082608 <HAL_USART_Peek_Data+0xc>)
 8082600:	681b      	ldr	r3, [r3, #0]
 8082602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082604:	9301      	str	r3, [sp, #4]
 8082606:	bd08      	pop	{r3, pc}
 8082608:	080401c4 	.word	0x080401c4

0808260c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 808260c:	b508      	push	{r3, lr}
 808260e:	4b02      	ldr	r3, [pc, #8]	; (8082618 <HAL_USART_Flush_Data+0xc>)
 8082610:	681b      	ldr	r3, [r3, #0]
 8082612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8082614:	9301      	str	r3, [sp, #4]
 8082616:	bd08      	pop	{r3, pc}
 8082618:	080401c4 	.word	0x080401c4

0808261c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 808261c:	b508      	push	{r3, lr}
 808261e:	4b02      	ldr	r3, [pc, #8]	; (8082628 <HAL_USART_Is_Enabled+0xc>)
 8082620:	681b      	ldr	r3, [r3, #0]
 8082622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8082624:	9301      	str	r3, [sp, #4]
 8082626:	bd08      	pop	{r3, pc}
 8082628:	080401c4 	.word	0x080401c4

0808262c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 808262c:	b508      	push	{r3, lr}
 808262e:	4b02      	ldr	r3, [pc, #8]	; (8082638 <HAL_USART_Available_Data_For_Write+0xc>)
 8082630:	681b      	ldr	r3, [r3, #0]
 8082632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8082634:	9301      	str	r3, [sp, #4]
 8082636:	bd08      	pop	{r3, pc}
 8082638:	080401c4 	.word	0x080401c4

0808263c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 808263c:	b508      	push	{r3, lr}
 808263e:	4b02      	ldr	r3, [pc, #8]	; (8082648 <HAL_USB_USART_Init+0xc>)
 8082640:	681b      	ldr	r3, [r3, #0]
 8082642:	681b      	ldr	r3, [r3, #0]
 8082644:	9301      	str	r3, [sp, #4]
 8082646:	bd08      	pop	{r3, pc}
 8082648:	0806001c 	.word	0x0806001c

0808264c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 808264c:	b508      	push	{r3, lr}
 808264e:	4b02      	ldr	r3, [pc, #8]	; (8082658 <HAL_USB_USART_Available_Data+0xc>)
 8082650:	681b      	ldr	r3, [r3, #0]
 8082652:	691b      	ldr	r3, [r3, #16]
 8082654:	9301      	str	r3, [sp, #4]
 8082656:	bd08      	pop	{r3, pc}
 8082658:	0806001c 	.word	0x0806001c

0808265c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 808265c:	b508      	push	{r3, lr}
 808265e:	4b02      	ldr	r3, [pc, #8]	; (8082668 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8082660:	681b      	ldr	r3, [r3, #0]
 8082662:	695b      	ldr	r3, [r3, #20]
 8082664:	9301      	str	r3, [sp, #4]
 8082666:	bd08      	pop	{r3, pc}
 8082668:	0806001c 	.word	0x0806001c

0808266c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 808266c:	b508      	push	{r3, lr}
 808266e:	4b02      	ldr	r3, [pc, #8]	; (8082678 <HAL_USB_USART_Receive_Data+0xc>)
 8082670:	681b      	ldr	r3, [r3, #0]
 8082672:	699b      	ldr	r3, [r3, #24]
 8082674:	9301      	str	r3, [sp, #4]
 8082676:	bd08      	pop	{r3, pc}
 8082678:	0806001c 	.word	0x0806001c

0808267c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 808267c:	b508      	push	{r3, lr}
 808267e:	4b02      	ldr	r3, [pc, #8]	; (8082688 <HAL_USB_USART_Send_Data+0xc>)
 8082680:	681b      	ldr	r3, [r3, #0]
 8082682:	69db      	ldr	r3, [r3, #28]
 8082684:	9301      	str	r3, [sp, #4]
 8082686:	bd08      	pop	{r3, pc}
 8082688:	0806001c 	.word	0x0806001c

0808268c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 808268c:	b508      	push	{r3, lr}
 808268e:	4b02      	ldr	r3, [pc, #8]	; (8082698 <HAL_USB_USART_Flush_Data+0xc>)
 8082690:	681b      	ldr	r3, [r3, #0]
 8082692:	6a1b      	ldr	r3, [r3, #32]
 8082694:	9301      	str	r3, [sp, #4]
 8082696:	bd08      	pop	{r3, pc}
 8082698:	0806001c 	.word	0x0806001c

0808269c <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 808269c:	b508      	push	{r3, lr}
 808269e:	4b02      	ldr	r3, [pc, #8]	; (80826a8 <system_mode+0xc>)
 80826a0:	681b      	ldr	r3, [r3, #0]
 80826a2:	681b      	ldr	r3, [r3, #0]
 80826a4:	9301      	str	r3, [sp, #4]
 80826a6:	bd08      	pop	{r3, pc}
 80826a8:	080401a4 	.word	0x080401a4

080826ac <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80826ac:	b508      	push	{r3, lr}
 80826ae:	4b02      	ldr	r3, [pc, #8]	; (80826b8 <set_system_mode+0xc>)
 80826b0:	681b      	ldr	r3, [r3, #0]
 80826b2:	685b      	ldr	r3, [r3, #4]
 80826b4:	9301      	str	r3, [sp, #4]
 80826b6:	bd08      	pop	{r3, pc}
 80826b8:	080401a4 	.word	0x080401a4

080826bc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80826bc:	b508      	push	{r3, lr}
 80826be:	4b02      	ldr	r3, [pc, #8]	; (80826c8 <system_delay_ms+0xc>)
 80826c0:	681b      	ldr	r3, [r3, #0]
 80826c2:	695b      	ldr	r3, [r3, #20]
 80826c4:	9301      	str	r3, [sp, #4]
 80826c6:	bd08      	pop	{r3, pc}
 80826c8:	080401a4 	.word	0x080401a4

080826cc <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 80826cc:	b508      	push	{r3, lr}
 80826ce:	4b02      	ldr	r3, [pc, #8]	; (80826d8 <system_sleep+0xc>)
 80826d0:	681b      	ldr	r3, [r3, #0]
 80826d2:	699b      	ldr	r3, [r3, #24]
 80826d4:	9301      	str	r3, [sp, #4]
 80826d6:	bd08      	pop	{r3, pc}
 80826d8:	080401a4 	.word	0x080401a4

080826dc <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80826dc:	b508      	push	{r3, lr}
 80826de:	4b02      	ldr	r3, [pc, #8]	; (80826e8 <system_thread_set_state+0xc>)
 80826e0:	681b      	ldr	r3, [r3, #0]
 80826e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80826e4:	9301      	str	r3, [sp, #4]
 80826e6:	bd08      	pop	{r3, pc}
 80826e8:	080401a4 	.word	0x080401a4

080826ec <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80826ec:	b508      	push	{r3, lr}
 80826ee:	4b02      	ldr	r3, [pc, #8]	; (80826f8 <application_thread_current+0xc>)
 80826f0:	681b      	ldr	r3, [r3, #0]
 80826f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80826f4:	9301      	str	r3, [sp, #4]
 80826f6:	bd08      	pop	{r3, pc}
 80826f8:	080401a4 	.word	0x080401a4

080826fc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80826fc:	b508      	push	{r3, lr}
 80826fe:	4b02      	ldr	r3, [pc, #8]	; (8082708 <application_thread_invoke+0xc>)
 8082700:	681b      	ldr	r3, [r3, #0]
 8082702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8082704:	9301      	str	r3, [sp, #4]
 8082706:	bd08      	pop	{r3, pc}
 8082708:	080401a4 	.word	0x080401a4

0808270c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 808270c:	b508      	push	{r3, lr}
 808270e:	4b02      	ldr	r3, [pc, #8]	; (8082718 <system_thread_get_state+0xc>)
 8082710:	681b      	ldr	r3, [r3, #0]
 8082712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8082714:	9301      	str	r3, [sp, #4]
 8082716:	bd08      	pop	{r3, pc}
 8082718:	080401a4 	.word	0x080401a4

0808271c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 808271c:	b508      	push	{r3, lr}
 808271e:	4b03      	ldr	r3, [pc, #12]	; (808272c <system_ctrl_set_app_request_handler+0x10>)
 8082720:	681b      	ldr	r3, [r3, #0]
 8082722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8082726:	9301      	str	r3, [sp, #4]
 8082728:	bd08      	pop	{r3, pc}
 808272a:	0000      	.short	0x0000
 808272c:	080401a4 	.word	0x080401a4

08082730 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8082730:	b508      	push	{r3, lr}
 8082732:	4b03      	ldr	r3, [pc, #12]	; (8082740 <system_ctrl_set_result+0x10>)
 8082734:	681b      	ldr	r3, [r3, #0]
 8082736:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 808273a:	9301      	str	r3, [sp, #4]
 808273c:	bd08      	pop	{r3, pc}
 808273e:	0000      	.short	0x0000
 8082740:	080401a4 	.word	0x080401a4

08082744 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 8082744:	b508      	push	{r3, lr}
 8082746:	4b02      	ldr	r3, [pc, #8]	; (8082750 <spark_variable+0xc>)
 8082748:	681b      	ldr	r3, [r3, #0]
 808274a:	681b      	ldr	r3, [r3, #0]
 808274c:	9301      	str	r3, [sp, #4]
 808274e:	bd08      	pop	{r3, pc}
 8082750:	080401cc 	.word	0x080401cc

08082754 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8082754:	b508      	push	{r3, lr}
 8082756:	4b02      	ldr	r3, [pc, #8]	; (8082760 <spark_function+0xc>)
 8082758:	681b      	ldr	r3, [r3, #0]
 808275a:	685b      	ldr	r3, [r3, #4]
 808275c:	9301      	str	r3, [sp, #4]
 808275e:	bd08      	pop	{r3, pc}
 8082760:	080401cc 	.word	0x080401cc

08082764 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8082764:	b508      	push	{r3, lr}
 8082766:	4b02      	ldr	r3, [pc, #8]	; (8082770 <spark_process+0xc>)
 8082768:	681b      	ldr	r3, [r3, #0]
 808276a:	689b      	ldr	r3, [r3, #8]
 808276c:	9301      	str	r3, [sp, #4]
 808276e:	bd08      	pop	{r3, pc}
 8082770:	080401cc 	.word	0x080401cc

08082774 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8082774:	b508      	push	{r3, lr}
 8082776:	4b02      	ldr	r3, [pc, #8]	; (8082780 <spark_cloud_flag_connect+0xc>)
 8082778:	681b      	ldr	r3, [r3, #0]
 808277a:	68db      	ldr	r3, [r3, #12]
 808277c:	9301      	str	r3, [sp, #4]
 808277e:	bd08      	pop	{r3, pc}
 8082780:	080401cc 	.word	0x080401cc

08082784 <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
 8082784:	b508      	push	{r3, lr}
 8082786:	4b02      	ldr	r3, [pc, #8]	; (8082790 <spark_cloud_flag_disconnect+0xc>)
 8082788:	681b      	ldr	r3, [r3, #0]
 808278a:	691b      	ldr	r3, [r3, #16]
 808278c:	9301      	str	r3, [sp, #4]
 808278e:	bd08      	pop	{r3, pc}
 8082790:	080401cc 	.word	0x080401cc

08082794 <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8082794:	b508      	push	{r3, lr}
 8082796:	4b02      	ldr	r3, [pc, #8]	; (80827a0 <spark_cloud_flag_connected+0xc>)
 8082798:	681b      	ldr	r3, [r3, #0]
 808279a:	695b      	ldr	r3, [r3, #20]
 808279c:	9301      	str	r3, [sp, #4]
 808279e:	bd08      	pop	{r3, pc}
 80827a0:	080401cc 	.word	0x080401cc

080827a4 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 80827a4:	b508      	push	{r3, lr}
 80827a6:	4b02      	ldr	r3, [pc, #8]	; (80827b0 <spark_deviceID+0xc>)
 80827a8:	681b      	ldr	r3, [r3, #0]
 80827aa:	69db      	ldr	r3, [r3, #28]
 80827ac:	9301      	str	r3, [sp, #4]
 80827ae:	bd08      	pop	{r3, pc}
 80827b0:	080401cc 	.word	0x080401cc

080827b4 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80827b4:	b508      	push	{r3, lr}
 80827b6:	4b02      	ldr	r3, [pc, #8]	; (80827c0 <spark_send_event+0xc>)
 80827b8:	681b      	ldr	r3, [r3, #0]
 80827ba:	6a1b      	ldr	r3, [r3, #32]
 80827bc:	9301      	str	r3, [sp, #4]
 80827be:	bd08      	pop	{r3, pc}
 80827c0:	080401cc 	.word	0x080401cc

080827c4 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80827c4:	b508      	push	{r3, lr}
 80827c6:	4b02      	ldr	r3, [pc, #8]	; (80827d0 <spark_subscribe+0xc>)
 80827c8:	681b      	ldr	r3, [r3, #0]
 80827ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80827cc:	9301      	str	r3, [sp, #4]
 80827ce:	bd08      	pop	{r3, pc}
 80827d0:	080401cc 	.word	0x080401cc

080827d4 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80827d4:	b508      	push	{r3, lr}
 80827d6:	4b02      	ldr	r3, [pc, #8]	; (80827e0 <spark_sync_time_pending+0xc>)
 80827d8:	681b      	ldr	r3, [r3, #0]
 80827da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80827dc:	9301      	str	r3, [sp, #4]
 80827de:	bd08      	pop	{r3, pc}
 80827e0:	080401cc 	.word	0x080401cc

080827e4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80827e4:	b508      	push	{r3, lr}
 80827e6:	4b02      	ldr	r3, [pc, #8]	; (80827f0 <spark_set_random_seed_from_cloud_handler+0xc>)
 80827e8:	681b      	ldr	r3, [r3, #0]
 80827ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80827ec:	9301      	str	r3, [sp, #4]
 80827ee:	bd08      	pop	{r3, pc}
 80827f0:	080401cc 	.word	0x080401cc

080827f4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80827f4:	b508      	push	{r3, lr}
 80827f6:	4b02      	ldr	r3, [pc, #8]	; (8082800 <network_connect+0xc>)
 80827f8:	681b      	ldr	r3, [r3, #0]
 80827fa:	685b      	ldr	r3, [r3, #4]
 80827fc:	9301      	str	r3, [sp, #4]
 80827fe:	bd08      	pop	{r3, pc}
 8082800:	080401c8 	.word	0x080401c8

08082804 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8082804:	b508      	push	{r3, lr}
 8082806:	4b02      	ldr	r3, [pc, #8]	; (8082810 <network_connecting+0xc>)
 8082808:	681b      	ldr	r3, [r3, #0]
 808280a:	689b      	ldr	r3, [r3, #8]
 808280c:	9301      	str	r3, [sp, #4]
 808280e:	bd08      	pop	{r3, pc}
 8082810:	080401c8 	.word	0x080401c8

08082814 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8082814:	b508      	push	{r3, lr}
 8082816:	4b02      	ldr	r3, [pc, #8]	; (8082820 <network_disconnect+0xc>)
 8082818:	681b      	ldr	r3, [r3, #0]
 808281a:	68db      	ldr	r3, [r3, #12]
 808281c:	9301      	str	r3, [sp, #4]
 808281e:	bd08      	pop	{r3, pc}
 8082820:	080401c8 	.word	0x080401c8

08082824 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8082824:	b508      	push	{r3, lr}
 8082826:	4b02      	ldr	r3, [pc, #8]	; (8082830 <network_ready+0xc>)
 8082828:	681b      	ldr	r3, [r3, #0]
 808282a:	691b      	ldr	r3, [r3, #16]
 808282c:	9301      	str	r3, [sp, #4]
 808282e:	bd08      	pop	{r3, pc}
 8082830:	080401c8 	.word	0x080401c8

08082834 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8082834:	b508      	push	{r3, lr}
 8082836:	4b02      	ldr	r3, [pc, #8]	; (8082840 <network_on+0xc>)
 8082838:	681b      	ldr	r3, [r3, #0]
 808283a:	695b      	ldr	r3, [r3, #20]
 808283c:	9301      	str	r3, [sp, #4]
 808283e:	bd08      	pop	{r3, pc}
 8082840:	080401c8 	.word	0x080401c8

08082844 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8082844:	b508      	push	{r3, lr}
 8082846:	4b02      	ldr	r3, [pc, #8]	; (8082850 <network_off+0xc>)
 8082848:	681b      	ldr	r3, [r3, #0]
 808284a:	699b      	ldr	r3, [r3, #24]
 808284c:	9301      	str	r3, [sp, #4]
 808284e:	bd08      	pop	{r3, pc}
 8082850:	080401c8 	.word	0x080401c8

08082854 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8082854:	b508      	push	{r3, lr}
 8082856:	4b02      	ldr	r3, [pc, #8]	; (8082860 <network_listen+0xc>)
 8082858:	681b      	ldr	r3, [r3, #0]
 808285a:	69db      	ldr	r3, [r3, #28]
 808285c:	9301      	str	r3, [sp, #4]
 808285e:	bd08      	pop	{r3, pc}
 8082860:	080401c8 	.word	0x080401c8

08082864 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8082864:	b508      	push	{r3, lr}
 8082866:	4b02      	ldr	r3, [pc, #8]	; (8082870 <network_listening+0xc>)
 8082868:	681b      	ldr	r3, [r3, #0]
 808286a:	6a1b      	ldr	r3, [r3, #32]
 808286c:	9301      	str	r3, [sp, #4]
 808286e:	bd08      	pop	{r3, pc}
 8082870:	080401c8 	.word	0x080401c8

08082874 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8082874:	b508      	push	{r3, lr}
 8082876:	4b02      	ldr	r3, [pc, #8]	; (8082880 <network_set_listen_timeout+0xc>)
 8082878:	681b      	ldr	r3, [r3, #0]
 808287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808287c:	9301      	str	r3, [sp, #4]
 808287e:	bd08      	pop	{r3, pc}
 8082880:	080401c8 	.word	0x080401c8

08082884 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8082884:	b508      	push	{r3, lr}
 8082886:	4b02      	ldr	r3, [pc, #8]	; (8082890 <network_get_listen_timeout+0xc>)
 8082888:	681b      	ldr	r3, [r3, #0]
 808288a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808288c:	9301      	str	r3, [sp, #4]
 808288e:	bd08      	pop	{r3, pc}
 8082890:	080401c8 	.word	0x080401c8

08082894 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8082894:	b508      	push	{r3, lr}
 8082896:	4b02      	ldr	r3, [pc, #8]	; (80828a0 <malloc+0xc>)
 8082898:	681b      	ldr	r3, [r3, #0]
 808289a:	681b      	ldr	r3, [r3, #0]
 808289c:	9301      	str	r3, [sp, #4]
 808289e:	bd08      	pop	{r3, pc}
 80828a0:	080401a0 	.word	0x080401a0

080828a4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80828a4:	b508      	push	{r3, lr}
 80828a6:	4b02      	ldr	r3, [pc, #8]	; (80828b0 <free+0xc>)
 80828a8:	681b      	ldr	r3, [r3, #0]
 80828aa:	685b      	ldr	r3, [r3, #4]
 80828ac:	9301      	str	r3, [sp, #4]
 80828ae:	bd08      	pop	{r3, pc}
 80828b0:	080401a0 	.word	0x080401a0

080828b4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80828b4:	b508      	push	{r3, lr}
 80828b6:	4b02      	ldr	r3, [pc, #8]	; (80828c0 <realloc+0xc>)
 80828b8:	681b      	ldr	r3, [r3, #0]
 80828ba:	689b      	ldr	r3, [r3, #8]
 80828bc:	9301      	str	r3, [sp, #4]
 80828be:	bd08      	pop	{r3, pc}
 80828c0:	080401a0 	.word	0x080401a0

080828c4 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80828c4:	b508      	push	{r3, lr}
 80828c6:	4b02      	ldr	r3, [pc, #8]	; (80828d0 <siprintf+0xc>)
 80828c8:	681b      	ldr	r3, [r3, #0]
 80828ca:	691b      	ldr	r3, [r3, #16]
 80828cc:	9301      	str	r3, [sp, #4]
 80828ce:	bd08      	pop	{r3, pc}
 80828d0:	080401a0 	.word	0x080401a0

080828d4 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80828d4:	b508      	push	{r3, lr}
 80828d6:	4b02      	ldr	r3, [pc, #8]	; (80828e0 <siscanf+0xc>)
 80828d8:	681b      	ldr	r3, [r3, #0]
 80828da:	699b      	ldr	r3, [r3, #24]
 80828dc:	9301      	str	r3, [sp, #4]
 80828de:	bd08      	pop	{r3, pc}
 80828e0:	080401a0 	.word	0x080401a0

080828e4 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80828e4:	b508      	push	{r3, lr}
 80828e6:	4b02      	ldr	r3, [pc, #8]	; (80828f0 <snprintf+0xc>)
 80828e8:	681b      	ldr	r3, [r3, #0]
 80828ea:	69db      	ldr	r3, [r3, #28]
 80828ec:	9301      	str	r3, [sp, #4]
 80828ee:	bd08      	pop	{r3, pc}
 80828f0:	080401a0 	.word	0x080401a0

080828f4 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80828f4:	b508      	push	{r3, lr}
 80828f6:	4b02      	ldr	r3, [pc, #8]	; (8082900 <abort+0xc>)
 80828f8:	681b      	ldr	r3, [r3, #0]
 80828fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80828fc:	9301      	str	r3, [sp, #4]
 80828fe:	bd08      	pop	{r3, pc}
 8082900:	080401a0 	.word	0x080401a0

08082904 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8082904:	b508      	push	{r3, lr}
 8082906:	4b02      	ldr	r3, [pc, #8]	; (8082910 <_malloc_r+0xc>)
 8082908:	681b      	ldr	r3, [r3, #0]
 808290a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808290c:	9301      	str	r3, [sp, #4]
 808290e:	bd08      	pop	{r3, pc}
 8082910:	080401a0 	.word	0x080401a0

08082914 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 8082914:	b508      	push	{r3, lr}
 8082916:	4b02      	ldr	r3, [pc, #8]	; (8082920 <__errno+0xc>)
 8082918:	681b      	ldr	r3, [r3, #0]
 808291a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808291c:	9301      	str	r3, [sp, #4]
 808291e:	bd08      	pop	{r3, pc}
 8082920:	080401a0 	.word	0x080401a0

08082924 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8082924:	2100      	movs	r1, #0
 8082926:	f7ff bec9 	b.w	80826bc <system_delay_ms>

0808292a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 808292a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808292c:	6883      	ldr	r3, [r0, #8]
 808292e:	4604      	mov	r4, r0
 8082930:	b90b      	cbnz	r3, 8082936 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8082932:	f001 fd20 	bl	8084376 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082936:	68c3      	ldr	r3, [r0, #12]
 8082938:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 808293a:	68a3      	ldr	r3, [r4, #8]
 808293c:	b11b      	cbz	r3, 8082946 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808293e:	2203      	movs	r2, #3
 8082940:	4621      	mov	r1, r4
 8082942:	4620      	mov	r0, r4
 8082944:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8082946:	4620      	mov	r0, r4
}
 8082948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808294c:	f7fd bba7 	b.w	808009e <_ZdlPv>

08082950 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8082950:	2200      	movs	r2, #0
 8082952:	4611      	mov	r1, r2
 8082954:	6840      	ldr	r0, [r0, #4]
 8082956:	f7ff bf65 	b.w	8082824 <network_ready>

0808295a <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808295a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 808295e:	2600      	movs	r6, #0
 8082960:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8082962:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082964:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8082966:	4688      	mov	r8, r1
 8082968:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 808296a:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808296e:	f004 faae 	bl	8086ece <strlen>
 8082972:	9600      	str	r6, [sp, #0]
 8082974:	b281      	uxth	r1, r0
 8082976:	f8d8 3004 	ldr.w	r3, [r8, #4]
 808297a:	4622      	mov	r2, r4
 808297c:	4638      	mov	r0, r7
 808297e:	f7ff fcb5 	bl	80822ec <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8082982:	b120      	cbz	r0, 808298e <_ZN5spark13CellularClass7resolveEPKc+0x34>
 8082984:	4631      	mov	r1, r6
 8082986:	4628      	mov	r0, r5
 8082988:	f000 fd2a 	bl	80833e0 <_ZN9IPAddressC1Em>
 808298c:	e003      	b.n	8082996 <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 808298e:	4621      	mov	r1, r4
 8082990:	4628      	mov	r0, r5
 8082992:	f000 fd1d 	bl	80833d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 8082996:	4628      	mov	r0, r5
 8082998:	b004      	add	sp, #16
 808299a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808299e <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 808299e:	2200      	movs	r2, #0
 80829a0:	4611      	mov	r1, r2
 80829a2:	6840      	ldr	r0, [r0, #4]
 80829a4:	f7ff bf5e 	b.w	8082864 <network_listening>

080829a8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80829a8:	2200      	movs	r2, #0
 80829aa:	4611      	mov	r1, r2
 80829ac:	6840      	ldr	r0, [r0, #4]
 80829ae:	f7ff bf69 	b.w	8082884 <network_get_listen_timeout>

080829b2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80829b2:	2200      	movs	r2, #0
 80829b4:	6840      	ldr	r0, [r0, #4]
 80829b6:	f7ff bf5d 	b.w	8082874 <network_set_listen_timeout>

080829ba <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80829ba:	2200      	movs	r2, #0
 80829bc:	f081 0101 	eor.w	r1, r1, #1
 80829c0:	6840      	ldr	r0, [r0, #4]
 80829c2:	f7ff bf47 	b.w	8082854 <network_listen>

080829c6 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 80829c6:	2300      	movs	r3, #0
 80829c8:	461a      	mov	r2, r3
 80829ca:	4619      	mov	r1, r3
 80829cc:	6840      	ldr	r0, [r0, #4]
 80829ce:	f7ff bf39 	b.w	8082844 <network_off>

080829d2 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 80829d2:	2300      	movs	r3, #0
 80829d4:	461a      	mov	r2, r3
 80829d6:	4619      	mov	r1, r3
 80829d8:	6840      	ldr	r0, [r0, #4]
 80829da:	f7ff bf2b 	b.w	8082834 <network_on>

080829de <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80829de:	2200      	movs	r2, #0
 80829e0:	4611      	mov	r1, r2
 80829e2:	6840      	ldr	r0, [r0, #4]
 80829e4:	f7ff bf0e 	b.w	8082804 <network_connecting>

080829e8 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80829e8:	2200      	movs	r2, #0
 80829ea:	2102      	movs	r1, #2
 80829ec:	6840      	ldr	r0, [r0, #4]
 80829ee:	f7ff bf11 	b.w	8082814 <network_disconnect>

080829f2 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80829f2:	2300      	movs	r3, #0
 80829f4:	461a      	mov	r2, r3
 80829f6:	6840      	ldr	r0, [r0, #4]
 80829f8:	f7ff befc 	b.w	80827f4 <network_connect>

080829fc <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
 80829fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80829fe:	460f      	mov	r7, r1
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
 8082a00:	4b1a      	ldr	r3, [pc, #104]	; (8082a6c <_ZN5spark13CellularClass4RSSIEv+0x70>)
 8082a02:	2500      	movs	r5, #0
 8082a04:	6003      	str	r3, [r0, #0]
 8082a06:	2618      	movs	r6, #24
 8082a08:	3328      	adds	r3, #40	; 0x28
 8082a0a:	b089      	sub	sp, #36	; 0x24
 8082a0c:	6043      	str	r3, [r0, #4]
 8082a0e:	6085      	str	r5, [r0, #8]
 8082a10:	60c5      	str	r5, [r0, #12]
 8082a12:	4632      	mov	r2, r6
 8082a14:	4629      	mov	r1, r5
 8082a16:	4604      	mov	r4, r0
 8082a18:	3010      	adds	r0, #16
 8082a1a:	f004 f9fa 	bl	8086e12 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 8082a1e:	462a      	mov	r2, r5
 8082a20:	4629      	mov	r1, r5
 8082a22:	6878      	ldr	r0, [r7, #4]
 8082a24:	f7ff fefe 	bl	8082824 <network_ready>
 8082a28:	b908      	cbnz	r0, 8082a2e <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
 8082a2a:	60a0      	str	r0, [r4, #8]
            return sig;
 8082a2c:	e01b      	b.n	8082a66 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
 8082a2e:	4629      	mov	r1, r5
 8082a30:	4632      	mov	r2, r6
 8082a32:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
 8082a34:	9500      	str	r5, [sp, #0]
 8082a36:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
 8082a38:	f004 f9eb 	bl	8086e12 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8082a3c:	a902      	add	r1, sp, #8
 8082a3e:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
 8082a40:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8082a44:	f7ff fc5a 	bl	80822fc <cellular_signal>
 8082a48:	b110      	cbz	r0, 8082a50 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
 8082a4a:	2301      	movs	r3, #1
 8082a4c:	60a3      	str	r3, [r4, #8]
            return sig;
 8082a4e:	e00a      	b.n	8082a66 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
 8082a50:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
 8082a52:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
 8082a54:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
 8082a56:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
 8082a58:	b90b      	cbnz	r3, 8082a5e <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
 8082a5a:	2302      	movs	r3, #2
 8082a5c:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
 8082a5e:	a902      	add	r1, sp, #8
 8082a60:	4620      	mov	r0, r4
 8082a62:	f000 f89d 	bl	8082ba0 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
 8082a66:	4620      	mov	r0, r4
 8082a68:	b009      	add	sp, #36	; 0x24
 8082a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082a6c:	08087bd8 	.word	0x08087bd8

08082a70 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8082a70:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8082a72:	4c0c      	ldr	r4, [pc, #48]	; (8082aa4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
 8082a74:	2528      	movs	r5, #40	; 0x28
 8082a76:	462a      	mov	r2, r5
 8082a78:	2100      	movs	r1, #0
 8082a7a:	4620      	mov	r0, r4
 8082a7c:	f004 f9c9 	bl	8086e12 <memset>
        cid = -1;
 8082a80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8082a84:	6063      	str	r3, [r4, #4]
        size = sizeof(*this);
 8082a86:	8025      	strh	r5, [r4, #0]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8082a88:	4c07      	ldr	r4, [pc, #28]	; (8082aa8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
 8082a8a:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8082a8c:	4620      	mov	r0, r4
 8082a8e:	6063      	str	r3, [r4, #4]
 8082a90:	4b06      	ldr	r3, [pc, #24]	; (8082aac <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
    char imei[16];
    int dev;

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
 8082a92:	252c      	movs	r5, #44	; 0x2c
 8082a94:	f840 3b08 	str.w	r3, [r0], #8
 8082a98:	462a      	mov	r2, r5
 8082a9a:	2100      	movs	r1, #0
 8082a9c:	f004 f9b9 	bl	8086e12 <memset>
        size = sizeof(*this);
 8082aa0:	8125      	strh	r5, [r4, #8]
 8082aa2:	bd38      	pop	{r3, r4, r5, pc}
 8082aa4:	200006e8 	.word	0x200006e8
 8082aa8:	200006b4 	.word	0x200006b4
 8082aac:	08087ba4 	.word	0x08087ba4

08082ab0 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 8082ab0:	4770      	bx	lr

08082ab2 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
 8082ab2:	7d00      	ldrb	r0, [r0, #20]
 8082ab4:	4770      	bx	lr
	...

08082ab8 <_ZNK14CellularSignal16getStrengthValueEv>:

    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
 8082ab8:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
 8082aba:	7d03      	ldrb	r3, [r0, #20]
 8082abc:	b11b      	cbz	r3, 8082ac6 <_ZNK14CellularSignal16getStrengthValueEv+0xe>
 8082abe:	6980      	ldr	r0, [r0, #24]
 8082ac0:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8082ac4:	d101      	bne.n	8082aca <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
 8082ac6:	2000      	movs	r0, #0
 8082ac8:	bd08      	pop	{r3, pc}
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
 8082aca:	f003 fc49 	bl	8086360 <__aeabi_i2f>
 8082ace:	4902      	ldr	r1, [pc, #8]	; (8082ad8 <_ZNK14CellularSignal16getStrengthValueEv+0x20>)
 8082ad0:	f003 fd4e 	bl	8086570 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8082ad4:	bd08      	pop	{r3, pc}
 8082ad6:	bf00      	nop
 8082ad8:	42c80000 	.word	0x42c80000

08082adc <_ZNK14CellularSignal15getQualityValueEv>:

    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
 8082adc:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
 8082ade:	7d03      	ldrb	r3, [r0, #20]
 8082ae0:	b11b      	cbz	r3, 8082aea <_ZNK14CellularSignal15getQualityValueEv+0xe>
 8082ae2:	6a00      	ldr	r0, [r0, #32]
 8082ae4:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8082ae8:	d101      	bne.n	8082aee <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
 8082aea:	2000      	movs	r0, #0
 8082aec:	bd08      	pop	{r3, pc}
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
 8082aee:	f003 fc37 	bl	8086360 <__aeabi_i2f>
 8082af2:	4902      	ldr	r1, [pc, #8]	; (8082afc <_ZNK14CellularSignal15getQualityValueEv+0x20>)
 8082af4:	f003 fd3c 	bl	8086570 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8082af8:	bd08      	pop	{r3, pc}
 8082afa:	bf00      	nop
 8082afc:	42c80000 	.word	0x42c80000

08082b00 <_ZNK14CellularSignal7printToER5Print>:

size_t CellularSignal::printTo(Print& p) const
{
 8082b00:	b570      	push	{r4, r5, r6, lr}
 8082b02:	460d      	mov	r5, r1
 8082b04:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 8082b06:	220a      	movs	r2, #10
 8082b08:	6881      	ldr	r1, [r0, #8]
 8082b0a:	4628      	mov	r0, r5
 8082b0c:	f000 ff2d 	bl	808396a <_ZN5Print5printEii>
    n += p.print(',');
 8082b10:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 8082b12:	4604      	mov	r4, r0
    n += p.print(',');
 8082b14:	4628      	mov	r0, r5
 8082b16:	f000 fed7 	bl	80838c8 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
 8082b1a:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
 8082b1c:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
 8082b1e:	68f1      	ldr	r1, [r6, #12]
 8082b20:	4628      	mov	r0, r5
 8082b22:	f000 ff22 	bl	808396a <_ZN5Print5printEii>
    return n;
}
 8082b26:	4420      	add	r0, r4
 8082b28:	bd70      	pop	{r4, r5, r6, pc}

08082b2a <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
 8082b2a:	f1a0 0004 	sub.w	r0, r0, #4
 8082b2e:	f7ff bfe7 	b.w	8082b00 <_ZNK14CellularSignal7printToER5Print>

08082b32 <_ZN14CellularSignalD0Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 8082b32:	b510      	push	{r4, lr}
 8082b34:	4604      	mov	r4, r0
 8082b36:	f7fd fab2 	bl	808009e <_ZdlPv>
 8082b3a:	4620      	mov	r0, r4
 8082b3c:	bd10      	pop	{r4, pc}
	...

08082b40 <_ZNK14CellularSignal10getQualityEv>:

    return 0.0f;
}

float CellularSignal::getQuality() const
{
 8082b40:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
 8082b42:	7d03      	ldrb	r3, [r0, #20]
 8082b44:	b15b      	cbz	r3, 8082b5e <_ZNK14CellularSignal10getQualityEv+0x1e>
 8082b46:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8082b48:	2800      	cmp	r0, #0
 8082b4a:	db08      	blt.n	8082b5e <_ZNK14CellularSignal10getQualityEv+0x1e>
        return (float)sig_.quality / 65535.0f * 100.0f;
 8082b4c:	f003 fc08 	bl	8086360 <__aeabi_i2f>
 8082b50:	4904      	ldr	r1, [pc, #16]	; (8082b64 <_ZNK14CellularSignal10getQualityEv+0x24>)
 8082b52:	f003 fd0d 	bl	8086570 <__aeabi_fdiv>
 8082b56:	4904      	ldr	r1, [pc, #16]	; (8082b68 <_ZNK14CellularSignal10getQualityEv+0x28>)
 8082b58:	f003 fc56 	bl	8086408 <__aeabi_fmul>
 8082b5c:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 8082b5e:	4803      	ldr	r0, [pc, #12]	; (8082b6c <_ZNK14CellularSignal10getQualityEv+0x2c>)
}
 8082b60:	bd08      	pop	{r3, pc}
 8082b62:	bf00      	nop
 8082b64:	477fff00 	.word	0x477fff00
 8082b68:	42c80000 	.word	0x42c80000
 8082b6c:	bf800000 	.word	0xbf800000

08082b70 <_ZNK14CellularSignal11getStrengthEv>:
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
 8082b70:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
 8082b72:	7d03      	ldrb	r3, [r0, #20]
 8082b74:	b15b      	cbz	r3, 8082b8e <_ZNK14CellularSignal11getStrengthEv+0x1e>
 8082b76:	69c0      	ldr	r0, [r0, #28]
 8082b78:	2800      	cmp	r0, #0
 8082b7a:	db08      	blt.n	8082b8e <_ZNK14CellularSignal11getStrengthEv+0x1e>
        return (float)sig_.strength / 65535.0f * 100.0f;
 8082b7c:	f003 fbf0 	bl	8086360 <__aeabi_i2f>
 8082b80:	4904      	ldr	r1, [pc, #16]	; (8082b94 <_ZNK14CellularSignal11getStrengthEv+0x24>)
 8082b82:	f003 fcf5 	bl	8086570 <__aeabi_fdiv>
 8082b86:	4904      	ldr	r1, [pc, #16]	; (8082b98 <_ZNK14CellularSignal11getStrengthEv+0x28>)
 8082b88:	f003 fc3e 	bl	8086408 <__aeabi_fmul>
 8082b8c:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 8082b8e:	4803      	ldr	r0, [pc, #12]	; (8082b9c <_ZNK14CellularSignal11getStrengthEv+0x2c>)
}
 8082b90:	bd08      	pop	{r3, pc}
 8082b92:	bf00      	nop
 8082b94:	477fff00 	.word	0x477fff00
 8082b98:	42c80000 	.word	0x42c80000
 8082b9c:	bf800000 	.word	0xbf800000

08082ba0 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
 8082ba0:	b530      	push	{r4, r5, lr}
    sig_ = sig;
 8082ba2:	460d      	mov	r5, r1
 8082ba4:	f100 0410 	add.w	r4, r0, #16
 8082ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8082baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8082bac:	e895 0003 	ldmia.w	r5, {r0, r1}
 8082bb0:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
 8082bb4:	2001      	movs	r0, #1
 8082bb6:	bd30      	pop	{r4, r5, pc}

08082bb8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8082bb8:	4770      	bx	lr

08082bba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 8082bba:	2000      	movs	r0, #0
 8082bbc:	4770      	bx	lr

08082bbe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8082bbe:	b510      	push	{r4, lr}
 8082bc0:	4604      	mov	r4, r0
 8082bc2:	f7fd fa6c 	bl	808009e <_ZdlPv>
 8082bc6:	4620      	mov	r0, r4
 8082bc8:	bd10      	pop	{r4, pc}

08082bca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 8082bca:	b508      	push	{r3, lr}
      { delete this; }
 8082bcc:	b108      	cbz	r0, 8082bd2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 8082bce:	f7ff fff6 	bl	8082bbe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8082bd2:	bd08      	pop	{r3, pc}

08082bd4 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8082bd4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8082bd6:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8082bd8:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8082bda:	b113      	cbz	r3, 8082be2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8082bdc:	2203      	movs	r2, #3
 8082bde:	4601      	mov	r1, r0
 8082be0:	4798      	blx	r3
    }
 8082be2:	4620      	mov	r0, r4
 8082be4:	bd10      	pop	{r4, pc}

08082be6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 8082be6:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8082be8:	68c4      	ldr	r4, [r0, #12]
 8082bea:	b1d4      	cbz	r4, 8082c22 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 8082bec:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8082bee:	2b02      	cmp	r3, #2
 8082bf0:	d102      	bne.n	8082bf8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8082bf2:	68e0      	ldr	r0, [r4, #12]
 8082bf4:	f7ff fe56 	bl	80828a4 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 8082bf8:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 8082bfa:	b12d      	cbz	r5, 8082c08 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082bfc:	4628      	mov	r0, r5
 8082bfe:	f7ff ffe9 	bl	8082bd4 <_ZNSt14_Function_baseD1Ev>
 8082c02:	4628      	mov	r0, r5
 8082c04:	f7fd fa4b 	bl	808009e <_ZdlPv>
 8082c08:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8082c0a:	b12d      	cbz	r5, 8082c18 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
 8082c0c:	4628      	mov	r0, r5
 8082c0e:	f7ff ffe1 	bl	8082bd4 <_ZNSt14_Function_baseD1Ev>
 8082c12:	4628      	mov	r0, r5
 8082c14:	f7fd fa43 	bl	808009e <_ZdlPv>
 8082c18:	4620      	mov	r0, r4
 8082c1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8082c1e:	f7fd ba3e 	b.w	808009e <_ZdlPv>
 8082c22:	bd38      	pop	{r3, r4, r5, pc}

08082c24 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}
#endif
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8082c24:	b510      	push	{r4, lr}
 8082c26:	b088      	sub	sp, #32
 8082c28:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8082c2a:	4668      	mov	r0, sp
 8082c2c:	f000 ff88 	bl	8083b40 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 8082c30:	4669      	mov	r1, sp
 8082c32:	a804      	add	r0, sp, #16
 8082c34:	f000 ffa6 	bl	8083b84 <_ZN6StringC1ERKS_>
 8082c38:	a804      	add	r0, sp, #16
 8082c3a:	47a0      	blx	r4
 8082c3c:	4604      	mov	r4, r0
 8082c3e:	a804      	add	r0, sp, #16
 8082c40:	f000 ff37 	bl	8083ab2 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8082c44:	4668      	mov	r0, sp
 8082c46:	f000 ff34 	bl	8083ab2 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 8082c4a:	4620      	mov	r0, r4
 8082c4c:	b008      	add	sp, #32
 8082c4e:	bd10      	pop	{r4, pc}

08082c50 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8082c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082c52:	4607      	mov	r7, r0
 8082c54:	460e      	mov	r6, r1
 8082c56:	4615      	mov	r5, r2
 8082c58:	b085      	sub	sp, #20
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
 8082c5a:	2410      	movs	r4, #16
 8082c5c:	4622      	mov	r2, r4
 8082c5e:	2100      	movs	r1, #0
 8082c60:	4668      	mov	r0, sp
 8082c62:	f004 f8d6 	bl	8086e12 <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8082c66:	2200      	movs	r2, #0
 8082c68:	4669      	mov	r1, sp
 8082c6a:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
 8082c6c:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
 8082c70:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 8082c72:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 8082c74:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8082c76:	f7ff fd6d 	bl	8082754 <spark_function>
}
 8082c7a:	b005      	add	sp, #20
 8082c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08082c7e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 8082c7e:	b513      	push	{r0, r1, r4, lr}
 8082c80:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8082c82:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 8082c86:	2300      	movs	r3, #0
 8082c88:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8082c8a:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8082c8c:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8082c8e:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8082c90:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 8082c92:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8082c94:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8082c96:	f7fe faab 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082c9a:	4620      	mov	r0, r4
 8082c9c:	b002      	add	sp, #8
 8082c9e:	bd10      	pop	{r4, pc}

08082ca0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8082ca0:	680b      	ldr	r3, [r1, #0]
 8082ca2:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 8082ca4:	b113      	cbz	r3, 8082cac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8082ca6:	685a      	ldr	r2, [r3, #4]
 8082ca8:	3201      	adds	r2, #1
 8082caa:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 8082cac:	4770      	bx	lr

08082cae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8082cae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082cb0:	460c      	mov	r4, r1
 8082cb2:	4606      	mov	r6, r0
 8082cb4:	460f      	mov	r7, r1
 8082cb6:	f854 3b04 	ldr.w	r3, [r4], #4
 8082cba:	ad02      	add	r5, sp, #8
 8082cbc:	f845 3d08 	str.w	r3, [r5, #-8]!
 8082cc0:	4621      	mov	r1, r4
 8082cc2:	a801      	add	r0, sp, #4
 8082cc4:	f7ff ffec 	bl	8082ca0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 8082cc8:	4629      	mov	r1, r5
 8082cca:	4630      	mov	r0, r6
 8082ccc:	f7ff ffd7 	bl	8082c7e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8082cd0:	a801      	add	r0, sp, #4
 8082cd2:	f7fe fa8d 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082cd6:	4620      	mov	r0, r4
 8082cd8:	f7fe fa8a 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 8082cdc:	4638      	mov	r0, r7
 8082cde:	f7fd f9de 	bl	808009e <_ZdlPv>
        return p;
    }
 8082ce2:	4630      	mov	r0, r6
 8082ce4:	b003      	add	sp, #12
 8082ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08082ce8 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 8082ce8:	b513      	push	{r0, r1, r4, lr}
 8082cea:	460b      	mov	r3, r1
 8082cec:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082cee:	c803      	ldmia	r0, {r0, r1}
 8082cf0:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8082cf4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8082cf8:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8082cfc:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8082d00:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8082d04:	b002      	add	sp, #8
 8082d06:	bd10      	pop	{r4, pc}

08082d08 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082d08:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8082d0a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082d0c:	b90a      	cbnz	r2, 8082d12 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8082d0e:	f001 fb32 	bl	8084376 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082d12:	68c3      	ldr	r3, [r0, #12]
    }
 8082d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082d18:	4718      	bx	r3

08082d1a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8082d1a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082d1c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8082d1e:	f100 0110 	add.w	r1, r0, #16
 8082d22:	f7ff fff1 	bl	8082d08 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8082d26:	bd08      	pop	{r3, pc}

08082d28 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082d28:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8082d2a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082d2c:	b90a      	cbnz	r2, 8082d32 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8082d2e:	f001 fb22 	bl	8084376 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082d32:	68c3      	ldr	r3, [r0, #12]
    }
 8082d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082d38:	4718      	bx	r3

08082d3a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8082d3a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082d3c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8082d3e:	f100 0110 	add.w	r1, r0, #16
 8082d42:	f7ff fff1 	bl	8082d28 <_ZNKSt8functionIFvRKbEEclES1_>
 8082d46:	bd08      	pop	{r3, pc}

08082d48 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8082d48:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082d4a:	2300      	movs	r3, #0
 8082d4c:	6083      	str	r3, [r0, #8]
 8082d4e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8082d50:	4604      	mov	r4, r0
 8082d52:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8082d54:	b12b      	cbz	r3, 8082d62 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8082d56:	2202      	movs	r2, #2
 8082d58:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8082d5a:	68eb      	ldr	r3, [r5, #12]
 8082d5c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8082d5e:	68ab      	ldr	r3, [r5, #8]
 8082d60:	60a3      	str	r3, [r4, #8]
	}
    }
 8082d62:	4620      	mov	r0, r4
 8082d64:	bd38      	pop	{r3, r4, r5, pc}
	...

08082d68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 8082d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 8082d6c:	f64f 739c 	movw	r3, #65436	; 0xff9c
 8082d70:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8082d72:	f04f 0002 	mov.w	r0, #2
 8082d76:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8082d78:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8082d7c:	808b      	strh	r3, [r1, #4]
 8082d7e:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8082d80:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8082d82:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 8082d86:	600b      	str	r3, [r1, #0]
 8082d88:	e8d4 1f4f 	ldrexb	r1, [r4]
 8082d8c:	4299      	cmp	r1, r3
 8082d8e:	d103      	bne.n	8082d98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 8082d90:	e8c4 0f45 	strexb	r5, r0, [r4]
 8082d94:	2d00      	cmp	r5, #0
 8082d96:	d1f7      	bne.n	8082d88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 8082d98:	d002      	beq.n	8082da0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 8082d9a:	f88d 1000 	strb.w	r1, [sp]
 8082d9e:	e06b      	b.n	8082e78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 8082da0:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8082da4:	bf1c      	itt	ne
 8082da6:	60e7      	strne	r7, [r4, #12]
 8082da8:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8082daa:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 8082dae:	bf18      	it	ne
 8082db0:	461f      	movne	r7, r3
 8082db2:	2301      	movs	r3, #1
 8082db4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8082db6:	f3bf 8f5f 	dmb	sy
 8082dba:	f104 0308 	add.w	r3, r4, #8
 8082dbe:	2000      	movs	r0, #0
 8082dc0:	e853 6f00 	ldrex	r6, [r3]
 8082dc4:	e843 0200 	strex	r2, r0, [r3]
 8082dc8:	2a00      	cmp	r2, #0
 8082dca:	d1f9      	bne.n	8082dc0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 8082dcc:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8082dd0:	2e00      	cmp	r6, #0
 8082dd2:	d051      	beq.n	8082e78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8082dd4:	f7ff fc8a 	bl	80826ec <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8082dd8:	b120      	cbz	r0, 8082de4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8082dda:	4629      	mov	r1, r5
 8082ddc:	4630      	mov	r0, r6
 8082dde:	f7ff ff93 	bl	8082d08 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8082de2:	e043      	b.n	8082e6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8082de4:	4631      	mov	r1, r6
 8082de6:	4668      	mov	r0, sp
 8082de8:	f7ff ffae 	bl	8082d48 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8082dec:	68e0      	ldr	r0, [r4, #12]
 8082dee:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8082df2:	b108      	cbz	r0, 8082df8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 8082df4:	f004 f850 	bl	8086e98 <strdup>
 8082df8:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8082dfa:	2010      	movs	r0, #16
 8082dfc:	f8ad 5014 	strh.w	r5, [sp, #20]
 8082e00:	f7fd f94b 	bl	808009a <_Znwj>
 8082e04:	4605      	mov	r5, r0
 8082e06:	b330      	cbz	r0, 8082e56 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082e08:	f04f 0800 	mov.w	r8, #0
 8082e0c:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082e10:	2018      	movs	r0, #24
 8082e12:	f7fd f942 	bl	808009a <_Znwj>
 8082e16:	4604      	mov	r4, r0
 8082e18:	b1c0      	cbz	r0, 8082e4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082e1a:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8082e1e:	4601      	mov	r1, r0
 8082e20:	4668      	mov	r0, sp
 8082e22:	f7ff ff61 	bl	8082ce8 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082e26:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 8082e28:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8082e2a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082e2c:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8082e2e:	9202      	str	r2, [sp, #8]
 8082e30:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8082e32:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8082e34:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8082e38:	9203      	str	r2, [sp, #12]
 8082e3a:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 8082e3c:	f64f 739c 	movw	r3, #65436	; 0xff9c
 8082e40:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8082e44:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8082e46:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8082e4a:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082e4c:	4b0d      	ldr	r3, [pc, #52]	; (8082e84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082e4e:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082e50:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8082e52:	4b0d      	ldr	r3, [pc, #52]	; (8082e88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
 8082e54:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8082e56:	9804      	ldr	r0, [sp, #16]
 8082e58:	f7ff fd24 	bl	80828a4 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082e5c:	4668      	mov	r0, sp
 8082e5e:	f7ff feb9 	bl	8082bd4 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8082e62:	2200      	movs	r2, #0
 8082e64:	4629      	mov	r1, r5
 8082e66:	4809      	ldr	r0, [pc, #36]	; (8082e8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 8082e68:	f7ff fc48 	bl	80826fc <application_thread_invoke>
 8082e6c:	4630      	mov	r0, r6
 8082e6e:	f7ff feb1 	bl	8082bd4 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8082e72:	4630      	mov	r0, r6
 8082e74:	f7fd f913 	bl	808009e <_ZdlPv>
 8082e78:	4638      	mov	r0, r7
 8082e7a:	f7ff fd13 	bl	80828a4 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 8082e7e:	b006      	add	sp, #24
 8082e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082e84:	08082d1b 	.word	0x08082d1b
 8082e88:	08082f79 	.word	0x08082f79
 8082e8c:	0808292b 	.word	0x0808292b

08082e90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8082e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8082e94:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8082e96:	ad07      	add	r5, sp, #28
 8082e98:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8082e9c:	4606      	mov	r6, r0
 8082e9e:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8082ea0:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8082ea2:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8082ea4:	460f      	mov	r7, r1
 8082ea6:	4690      	mov	r8, r2
 8082ea8:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8082eac:	f8c5 b004 	str.w	fp, [r5, #4]
 8082eb0:	f8c5 b008 	str.w	fp, [r5, #8]
 8082eb4:	9307      	str	r3, [sp, #28]
 8082eb6:	f7fd f8f0 	bl	808009a <_Znwj>
 8082eba:	4604      	mov	r4, r0
 8082ebc:	b138      	cbz	r0, 8082ece <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8082ebe:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8082ec2:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8082ec6:	f8c0 b004 	str.w	fp, [r0, #4]
 8082eca:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8082ece:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082ed0:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 8082ed2:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8082ed4:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082ed6:	f7fd f8e0 	bl	808009a <_Znwj>
 8082eda:	b128      	cbz	r0, 8082ee8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8082edc:	2301      	movs	r3, #1
 8082ede:	6043      	str	r3, [r0, #4]
 8082ee0:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 8082ee2:	4b23      	ldr	r3, [pc, #140]	; (8082f70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 8082ee4:	60c4      	str	r4, [r0, #12]
 8082ee6:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 8082ee8:	4b22      	ldr	r3, [pc, #136]	; (8082f74 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082eea:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8082eec:	2008      	movs	r0, #8
 8082eee:	9308      	str	r3, [sp, #32]
 8082ef0:	f7fd f8d3 	bl	808009a <_Znwj>
 8082ef4:	4604      	mov	r4, r0
 8082ef6:	b128      	cbz	r0, 8082f04 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082ef8:	9b03      	ldr	r3, [sp, #12]
 8082efa:	a904      	add	r1, sp, #16
 8082efc:	f840 3b04 	str.w	r3, [r0], #4
 8082f00:	f7ff fece 	bl	8082ca0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8082f04:	9500      	str	r5, [sp, #0]
 8082f06:	fa5f f38a 	uxtb.w	r3, sl
 8082f0a:	464a      	mov	r2, r9
 8082f0c:	4641      	mov	r1, r8
 8082f0e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 8082f10:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8082f12:	f7ff fc4f 	bl	80827b4 <spark_send_event>
 8082f16:	b9b8      	cbnz	r0, 8082f48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8082f18:	9b03      	ldr	r3, [sp, #12]
 8082f1a:	785b      	ldrb	r3, [r3, #1]
 8082f1c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8082f20:	b993      	cbnz	r3, 8082f48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8082f22:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 8082f26:	a905      	add	r1, sp, #20
 8082f28:	a803      	add	r0, sp, #12
 8082f2a:	9205      	str	r2, [sp, #20]
 8082f2c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8082f30:	f7ff ff1a 	bl	8082d68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8082f34:	9805      	ldr	r0, [sp, #20]
 8082f36:	f7ff fcb5 	bl	80828a4 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8082f3a:	a805      	add	r0, sp, #20
 8082f3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8082f3e:	f7ff feb6 	bl	8082cae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8082f42:	a806      	add	r0, sp, #24
 8082f44:	f7fe f954 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082f48:	9b03      	ldr	r3, [sp, #12]
 8082f4a:	a904      	add	r1, sp, #16
 8082f4c:	a806      	add	r0, sp, #24
 8082f4e:	9305      	str	r3, [sp, #20]
 8082f50:	f7ff fea6 	bl	8082ca0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 8082f54:	a905      	add	r1, sp, #20
 8082f56:	4630      	mov	r0, r6
 8082f58:	f7ff fe91 	bl	8082c7e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8082f5c:	a806      	add	r0, sp, #24
 8082f5e:	f7fe f947 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082f62:	a804      	add	r0, sp, #16
 8082f64:	f7fe f944 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 8082f68:	4630      	mov	r0, r6
 8082f6a:	b00b      	add	sp, #44	; 0x2c
 8082f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082f70:	08087c0c 	.word	0x08087c0c
 8082f74:	080830e1 	.word	0x080830e1

08082f78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8082f78:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8082f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082f7c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8082f7e:	d006      	beq.n	8082f8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8082f80:	2a03      	cmp	r2, #3
 8082f82:	d017      	beq.n	8082fb4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 8082f84:	2a01      	cmp	r2, #1
 8082f86:	d120      	bne.n	8082fca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082f88:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8082f8a:	6003      	str	r3, [r0, #0]
	      break;
 8082f8c:	e01d      	b.n	8082fca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082f8e:	2018      	movs	r0, #24
 8082f90:	680e      	ldr	r6, [r1, #0]
 8082f92:	f7fd f882 	bl	808009a <_Znwj>
 8082f96:	4605      	mov	r5, r0
 8082f98:	b150      	cbz	r0, 8082fb0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8082f9a:	4631      	mov	r1, r6
 8082f9c:	f7ff fed4 	bl	8082d48 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8082fa0:	6930      	ldr	r0, [r6, #16]
 8082fa2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8082fa6:	b108      	cbz	r0, 8082fac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8082fa8:	f003 ff76 	bl	8086e98 <strdup>
 8082fac:	6128      	str	r0, [r5, #16]
 8082fae:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082fb0:	6025      	str	r5, [r4, #0]
 8082fb2:	e00a      	b.n	8082fca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8082fb4:	6804      	ldr	r4, [r0, #0]
 8082fb6:	b144      	cbz	r4, 8082fca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8082fb8:	6920      	ldr	r0, [r4, #16]
 8082fba:	f7ff fc73 	bl	80828a4 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082fbe:	4620      	mov	r0, r4
 8082fc0:	f7ff fe08 	bl	8082bd4 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8082fc4:	4620      	mov	r0, r4
 8082fc6:	f7fd f86a 	bl	808009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8082fca:	2000      	movs	r0, #0
 8082fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082fce <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8082fce:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082fd0:	2300      	movs	r3, #0
 8082fd2:	6083      	str	r3, [r0, #8]
 8082fd4:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8082fd6:	4604      	mov	r4, r0
 8082fd8:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8082fda:	b12b      	cbz	r3, 8082fe8 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8082fdc:	2202      	movs	r2, #2
 8082fde:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8082fe0:	68eb      	ldr	r3, [r5, #12]
 8082fe2:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8082fe4:	68ab      	ldr	r3, [r5, #8]
 8082fe6:	60a3      	str	r3, [r4, #8]
	}
    }
 8082fe8:	4620      	mov	r0, r4
 8082fea:	bd38      	pop	{r3, r4, r5, pc}

08082fec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8082fec:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8082fee:	b570      	push	{r4, r5, r6, lr}
 8082ff0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8082ff2:	d006      	beq.n	8083002 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 8082ff4:	2a03      	cmp	r2, #3
 8082ff6:	d011      	beq.n	808301c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 8082ff8:	2a01      	cmp	r2, #1
 8082ffa:	d117      	bne.n	808302c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082ffc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8082ffe:	6003      	str	r3, [r0, #0]
	      break;
 8083000:	e014      	b.n	808302c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8083002:	2014      	movs	r0, #20
 8083004:	680e      	ldr	r6, [r1, #0]
 8083006:	f7fd f848 	bl	808009a <_Znwj>
 808300a:	4605      	mov	r5, r0
 808300c:	b120      	cbz	r0, 8083018 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 808300e:	4631      	mov	r1, r6
 8083010:	f7ff ffdd 	bl	8082fce <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8083014:	7c33      	ldrb	r3, [r6, #16]
 8083016:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8083018:	6025      	str	r5, [r4, #0]
 808301a:	e007      	b.n	808302c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808301c:	6804      	ldr	r4, [r0, #0]
 808301e:	b12c      	cbz	r4, 808302c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8083020:	4620      	mov	r0, r4
 8083022:	f7ff fdd7 	bl	8082bd4 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8083026:	4620      	mov	r0, r4
 8083028:	f7fd f839 	bl	808009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 808302c:	2000      	movs	r0, #0
 808302e:	bd70      	pop	{r4, r5, r6, pc}

08083030 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 8083030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8083032:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8083034:	f3bf 8f5f 	dmb	sy
 8083038:	b087      	sub	sp, #28
 808303a:	2300      	movs	r3, #0
 808303c:	e850 6f00 	ldrex	r6, [r0]
 8083040:	e840 3200 	strex	r2, r3, [r0]
 8083044:	2a00      	cmp	r2, #0
 8083046:	d1f9      	bne.n	808303c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 8083048:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 808304c:	2e00      	cmp	r6, #0
 808304e:	d03e      	beq.n	80830ce <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8083050:	4618      	mov	r0, r3
 8083052:	f7ff fb4b 	bl	80826ec <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8083056:	4607      	mov	r7, r0
 8083058:	b120      	cbz	r0, 8083064 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808305a:	4621      	mov	r1, r4
 808305c:	4630      	mov	r0, r6
 808305e:	f7ff fe63 	bl	8082d28 <_ZNKSt8functionIFvRKbEEclES1_>
 8083062:	e02e      	b.n	80830c2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8083064:	4631      	mov	r1, r6
 8083066:	a801      	add	r0, sp, #4
 8083068:	f7ff ffb1 	bl	8082fce <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 808306c:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808306e:	2010      	movs	r0, #16
 8083070:	f88d 3014 	strb.w	r3, [sp, #20]
 8083074:	f7fd f811 	bl	808009a <_Znwj>
 8083078:	4605      	mov	r5, r0
 808307a:	b1d0      	cbz	r0, 80830b2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808307c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808307e:	2014      	movs	r0, #20
 8083080:	f7fd f80b 	bl	808009a <_Znwj>
 8083084:	4604      	mov	r4, r0
 8083086:	b178      	cbz	r0, 80830a8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8083088:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 808308a:	4601      	mov	r1, r0
 808308c:	a801      	add	r0, sp, #4
 808308e:	f7ff fe2b 	bl	8082ce8 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8083092:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8083094:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8083096:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8083098:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 808309a:	9203      	str	r2, [sp, #12]
 808309c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 808309e:	60e3      	str	r3, [r4, #12]
 80830a0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80830a4:	9204      	str	r2, [sp, #16]
 80830a6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80830a8:	4b0a      	ldr	r3, [pc, #40]	; (80830d4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80830aa:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80830ac:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80830ae:	4b0a      	ldr	r3, [pc, #40]	; (80830d8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80830b0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80830b2:	a801      	add	r0, sp, #4
 80830b4:	f7ff fd8e 	bl	8082bd4 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80830b8:	2200      	movs	r2, #0
 80830ba:	4629      	mov	r1, r5
 80830bc:	4807      	ldr	r0, [pc, #28]	; (80830dc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80830be:	f7ff fb1d 	bl	80826fc <application_thread_invoke>
 80830c2:	4630      	mov	r0, r6
 80830c4:	f7ff fd86 	bl	8082bd4 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80830c8:	4630      	mov	r0, r6
 80830ca:	f7fc ffe8 	bl	808009e <_ZdlPv>
        }
    }
 80830ce:	b007      	add	sp, #28
 80830d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80830d2:	bf00      	nop
 80830d4:	08082d3b 	.word	0x08082d3b
 80830d8:	08082fed 	.word	0x08082fed
 80830dc:	0808292b 	.word	0x0808292b

080830e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80830e0:	b530      	push	{r4, r5, lr}
 80830e2:	4604      	mov	r4, r0
 80830e4:	b085      	sub	sp, #20
 80830e6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80830e8:	4668      	mov	r0, sp
 80830ea:	4611      	mov	r1, r2
 80830ec:	f7ff fddf 	bl	8082cae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80830f0:	b17c      	cbz	r4, 8083112 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80830f2:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80830f4:	4628      	mov	r0, r5
 80830f6:	b10d      	cbz	r5, 80830fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80830f8:	f003 fece 	bl	8086e98 <strdup>
 80830fc:	9002      	str	r0, [sp, #8]
 80830fe:	a902      	add	r1, sp, #8
 8083100:	4668      	mov	r0, sp
 8083102:	f8ad 400c 	strh.w	r4, [sp, #12]
 8083106:	f7ff fe2f 	bl	8082d68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 808310a:	9802      	ldr	r0, [sp, #8]
 808310c:	f7ff fbca 	bl	80828a4 <free>
 8083110:	e01d      	b.n	808314e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8083112:	f04f 0201 	mov.w	r2, #1
 8083116:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8083118:	f88d 4008 	strb.w	r4, [sp, #8]
 808311c:	e8d0 3f4f 	ldrexb	r3, [r0]
 8083120:	42a3      	cmp	r3, r4
 8083122:	d103      	bne.n	808312c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 8083124:	e8c0 2f41 	strexb	r1, r2, [r0]
 8083128:	2900      	cmp	r1, #0
 808312a:	d1f7      	bne.n	808311c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 808312c:	d002      	beq.n	8083134 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 808312e:	f88d 3008 	strb.w	r3, [sp, #8]
 8083132:	e00c      	b.n	808314e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 8083134:	f110 010c 	adds.w	r1, r0, #12
 8083138:	f04f 0301 	mov.w	r3, #1
 808313c:	bf18      	it	ne
 808313e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8083140:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 8083144:	3004      	adds	r0, #4
 8083146:	f800 3c03 	strb.w	r3, [r0, #-3]
 808314a:	f7ff ff71 	bl	8083030 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 808314e:	a801      	add	r0, sp, #4
 8083150:	f7fe f84e 	bl	80811f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 8083154:	b005      	add	sp, #20
 8083156:	bd30      	pop	{r4, r5, pc}

08083158 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 8083158:	6800      	ldr	r0, [r0, #0]
 808315a:	f000 b8d4 	b.w	8083306 <_ZN7TwoWire4lockEv>

0808315e <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 808315e:	b510      	push	{r4, lr}
 8083160:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 8083162:	6001      	str	r1, [r0, #0]
 8083164:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 8083166:	b10a      	cbz	r2, 808316c <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 8083168:	f7ff fff6 	bl	8083158 <_ZN9FuelGauge4lockEv>
    }
}
 808316c:	4620      	mov	r0, r4
 808316e:	bd10      	pop	{r4, pc}

08083170 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
 8083170:	b538      	push	{r3, r4, r5, lr}
 8083172:	4604      	mov	r4, r0
 8083174:	460d      	mov	r5, r1
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8083176:	f001 f893 	bl	80842a0 <_Z20__fetch_global_Wire3v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
 808317a:	462a      	mov	r2, r5
 808317c:	4601      	mov	r1, r0
 808317e:	4620      	mov	r0, r4
 8083180:	f7ff ffed 	bl	808315e <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
 8083184:	4620      	mov	r0, r4
 8083186:	bd38      	pop	{r3, r4, r5, pc}

08083188 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 8083188:	6800      	ldr	r0, [r0, #0]
 808318a:	f000 b8c5 	b.w	8083318 <_ZN7TwoWire6unlockEv>

0808318e <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 808318e:	b510      	push	{r4, lr}
{
    if (lock_) {
 8083190:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 8083192:	4604      	mov	r4, r0
{
    if (lock_) {
 8083194:	b10b      	cbz	r3, 808319a <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 8083196:	f7ff fff7 	bl	8083188 <_ZN9FuelGauge6unlockEv>
    }
}
 808319a:	4620      	mov	r0, r4
 808319c:	bd10      	pop	{r4, pc}

0808319e <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 808319e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80831a0:	4604      	mov	r4, r0
 80831a2:	460f      	mov	r7, r1
 80831a4:	4616      	mov	r6, r2
 80831a6:	461d      	mov	r5, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
 80831a8:	f7ff ffd6 	bl	8083158 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
 80831ac:	6820      	ldr	r0, [r4, #0]
 80831ae:	2136      	movs	r1, #54	; 0x36
 80831b0:	f000 f89b 	bl	80832ea <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
 80831b4:	6820      	ldr	r0, [r4, #0]
 80831b6:	4639      	mov	r1, r7
 80831b8:	6803      	ldr	r3, [r0, #0]
 80831ba:	689b      	ldr	r3, [r3, #8]
 80831bc:	4798      	blx	r3
    i2c_.endTransmission(true);
 80831be:	2101      	movs	r1, #1
 80831c0:	6820      	ldr	r0, [r4, #0]
 80831c2:	f000 f895 	bl	80832f0 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
 80831c6:	2202      	movs	r2, #2
 80831c8:	2136      	movs	r1, #54	; 0x36
 80831ca:	2301      	movs	r3, #1
 80831cc:	6820      	ldr	r0, [r4, #0]
 80831ce:	f000 f883 	bl	80832d8 <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
 80831d2:	6820      	ldr	r0, [r4, #0]
 80831d4:	6803      	ldr	r3, [r0, #0]
 80831d6:	695b      	ldr	r3, [r3, #20]
 80831d8:	4798      	blx	r3
 80831da:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
 80831dc:	6820      	ldr	r0, [r4, #0]
 80831de:	6803      	ldr	r3, [r0, #0]
 80831e0:	695b      	ldr	r3, [r3, #20]
 80831e2:	4798      	blx	r3
 80831e4:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 80831e6:	4620      	mov	r0, r4
}
 80831e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80831ec:	f7ff bfcc 	b.w	8083188 <_ZN9FuelGauge6unlockEv>

080831f0 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
 80831f0:	b513      	push	{r0, r1, r4, lr}

	byte MSB = 0;
 80831f2:	2200      	movs	r2, #0
	byte LSB = 0;
 80831f4:	ab02      	add	r3, sp, #8
 80831f6:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
 80831fa:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
 80831fe:	2104      	movs	r1, #4
 8083200:	f10d 0206 	add.w	r2, sp, #6
 8083204:	f7ff ffcb 	bl	808319e <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
 8083208:	f89d 0007 	ldrb.w	r0, [sp, #7]
 808320c:	f002 fc88 	bl	8085b20 <__aeabi_i2d>
 8083210:	2200      	movs	r2, #0
 8083212:	4b08      	ldr	r3, [pc, #32]	; (8083234 <_ZN9FuelGauge6getSoCEv+0x44>)
 8083214:	f002 fcea 	bl	8085bec <__aeabi_dmul>
 8083218:	f002 ff98 	bl	808614c <__aeabi_d2f>
 808321c:	4604      	mov	r4, r0
 808321e:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8083222:	f003 f89d 	bl	8086360 <__aeabi_i2f>
 8083226:	4601      	mov	r1, r0
 8083228:	4620      	mov	r0, r4
 808322a:	f002 ffe5 	bl	80861f8 <__addsf3>
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
 808322e:	b002      	add	sp, #8
 8083230:	bd10      	pop	{r4, pc}
 8083232:	bf00      	nop
 8083234:	3f700000 	.word	0x3f700000

08083238 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 8083238:	4770      	bx	lr

0808323a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 808323a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808323c:	4606      	mov	r6, r0
 808323e:	4615      	mov	r5, r2
 8083240:	460c      	mov	r4, r1
 8083242:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8083244:	42bc      	cmp	r4, r7
 8083246:	d006      	beq.n	8083256 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8083248:	6833      	ldr	r3, [r6, #0]
 808324a:	f814 1b01 	ldrb.w	r1, [r4], #1
 808324e:	689b      	ldr	r3, [r3, #8]
 8083250:	4630      	mov	r0, r6
 8083252:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8083254:	e7f6      	b.n	8083244 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 8083256:	4628      	mov	r0, r5
 8083258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808325a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 808325a:	2200      	movs	r2, #0
 808325c:	7c00      	ldrb	r0, [r0, #16]
 808325e:	f7ff b925 	b.w	80824ac <HAL_I2C_Write_Data>

08083262 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 8083262:	2100      	movs	r1, #0
 8083264:	7c00      	ldrb	r0, [r0, #16]
 8083266:	f7ff b929 	b.w	80824bc <HAL_I2C_Available_Data>

0808326a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 808326a:	2100      	movs	r1, #0
 808326c:	7c00      	ldrb	r0, [r0, #16]
 808326e:	f7ff b92d 	b.w	80824cc <HAL_I2C_Read_Data>

08083272 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8083272:	2100      	movs	r1, #0
 8083274:	7c00      	ldrb	r0, [r0, #16]
 8083276:	f7ff b931 	b.w	80824dc <HAL_I2C_Peek_Data>

0808327a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 808327a:	2100      	movs	r1, #0
 808327c:	7c00      	ldrb	r0, [r0, #16]
 808327e:	f7ff b935 	b.w	80824ec <HAL_I2C_Flush_Data>

08083282 <_ZN7TwoWireD0Ev>:
 8083282:	b510      	push	{r4, lr}
 8083284:	4604      	mov	r4, r0
 8083286:	f7fc ff0a 	bl	808009e <_ZdlPv>
 808328a:	4620      	mov	r0, r4
 808328c:	bd10      	pop	{r4, pc}
	...

08083290 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8083290:	b510      	push	{r4, lr}
 8083292:	4604      	mov	r4, r0
 8083294:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8083296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808329a:	60a3      	str	r3, [r4, #8]
 808329c:	4b04      	ldr	r3, [pc, #16]	; (80832b0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 808329e:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80832a0:	7420      	strb	r0, [r4, #16]
 80832a2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80832a4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80832a6:	f7ff f931 	bl	808250c <HAL_I2C_Init>

}
 80832aa:	4620      	mov	r0, r4
 80832ac:	bd10      	pop	{r4, pc}
 80832ae:	bf00      	nop
 80832b0:	08087c28 	.word	0x08087c28

080832b4 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80832b4:	2300      	movs	r3, #0
 80832b6:	461a      	mov	r2, r3
 80832b8:	4619      	mov	r1, r3
 80832ba:	7c00      	ldrb	r0, [r0, #16]
 80832bc:	f7ff b8d6 	b.w	808246c <HAL_I2C_Begin>

080832c0 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80832c0:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80832c2:	2400      	movs	r4, #0
 80832c4:	7c00      	ldrb	r0, [r0, #16]
 80832c6:	9400      	str	r4, [sp, #0]
 80832c8:	f7ff f8d8 	bl	808247c <HAL_I2C_Request_Data>
  return result;
}
 80832cc:	b2c0      	uxtb	r0, r0
 80832ce:	b002      	add	sp, #8
 80832d0:	bd10      	pop	{r4, pc}

080832d2 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80832d2:	2301      	movs	r3, #1
 80832d4:	f7ff bff4 	b.w	80832c0 <_ZN7TwoWire11requestFromEhhh>

080832d8 <_ZN7TwoWire11requestFromEiii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
 80832d8:	b2db      	uxtb	r3, r3
 80832da:	b2d2      	uxtb	r2, r2
 80832dc:	b2c9      	uxtb	r1, r1
 80832de:	f7ff bfef 	b.w	80832c0 <_ZN7TwoWire11requestFromEhhh>

080832e2 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80832e2:	2200      	movs	r2, #0
 80832e4:	7c00      	ldrb	r0, [r0, #16]
 80832e6:	f7ff b8d1 	b.w	808248c <HAL_I2C_Begin_Transmission>

080832ea <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80832ea:	b2c9      	uxtb	r1, r1
 80832ec:	f7ff bff9 	b.w	80832e2 <_ZN7TwoWire17beginTransmissionEh>

080832f0 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80832f0:	2200      	movs	r2, #0
 80832f2:	7c00      	ldrb	r0, [r0, #16]
 80832f4:	f7ff b8d2 	b.w	808249c <HAL_I2C_End_Transmission>

080832f8 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80832f8:	2101      	movs	r1, #1
 80832fa:	f7ff bff9 	b.w	80832f0 <_ZN7TwoWire15endTransmissionEh>

080832fe <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80832fe:	2100      	movs	r1, #0
 8083300:	7c00      	ldrb	r0, [r0, #16]
 8083302:	f7ff b8fb 	b.w	80824fc <HAL_I2C_Is_Enabled>

08083306 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 8083306:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 8083308:	2100      	movs	r1, #0
 808330a:	7c00      	ldrb	r0, [r0, #16]
 808330c:	f7ff f906 	bl	808251c <HAL_I2C_Acquire>
}
 8083310:	fab0 f080 	clz	r0, r0
 8083314:	0940      	lsrs	r0, r0, #5
 8083316:	bd08      	pop	{r3, pc}

08083318 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 8083318:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 808331a:	2100      	movs	r1, #0
 808331c:	7c00      	ldrb	r0, [r0, #16]
 808331e:	f7ff f905 	bl	808252c <HAL_I2C_Release>
}
 8083322:	fab0 f080 	clz	r0, r0
 8083326:	0940      	lsrs	r0, r0, #5
 8083328:	bd08      	pop	{r3, pc}

0808332a <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 808332a:	4700      	bx	r0

0808332c <_Z15attachInterrupttPFvvE13InterruptModeah>:
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
 808332c:	2807      	cmp	r0, #7
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 808332e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8083332:	4605      	mov	r5, r0
 8083334:	460f      	mov	r7, r1
 8083336:	4690      	mov	r8, r2
 8083338:	461e      	mov	r6, r3
 808333a:	f04f 0400 	mov.w	r4, #0
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
 808333e:	d019      	beq.n	8083374 <_Z15attachInterrupttPFvvE13InterruptModeah+0x48>
#endif
    HAL_Interrupts_Detach(pin);
 8083340:	f7ff f88c 	bl	808245c <HAL_Interrupts_Detach>
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 8083344:	42a6      	cmp	r6, r4
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8083346:	f04f 0304 	mov.w	r3, #4
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 808334a:	9403      	str	r4, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 808334c:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 8083350:	bfa2      	ittt	ge
 8083352:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    return &extra;
 8083356:	ac03      	addge	r4, sp, #12
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 8083358:	f88d 300e 	strbge.w	r3, [sp, #14]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 808335c:	4628      	mov	r0, r5
 808335e:	9400      	str	r4, [sp, #0]
 8083360:	4643      	mov	r3, r8
 8083362:	463a      	mov	r2, r7
 8083364:	4905      	ldr	r1, [pc, #20]	; (808337c <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 8083366:	bfa8      	it	ge
 8083368:	f88d 600d 	strbge.w	r6, [sp, #13]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 808336c:	f7ff f86e 	bl	808244c <HAL_Interrupts_Attach>
    return true;
 8083370:	2001      	movs	r0, #1
 8083372:	e000      	b.n	8083376 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4a>
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
 8083374:	4620      	mov	r0, r4
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
    return true;
}
 8083376:	b004      	add	sp, #16
 8083378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808337c:	0808332b 	.word	0x0808332b

08083380 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8083380:	4770      	bx	lr

08083382 <_ZN9IPAddressD0Ev>:
 8083382:	b510      	push	{r4, lr}
 8083384:	4604      	mov	r4, r0
 8083386:	f7fc fe8a 	bl	808009e <_ZdlPv>
 808338a:	4620      	mov	r0, r4
 808338c:	bd10      	pop	{r4, pc}

0808338e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 808338e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8083390:	460f      	mov	r7, r1
 8083392:	f100 0608 	add.w	r6, r0, #8
 8083396:	1d05      	adds	r5, r0, #4
 8083398:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808339a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 808339e:	220a      	movs	r2, #10
 80833a0:	4638      	mov	r0, r7
 80833a2:	f000 fabe 	bl	8083922 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80833a6:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80833a8:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80833aa:	d007      	beq.n	80833bc <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80833ac:	2c00      	cmp	r4, #0
 80833ae:	d0f4      	beq.n	808339a <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80833b0:	212e      	movs	r1, #46	; 0x2e
 80833b2:	4638      	mov	r0, r7
 80833b4:	f000 fa88 	bl	80838c8 <_ZN5Print5printEc>
 80833b8:	4404      	add	r4, r0
 80833ba:	e7ee      	b.n	808339a <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80833bc:	4620      	mov	r0, r4
 80833be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080833c0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80833c0:	4a02      	ldr	r2, [pc, #8]	; (80833cc <_ZN9IPAddressC1Ev+0xc>)
 80833c2:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80833c4:	2200      	movs	r2, #0
 80833c6:	6042      	str	r2, [r0, #4]
{
    clear();
}
 80833c8:	4770      	bx	lr
 80833ca:	bf00      	nop
 80833cc:	08087c50 	.word	0x08087c50

080833d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80833d0:	4a02      	ldr	r2, [pc, #8]	; (80833dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 80833d2:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 80833d4:	680a      	ldr	r2, [r1, #0]
 80833d6:	6042      	str	r2, [r0, #4]
}
 80833d8:	4770      	bx	lr
 80833da:	bf00      	nop
 80833dc:	08087c50 	.word	0x08087c50

080833e0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80833e0:	4a01      	ldr	r2, [pc, #4]	; (80833e8 <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80833e2:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80833e4:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 80833e6:	4770      	bx	lr
 80833e8:	08087c50 	.word	0x08087c50

080833ec <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80833ec:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80833ee:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80833f2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80833f6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80833fa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80833fe:	6041      	str	r1, [r0, #4]
 8083400:	bd10      	pop	{r4, pc}
	...

08083404 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8083404:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8083406:	4d04      	ldr	r5, [pc, #16]	; (8083418 <_ZN9IPAddressC1Ehhhh+0x14>)
 8083408:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 808340a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 808340e:	9500      	str	r5, [sp, #0]
 8083410:	f7ff ffec 	bl	80833ec <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8083414:	b003      	add	sp, #12
 8083416:	bd30      	pop	{r4, r5, pc}
 8083418:	08087c50 	.word	0x08087c50

0808341c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 808341c:	4a01      	ldr	r2, [pc, #4]	; (8083424 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 808341e:	4b02      	ldr	r3, [pc, #8]	; (8083428 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8083420:	601a      	str	r2, [r3, #0]
 8083422:	4770      	bx	lr
 8083424:	08087d11 	.word	0x08087d11
 8083428:	20000710 	.word	0x20000710

0808342c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 808342c:	2300      	movs	r3, #0
 808342e:	461a      	mov	r2, r3
 8083430:	6840      	ldr	r0, [r0, #4]
 8083432:	f7ff b9df 	b.w	80827f4 <network_connect>

08083436 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8083436:	2200      	movs	r2, #0
 8083438:	2102      	movs	r1, #2
 808343a:	6840      	ldr	r0, [r0, #4]
 808343c:	f7ff b9ea 	b.w	8082814 <network_disconnect>

08083440 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8083440:	2200      	movs	r2, #0
 8083442:	4611      	mov	r1, r2
 8083444:	6840      	ldr	r0, [r0, #4]
 8083446:	f7ff b9dd 	b.w	8082804 <network_connecting>

0808344a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 808344a:	2200      	movs	r2, #0
 808344c:	4611      	mov	r1, r2
 808344e:	6840      	ldr	r0, [r0, #4]
 8083450:	f7ff b9e8 	b.w	8082824 <network_ready>

08083454 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8083454:	2300      	movs	r3, #0
 8083456:	461a      	mov	r2, r3
 8083458:	4619      	mov	r1, r3
 808345a:	6840      	ldr	r0, [r0, #4]
 808345c:	f7ff b9ea 	b.w	8082834 <network_on>

08083460 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8083460:	2300      	movs	r3, #0
 8083462:	461a      	mov	r2, r3
 8083464:	4619      	mov	r1, r3
 8083466:	6840      	ldr	r0, [r0, #4]
 8083468:	f7ff b9ec 	b.w	8082844 <network_off>

0808346c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 808346c:	2200      	movs	r2, #0
 808346e:	f081 0101 	eor.w	r1, r1, #1
 8083472:	6840      	ldr	r0, [r0, #4]
 8083474:	f7ff b9ee 	b.w	8082854 <network_listen>

08083478 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8083478:	2200      	movs	r2, #0
 808347a:	6840      	ldr	r0, [r0, #4]
 808347c:	f7ff b9fa 	b.w	8082874 <network_set_listen_timeout>

08083480 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8083480:	2200      	movs	r2, #0
 8083482:	4611      	mov	r1, r2
 8083484:	6840      	ldr	r0, [r0, #4]
 8083486:	f7ff b9fd 	b.w	8082884 <network_get_listen_timeout>

0808348a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 808348a:	2200      	movs	r2, #0
 808348c:	4611      	mov	r1, r2
 808348e:	6840      	ldr	r0, [r0, #4]
 8083490:	f7ff b9e8 	b.w	8082864 <network_listening>

08083494 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8083494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8083496:	4617      	mov	r7, r2
 8083498:	b087      	sub	sp, #28
 808349a:	4605      	mov	r5, r0
    IPAddress addr;
 808349c:	a804      	add	r0, sp, #16
 808349e:	f7ff ff8f 	bl	80833c0 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 80834a2:	2600      	movs	r6, #0
 80834a4:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80834a6:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 80834a8:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80834ac:	f003 fd0f 	bl	8086ece <strlen>
 80834b0:	4b0a      	ldr	r3, [pc, #40]	; (80834dc <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 80834b2:	9600      	str	r6, [sp, #0]
 80834b4:	b281      	uxth	r1, r0
 80834b6:	685b      	ldr	r3, [r3, #4]
 80834b8:	4622      	mov	r2, r4
 80834ba:	4638      	mov	r0, r7
 80834bc:	f7fe ff16 	bl	80822ec <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80834c0:	b120      	cbz	r0, 80834cc <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 80834c2:	4631      	mov	r1, r6
 80834c4:	4628      	mov	r0, r5
 80834c6:	f7ff ff8b 	bl	80833e0 <_ZN9IPAddressC1Em>
 80834ca:	e003      	b.n	80834d4 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80834cc:	4621      	mov	r1, r4
 80834ce:	4628      	mov	r0, r5
 80834d0:	f7ff ff7e 	bl	80833d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80834d4:	4628      	mov	r0, r5
 80834d6:	b007      	add	sp, #28
 80834d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80834da:	bf00      	nop
 80834dc:	200006b4 	.word	0x200006b4

080834e0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80834e0:	4b02      	ldr	r3, [pc, #8]	; (80834ec <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80834e2:	4a03      	ldr	r2, [pc, #12]	; (80834f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80834e4:	601a      	str	r2, [r3, #0]
 80834e6:	2200      	movs	r2, #0
 80834e8:	605a      	str	r2, [r3, #4]
 80834ea:	4770      	bx	lr
 80834ec:	20000714 	.word	0x20000714
 80834f0:	08087d44 	.word	0x08087d44

080834f4 <_ZN4PMIC5beginEv>:
 * Description    : Initializes the I2C for the PMIC module
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
 80834f4:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80834f6:	f000 fed3 	bl	80842a0 <_Z20__fetch_global_Wire3v>
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
 80834fa:	f7ff ff00 	bl	80832fe <_ZN7TwoWire9isEnabledEv>
 80834fe:	b918      	cbnz	r0, 8083508 <_ZN4PMIC5beginEv+0x14>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8083500:	f000 fece 	bl	80842a0 <_Z20__fetch_global_Wire3v>
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
 8083504:	f7ff fed6 	bl	80832b4 <_ZN7TwoWire5beginEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8083508:	f000 feca 	bl	80842a0 <_Z20__fetch_global_Wire3v>
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
}
 808350c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
 8083510:	f7ff bef5 	b.w	80832fe <_ZN7TwoWire9isEnabledEv>

08083514 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 8083514:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8083516:	f000 fec3 	bl	80842a0 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
 808351a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
 808351e:	f7ff bef2 	b.w	8083306 <_ZN7TwoWire4lockEv>

08083522 <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
 8083522:	b510      	push	{r4, lr}
 8083524:	4604      	mov	r4, r0
    lock_(_lock)
 8083526:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
 8083528:	b109      	cbz	r1, 808352e <_ZN4PMICC1Eb+0xc>
        lock();
 808352a:	f7ff fff3 	bl	8083514 <_ZN4PMIC4lockEv>
    }
}
 808352e:	4620      	mov	r0, r4
 8083530:	bd10      	pop	{r4, pc}

08083532 <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
 8083532:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8083534:	f000 feb4 	bl	80842a0 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
 8083538:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
 808353c:	f7ff beec 	b.w	8083318 <_ZN7TwoWire6unlockEv>

08083540 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8083540:	b510      	push	{r4, lr}
{
    if (lock_) {
 8083542:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8083544:	4604      	mov	r4, r0
{
    if (lock_) {
 8083546:	b10b      	cbz	r3, 808354c <_ZN4PMICD1Ev+0xc>
        unlock();
 8083548:	f7ff fff3 	bl	8083532 <_ZN4PMIC6unlockEv>
    }
}
 808354c:	4620      	mov	r0, r4
 808354e:	bd10      	pop	{r4, pc}

08083550 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 8083550:	b510      	push	{r4, lr}
 8083552:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 8083554:	6800      	ldr	r0, [r0, #0]
 8083556:	f7ff ffec 	bl	8083532 <_ZN4PMIC6unlockEv>
 808355a:	4620      	mov	r0, r4
 808355c:	bd10      	pop	{r4, pc}

0808355e <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
 808355e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8083560:	ac02      	add	r4, sp, #8
 8083562:	460d      	mov	r5, r1
 8083564:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8083568:	f7ff ffd4 	bl	8083514 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808356c:	f000 fe98 	bl	80842a0 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 8083570:	216b      	movs	r1, #107	; 0x6b
 8083572:	f7ff feba 	bl	80832ea <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8083576:	f000 fe93 	bl	80842a0 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
 808357a:	6803      	ldr	r3, [r0, #0]
 808357c:	4629      	mov	r1, r5
 808357e:	689b      	ldr	r3, [r3, #8]
 8083580:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8083582:	f000 fe8d 	bl	80842a0 <_Z20__fetch_global_Wire3v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
 8083586:	2101      	movs	r1, #1
 8083588:	f7ff feb2 	bl	80832f0 <_ZN7TwoWire15endTransmissionEh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808358c:	f000 fe88 	bl	80842a0 <_Z20__fetch_global_Wire3v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
 8083590:	2301      	movs	r3, #1
 8083592:	461a      	mov	r2, r3
 8083594:	216b      	movs	r1, #107	; 0x6b
 8083596:	f7ff fe9f 	bl	80832d8 <_ZN7TwoWire11requestFromEiii>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808359a:	f000 fe81 	bl	80842a0 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
 808359e:	6803      	ldr	r3, [r0, #0]
 80835a0:	695b      	ldr	r3, [r3, #20]
 80835a2:	4798      	blx	r3
 80835a4:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
 80835a6:	4620      	mov	r0, r4
 80835a8:	f7ff ffd2 	bl	8083550 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
 80835ac:	b2e8      	uxtb	r0, r5
 80835ae:	b003      	add	sp, #12
 80835b0:	bd30      	pop	{r4, r5, pc}

080835b2 <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
 80835b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80835b4:	ac02      	add	r4, sp, #8
 80835b6:	4615      	mov	r5, r2
 80835b8:	460e      	mov	r6, r1
 80835ba:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 80835be:	f7ff ffa9 	bl	8083514 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80835c2:	f000 fe6d 	bl	80842a0 <_Z20__fetch_global_Wire3v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 80835c6:	216b      	movs	r1, #107	; 0x6b
 80835c8:	f7ff fe8f 	bl	80832ea <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80835cc:	f000 fe68 	bl	80842a0 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
 80835d0:	6803      	ldr	r3, [r0, #0]
 80835d2:	4631      	mov	r1, r6
 80835d4:	689b      	ldr	r3, [r3, #8]
 80835d6:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80835d8:	f000 fe62 	bl	80842a0 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
 80835dc:	6803      	ldr	r3, [r0, #0]
 80835de:	4629      	mov	r1, r5
 80835e0:	689b      	ldr	r3, [r3, #8]
 80835e2:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80835e4:	f000 fe5c 	bl	80842a0 <_Z20__fetch_global_Wire3v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
 80835e8:	2101      	movs	r1, #1
 80835ea:	f7ff fe81 	bl	80832f0 <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
 80835ee:	4620      	mov	r0, r4
 80835f0:	f7ff ffae 	bl	8083550 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
 80835f4:	b002      	add	sp, #8
 80835f6:	bd70      	pop	{r4, r5, r6, pc}

080835f8 <_ZN4PMIC20setInputVoltageLimitEt>:
                    5000
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
 80835f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80835fa:	4604      	mov	r4, r0
 80835fc:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80835fe:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8083600:	f7ff ff88 	bl	8083514 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 8083604:	2100      	movs	r1, #0
 8083606:	4620      	mov	r0, r4
 8083608:	f7ff ffa9 	bl	808355e <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 808360c:	f241 1358 	movw	r3, #4440	; 0x1158
 8083610:	429d      	cmp	r5, r3
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;
 8083612:	f000 0287 	and.w	r2, r0, #135	; 0x87

    switch(voltage) {
 8083616:	d05b      	beq.n	80836d0 <_ZN4PMIC20setInputVoltageLimitEt+0xd8>
 8083618:	d820      	bhi.n	808365c <_ZN4PMIC20setInputVoltageLimitEt+0x64>
 808361a:	f241 0318 	movw	r3, #4120	; 0x1018
 808361e:	429d      	cmp	r5, r3
 8083620:	d04d      	beq.n	80836be <_ZN4PMIC20setInputVoltageLimitEt+0xc6>
 8083622:	d80c      	bhi.n	808363e <_ZN4PMIC20setInputVoltageLimitEt+0x46>
 8083624:	f640 7378 	movw	r3, #3960	; 0xf78
 8083628:	429d      	cmp	r5, r3
 808362a:	d042      	beq.n	80836b2 <_ZN4PMIC20setInputVoltageLimitEt+0xba>
 808362c:	f640 73c8 	movw	r3, #4040	; 0xfc8
 8083630:	429d      	cmp	r5, r3
 8083632:	d041      	beq.n	80836b8 <_ZN4PMIC20setInputVoltageLimitEt+0xc0>
 8083634:	f640 7328 	movw	r3, #3880	; 0xf28
 8083638:	429d      	cmp	r5, r3
 808363a:	d160      	bne.n	80836fe <_ZN4PMIC20setInputVoltageLimitEt+0x106>
 808363c:	e059      	b.n	80836f2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
 808363e:	f241 03b8 	movw	r3, #4280	; 0x10b8
 8083642:	429d      	cmp	r5, r3
 8083644:	d03e      	beq.n	80836c4 <_ZN4PMIC20setInputVoltageLimitEt+0xcc>
 8083646:	f241 1308 	movw	r3, #4360	; 0x1108
 808364a:	429d      	cmp	r5, r3
 808364c:	d03d      	beq.n	80836ca <_ZN4PMIC20setInputVoltageLimitEt+0xd2>
 808364e:	f241 0368 	movw	r3, #4200	; 0x1068
 8083652:	429d      	cmp	r5, r3
 8083654:	d153      	bne.n	80836fe <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
        break;

        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
 8083656:	f042 0220 	orr.w	r2, r2, #32
 808365a:	e04a      	b.n	80836f2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 808365c:	f241 2398 	movw	r3, #4760	; 0x1298
 8083660:	429d      	cmp	r5, r3
 8083662:	d03e      	beq.n	80836e2 <_ZN4PMIC20setInputVoltageLimitEt+0xea>
 8083664:	d80e      	bhi.n	8083684 <_ZN4PMIC20setInputVoltageLimitEt+0x8c>
 8083666:	f241 13f8 	movw	r3, #4600	; 0x11f8
 808366a:	429d      	cmp	r5, r3
 808366c:	d033      	beq.n	80836d6 <_ZN4PMIC20setInputVoltageLimitEt+0xde>
 808366e:	f241 2348 	movw	r3, #4680	; 0x1248
 8083672:	429d      	cmp	r5, r3
 8083674:	d032      	beq.n	80836dc <_ZN4PMIC20setInputVoltageLimitEt+0xe4>
 8083676:	f241 13a8 	movw	r3, #4520	; 0x11a8
 808367a:	429d      	cmp	r5, r3
 808367c:	d13f      	bne.n	80836fe <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
        break;

        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
 808367e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8083682:	e036      	b.n	80836f2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 8083684:	f241 3338 	movw	r3, #4920	; 0x1338
 8083688:	429d      	cmp	r5, r3
 808368a:	d02d      	beq.n	80836e8 <_ZN4PMIC20setInputVoltageLimitEt+0xf0>
 808368c:	d806      	bhi.n	808369c <_ZN4PMIC20setInputVoltageLimitEt+0xa4>
 808368e:	f241 23e8 	movw	r3, #4840	; 0x12e8
 8083692:	429d      	cmp	r5, r3
 8083694:	d133      	bne.n	80836fe <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
        break;

        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
 8083696:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 808369a:	e02a      	b.n	80836f2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 808369c:	f241 3388 	movw	r3, #5000	; 0x1388
 80836a0:	429d      	cmp	r5, r3
 80836a2:	d024      	beq.n	80836ee <_ZN4PMIC20setInputVoltageLimitEt+0xf6>
 80836a4:	f241 33d8 	movw	r3, #5080	; 0x13d8
 80836a8:	429d      	cmp	r5, r3
 80836aa:	d128      	bne.n	80836fe <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;

        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
 80836ac:	f042 0278 	orr.w	r2, r2, #120	; 0x78
 80836b0:	e01f      	b.n	80836f2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 3880:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 3960:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00001000));
 80836b2:	f042 0208 	orr.w	r2, r2, #8
 80836b6:	e01c      	b.n	80836f2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4040:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00010000));
 80836b8:	f042 0210 	orr.w	r2, r2, #16
 80836bc:	e019      	b.n	80836f2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
 80836be:	f042 0218 	orr.w	r2, r2, #24
 80836c2:	e016      	b.n	80836f2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
        break;

        case 4280:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00101000));
 80836c4:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 80836c8:	e013      	b.n	80836f2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4360:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00110000));
 80836ca:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80836ce:	e010      	b.n	80836f2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
 80836d0:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 80836d4:	e00d      	b.n	80836f2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
        break;

        case 4600:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01001000));
 80836d6:	f042 0248 	orr.w	r2, r2, #72	; 0x48
 80836da:	e00a      	b.n	80836f2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4680:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01010000));
 80836dc:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80836e0:	e007      	b.n	80836f2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
 80836e2:	f042 0258 	orr.w	r2, r2, #88	; 0x58
 80836e6:	e004      	b.n	80836f2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
        break;

        case 4920:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
 80836e8:	f042 0268 	orr.w	r2, r2, #104	; 0x68
 80836ec:	e001      	b.n	80836f2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
 80836ee:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80836f2:	4620      	mov	r0, r4
 80836f4:	2100      	movs	r1, #0
 80836f6:	f7ff ff5c 	bl	80835b2 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 80836fa:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;
 80836fc:	e000      	b.n	8083700 <_ZN4PMIC20setInputVoltageLimitEt+0x108>
        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
        break;

        default:
        return 0; // return error since the value passed didn't match
 80836fe:	2400      	movs	r4, #0
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 8083700:	a801      	add	r0, sp, #4
 8083702:	f7ff ff25 	bl	8083550 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 8083706:	4620      	mov	r0, r4
 8083708:	b003      	add	sp, #12
 808370a:	bd30      	pop	{r4, r5, pc}

0808370c <_ZN4PMIC20setInputCurrentLimitEt>:
 * Function Name  : setInputCurrentLimit
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
 808370c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808370e:	4604      	mov	r4, r0
 8083710:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8083712:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8083714:	f7ff fefe 	bl	8083514 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 8083718:	2100      	movs	r1, #0
 808371a:	4620      	mov	r0, r4
 808371c:	f7ff ff1f 	bl	808355e <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b11111000;

    switch (current) {
 8083720:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;
 8083724:	f000 02f8 	and.w	r2, r0, #248	; 0xf8

    switch (current) {
 8083728:	d023      	beq.n	8083772 <_ZN4PMIC20setInputCurrentLimitEt+0x66>
 808372a:	d807      	bhi.n	808373c <_ZN4PMIC20setInputCurrentLimitEt+0x30>
 808372c:	2d96      	cmp	r5, #150	; 0x96
 808372e:	d01a      	beq.n	8083766 <_ZN4PMIC20setInputCurrentLimitEt+0x5a>
 8083730:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 8083734:	d01a      	beq.n	808376c <_ZN4PMIC20setInputCurrentLimitEt+0x60>
 8083736:	2d64      	cmp	r5, #100	; 0x64
 8083738:	d129      	bne.n	808378e <_ZN4PMIC20setInputCurrentLimitEt+0x82>
 808373a:	e022      	b.n	8083782 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
 808373c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8083740:	429d      	cmp	r5, r3
 8083742:	d019      	beq.n	8083778 <_ZN4PMIC20setInputCurrentLimitEt+0x6c>
 8083744:	d805      	bhi.n	8083752 <_ZN4PMIC20setInputCurrentLimitEt+0x46>
 8083746:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 808374a:	d120      	bne.n	808378e <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
        break;

        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
 808374c:	f042 0204 	orr.w	r2, r2, #4
 8083750:	e017      	b.n	8083782 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;

    switch (current) {
 8083752:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8083756:	d012      	beq.n	808377e <_ZN4PMIC20setInputCurrentLimitEt+0x72>
 8083758:	f640 33b8 	movw	r3, #3000	; 0xbb8
 808375c:	429d      	cmp	r5, r3
 808375e:	d116      	bne.n	808378e <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;

        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
 8083760:	f042 0207 	orr.w	r2, r2, #7
 8083764:	e00d      	b.n	8083782 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 100:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 150:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000001));
 8083766:	f042 0201 	orr.w	r2, r2, #1
 808376a:	e00a      	b.n	8083782 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000010));
 808376c:	f042 0202 	orr.w	r2, r2, #2
 8083770:	e007      	b.n	8083782 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
 8083772:	f042 0203 	orr.w	r2, r2, #3
 8083776:	e004      	b.n	8083782 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
        break;

        case 1500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
 8083778:	f042 0205 	orr.w	r2, r2, #5
 808377c:	e001      	b.n	8083782 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
 808377e:	f042 0206 	orr.w	r2, r2, #6
 8083782:	4620      	mov	r0, r4
 8083784:	2100      	movs	r1, #0
 8083786:	f7ff ff14 	bl	80835b2 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 808378a:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;
 808378c:	e000      	b.n	8083790 <_ZN4PMIC20setInputCurrentLimitEt+0x84>
        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
        break;

        default:
        return 0; // return error since the value passed didn't match
 808378e:	2400      	movs	r4, #0
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);
 8083790:	a801      	add	r0, sp, #4
 8083792:	f7ff fedd 	bl	8083550 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 8083796:	4620      	mov	r0, r4
 8083798:	b003      	add	sp, #12
 808379a:	bd30      	pop	{r4, r5, pc}

0808379c <_ZN4PMIC16setChargeCurrentEbbbbbb>:
                    For example,
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
 808379c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808379e:	460c      	mov	r4, r1
 80837a0:	4617      	mov	r7, r2
 80837a2:	4605      	mov	r5, r0
 80837a4:	461e      	mov	r6, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80837a6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80837a8:	f7ff feb4 	bl	8083514 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte current = 0;
    if (bit7) current = current | 0b10000000;
 80837ac:	2c00      	cmp	r4, #0
 80837ae:	bf0c      	ite	eq
 80837b0:	2400      	moveq	r4, #0
 80837b2:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
 80837b4:	b117      	cbz	r7, 80837bc <_ZN4PMIC16setChargeCurrentEbbbbbb+0x20>
 80837b6:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 80837ba:	b2e4      	uxtb	r4, r4
    if (bit5) current = current | 0b00100000;
 80837bc:	b10e      	cbz	r6, 80837c2 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x26>
 80837be:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
 80837c2:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80837c6:	b10b      	cbz	r3, 80837cc <_ZN4PMIC16setChargeCurrentEbbbbbb+0x30>
 80837c8:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
 80837cc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80837d0:	b10b      	cbz	r3, 80837d6 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3a>
 80837d2:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
 80837d6:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80837da:	b10b      	cbz	r3, 80837e0 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x44>
 80837dc:	f044 0404 	orr.w	r4, r4, #4

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 80837e0:	2102      	movs	r1, #2
 80837e2:	4628      	mov	r0, r5
 80837e4:	f7ff febb 	bl	808355e <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
 80837e8:	f000 0201 	and.w	r2, r0, #1
 80837ec:	4322      	orrs	r2, r4
 80837ee:	2102      	movs	r1, #2
 80837f0:	4628      	mov	r0, r5
 80837f2:	f7ff fede 	bl	80835b2 <_ZN4PMIC13writeRegisterEhh>
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
    std::lock_guard<PMIC> l(*this);
 80837f6:	a801      	add	r0, sp, #4
 80837f8:	f7ff feaa 	bl	8083550 <_ZNSt10lock_guardI4PMICED1Ev>

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
    return 1;
}
 80837fc:	2001      	movs	r0, #1
 80837fe:	b003      	add	sp, #12
 8083800:	bdf0      	pop	{r4, r5, r6, r7, pc}

08083802 <_ZN4PMIC16setChargeVoltageEt>:
                    4208 is the default
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
 8083802:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8083804:	4604      	mov	r4, r0
 8083806:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8083808:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808380a:	f7ff fe83 	bl	8083514 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 808380e:	2104      	movs	r1, #4
 8083810:	4620      	mov	r0, r4
 8083812:	f7ff fea4 	bl	808355e <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b000000011;

    switch (voltage) {
 8083816:	f241 0310 	movw	r3, #4112	; 0x1010
 808381a:	429d      	cmp	r5, r3
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
    byte mask = DATA & 0b000000011;
 808381c:	f000 0203 	and.w	r2, r0, #3

    switch (voltage) {
 8083820:	d006      	beq.n	8083830 <_ZN4PMIC16setChargeVoltageEt+0x2e>
 8083822:	f241 0370 	movw	r3, #4208	; 0x1070
 8083826:	429d      	cmp	r5, r3
 8083828:	d10a      	bne.n	8083840 <_ZN4PMIC16setChargeVoltageEt+0x3e>
        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 808382a:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
 808382e:	e001      	b.n	8083834 <_ZN4PMIC16setChargeVoltageEt+0x32>
    byte mask = DATA & 0b000000011;

    switch (voltage) {

        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
 8083830:	f042 0298 	orr.w	r2, r2, #152	; 0x98
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 8083834:	4620      	mov	r0, r4
 8083836:	2104      	movs	r1, #4
 8083838:	f7ff febb 	bl	80835b2 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 808383c:	2401      	movs	r4, #1
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
        break;
 808383e:	e000      	b.n	8083842 <_ZN4PMIC16setChargeVoltageEt+0x40>

        default:
        return 0; // return error since the value passed didn't match
 8083840:	2400      	movs	r4, #0
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 8083842:	a801      	add	r0, sp, #4
 8083844:	f7ff fe84 	bl	8083550 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 8083848:	4620      	mov	r0, r4
 808384a:	b003      	add	sp, #12
 808384c:	bd30      	pop	{r4, r5, pc}

0808384e <_ZN4PMIC15disableWatchdogEv>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
bool PMIC::disableWatchdog(void) {
 808384e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8083850:	4605      	mov	r5, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8083852:	ac02      	add	r4, sp, #8
 8083854:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8083858:	f7ff fe5c 	bl	8083514 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_TIMER_CONTROL_REGISTER);
 808385c:	2105      	movs	r1, #5
 808385e:	4628      	mov	r0, r5
 8083860:	f7ff fe7d 	bl	808355e <_ZN4PMIC12readRegisterEh>
    writeRegister(CHARGE_TIMER_CONTROL_REGISTER, (DATA & 0b11001110));
 8083864:	2105      	movs	r1, #5
 8083866:	f000 02ce 	and.w	r2, r0, #206	; 0xce
 808386a:	4628      	mov	r0, r5
 808386c:	f7ff fea1 	bl	80835b2 <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
bool PMIC::disableWatchdog(void) {
    std::lock_guard<PMIC> l(*this);
 8083870:	4620      	mov	r0, r4
 8083872:	f7ff fe6d 	bl	8083550 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(CHARGE_TIMER_CONTROL_REGISTER);
    writeRegister(CHARGE_TIMER_CONTROL_REGISTER, (DATA & 0b11001110));
    return 1;
}
 8083876:	2001      	movs	r0, #1
 8083878:	b003      	add	sp, #12
 808387a:	bd30      	pop	{r4, r5, pc}

0808387c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 808387c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808387e:	4606      	mov	r6, r0
 8083880:	460d      	mov	r5, r1
 8083882:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8083884:	2400      	movs	r4, #0
  while (size--) {
 8083886:	42bd      	cmp	r5, r7
 8083888:	d00c      	beq.n	80838a4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 808388a:	6833      	ldr	r3, [r6, #0]
 808388c:	f815 1b01 	ldrb.w	r1, [r5], #1
 8083890:	689b      	ldr	r3, [r3, #8]
 8083892:	4630      	mov	r0, r6
 8083894:	4798      	blx	r3
     if (chunk>=0)
 8083896:	2800      	cmp	r0, #0
 8083898:	db01      	blt.n	808389e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 808389a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 808389c:	e7f3      	b.n	8083886 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 808389e:	2c00      	cmp	r4, #0
 80838a0:	bf08      	it	eq
 80838a2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80838a4:	4620      	mov	r0, r4
 80838a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080838a8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80838a8:	b570      	push	{r4, r5, r6, lr}
 80838aa:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80838ac:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80838ae:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80838b0:	b149      	cbz	r1, 80838c6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80838b2:	f003 fb0c 	bl	8086ece <strlen>
 80838b6:	682b      	ldr	r3, [r5, #0]
 80838b8:	4602      	mov	r2, r0
 80838ba:	4621      	mov	r1, r4
 80838bc:	4628      	mov	r0, r5
    }
 80838be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80838c2:	68db      	ldr	r3, [r3, #12]
 80838c4:	4718      	bx	r3
    }
 80838c6:	bd70      	pop	{r4, r5, r6, pc}

080838c8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80838c8:	6803      	ldr	r3, [r0, #0]
 80838ca:	689b      	ldr	r3, [r3, #8]
 80838cc:	4718      	bx	r3

080838ce <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80838ce:	2a01      	cmp	r2, #1
 80838d0:	bf98      	it	ls
 80838d2:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80838d4:	b530      	push	{r4, r5, lr}
 80838d6:	460b      	mov	r3, r1
 80838d8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80838da:	2100      	movs	r1, #0
 80838dc:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80838e0:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80838e4:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80838e8:	fb05 3312 	mls	r3, r5, r2, r3
 80838ec:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80838ee:	2b09      	cmp	r3, #9
 80838f0:	bf94      	ite	ls
 80838f2:	3330      	addls	r3, #48	; 0x30
 80838f4:	3337      	addhi	r3, #55	; 0x37
 80838f6:	b2db      	uxtb	r3, r3
 80838f8:	4621      	mov	r1, r4
 80838fa:	f804 3901 	strb.w	r3, [r4], #-1
 80838fe:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8083900:	2d00      	cmp	r5, #0
 8083902:	d1ef      	bne.n	80838e4 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8083904:	f7ff ffd0 	bl	80838a8 <_ZN5Print5writeEPKc>
}
 8083908:	b00b      	add	sp, #44	; 0x2c
 808390a:	bd30      	pop	{r4, r5, pc}

0808390c <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 808390c:	b410      	push	{r4}
  if (base == 0) return write(n);
 808390e:	b922      	cbnz	r2, 808391a <_ZN5Print5printEmi+0xe>
 8083910:	6803      	ldr	r3, [r0, #0]
 8083912:	b2c9      	uxtb	r1, r1
 8083914:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 8083916:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 8083918:	4718      	bx	r3
  else return printNumber(n, base);
 808391a:	b2d2      	uxtb	r2, r2
}
 808391c:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 808391e:	f7ff bfd6 	b.w	80838ce <_ZN5Print11printNumberEmh>

08083922 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 8083922:	f7ff bff3 	b.w	808390c <_ZN5Print5printEmi>

08083926 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8083926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808392a:	4607      	mov	r7, r0
 808392c:	460e      	mov	r6, r1
  if (base == 0) {
 808392e:	4615      	mov	r5, r2
 8083930:	b92a      	cbnz	r2, 808393e <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8083932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 8083936:	6803      	ldr	r3, [r0, #0]
 8083938:	b2c9      	uxtb	r1, r1
 808393a:	689b      	ldr	r3, [r3, #8]
 808393c:	4718      	bx	r3
  } else if (base == 10) {
 808393e:	2a0a      	cmp	r2, #10
 8083940:	d102      	bne.n	8083948 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 8083942:	2900      	cmp	r1, #0
 8083944:	da01      	bge.n	808394a <_ZN5Print5printEli+0x24>
 8083946:	e004      	b.n	8083952 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8083948:	b2d2      	uxtb	r2, r2
  }
}
 808394a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 808394e:	f7ff bfbe 	b.w	80838ce <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8083952:	212d      	movs	r1, #45	; 0x2d
 8083954:	f7ff ffb8 	bl	80838c8 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 8083958:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 808395a:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 808395c:	4271      	negs	r1, r6
 808395e:	4638      	mov	r0, r7
 8083960:	f7ff ffb5 	bl	80838ce <_ZN5Print11printNumberEmh>
 8083964:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8083966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808396a <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 808396a:	f7ff bfdc 	b.w	8083926 <_ZN5Print5printEli>

0808396e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 808396e:	b510      	push	{r4, lr}
 8083970:	4604      	mov	r4, r0
 8083972:	f7ff f92f 	bl	8082bd4 <_ZNSt14_Function_baseD1Ev>
 8083976:	4620      	mov	r0, r4
 8083978:	bd10      	pop	{r4, pc}
	...

0808397c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808397c:	4803      	ldr	r0, [pc, #12]	; (808398c <_GLOBAL__sub_I_RGB+0x10>)
 808397e:	2300      	movs	r3, #0
 8083980:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8083982:	4a03      	ldr	r2, [pc, #12]	; (8083990 <_GLOBAL__sub_I_RGB+0x14>)
 8083984:	4903      	ldr	r1, [pc, #12]	; (8083994 <_GLOBAL__sub_I_RGB+0x18>)
 8083986:	f000 bcf1 	b.w	808436c <__aeabi_atexit>
 808398a:	bf00      	nop
 808398c:	2000071c 	.word	0x2000071c
 8083990:	200004f8 	.word	0x200004f8
 8083994:	0808396f 	.word	0x0808396f

08083998 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8083998:	4770      	bx	lr

0808399a <_ZN8SPIClassD0Ev>:
 808399a:	b510      	push	{r4, lr}
 808399c:	4604      	mov	r4, r0
 808399e:	f7fc fb7e 	bl	808009e <_ZdlPv>
 80839a2:	4620      	mov	r0, r4
 80839a4:	bd10      	pop	{r4, pc}
	...

080839a8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80839a8:	b570      	push	{r4, r5, r6, lr}
 80839aa:	4604      	mov	r4, r0
 80839ac:	460e      	mov	r6, r1
 80839ae:	4b07      	ldr	r3, [pc, #28]	; (80839cc <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80839b0:	2500      	movs	r5, #0
 80839b2:	6003      	str	r3, [r0, #0]
 80839b4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80839b8:	f7fe fcb0 	bl	808231c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80839bc:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80839be:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80839c0:	f7fe fde4 	bl	808258c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80839c4:	60a5      	str	r5, [r4, #8]
}
 80839c6:	4620      	mov	r0, r4
 80839c8:	bd70      	pop	{r4, r5, r6, pc}
 80839ca:	bf00      	nop
 80839cc:	08087d78 	.word	0x08087d78

080839d0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80839d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80839d4:	7900      	ldrb	r0, [r0, #4]
 80839d6:	f7fe bdb1 	b.w	808253c <HAL_SPI_Begin>

080839da <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80839da:	7900      	ldrb	r0, [r0, #4]
 80839dc:	f7fe bdb6 	b.w	808254c <HAL_SPI_Set_Bit_Order>

080839e0 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 80839e0:	7900      	ldrb	r0, [r0, #4]
 80839e2:	f7fe bdbb 	b.w	808255c <HAL_SPI_Set_Data_Mode>

080839e6 <_ZN8SPIClass14endTransactionEv>:
        }
    }

    void lock() { os_mutex_lock(handle_); }
    bool trylock() { return os_mutex_trylock(handle_)==0; }
    void unlock() { os_mutex_unlock(handle_); }
 80839e6:	68c0      	ldr	r0, [r0, #12]
 80839e8:	f7fe bca0 	b.w	808232c <os_mutex_unlock>

080839ec <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80839ec:	4a05      	ldr	r2, [pc, #20]	; (8083a04 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 80839ee:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80839f0:	5c99      	ldrb	r1, [r3, r2]
 80839f2:	4281      	cmp	r1, r0
 80839f4:	d002      	beq.n	80839fc <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 80839f6:	3301      	adds	r3, #1
 80839f8:	2b08      	cmp	r3, #8
 80839fa:	d1f9      	bne.n	80839f0 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 80839fc:	1c58      	adds	r0, r3, #1
}
 80839fe:	b2c0      	uxtb	r0, r0
 8083a00:	4770      	bx	lr
 8083a02:	bf00      	nop
 8083a04:	08087d80 	.word	0x08087d80

08083a08 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 8083a08:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 8083a0a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 8083a0c:	6018      	str	r0, [r3, #0]
 8083a0e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 8083a10:	6818      	ldr	r0, [r3, #0]
 8083a12:	b2e5      	uxtb	r5, r4
 8083a14:	4288      	cmp	r0, r1
 8083a16:	d906      	bls.n	8083a26 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 8083a18:	3401      	adds	r4, #1
 8083a1a:	2c08      	cmp	r4, #8
 8083a1c:	d002      	beq.n	8083a24 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 8083a1e:	0840      	lsrs	r0, r0, #1
 8083a20:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 8083a22:	e7f5      	b.n	8083a10 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 8083a24:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 8083a26:	4b02      	ldr	r3, [pc, #8]	; (8083a30 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 8083a28:	5d5b      	ldrb	r3, [r3, r5]
 8083a2a:	7013      	strb	r3, [r2, #0]
 8083a2c:	bd30      	pop	{r4, r5, pc}
 8083a2e:	bf00      	nop
 8083a30:	08087d80 	.word	0x08087d80

08083a34 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 8083a34:	b570      	push	{r4, r5, r6, lr}
 8083a36:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 8083a38:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 8083a3c:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 8083a3e:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 8083a40:	2214      	movs	r2, #20
 8083a42:	2100      	movs	r1, #0
 8083a44:	a803      	add	r0, sp, #12
 8083a46:	f003 f9e4 	bl	8086e12 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 8083a4a:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 8083a4c:	a903      	add	r1, sp, #12
 8083a4e:	4630      	mov	r0, r6
 8083a50:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 8083a52:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 8083a56:	f7fe fda9 	bl	80825ac <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 8083a5a:	ab02      	add	r3, sp, #8
 8083a5c:	f10d 0207 	add.w	r2, sp, #7
 8083a60:	4629      	mov	r1, r5
 8083a62:	9804      	ldr	r0, [sp, #16]
 8083a64:	f7ff ffd0 	bl	8083a08 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 8083a68:	7920      	ldrb	r0, [r4, #4]
 8083a6a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8083a6e:	f7fe fd7d 	bl	808256c <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 8083a72:	9802      	ldr	r0, [sp, #8]
 8083a74:	b008      	add	sp, #32
 8083a76:	bd70      	pop	{r4, r5, r6, pc}

08083a78 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 8083a78:	b538      	push	{r3, r4, r5, lr}
 8083a7a:	4604      	mov	r4, r0
    if (dividerReference)
 8083a7c:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 8083a7e:	4608      	mov	r0, r1
    if (dividerReference)
 8083a80:	b14d      	cbz	r5, 8083a96 <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 8083a82:	f7ff ffb3 	bl	80839ec <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 8083a86:	2201      	movs	r2, #1
 8083a88:	fa25 f100 	lsr.w	r1, r5, r0
 8083a8c:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 8083a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 8083a92:	f7ff bfcf 	b.w	8083a34 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 8083a96:	7920      	ldrb	r0, [r4, #4]
    }
}
 8083a98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 8083a9c:	f7fe bd66 	b.w	808256c <HAL_SPI_Set_Clock_Divider>

08083aa0 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 8083aa0:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 8083aa2:	7900      	ldrb	r0, [r0, #4]
 8083aa4:	f7fe fd6a 	bl	808257c <HAL_SPI_Send_Receive_Data>
}
 8083aa8:	b2c0      	uxtb	r0, r0
 8083aaa:	bd08      	pop	{r3, pc}

08083aac <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 8083aac:	7900      	ldrb	r0, [r0, #4]
 8083aae:	f7fe bd75 	b.w	808259c <HAL_SPI_Is_Enabled>

08083ab2 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8083ab2:	b510      	push	{r4, lr}
 8083ab4:	4604      	mov	r4, r0
{
	free(buffer);
 8083ab6:	6800      	ldr	r0, [r0, #0]
 8083ab8:	f7fe fef4 	bl	80828a4 <free>
}
 8083abc:	4620      	mov	r0, r4
 8083abe:	bd10      	pop	{r4, pc}

08083ac0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8083ac0:	b510      	push	{r4, lr}
 8083ac2:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8083ac4:	6800      	ldr	r0, [r0, #0]
 8083ac6:	b108      	cbz	r0, 8083acc <_ZN6String10invalidateEv+0xc>
 8083ac8:	f7fe feec 	bl	80828a4 <free>
	buffer = NULL;
 8083acc:	2300      	movs	r3, #0
 8083ace:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8083ad0:	60a3      	str	r3, [r4, #8]
 8083ad2:	6063      	str	r3, [r4, #4]
 8083ad4:	bd10      	pop	{r4, pc}

08083ad6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8083ad6:	b538      	push	{r3, r4, r5, lr}
 8083ad8:	4604      	mov	r4, r0
 8083ada:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8083adc:	6800      	ldr	r0, [r0, #0]
 8083ade:	3101      	adds	r1, #1
 8083ae0:	f7fe fee8 	bl	80828b4 <realloc>
	if (newbuffer) {
 8083ae4:	b110      	cbz	r0, 8083aec <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8083ae6:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8083aea:	2001      	movs	r0, #1
	}
	return 0;
}
 8083aec:	bd38      	pop	{r3, r4, r5, pc}

08083aee <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8083aee:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8083af0:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8083af2:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8083af4:	b113      	cbz	r3, 8083afc <_ZN6String7reserveEj+0xe>
 8083af6:	6843      	ldr	r3, [r0, #4]
 8083af8:	428b      	cmp	r3, r1
 8083afa:	d207      	bcs.n	8083b0c <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 8083afc:	4620      	mov	r0, r4
 8083afe:	f7ff ffea 	bl	8083ad6 <_ZN6String12changeBufferEj>
 8083b02:	b120      	cbz	r0, 8083b0e <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8083b04:	68a3      	ldr	r3, [r4, #8]
 8083b06:	b90b      	cbnz	r3, 8083b0c <_ZN6String7reserveEj+0x1e>
 8083b08:	6822      	ldr	r2, [r4, #0]
 8083b0a:	7013      	strb	r3, [r2, #0]
 8083b0c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8083b0e:	bd10      	pop	{r4, pc}

08083b10 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8083b10:	b570      	push	{r4, r5, r6, lr}
 8083b12:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8083b14:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8083b16:	4604      	mov	r4, r0
 8083b18:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8083b1a:	f7ff ffe8 	bl	8083aee <_ZN6String7reserveEj>
 8083b1e:	b918      	cbnz	r0, 8083b28 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8083b20:	4620      	mov	r0, r4
 8083b22:	f7ff ffcd 	bl	8083ac0 <_ZN6String10invalidateEv>
		return *this;
 8083b26:	e009      	b.n	8083b3c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8083b28:	462a      	mov	r2, r5
 8083b2a:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 8083b2c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8083b2e:	6820      	ldr	r0, [r4, #0]
 8083b30:	f003 f964 	bl	8086dfc <memcpy>
	buffer[len] = 0;
 8083b34:	6822      	ldr	r2, [r4, #0]
 8083b36:	68a3      	ldr	r3, [r4, #8]
 8083b38:	2100      	movs	r1, #0
 8083b3a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 8083b3c:	4620      	mov	r0, r4
 8083b3e:	bd70      	pop	{r4, r5, r6, pc}

08083b40 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8083b40:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8083b42:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8083b44:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8083b46:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8083b48:	6043      	str	r3, [r0, #4]
	len = 0;
 8083b4a:	6083      	str	r3, [r0, #8]
	flags = 0;
 8083b4c:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 8083b4e:	460d      	mov	r5, r1
 8083b50:	b139      	cbz	r1, 8083b62 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8083b52:	4608      	mov	r0, r1
 8083b54:	f003 f9bb 	bl	8086ece <strlen>
 8083b58:	4629      	mov	r1, r5
 8083b5a:	4602      	mov	r2, r0
 8083b5c:	4620      	mov	r0, r4
 8083b5e:	f7ff ffd7 	bl	8083b10 <_ZN6String4copyEPKcj>
}
 8083b62:	4620      	mov	r0, r4
 8083b64:	bd38      	pop	{r3, r4, r5, pc}

08083b66 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8083b66:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8083b68:	b510      	push	{r4, lr}
 8083b6a:	460b      	mov	r3, r1
 8083b6c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8083b6e:	d007      	beq.n	8083b80 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8083b70:	6809      	ldr	r1, [r1, #0]
 8083b72:	b119      	cbz	r1, 8083b7c <_ZN6StringaSERKS_+0x16>
 8083b74:	689a      	ldr	r2, [r3, #8]
 8083b76:	f7ff ffcb 	bl	8083b10 <_ZN6String4copyEPKcj>
 8083b7a:	e001      	b.n	8083b80 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 8083b7c:	f7ff ffa0 	bl	8083ac0 <_ZN6String10invalidateEv>

	return *this;
}
 8083b80:	4620      	mov	r0, r4
 8083b82:	bd10      	pop	{r4, pc}

08083b84 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 8083b84:	b510      	push	{r4, lr}
 8083b86:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8083b88:	2300      	movs	r3, #0
 8083b8a:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8083b8c:	6043      	str	r3, [r0, #4]
	len = 0;
 8083b8e:	6083      	str	r3, [r0, #8]
	flags = 0;
 8083b90:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 8083b92:	f7ff ffe8 	bl	8083b66 <_ZN6StringaSERKS_>
}
 8083b96:	4620      	mov	r0, r4
 8083b98:	bd10      	pop	{r4, pc}

08083b9a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8083b9a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8083b9c:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8083b9e:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8083ba0:	b912      	cbnz	r2, 8083ba8 <_ZNK6String6equalsEPKc+0xe>
 8083ba2:	b919      	cbnz	r1, 8083bac <_ZNK6String6equalsEPKc+0x12>
 8083ba4:	2001      	movs	r0, #1
 8083ba6:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8083ba8:	b911      	cbnz	r1, 8083bb0 <_ZNK6String6equalsEPKc+0x16>
 8083baa:	6803      	ldr	r3, [r0, #0]
 8083bac:	7818      	ldrb	r0, [r3, #0]
 8083bae:	e002      	b.n	8083bb6 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 8083bb0:	6800      	ldr	r0, [r0, #0]
 8083bb2:	f003 f95f 	bl	8086e74 <strcmp>
 8083bb6:	fab0 f080 	clz	r0, r0
 8083bba:	0940      	lsrs	r0, r0, #5
}
 8083bbc:	bd08      	pop	{r3, pc}

08083bbe <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 8083bbe:	b570      	push	{r4, r5, r6, lr}
 8083bc0:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 8083bc2:	b19a      	cbz	r2, 8083bec <_ZNK6String8getBytesEPhjj+0x2e>
 8083bc4:	b191      	cbz	r1, 8083bec <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
 8083bc6:	6885      	ldr	r5, [r0, #8]
 8083bc8:	429d      	cmp	r5, r3
 8083bca:	d802      	bhi.n	8083bd2 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 8083bcc:	2300      	movs	r3, #0
 8083bce:	700b      	strb	r3, [r1, #0]
		return;
 8083bd0:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
 8083bd2:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
 8083bd4:	1aed      	subs	r5, r5, r3
 8083bd6:	42ac      	cmp	r4, r5
 8083bd8:	bf28      	it	cs
 8083bda:	462c      	movcs	r4, r5
	strncpy((char *)buf, buffer + index, n);
 8083bdc:	6801      	ldr	r1, [r0, #0]
 8083bde:	4622      	mov	r2, r4
 8083be0:	4419      	add	r1, r3
 8083be2:	4630      	mov	r0, r6
 8083be4:	f003 f990 	bl	8086f08 <strncpy>
	buf[n] = 0;
 8083be8:	2300      	movs	r3, #0
 8083bea:	5533      	strb	r3, [r6, r4]
 8083bec:	bd70      	pop	{r4, r5, r6, pc}

08083bee <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 8083bee:	4601      	mov	r1, r0
 8083bf0:	2200      	movs	r2, #0
 8083bf2:	208c      	movs	r0, #140	; 0x8c
 8083bf4:	f7fe bbaa 	b.w	808234c <HAL_Core_System_Reset_Ex>

08083bf8 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 8083bf8:	2000      	movs	r0, #0
 8083bfa:	f7ff bff8 	b.w	8083bee <_ZN11SystemClass5resetEm>
	...

08083c00 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 8083c00:	b510      	push	{r4, lr}
 8083c02:	4604      	mov	r4, r0
 8083c04:	4608      	mov	r0, r1
 8083c06:	4611      	mov	r1, r2
 8083c08:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 8083c0a:	2300      	movs	r3, #0
 8083c0c:	f7fe fd5e 	bl	80826cc <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
 8083c10:	4b06      	ldr	r3, [pc, #24]	; (8083c2c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
 8083c12:	2200      	movs	r2, #0
 8083c14:	701a      	strb	r2, [r3, #0]
 8083c16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8083c1a:	8058      	strh	r0, [r3, #2]
 8083c1c:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
 8083c1e:	681a      	ldr	r2, [r3, #0]
 8083c20:	889b      	ldrh	r3, [r3, #4]
 8083c22:	6022      	str	r2, [r4, #0]
 8083c24:	80a3      	strh	r3, [r4, #4]
}
 8083c26:	4620      	mov	r0, r4
 8083c28:	bd10      	pop	{r4, pc}
 8083c2a:	bf00      	nop
 8083c2c:	2000072c 	.word	0x2000072c

08083c30 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8083c30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8083c34:	4b03      	ldr	r3, [pc, #12]	; (8083c44 <_GLOBAL__sub_I_System+0x14>)
 8083c36:	2000      	movs	r0, #0
 8083c38:	7018      	strb	r0, [r3, #0]
 8083c3a:	8058      	strh	r0, [r3, #2]
 8083c3c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8083c3e:	f7fe bd35 	b.w	80826ac <set_system_mode>
 8083c42:	bf00      	nop
 8083c44:	2000072c 	.word	0x2000072c

08083c48 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8083c48:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 8083c4a:	4b14      	ldr	r3, [pc, #80]	; (8083c9c <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8083c4c:	4f14      	ldr	r7, [pc, #80]	; (8083ca0 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 8083c4e:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 8083c50:	4b14      	ldr	r3, [pc, #80]	; (8083ca4 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 8083c52:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 8083c54:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 8083c56:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 8083c58:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 8083c5a:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8083c5c:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8083c5e:	d01b      	beq.n	8083c98 <_ZL22Refresh_UnixTime_Cachel+0x50>
 8083c60:	a80a      	add	r0, sp, #40	; 0x28
 8083c62:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 8083c66:	f002 ffd1 	bl	8086c0c <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8083c6a:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8083c6c:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 8083c6e:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8083c70:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8083c74:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 8083c76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8083c78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8083c7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8083c7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8083c7e:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8083c82:	4c09      	ldr	r4, [pc, #36]	; (8083ca8 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8083c84:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8083c88:	ad01      	add	r5, sp, #4
 8083c8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8083c8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8083c8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8083c90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 8083c92:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8083c94:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 8083c98:	b00b      	add	sp, #44	; 0x2c
 8083c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083c9c:	20000764 	.word	0x20000764
 8083ca0:	20000760 	.word	0x20000760
 8083ca4:	2000075c 	.word	0x2000075c
 8083ca8:	20000734 	.word	0x20000734

08083cac <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 8083cac:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8083cae:	2000      	movs	r0, #0
 8083cb0:	f7fe fd90 	bl	80827d4 <spark_sync_time_pending>
 8083cb4:	b128      	cbz	r0, 8083cc2 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8083cb6:	f7fe fd6d 	bl	8082794 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8083cba:	f080 0001 	eor.w	r0, r0, #1
 8083cbe:	b2c0      	uxtb	r0, r0
 8083cc0:	bd08      	pop	{r3, pc}
 8083cc2:	2001      	movs	r0, #1
    }
 8083cc4:	bd08      	pop	{r3, pc}
	...

08083cc8 <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8083cc8:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8083cca:	4909      	ldr	r1, [pc, #36]	; (8083cf0 <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8083ccc:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8083cce:	f002 fd39 	bl	8086744 <__aeabi_fcmplt>
 8083cd2:	b960      	cbnz	r0, 8083cee <_ZN9TimeClass4zoneEf+0x26>
 8083cd4:	4907      	ldr	r1, [pc, #28]	; (8083cf4 <_ZN9TimeClass4zoneEf+0x2c>)
 8083cd6:	4620      	mov	r0, r4
 8083cd8:	f002 fd52 	bl	8086780 <__aeabi_fcmpgt>
 8083cdc:	b938      	cbnz	r0, 8083cee <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 8083cde:	4906      	ldr	r1, [pc, #24]	; (8083cf8 <_ZN9TimeClass4zoneEf+0x30>)
 8083ce0:	4620      	mov	r0, r4
 8083ce2:	f002 fb91 	bl	8086408 <__aeabi_fmul>
 8083ce6:	f002 fd55 	bl	8086794 <__aeabi_f2iz>
 8083cea:	4b04      	ldr	r3, [pc, #16]	; (8083cfc <_ZN9TimeClass4zoneEf+0x34>)
 8083cec:	6018      	str	r0, [r3, #0]
 8083cee:	bd10      	pop	{r4, pc}
 8083cf0:	c1400000 	.word	0xc1400000
 8083cf4:	41600000 	.word	0x41600000
 8083cf8:	45610000 	.word	0x45610000
 8083cfc:	20000764 	.word	0x20000764

08083d00 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8083d00:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 8083d02:	4b0e      	ldr	r3, [pc, #56]	; (8083d3c <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8083d04:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 8083d06:	681b      	ldr	r3, [r3, #0]
 8083d08:	a802      	add	r0, sp, #8
 8083d0a:	4419      	add	r1, r3
 8083d0c:	4b0c      	ldr	r3, [pc, #48]	; (8083d40 <_ZN9TimeClass7timeStrEl+0x40>)
 8083d0e:	681b      	ldr	r3, [r3, #0]
 8083d10:	4419      	add	r1, r3
 8083d12:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 8083d16:	f002 ff79 	bl	8086c0c <localtime>
        char* ascstr = asctime(calendar_time);
 8083d1a:	f002 ff29 	bl	8086b70 <asctime>
 8083d1e:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 8083d20:	f003 f8d5 	bl	8086ece <strlen>
        ascstr[len-1] = 0; // remove final newline
 8083d24:	2300      	movs	r3, #0
 8083d26:	4428      	add	r0, r5
 8083d28:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 8083d2c:	4629      	mov	r1, r5
 8083d2e:	4620      	mov	r0, r4
 8083d30:	f7ff ff06 	bl	8083b40 <_ZN6StringC1EPK19__FlashStringHelper>
}
 8083d34:	4620      	mov	r0, r4
 8083d36:	b003      	add	sp, #12
 8083d38:	bd30      	pop	{r4, r5, pc}
 8083d3a:	bf00      	nop
 8083d3c:	20000764 	.word	0x20000764
 8083d40:	2000075c 	.word	0x2000075c

08083d44 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 8083d44:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 8083d46:	2000      	movs	r0, #0
 8083d48:	f7fe fb48 	bl	80823dc <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 8083d4c:	4604      	mov	r4, r0
 8083d4e:	b968      	cbnz	r0, 8083d6c <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8083d50:	f7fe fca4 	bl	808269c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8083d54:	2801      	cmp	r0, #1
 8083d56:	d10b      	bne.n	8083d70 <_ZN9TimeClass7isValidEv+0x2c>
 8083d58:	4620      	mov	r0, r4
 8083d5a:	f7fe fcd7 	bl	808270c <system_thread_get_state>
 8083d5e:	b938      	cbnz	r0, 8083d70 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 8083d60:	f7ff ffa4 	bl	8083cac <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8083d64:	b930      	cbnz	r0, 8083d74 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 8083d66:	f7fe fcfd 	bl	8082764 <spark_process>
 8083d6a:	e7f9      	b.n	8083d60 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 8083d6c:	2001      	movs	r0, #1
 8083d6e:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 8083d70:	2000      	movs	r0, #0
 8083d72:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 8083d74:	f7ff ff9a 	bl	8083cac <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 8083d78:	2000      	movs	r0, #0
 8083d7a:	f7fe fb2f 	bl	80823dc <HAL_RTC_Time_Is_Valid>
 8083d7e:	3000      	adds	r0, #0
 8083d80:	bf18      	it	ne
 8083d82:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 8083d84:	bd10      	pop	{r4, pc}

08083d86 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 8083d86:	b508      	push	{r3, lr}
    (void)isValid();
 8083d88:	f7ff ffdc 	bl	8083d44 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 8083d8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 8083d90:	f7fe bafc 	b.w	808238c <HAL_RTC_Get_UnixTime>

08083d94 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 8083d94:	b508      	push	{r3, lr}
	return hour(now());
 8083d96:	f7ff fff6 	bl	8083d86 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8083d9a:	f7ff ff55 	bl	8083c48 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 8083d9e:	4b01      	ldr	r3, [pc, #4]	; (8083da4 <_ZN9TimeClass4hourEv+0x10>)
 8083da0:	6898      	ldr	r0, [r3, #8]
 8083da2:	bd08      	pop	{r3, pc}
 8083da4:	20000734 	.word	0x20000734

08083da8 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 8083da8:	b508      	push	{r3, lr}
	return minute(now());
 8083daa:	f7ff ffec 	bl	8083d86 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8083dae:	f7ff ff4b 	bl	8083c48 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 8083db2:	4b01      	ldr	r3, [pc, #4]	; (8083db8 <_ZN9TimeClass6minuteEv+0x10>)
 8083db4:	6858      	ldr	r0, [r3, #4]
 8083db6:	bd08      	pop	{r3, pc}
 8083db8:	20000734 	.word	0x20000734

08083dbc <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
 8083dbc:	b508      	push	{r3, lr}
	return day(now());
 8083dbe:	f7ff ffe2 	bl	8083d86 <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8083dc2:	f7ff ff41 	bl	8083c48 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
 8083dc6:	4b01      	ldr	r3, [pc, #4]	; (8083dcc <_ZN9TimeClass3dayEv+0x10>)
 8083dc8:	68d8      	ldr	r0, [r3, #12]
 8083dca:	bd08      	pop	{r3, pc}
 8083dcc:	20000734 	.word	0x20000734

08083dd0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8083dd0:	4b02      	ldr	r3, [pc, #8]	; (8083ddc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8083dd2:	681a      	ldr	r2, [r3, #0]
 8083dd4:	4b02      	ldr	r3, [pc, #8]	; (8083de0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8083dd6:	601a      	str	r2, [r3, #0]
 8083dd8:	4770      	bx	lr
 8083dda:	bf00      	nop
 8083ddc:	20000438 	.word	0x20000438
 8083de0:	20000758 	.word	0x20000758

08083de4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8083de4:	4770      	bx	lr

08083de6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8083de6:	7441      	strb	r1, [r0, #17]
 8083de8:	4770      	bx	lr

08083dea <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 8083dea:	7c00      	ldrb	r0, [r0, #16]
 8083dec:	f7fe bc1e 	b.w	808262c <HAL_USART_Available_Data_For_Write>

08083df0 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 8083df0:	7c00      	ldrb	r0, [r0, #16]
 8083df2:	f7fe bbf3 	b.w	80825dc <HAL_USART_Available_Data>

08083df6 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 8083df6:	7c00      	ldrb	r0, [r0, #16]
 8083df8:	f7fe bc00 	b.w	80825fc <HAL_USART_Peek_Data>

08083dfc <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 8083dfc:	7c00      	ldrb	r0, [r0, #16]
 8083dfe:	f7fe bbf5 	b.w	80825ec <HAL_USART_Read_Data>

08083e02 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 8083e02:	7c00      	ldrb	r0, [r0, #16]
 8083e04:	f7fe bc02 	b.w	808260c <HAL_USART_Flush_Data>

08083e08 <_ZN11USARTSerialD0Ev>:
 8083e08:	b510      	push	{r4, lr}
 8083e0a:	4604      	mov	r4, r0
 8083e0c:	f7fc f947 	bl	808009e <_ZdlPv>
 8083e10:	4620      	mov	r0, r4
 8083e12:	bd10      	pop	{r4, pc}

08083e14 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8083e14:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8083e16:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 8083e18:	4604      	mov	r4, r0
 8083e1a:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8083e1c:	b925      	cbnz	r5, 8083e28 <_ZN11USARTSerial5writeEh+0x14>
 8083e1e:	7c00      	ldrb	r0, [r0, #16]
 8083e20:	f7fe fc04 	bl	808262c <HAL_USART_Available_Data_For_Write>
 8083e24:	2800      	cmp	r0, #0
 8083e26:	dd05      	ble.n	8083e34 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8083e28:	4631      	mov	r1, r6
 8083e2a:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8083e2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8083e30:	f7fe bbcc 	b.w	80825cc <HAL_USART_Write_Data>
  }
  return 0;
}
 8083e34:	4628      	mov	r0, r5
 8083e36:	bd70      	pop	{r4, r5, r6, pc}

08083e38 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8083e38:	b510      	push	{r4, lr}
 8083e3a:	4604      	mov	r4, r0
 8083e3c:	4608      	mov	r0, r1
 8083e3e:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8083e40:	2200      	movs	r2, #0
 8083e42:	6062      	str	r2, [r4, #4]
 8083e44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8083e48:	60a2      	str	r2, [r4, #8]
 8083e4a:	4a05      	ldr	r2, [pc, #20]	; (8083e60 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8083e4c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8083e4e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8083e50:	2201      	movs	r2, #1
 8083e52:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8083e54:	461a      	mov	r2, r3
 8083e56:	f7fe fbb1 	bl	80825bc <HAL_USART_Init>
}
 8083e5a:	4620      	mov	r0, r4
 8083e5c:	bd10      	pop	{r4, pc}
 8083e5e:	bf00      	nop
 8083e60:	08087db8 	.word	0x08087db8

08083e64 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 8083e64:	7c00      	ldrb	r0, [r0, #16]
 8083e66:	f7fe bbd9 	b.w	808261c <HAL_USART_Is_Enabled>
	...

08083e6c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8083e6c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8083e6e:	4d0c      	ldr	r5, [pc, #48]	; (8083ea0 <_Z22__fetch_global_Serial1v+0x34>)
 8083e70:	6829      	ldr	r1, [r5, #0]
 8083e72:	f011 0401 	ands.w	r4, r1, #1
 8083e76:	d111      	bne.n	8083e9c <_Z22__fetch_global_Serial1v+0x30>
 8083e78:	4628      	mov	r0, r5
 8083e7a:	f7fc f912 	bl	80800a2 <__cxa_guard_acquire>
 8083e7e:	b168      	cbz	r0, 8083e9c <_Z22__fetch_global_Serial1v+0x30>
 8083e80:	4a08      	ldr	r2, [pc, #32]	; (8083ea4 <_Z22__fetch_global_Serial1v+0x38>)
 8083e82:	4621      	mov	r1, r4
 8083e84:	4b08      	ldr	r3, [pc, #32]	; (8083ea8 <_Z22__fetch_global_Serial1v+0x3c>)
 8083e86:	4809      	ldr	r0, [pc, #36]	; (8083eac <_Z22__fetch_global_Serial1v+0x40>)
 8083e88:	f7ff ffd6 	bl	8083e38 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8083e8c:	4628      	mov	r0, r5
 8083e8e:	f7fc f90d 	bl	80800ac <__cxa_guard_release>
 8083e92:	4a07      	ldr	r2, [pc, #28]	; (8083eb0 <_Z22__fetch_global_Serial1v+0x44>)
 8083e94:	4907      	ldr	r1, [pc, #28]	; (8083eb4 <_Z22__fetch_global_Serial1v+0x48>)
 8083e96:	4805      	ldr	r0, [pc, #20]	; (8083eac <_Z22__fetch_global_Serial1v+0x40>)
 8083e98:	f000 fa68 	bl	808436c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8083e9c:	4803      	ldr	r0, [pc, #12]	; (8083eac <_Z22__fetch_global_Serial1v+0x40>)
 8083e9e:	bd38      	pop	{r3, r4, r5, pc}
 8083ea0:	20000800 	.word	0x20000800
 8083ea4:	20000804 	.word	0x20000804
 8083ea8:	2000077c 	.word	0x2000077c
 8083eac:	20000768 	.word	0x20000768
 8083eb0:	200004f8 	.word	0x200004f8
 8083eb4:	08083de5 	.word	0x08083de5

08083eb8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8083eb8:	7441      	strb	r1, [r0, #17]
 8083eba:	4770      	bx	lr

08083ebc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8083ebc:	4770      	bx	lr

08083ebe <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 8083ebe:	2100      	movs	r1, #0
 8083ec0:	7c00      	ldrb	r0, [r0, #16]
 8083ec2:	f7fe bbd3 	b.w	808266c <HAL_USB_USART_Receive_Data>

08083ec6 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 8083ec6:	2101      	movs	r1, #1
 8083ec8:	7c00      	ldrb	r0, [r0, #16]
 8083eca:	f7fe bbcf 	b.w	808266c <HAL_USB_USART_Receive_Data>

08083ece <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 8083ece:	7c00      	ldrb	r0, [r0, #16]
 8083ed0:	f7fe bbc4 	b.w	808265c <HAL_USB_USART_Available_Data_For_Write>

08083ed4 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 8083ed4:	7c00      	ldrb	r0, [r0, #16]
 8083ed6:	f7fe bbb9 	b.w	808264c <HAL_USB_USART_Available_Data>

08083eda <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 8083eda:	b538      	push	{r3, r4, r5, lr}
 8083edc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8083ede:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 8083ee0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8083ee2:	f7fe fbbb 	bl	808265c <HAL_USB_USART_Available_Data_For_Write>
 8083ee6:	2800      	cmp	r0, #0
 8083ee8:	dc01      	bgt.n	8083eee <_ZN9USBSerial5writeEh+0x14>
 8083eea:	7c60      	ldrb	r0, [r4, #17]
 8083eec:	b120      	cbz	r0, 8083ef8 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 8083eee:	4629      	mov	r1, r5
 8083ef0:	7c20      	ldrb	r0, [r4, #16]
 8083ef2:	f7fe fbc3 	bl	808267c <HAL_USB_USART_Send_Data>
    return 1;
 8083ef6:	2001      	movs	r0, #1
  }
  return 0;
}
 8083ef8:	bd38      	pop	{r3, r4, r5, pc}

08083efa <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 8083efa:	7c00      	ldrb	r0, [r0, #16]
 8083efc:	f7fe bbc6 	b.w	808268c <HAL_USB_USART_Flush_Data>

08083f00 <_ZN9USBSerialD0Ev>:
 8083f00:	b510      	push	{r4, lr}
 8083f02:	4604      	mov	r4, r0
 8083f04:	f7fc f8cb 	bl	808009e <_ZdlPv>
 8083f08:	4620      	mov	r0, r4
 8083f0a:	bd10      	pop	{r4, pc}

08083f0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8083f0c:	b510      	push	{r4, lr}
 8083f0e:	4604      	mov	r4, r0
 8083f10:	2300      	movs	r3, #0
 8083f12:	6063      	str	r3, [r4, #4]
 8083f14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8083f18:	60a3      	str	r3, [r4, #8]
 8083f1a:	4b05      	ldr	r3, [pc, #20]	; (8083f30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8083f1c:	4608      	mov	r0, r1
 8083f1e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8083f20:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8083f22:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8083f24:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8083f26:	4611      	mov	r1, r2
 8083f28:	f7fe fb88 	bl	808263c <HAL_USB_USART_Init>
}
 8083f2c:	4620      	mov	r0, r4
 8083f2e:	bd10      	pop	{r4, pc}
 8083f30:	08087de8 	.word	0x08087de8

08083f34 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8083f34:	b510      	push	{r4, lr}
 8083f36:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8083f38:	2214      	movs	r2, #20
 8083f3a:	2100      	movs	r1, #0
 8083f3c:	f002 ff69 	bl	8086e12 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8083f40:	4b05      	ldr	r3, [pc, #20]	; (8083f58 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8083f42:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8083f44:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8083f46:	4b05      	ldr	r3, [pc, #20]	; (8083f5c <_Z19acquireSerialBufferv+0x28>)
 8083f48:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8083f4a:	f240 1301 	movw	r3, #257	; 0x101
 8083f4e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8083f50:	2381      	movs	r3, #129	; 0x81
 8083f52:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8083f54:	bd10      	pop	{r4, pc}
 8083f56:	bf00      	nop
 8083f58:	2000090d 	.word	0x2000090d
 8083f5c:	2000088c 	.word	0x2000088c

08083f60 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8083f60:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8083f62:	4d0e      	ldr	r5, [pc, #56]	; (8083f9c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8083f64:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8083f66:	a801      	add	r0, sp, #4
 8083f68:	f7ff ffe4 	bl	8083f34 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8083f6c:	6829      	ldr	r1, [r5, #0]
 8083f6e:	f011 0401 	ands.w	r4, r1, #1
 8083f72:	d110      	bne.n	8083f96 <_Z16_fetch_usbserialv+0x36>
 8083f74:	4628      	mov	r0, r5
 8083f76:	f7fc f894 	bl	80800a2 <__cxa_guard_acquire>
 8083f7a:	b160      	cbz	r0, 8083f96 <_Z16_fetch_usbserialv+0x36>
 8083f7c:	aa01      	add	r2, sp, #4
 8083f7e:	4621      	mov	r1, r4
 8083f80:	4807      	ldr	r0, [pc, #28]	; (8083fa0 <_Z16_fetch_usbserialv+0x40>)
 8083f82:	f7ff ffc3 	bl	8083f0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8083f86:	4628      	mov	r0, r5
 8083f88:	f7fc f890 	bl	80800ac <__cxa_guard_release>
 8083f8c:	4a05      	ldr	r2, [pc, #20]	; (8083fa4 <_Z16_fetch_usbserialv+0x44>)
 8083f8e:	4906      	ldr	r1, [pc, #24]	; (8083fa8 <_Z16_fetch_usbserialv+0x48>)
 8083f90:	4803      	ldr	r0, [pc, #12]	; (8083fa0 <_Z16_fetch_usbserialv+0x40>)
 8083f92:	f000 f9eb 	bl	808436c <__aeabi_atexit>
	return _usbserial;
}
 8083f96:	4802      	ldr	r0, [pc, #8]	; (8083fa0 <_Z16_fetch_usbserialv+0x40>)
 8083f98:	b007      	add	sp, #28
 8083f9a:	bd30      	pop	{r4, r5, pc}
 8083f9c:	20000888 	.word	0x20000888
 8083fa0:	20000a10 	.word	0x20000a10
 8083fa4:	200004f8 	.word	0x200004f8
 8083fa8:	08083ebd 	.word	0x08083ebd

08083fac <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8083fac:	b510      	push	{r4, lr}
 8083fae:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8083fb0:	2214      	movs	r2, #20
 8083fb2:	2100      	movs	r1, #0
 8083fb4:	f002 ff2d 	bl	8086e12 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8083fb8:	4b05      	ldr	r3, [pc, #20]	; (8083fd0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8083fba:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8083fbc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8083fbe:	4b05      	ldr	r3, [pc, #20]	; (8083fd4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8083fc0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8083fc2:	f240 1301 	movw	r3, #257	; 0x101
 8083fc6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8083fc8:	2381      	movs	r3, #129	; 0x81
 8083fca:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8083fcc:	bd10      	pop	{r4, pc}
 8083fce:	bf00      	nop
 8083fd0:	20000ac0 	.word	0x20000ac0
 8083fd4:	20000a28 	.word	0x20000a28

08083fd8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8083fd8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8083fda:	4c0e      	ldr	r4, [pc, #56]	; (8084014 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8083fdc:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8083fde:	a801      	add	r0, sp, #4
 8083fe0:	f7ff ffe4 	bl	8083fac <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8083fe4:	6823      	ldr	r3, [r4, #0]
 8083fe6:	07db      	lsls	r3, r3, #31
 8083fe8:	d410      	bmi.n	808400c <_Z17_fetch_usbserial1v+0x34>
 8083fea:	4620      	mov	r0, r4
 8083fec:	f7fc f859 	bl	80800a2 <__cxa_guard_acquire>
 8083ff0:	b160      	cbz	r0, 808400c <_Z17_fetch_usbserial1v+0x34>
 8083ff2:	aa01      	add	r2, sp, #4
 8083ff4:	2101      	movs	r1, #1
 8083ff6:	4808      	ldr	r0, [pc, #32]	; (8084018 <_Z17_fetch_usbserial1v+0x40>)
 8083ff8:	f7ff ff88 	bl	8083f0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8083ffc:	4620      	mov	r0, r4
 8083ffe:	f7fc f855 	bl	80800ac <__cxa_guard_release>
 8084002:	4a06      	ldr	r2, [pc, #24]	; (808401c <_Z17_fetch_usbserial1v+0x44>)
 8084004:	4906      	ldr	r1, [pc, #24]	; (8084020 <_Z17_fetch_usbserial1v+0x48>)
 8084006:	4804      	ldr	r0, [pc, #16]	; (8084018 <_Z17_fetch_usbserial1v+0x40>)
 8084008:	f000 f9b0 	bl	808436c <__aeabi_atexit>
  return _usbserial1;
}
 808400c:	4802      	ldr	r0, [pc, #8]	; (8084018 <_Z17_fetch_usbserial1v+0x40>)
 808400e:	b006      	add	sp, #24
 8084010:	bd10      	pop	{r4, pc}
 8084012:	bf00      	nop
 8084014:	20000a24 	.word	0x20000a24
 8084018:	20000aac 	.word	0x20000aac
 808401c:	200004f8 	.word	0x200004f8
 8084020:	08083ebd 	.word	0x08083ebd

08084024 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8084024:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8084026:	4b18      	ldr	r3, [pc, #96]	; (8084088 <serialEventRun+0x64>)
 8084028:	b133      	cbz	r3, 8084038 <serialEventRun+0x14>
 808402a:	f7ff ff99 	bl	8083f60 <_Z16_fetch_usbserialv>
 808402e:	6803      	ldr	r3, [r0, #0]
 8084030:	691b      	ldr	r3, [r3, #16]
 8084032:	4798      	blx	r3
 8084034:	2800      	cmp	r0, #0
 8084036:	dc1e      	bgt.n	8084076 <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8084038:	4b14      	ldr	r3, [pc, #80]	; (808408c <serialEventRun+0x68>)
 808403a:	b133      	cbz	r3, 808404a <serialEventRun+0x26>
 808403c:	f7ff ff16 	bl	8083e6c <_Z22__fetch_global_Serial1v>
 8084040:	6803      	ldr	r3, [r0, #0]
 8084042:	691b      	ldr	r3, [r3, #16]
 8084044:	4798      	blx	r3
 8084046:	2800      	cmp	r0, #0
 8084048:	dc18      	bgt.n	808407c <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 808404a:	4b11      	ldr	r3, [pc, #68]	; (8084090 <serialEventRun+0x6c>)
 808404c:	b10b      	cbz	r3, 8084052 <serialEventRun+0x2e>
 808404e:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8084052:	4b10      	ldr	r3, [pc, #64]	; (8084094 <serialEventRun+0x70>)
 8084054:	b10b      	cbz	r3, 808405a <serialEventRun+0x36>
 8084056:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 808405a:	4b0f      	ldr	r3, [pc, #60]	; (8084098 <serialEventRun+0x74>)
 808405c:	b10b      	cbz	r3, 8084062 <serialEventRun+0x3e>
 808405e:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8084062:	4b0e      	ldr	r3, [pc, #56]	; (808409c <serialEventRun+0x78>)
 8084064:	b17b      	cbz	r3, 8084086 <serialEventRun+0x62>
 8084066:	f7ff ffb7 	bl	8083fd8 <_Z17_fetch_usbserial1v>
 808406a:	6803      	ldr	r3, [r0, #0]
 808406c:	691b      	ldr	r3, [r3, #16]
 808406e:	4798      	blx	r3
 8084070:	2800      	cmp	r0, #0
 8084072:	dc06      	bgt.n	8084082 <serialEventRun+0x5e>
 8084074:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8084076:	f3af 8000 	nop.w
 808407a:	e7dd      	b.n	8084038 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 808407c:	f3af 8000 	nop.w
 8084080:	e7e3      	b.n	808404a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8084082:	f3af 8000 	nop.w
 8084086:	bd08      	pop	{r3, pc}
	...

080840a0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80840a0:	b508      	push	{r3, lr}
	serialEventRun();
 80840a2:	f7ff ffbf 	bl	8084024 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80840a6:	f7fe f969 	bl	808237c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80840aa:	4b01      	ldr	r3, [pc, #4]	; (80840b0 <_post_loop+0x10>)
 80840ac:	6018      	str	r0, [r3, #0]
 80840ae:	bd08      	pop	{r3, pc}
 80840b0:	20000bcc 	.word	0x20000bcc

080840b4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80840b4:	4802      	ldr	r0, [pc, #8]	; (80840c0 <_Z33system_initialize_user_backup_ramv+0xc>)
 80840b6:	4a03      	ldr	r2, [pc, #12]	; (80840c4 <_Z33system_initialize_user_backup_ramv+0x10>)
 80840b8:	4903      	ldr	r1, [pc, #12]	; (80840c8 <_Z33system_initialize_user_backup_ramv+0x14>)
 80840ba:	1a12      	subs	r2, r2, r0
 80840bc:	f002 be9e 	b.w	8086dfc <memcpy>
 80840c0:	40024000 	.word	0x40024000
 80840c4:	40024004 	.word	0x40024004
 80840c8:	080880c8 	.word	0x080880c8

080840cc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80840cc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80840ce:	2300      	movs	r3, #0
 80840d0:	9300      	str	r3, [sp, #0]
 80840d2:	461a      	mov	r2, r3
 80840d4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80840d8:	f7fe fb2a 	bl	8082730 <system_ctrl_set_result>
}
 80840dc:	b003      	add	sp, #12
 80840de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080840e4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80840e4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80840e6:	8843      	ldrh	r3, [r0, #2]
 80840e8:	2b0a      	cmp	r3, #10
 80840ea:	d008      	beq.n	80840fe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80840ec:	2b50      	cmp	r3, #80	; 0x50
 80840ee:	d109      	bne.n	8084104 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80840f0:	4b09      	ldr	r3, [pc, #36]	; (8084118 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80840f2:	681b      	ldr	r3, [r3, #0]
 80840f4:	b13b      	cbz	r3, 8084106 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80840f6:	b003      	add	sp, #12
 80840f8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80840fc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80840fe:	f7ff ffe5 	bl	80840cc <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 8084102:	e006      	b.n	8084112 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8084104:	2300      	movs	r3, #0
 8084106:	9300      	str	r3, [sp, #0]
 8084108:	461a      	mov	r2, r3
 808410a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808410e:	f7fe fb0f 	bl	8082730 <system_ctrl_set_result>
        break;
    }
}
 8084112:	b003      	add	sp, #12
 8084114:	f85d fb04 	ldr.w	pc, [sp], #4
 8084118:	20000bc4 	.word	0x20000bc4

0808411c <module_user_init_hook>:

void module_user_init_hook()
{
 808411c:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 808411e:	4c10      	ldr	r4, [pc, #64]	; (8084160 <module_user_init_hook+0x44>)
 8084120:	4d10      	ldr	r5, [pc, #64]	; (8084164 <module_user_init_hook+0x48>)
 8084122:	6823      	ldr	r3, [r4, #0]
 8084124:	42ab      	cmp	r3, r5
 8084126:	4b10      	ldr	r3, [pc, #64]	; (8084168 <module_user_init_hook+0x4c>)
 8084128:	bf0c      	ite	eq
 808412a:	2201      	moveq	r2, #1
 808412c:	2200      	movne	r2, #0
 808412e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8084130:	d002      	beq.n	8084138 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 8084132:	f7ff ffbf 	bl	80840b4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8084136:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8084138:	f7fe f918 	bl	808236c <HAL_RNG_GetRandomNumber>
 808413c:	4604      	mov	r4, r0
    srand(seed);
 808413e:	f002 fe71 	bl	8086e24 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8084142:	4b0a      	ldr	r3, [pc, #40]	; (808416c <module_user_init_hook+0x50>)
 8084144:	b113      	cbz	r3, 808414c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 8084146:	4620      	mov	r0, r4
 8084148:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 808414c:	2100      	movs	r1, #0
 808414e:	4807      	ldr	r0, [pc, #28]	; (808416c <module_user_init_hook+0x50>)
 8084150:	f7fe fb48 	bl	80827e4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8084154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8084158:	2100      	movs	r1, #0
 808415a:	4805      	ldr	r0, [pc, #20]	; (8084170 <module_user_init_hook+0x54>)
 808415c:	f7fe bade 	b.w	808271c <system_ctrl_set_app_request_handler>
 8084160:	40024000 	.word	0x40024000
 8084164:	9a271c1e 	.word	0x9a271c1e
 8084168:	20000bc8 	.word	0x20000bc8
 808416c:	00000000 	.word	0x00000000
 8084170:	080840e5 	.word	0x080840e5

08084174 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 8084174:	b510      	push	{r4, lr}
 8084176:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8084178:	480f      	ldr	r0, [pc, #60]	; (80841b8 <pinAvailable+0x44>)
 808417a:	f7ff fc97 	bl	8083aac <_ZN8SPIClass9isEnabledEv>
 808417e:	b128      	cbz	r0, 808418c <pinAvailable+0x18>
 8084180:	f1a4 030d 	sub.w	r3, r4, #13
 8084184:	2b02      	cmp	r3, #2
 8084186:	d801      	bhi.n	808418c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 8084188:	2000      	movs	r0, #0
 808418a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 808418c:	f000 f868 	bl	8084260 <_Z19__fetch_global_Wirev>
 8084190:	f7ff f8b5 	bl	80832fe <_ZN7TwoWire9isEnabledEv>
 8084194:	b108      	cbz	r0, 808419a <pinAvailable+0x26>
 8084196:	2c01      	cmp	r4, #1
 8084198:	d9f6      	bls.n	8084188 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 808419a:	f7ff fe67 	bl	8083e6c <_Z22__fetch_global_Serial1v>
 808419e:	f7ff fe61 	bl	8083e64 <_ZN11USARTSerial9isEnabledEv>
 80841a2:	b118      	cbz	r0, 80841ac <pinAvailable+0x38>
 80841a4:	f1a4 0312 	sub.w	r3, r4, #18
 80841a8:	2b01      	cmp	r3, #1
 80841aa:	d9ed      	bls.n	8084188 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80841ac:	2c2e      	cmp	r4, #46	; 0x2e
 80841ae:	bf8c      	ite	hi
 80841b0:	2000      	movhi	r0, #0
 80841b2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80841b4:	bd10      	pop	{r4, pc}
 80841b6:	bf00      	nop
 80841b8:	20000c10 	.word	0x20000c10

080841bc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80841bc:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80841be:	b538      	push	{r3, r4, r5, lr}
 80841c0:	4604      	mov	r4, r0
 80841c2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80841c4:	d80a      	bhi.n	80841dc <pinMode+0x20>
 80841c6:	29ff      	cmp	r1, #255	; 0xff
 80841c8:	d008      	beq.n	80841dc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80841ca:	f7ff ffd3 	bl	8084174 <pinAvailable>
 80841ce:	b128      	cbz	r0, 80841dc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80841d0:	4629      	mov	r1, r5
 80841d2:	4620      	mov	r0, r4
}
 80841d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80841d8:	f7fe b918 	b.w	808240c <HAL_Pin_Mode>
 80841dc:	bd38      	pop	{r3, r4, r5, pc}

080841de <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80841de:	b538      	push	{r3, r4, r5, lr}
 80841e0:	4604      	mov	r4, r0
 80841e2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80841e4:	f7fe f91a 	bl	808241c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80841e8:	28ff      	cmp	r0, #255	; 0xff
 80841ea:	d010      	beq.n	808420e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80841ec:	2806      	cmp	r0, #6
 80841ee:	d804      	bhi.n	80841fa <digitalWrite+0x1c>
 80841f0:	234d      	movs	r3, #77	; 0x4d
 80841f2:	fa23 f000 	lsr.w	r0, r3, r0
 80841f6:	07c3      	lsls	r3, r0, #31
 80841f8:	d409      	bmi.n	808420e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80841fa:	4620      	mov	r0, r4
 80841fc:	f7ff ffba 	bl	8084174 <pinAvailable>
 8084200:	b128      	cbz	r0, 808420e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8084202:	4629      	mov	r1, r5
 8084204:	4620      	mov	r0, r4
}
 8084206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 808420a:	f7fe b90f 	b.w	808242c <HAL_GPIO_Write>
 808420e:	bd38      	pop	{r3, r4, r5, pc}

08084210 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 8084210:	b510      	push	{r4, lr}
 8084212:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8084214:	f7fe f902 	bl	808241c <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 8084218:	3804      	subs	r0, #4
 808421a:	b2c0      	uxtb	r0, r0
 808421c:	2801      	cmp	r0, #1
 808421e:	d908      	bls.n	8084232 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 8084220:	4620      	mov	r0, r4
 8084222:	f7ff ffa7 	bl	8084174 <pinAvailable>
 8084226:	b120      	cbz	r0, 8084232 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8084228:	4620      	mov	r0, r4
}
 808422a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 808422e:	f7fe b905 	b.w	808243c <HAL_GPIO_Read>
}
 8084232:	2000      	movs	r0, #0
 8084234:	bd10      	pop	{r4, pc}
	...

08084238 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 8084238:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 808423a:	4c07      	ldr	r4, [pc, #28]	; (8084258 <_Z21__fetch_global_EEPROMv+0x20>)
 808423c:	6823      	ldr	r3, [r4, #0]
 808423e:	07db      	lsls	r3, r3, #31
 8084240:	d408      	bmi.n	8084254 <_Z21__fetch_global_EEPROMv+0x1c>
 8084242:	4620      	mov	r0, r4
 8084244:	f7fb ff2d 	bl	80800a2 <__cxa_guard_acquire>
 8084248:	b120      	cbz	r0, 8084254 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 808424a:	f7fe f8a7 	bl	808239c <HAL_EEPROM_Init>
 808424e:	4620      	mov	r0, r4
 8084250:	f7fb ff2c 	bl	80800ac <__cxa_guard_release>
	return eeprom;
}
 8084254:	4801      	ldr	r0, [pc, #4]	; (808425c <_Z21__fetch_global_EEPROMv+0x24>)
 8084256:	bd10      	pop	{r4, pc}
 8084258:	20000bd0 	.word	0x20000bd0
 808425c:	20000bd4 	.word	0x20000bd4

08084260 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 8084260:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 8084262:	4d0b      	ldr	r5, [pc, #44]	; (8084290 <_Z19__fetch_global_Wirev+0x30>)
 8084264:	6829      	ldr	r1, [r5, #0]
 8084266:	f011 0401 	ands.w	r4, r1, #1
 808426a:	d10f      	bne.n	808428c <_Z19__fetch_global_Wirev+0x2c>
 808426c:	4628      	mov	r0, r5
 808426e:	f7fb ff18 	bl	80800a2 <__cxa_guard_acquire>
 8084272:	b158      	cbz	r0, 808428c <_Z19__fetch_global_Wirev+0x2c>
 8084274:	4621      	mov	r1, r4
 8084276:	4807      	ldr	r0, [pc, #28]	; (8084294 <_Z19__fetch_global_Wirev+0x34>)
 8084278:	f7ff f80a 	bl	8083290 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 808427c:	4628      	mov	r0, r5
 808427e:	f7fb ff15 	bl	80800ac <__cxa_guard_release>
 8084282:	4a05      	ldr	r2, [pc, #20]	; (8084298 <_Z19__fetch_global_Wirev+0x38>)
 8084284:	4905      	ldr	r1, [pc, #20]	; (808429c <_Z19__fetch_global_Wirev+0x3c>)
 8084286:	4803      	ldr	r0, [pc, #12]	; (8084294 <_Z19__fetch_global_Wirev+0x34>)
 8084288:	f000 f870 	bl	808436c <__aeabi_atexit>
	return wire;
}
 808428c:	4801      	ldr	r0, [pc, #4]	; (8084294 <_Z19__fetch_global_Wirev+0x34>)
 808428e:	bd38      	pop	{r3, r4, r5, pc}
 8084290:	20000bd8 	.word	0x20000bd8
 8084294:	20000bf0 	.word	0x20000bf0
 8084298:	200004f8 	.word	0x200004f8
 808429c:	08083239 	.word	0x08083239

080842a0 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 80842a0:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3);
 80842a2:	4c0b      	ldr	r4, [pc, #44]	; (80842d0 <_Z20__fetch_global_Wire3v+0x30>)
 80842a4:	6823      	ldr	r3, [r4, #0]
 80842a6:	07db      	lsls	r3, r3, #31
 80842a8:	d40f      	bmi.n	80842ca <_Z20__fetch_global_Wire3v+0x2a>
 80842aa:	4620      	mov	r0, r4
 80842ac:	f7fb fef9 	bl	80800a2 <__cxa_guard_acquire>
 80842b0:	b158      	cbz	r0, 80842ca <_Z20__fetch_global_Wire3v+0x2a>
 80842b2:	2102      	movs	r1, #2
 80842b4:	4807      	ldr	r0, [pc, #28]	; (80842d4 <_Z20__fetch_global_Wire3v+0x34>)
 80842b6:	f7fe ffeb 	bl	8083290 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80842ba:	4620      	mov	r0, r4
 80842bc:	f7fb fef6 	bl	80800ac <__cxa_guard_release>
 80842c0:	4a05      	ldr	r2, [pc, #20]	; (80842d8 <_Z20__fetch_global_Wire3v+0x38>)
 80842c2:	4906      	ldr	r1, [pc, #24]	; (80842dc <_Z20__fetch_global_Wire3v+0x3c>)
 80842c4:	4803      	ldr	r0, [pc, #12]	; (80842d4 <_Z20__fetch_global_Wire3v+0x34>)
 80842c6:	f000 f851 	bl	808436c <__aeabi_atexit>
	return wire;
}
 80842ca:	4802      	ldr	r0, [pc, #8]	; (80842d4 <_Z20__fetch_global_Wire3v+0x34>)
 80842cc:	bd10      	pop	{r4, pc}
 80842ce:	bf00      	nop
 80842d0:	20000c04 	.word	0x20000c04
 80842d4:	20000bdc 	.word	0x20000bdc
 80842d8:	200004f8 	.word	0x200004f8
 80842dc:	08083239 	.word	0x08083239

080842e0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80842e0:	b513      	push	{r0, r1, r4, lr}
 80842e2:	4c08      	ldr	r4, [pc, #32]	; (8084304 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80842e4:	2300      	movs	r3, #0
 80842e6:	461a      	mov	r2, r3
 80842e8:	4619      	mov	r1, r3
 80842ea:	9300      	str	r3, [sp, #0]
 80842ec:	4620      	mov	r0, r4
 80842ee:	f7ff f889 	bl	8083404 <_ZN9IPAddressC1Ehhhh>
 80842f2:	4620      	mov	r0, r4
 80842f4:	4a04      	ldr	r2, [pc, #16]	; (8084308 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80842f6:	4905      	ldr	r1, [pc, #20]	; (808430c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80842f8:	b002      	add	sp, #8
 80842fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80842fe:	f000 b835 	b.w	808436c <__aeabi_atexit>
 8084302:	bf00      	nop
 8084304:	20000c08 	.word	0x20000c08
 8084308:	200004f8 	.word	0x200004f8
 808430c:	08083381 	.word	0x08083381

08084310 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8084310:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8084312:	4e11      	ldr	r6, [pc, #68]	; (8084358 <_GLOBAL__sub_I_SPI+0x48>)
 8084314:	4d11      	ldr	r5, [pc, #68]	; (808435c <_GLOBAL__sub_I_SPI+0x4c>)
 8084316:	4c12      	ldr	r4, [pc, #72]	; (8084360 <_GLOBAL__sub_I_SPI+0x50>)
 8084318:	2100      	movs	r1, #0
 808431a:	4630      	mov	r0, r6
 808431c:	f7ff fb44 	bl	80839a8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8084320:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8084322:	4e10      	ldr	r6, [pc, #64]	; (8084364 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8084324:	462a      	mov	r2, r5
 8084326:	4621      	mov	r1, r4
 8084328:	f000 f820 	bl	808436c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808432c:	2101      	movs	r1, #1
 808432e:	4630      	mov	r0, r6
 8084330:	f7ff fb3a 	bl	80839a8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8084334:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8084336:	4e0c      	ldr	r6, [pc, #48]	; (8084368 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8084338:	462a      	mov	r2, r5
 808433a:	4621      	mov	r1, r4
 808433c:	f000 f816 	bl	808436c <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8084340:	2102      	movs	r1, #2
 8084342:	4630      	mov	r0, r6
 8084344:	f7ff fb30 	bl	80839a8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8084348:	462a      	mov	r2, r5
 808434a:	4621      	mov	r1, r4
 808434c:	4630      	mov	r0, r6
 808434e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8084352:	f000 b80b 	b.w	808436c <__aeabi_atexit>
 8084356:	bf00      	nop
 8084358:	20000c10 	.word	0x20000c10
 808435c:	200004f8 	.word	0x200004f8
 8084360:	08083999 	.word	0x08083999
 8084364:	20000c20 	.word	0x20000c20
 8084368:	20000c30 	.word	0x20000c30

0808436c <__aeabi_atexit>:
 808436c:	460b      	mov	r3, r1
 808436e:	4601      	mov	r1, r0
 8084370:	4618      	mov	r0, r3
 8084372:	f002 bc3d 	b.w	8086bf0 <__cxa_atexit>

08084376 <_ZSt25__throw_bad_function_callv>:
 8084376:	b508      	push	{r3, lr}
 8084378:	f7fe fabc 	bl	80828f4 <abort>

0808437c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 808437c:	4b24      	ldr	r3, [pc, #144]	; (8084410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 808437e:	681a      	ldr	r2, [r3, #0]
 8084380:	07d0      	lsls	r0, r2, #31
 8084382:	bf5c      	itt	pl
 8084384:	2201      	movpl	r2, #1
 8084386:	601a      	strpl	r2, [r3, #0]
 8084388:	4b22      	ldr	r3, [pc, #136]	; (8084414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 808438a:	681a      	ldr	r2, [r3, #0]
 808438c:	07d1      	lsls	r1, r2, #31
 808438e:	bf5c      	itt	pl
 8084390:	2201      	movpl	r2, #1
 8084392:	601a      	strpl	r2, [r3, #0]
 8084394:	4b20      	ldr	r3, [pc, #128]	; (8084418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8084396:	681a      	ldr	r2, [r3, #0]
 8084398:	07d2      	lsls	r2, r2, #31
 808439a:	bf5c      	itt	pl
 808439c:	2201      	movpl	r2, #1
 808439e:	601a      	strpl	r2, [r3, #0]
 80843a0:	4b1e      	ldr	r3, [pc, #120]	; (808441c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80843a2:	681a      	ldr	r2, [r3, #0]
 80843a4:	07d0      	lsls	r0, r2, #31
 80843a6:	bf5c      	itt	pl
 80843a8:	2201      	movpl	r2, #1
 80843aa:	601a      	strpl	r2, [r3, #0]
 80843ac:	4b1c      	ldr	r3, [pc, #112]	; (8084420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80843ae:	681a      	ldr	r2, [r3, #0]
 80843b0:	07d1      	lsls	r1, r2, #31
 80843b2:	bf5c      	itt	pl
 80843b4:	2201      	movpl	r2, #1
 80843b6:	601a      	strpl	r2, [r3, #0]
 80843b8:	4b1a      	ldr	r3, [pc, #104]	; (8084424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80843ba:	681a      	ldr	r2, [r3, #0]
 80843bc:	07d2      	lsls	r2, r2, #31
 80843be:	bf5c      	itt	pl
 80843c0:	2201      	movpl	r2, #1
 80843c2:	601a      	strpl	r2, [r3, #0]
 80843c4:	4b18      	ldr	r3, [pc, #96]	; (8084428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80843c6:	681a      	ldr	r2, [r3, #0]
 80843c8:	07d0      	lsls	r0, r2, #31
 80843ca:	bf5c      	itt	pl
 80843cc:	2201      	movpl	r2, #1
 80843ce:	601a      	strpl	r2, [r3, #0]
 80843d0:	4b16      	ldr	r3, [pc, #88]	; (808442c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80843d2:	681a      	ldr	r2, [r3, #0]
 80843d4:	07d1      	lsls	r1, r2, #31
 80843d6:	bf5c      	itt	pl
 80843d8:	2201      	movpl	r2, #1
 80843da:	601a      	strpl	r2, [r3, #0]
 80843dc:	4b14      	ldr	r3, [pc, #80]	; (8084430 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80843de:	681a      	ldr	r2, [r3, #0]
 80843e0:	07d2      	lsls	r2, r2, #31
 80843e2:	bf5c      	itt	pl
 80843e4:	2201      	movpl	r2, #1
 80843e6:	601a      	strpl	r2, [r3, #0]
 80843e8:	4b12      	ldr	r3, [pc, #72]	; (8084434 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80843ea:	681a      	ldr	r2, [r3, #0]
 80843ec:	07d0      	lsls	r0, r2, #31
 80843ee:	bf5c      	itt	pl
 80843f0:	2201      	movpl	r2, #1
 80843f2:	601a      	strpl	r2, [r3, #0]
 80843f4:	4b10      	ldr	r3, [pc, #64]	; (8084438 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80843f6:	681a      	ldr	r2, [r3, #0]
 80843f8:	07d1      	lsls	r1, r2, #31
 80843fa:	bf5c      	itt	pl
 80843fc:	2201      	movpl	r2, #1
 80843fe:	601a      	strpl	r2, [r3, #0]
 8084400:	4b0e      	ldr	r3, [pc, #56]	; (808443c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8084402:	681a      	ldr	r2, [r3, #0]
 8084404:	07d2      	lsls	r2, r2, #31
 8084406:	bf5c      	itt	pl
 8084408:	2201      	movpl	r2, #1
 808440a:	601a      	strpl	r2, [r3, #0]
 808440c:	4770      	bx	lr
 808440e:	bf00      	nop
 8084410:	20000c6c 	.word	0x20000c6c
 8084414:	20000c68 	.word	0x20000c68
 8084418:	20000c64 	.word	0x20000c64
 808441c:	20000c60 	.word	0x20000c60
 8084420:	20000c5c 	.word	0x20000c5c
 8084424:	20000c58 	.word	0x20000c58
 8084428:	20000c54 	.word	0x20000c54
 808442c:	20000c50 	.word	0x20000c50
 8084430:	20000c4c 	.word	0x20000c4c
 8084434:	20000c48 	.word	0x20000c48
 8084438:	20000c44 	.word	0x20000c44
 808443c:	20000c40 	.word	0x20000c40

08084440 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8084440:	4b18      	ldr	r3, [pc, #96]	; (80844a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8084442:	681a      	ldr	r2, [r3, #0]
 8084444:	07d1      	lsls	r1, r2, #31
 8084446:	bf5c      	itt	pl
 8084448:	2201      	movpl	r2, #1
 808444a:	601a      	strpl	r2, [r3, #0]
 808444c:	4b16      	ldr	r3, [pc, #88]	; (80844a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 808444e:	681a      	ldr	r2, [r3, #0]
 8084450:	07d2      	lsls	r2, r2, #31
 8084452:	bf5c      	itt	pl
 8084454:	2201      	movpl	r2, #1
 8084456:	601a      	strpl	r2, [r3, #0]
 8084458:	4b14      	ldr	r3, [pc, #80]	; (80844ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 808445a:	681a      	ldr	r2, [r3, #0]
 808445c:	07d0      	lsls	r0, r2, #31
 808445e:	bf5c      	itt	pl
 8084460:	2201      	movpl	r2, #1
 8084462:	601a      	strpl	r2, [r3, #0]
 8084464:	4b12      	ldr	r3, [pc, #72]	; (80844b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8084466:	681a      	ldr	r2, [r3, #0]
 8084468:	07d1      	lsls	r1, r2, #31
 808446a:	bf5c      	itt	pl
 808446c:	2201      	movpl	r2, #1
 808446e:	601a      	strpl	r2, [r3, #0]
 8084470:	4b10      	ldr	r3, [pc, #64]	; (80844b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8084472:	681a      	ldr	r2, [r3, #0]
 8084474:	07d2      	lsls	r2, r2, #31
 8084476:	bf5c      	itt	pl
 8084478:	2201      	movpl	r2, #1
 808447a:	601a      	strpl	r2, [r3, #0]
 808447c:	4b0e      	ldr	r3, [pc, #56]	; (80844b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808447e:	681a      	ldr	r2, [r3, #0]
 8084480:	07d0      	lsls	r0, r2, #31
 8084482:	bf5c      	itt	pl
 8084484:	2201      	movpl	r2, #1
 8084486:	601a      	strpl	r2, [r3, #0]
 8084488:	4b0c      	ldr	r3, [pc, #48]	; (80844bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 808448a:	681a      	ldr	r2, [r3, #0]
 808448c:	07d1      	lsls	r1, r2, #31
 808448e:	bf5c      	itt	pl
 8084490:	2201      	movpl	r2, #1
 8084492:	601a      	strpl	r2, [r3, #0]
 8084494:	4b0a      	ldr	r3, [pc, #40]	; (80844c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8084496:	681a      	ldr	r2, [r3, #0]
 8084498:	07d2      	lsls	r2, r2, #31
 808449a:	bf5c      	itt	pl
 808449c:	2201      	movpl	r2, #1
 808449e:	601a      	strpl	r2, [r3, #0]
 80844a0:	4770      	bx	lr
 80844a2:	bf00      	nop
 80844a4:	20000c8c 	.word	0x20000c8c
 80844a8:	20000c88 	.word	0x20000c88
 80844ac:	20000c84 	.word	0x20000c84
 80844b0:	20000c80 	.word	0x20000c80
 80844b4:	20000c7c 	.word	0x20000c7c
 80844b8:	20000c78 	.word	0x20000c78
 80844bc:	20000c74 	.word	0x20000c74
 80844c0:	20000c70 	.word	0x20000c70

080844c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80844c4:	4b18      	ldr	r3, [pc, #96]	; (8084528 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80844c6:	681a      	ldr	r2, [r3, #0]
 80844c8:	07d1      	lsls	r1, r2, #31
 80844ca:	bf5c      	itt	pl
 80844cc:	2201      	movpl	r2, #1
 80844ce:	601a      	strpl	r2, [r3, #0]
 80844d0:	4b16      	ldr	r3, [pc, #88]	; (808452c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80844d2:	681a      	ldr	r2, [r3, #0]
 80844d4:	07d2      	lsls	r2, r2, #31
 80844d6:	bf5c      	itt	pl
 80844d8:	2201      	movpl	r2, #1
 80844da:	601a      	strpl	r2, [r3, #0]
 80844dc:	4b14      	ldr	r3, [pc, #80]	; (8084530 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80844de:	681a      	ldr	r2, [r3, #0]
 80844e0:	07d0      	lsls	r0, r2, #31
 80844e2:	bf5c      	itt	pl
 80844e4:	2201      	movpl	r2, #1
 80844e6:	601a      	strpl	r2, [r3, #0]
 80844e8:	4b12      	ldr	r3, [pc, #72]	; (8084534 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80844ea:	681a      	ldr	r2, [r3, #0]
 80844ec:	07d1      	lsls	r1, r2, #31
 80844ee:	bf5c      	itt	pl
 80844f0:	2201      	movpl	r2, #1
 80844f2:	601a      	strpl	r2, [r3, #0]
 80844f4:	4b10      	ldr	r3, [pc, #64]	; (8084538 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80844f6:	681a      	ldr	r2, [r3, #0]
 80844f8:	07d2      	lsls	r2, r2, #31
 80844fa:	bf5c      	itt	pl
 80844fc:	2201      	movpl	r2, #1
 80844fe:	601a      	strpl	r2, [r3, #0]
 8084500:	4b0e      	ldr	r3, [pc, #56]	; (808453c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8084502:	681a      	ldr	r2, [r3, #0]
 8084504:	07d0      	lsls	r0, r2, #31
 8084506:	bf5c      	itt	pl
 8084508:	2201      	movpl	r2, #1
 808450a:	601a      	strpl	r2, [r3, #0]
 808450c:	4b0c      	ldr	r3, [pc, #48]	; (8084540 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 808450e:	681a      	ldr	r2, [r3, #0]
 8084510:	07d1      	lsls	r1, r2, #31
 8084512:	bf5c      	itt	pl
 8084514:	2201      	movpl	r2, #1
 8084516:	601a      	strpl	r2, [r3, #0]
 8084518:	4b0a      	ldr	r3, [pc, #40]	; (8084544 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 808451a:	681a      	ldr	r2, [r3, #0]
 808451c:	07d2      	lsls	r2, r2, #31
 808451e:	bf5c      	itt	pl
 8084520:	2201      	movpl	r2, #1
 8084522:	601a      	strpl	r2, [r3, #0]
 8084524:	4770      	bx	lr
 8084526:	bf00      	nop
 8084528:	20000cac 	.word	0x20000cac
 808452c:	20000ca8 	.word	0x20000ca8
 8084530:	20000ca4 	.word	0x20000ca4
 8084534:	20000ca0 	.word	0x20000ca0
 8084538:	20000c9c 	.word	0x20000c9c
 808453c:	20000c98 	.word	0x20000c98
 8084540:	20000c94 	.word	0x20000c94
 8084544:	20000c90 	.word	0x20000c90

08084548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8084548:	4b24      	ldr	r3, [pc, #144]	; (80845dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 808454a:	681a      	ldr	r2, [r3, #0]
 808454c:	07d0      	lsls	r0, r2, #31
 808454e:	bf5c      	itt	pl
 8084550:	2201      	movpl	r2, #1
 8084552:	601a      	strpl	r2, [r3, #0]
 8084554:	4b22      	ldr	r3, [pc, #136]	; (80845e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8084556:	681a      	ldr	r2, [r3, #0]
 8084558:	07d1      	lsls	r1, r2, #31
 808455a:	bf5c      	itt	pl
 808455c:	2201      	movpl	r2, #1
 808455e:	601a      	strpl	r2, [r3, #0]
 8084560:	4b20      	ldr	r3, [pc, #128]	; (80845e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8084562:	681a      	ldr	r2, [r3, #0]
 8084564:	07d2      	lsls	r2, r2, #31
 8084566:	bf5c      	itt	pl
 8084568:	2201      	movpl	r2, #1
 808456a:	601a      	strpl	r2, [r3, #0]
 808456c:	4b1e      	ldr	r3, [pc, #120]	; (80845e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 808456e:	681a      	ldr	r2, [r3, #0]
 8084570:	07d0      	lsls	r0, r2, #31
 8084572:	bf5c      	itt	pl
 8084574:	2201      	movpl	r2, #1
 8084576:	601a      	strpl	r2, [r3, #0]
 8084578:	4b1c      	ldr	r3, [pc, #112]	; (80845ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 808457a:	681a      	ldr	r2, [r3, #0]
 808457c:	07d1      	lsls	r1, r2, #31
 808457e:	bf5c      	itt	pl
 8084580:	2201      	movpl	r2, #1
 8084582:	601a      	strpl	r2, [r3, #0]
 8084584:	4b1a      	ldr	r3, [pc, #104]	; (80845f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8084586:	681a      	ldr	r2, [r3, #0]
 8084588:	07d2      	lsls	r2, r2, #31
 808458a:	bf5c      	itt	pl
 808458c:	2201      	movpl	r2, #1
 808458e:	601a      	strpl	r2, [r3, #0]
 8084590:	4b18      	ldr	r3, [pc, #96]	; (80845f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8084592:	681a      	ldr	r2, [r3, #0]
 8084594:	07d0      	lsls	r0, r2, #31
 8084596:	bf5c      	itt	pl
 8084598:	2201      	movpl	r2, #1
 808459a:	601a      	strpl	r2, [r3, #0]
 808459c:	4b16      	ldr	r3, [pc, #88]	; (80845f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 808459e:	681a      	ldr	r2, [r3, #0]
 80845a0:	07d1      	lsls	r1, r2, #31
 80845a2:	bf5c      	itt	pl
 80845a4:	2201      	movpl	r2, #1
 80845a6:	601a      	strpl	r2, [r3, #0]
 80845a8:	4b14      	ldr	r3, [pc, #80]	; (80845fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80845aa:	681a      	ldr	r2, [r3, #0]
 80845ac:	07d2      	lsls	r2, r2, #31
 80845ae:	bf5c      	itt	pl
 80845b0:	2201      	movpl	r2, #1
 80845b2:	601a      	strpl	r2, [r3, #0]
 80845b4:	4b12      	ldr	r3, [pc, #72]	; (8084600 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80845b6:	681a      	ldr	r2, [r3, #0]
 80845b8:	07d0      	lsls	r0, r2, #31
 80845ba:	bf5c      	itt	pl
 80845bc:	2201      	movpl	r2, #1
 80845be:	601a      	strpl	r2, [r3, #0]
 80845c0:	4b10      	ldr	r3, [pc, #64]	; (8084604 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80845c2:	681a      	ldr	r2, [r3, #0]
 80845c4:	07d1      	lsls	r1, r2, #31
 80845c6:	bf5c      	itt	pl
 80845c8:	2201      	movpl	r2, #1
 80845ca:	601a      	strpl	r2, [r3, #0]
 80845cc:	4b0e      	ldr	r3, [pc, #56]	; (8084608 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80845ce:	681a      	ldr	r2, [r3, #0]
 80845d0:	07d2      	lsls	r2, r2, #31
 80845d2:	bf5c      	itt	pl
 80845d4:	2201      	movpl	r2, #1
 80845d6:	601a      	strpl	r2, [r3, #0]
 80845d8:	4770      	bx	lr
 80845da:	bf00      	nop
 80845dc:	20000cdc 	.word	0x20000cdc
 80845e0:	20000cd8 	.word	0x20000cd8
 80845e4:	20000cd4 	.word	0x20000cd4
 80845e8:	20000cd0 	.word	0x20000cd0
 80845ec:	20000ccc 	.word	0x20000ccc
 80845f0:	20000cc8 	.word	0x20000cc8
 80845f4:	20000cc4 	.word	0x20000cc4
 80845f8:	20000cc0 	.word	0x20000cc0
 80845fc:	20000cbc 	.word	0x20000cbc
 8084600:	20000cb8 	.word	0x20000cb8
 8084604:	20000cb4 	.word	0x20000cb4
 8084608:	20000cb0 	.word	0x20000cb0

0808460c <pow>:
 808460c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084610:	b08d      	sub	sp, #52	; 0x34
 8084612:	4606      	mov	r6, r0
 8084614:	460f      	mov	r7, r1
 8084616:	4614      	mov	r4, r2
 8084618:	461d      	mov	r5, r3
 808461a:	f000 f9ed 	bl	80849f8 <__ieee754_pow>
 808461e:	f8df 9310 	ldr.w	r9, [pc, #784]	; 8084930 <pow+0x324>
 8084622:	e9cd 0100 	strd	r0, r1, [sp]
 8084626:	f999 8000 	ldrsb.w	r8, [r9]
 808462a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 808462e:	d046      	beq.n	80846be <pow+0xb2>
 8084630:	4622      	mov	r2, r4
 8084632:	462b      	mov	r3, r5
 8084634:	4620      	mov	r0, r4
 8084636:	4629      	mov	r1, r5
 8084638:	f001 fd72 	bl	8086120 <__aeabi_dcmpun>
 808463c:	4683      	mov	fp, r0
 808463e:	2800      	cmp	r0, #0
 8084640:	d13d      	bne.n	80846be <pow+0xb2>
 8084642:	4632      	mov	r2, r6
 8084644:	463b      	mov	r3, r7
 8084646:	4630      	mov	r0, r6
 8084648:	4639      	mov	r1, r7
 808464a:	f001 fd69 	bl	8086120 <__aeabi_dcmpun>
 808464e:	4682      	mov	sl, r0
 8084650:	2800      	cmp	r0, #0
 8084652:	d174      	bne.n	808473e <pow+0x132>
 8084654:	4630      	mov	r0, r6
 8084656:	4639      	mov	r1, r7
 8084658:	2200      	movs	r2, #0
 808465a:	2300      	movs	r3, #0
 808465c:	f001 fd2e 	bl	80860bc <__aeabi_dcmpeq>
 8084660:	2800      	cmp	r0, #0
 8084662:	d033      	beq.n	80846cc <pow+0xc0>
 8084664:	2200      	movs	r2, #0
 8084666:	2300      	movs	r3, #0
 8084668:	4620      	mov	r0, r4
 808466a:	4629      	mov	r1, r5
 808466c:	f001 fd26 	bl	80860bc <__aeabi_dcmpeq>
 8084670:	4683      	mov	fp, r0
 8084672:	b1b8      	cbz	r0, 80846a4 <pow+0x98>
 8084674:	4aa9      	ldr	r2, [pc, #676]	; (808491c <pow+0x310>)
 8084676:	2301      	movs	r3, #1
 8084678:	2000      	movs	r0, #0
 808467a:	2100      	movs	r1, #0
 808467c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8084680:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8084684:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8084688:	e9cd 0108 	strd	r0, r1, [sp, #32]
 808468c:	9203      	str	r2, [sp, #12]
 808468e:	9302      	str	r3, [sp, #8]
 8084690:	f1b8 0f00 	cmp.w	r8, #0
 8084694:	d06c      	beq.n	8084770 <pow+0x164>
 8084696:	4ba2      	ldr	r3, [pc, #648]	; (8084920 <pow+0x314>)
 8084698:	2200      	movs	r2, #0
 808469a:	4610      	mov	r0, r2
 808469c:	4619      	mov	r1, r3
 808469e:	b00d      	add	sp, #52	; 0x34
 80846a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80846a4:	4620      	mov	r0, r4
 80846a6:	4629      	mov	r1, r5
 80846a8:	f000 ffd0 	bl	808564c <finite>
 80846ac:	b138      	cbz	r0, 80846be <pow+0xb2>
 80846ae:	2200      	movs	r2, #0
 80846b0:	2300      	movs	r3, #0
 80846b2:	4620      	mov	r0, r4
 80846b4:	4629      	mov	r1, r5
 80846b6:	f001 fd0b 	bl	80860d0 <__aeabi_dcmplt>
 80846ba:	2800      	cmp	r0, #0
 80846bc:	d16a      	bne.n	8084794 <pow+0x188>
 80846be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80846c2:	4610      	mov	r0, r2
 80846c4:	4619      	mov	r1, r3
 80846c6:	b00d      	add	sp, #52	; 0x34
 80846c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80846cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80846d0:	f000 ffbc 	bl	808564c <finite>
 80846d4:	4680      	mov	r8, r0
 80846d6:	2800      	cmp	r0, #0
 80846d8:	d07d      	beq.n	80847d6 <pow+0x1ca>
 80846da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80846de:	f04f 0a00 	mov.w	sl, #0
 80846e2:	f04f 0b00 	mov.w	fp, #0
 80846e6:	4652      	mov	r2, sl
 80846e8:	465b      	mov	r3, fp
 80846ea:	f001 fce7 	bl	80860bc <__aeabi_dcmpeq>
 80846ee:	2800      	cmp	r0, #0
 80846f0:	d0e5      	beq.n	80846be <pow+0xb2>
 80846f2:	4630      	mov	r0, r6
 80846f4:	4639      	mov	r1, r7
 80846f6:	f000 ffa9 	bl	808564c <finite>
 80846fa:	2800      	cmp	r0, #0
 80846fc:	d0df      	beq.n	80846be <pow+0xb2>
 80846fe:	4620      	mov	r0, r4
 8084700:	4629      	mov	r1, r5
 8084702:	f000 ffa3 	bl	808564c <finite>
 8084706:	2800      	cmp	r0, #0
 8084708:	d0d9      	beq.n	80846be <pow+0xb2>
 808470a:	f999 3000 	ldrsb.w	r3, [r9]
 808470e:	4883      	ldr	r0, [pc, #524]	; (808491c <pow+0x310>)
 8084710:	2104      	movs	r1, #4
 8084712:	2200      	movs	r2, #0
 8084714:	2b02      	cmp	r3, #2
 8084716:	e9cd 6704 	strd	r6, r7, [sp, #16]
 808471a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 808471e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8084722:	9003      	str	r0, [sp, #12]
 8084724:	9102      	str	r1, [sp, #8]
 8084726:	920a      	str	r2, [sp, #40]	; 0x28
 8084728:	d004      	beq.n	8084734 <pow+0x128>
 808472a:	a802      	add	r0, sp, #8
 808472c:	f000 ff94 	bl	8085658 <matherr>
 8084730:	2800      	cmp	r0, #0
 8084732:	d147      	bne.n	80847c4 <pow+0x1b8>
 8084734:	f7fe f8ee 	bl	8082914 <__errno>
 8084738:	2322      	movs	r3, #34	; 0x22
 808473a:	6003      	str	r3, [r0, #0]
 808473c:	e042      	b.n	80847c4 <pow+0x1b8>
 808473e:	2200      	movs	r2, #0
 8084740:	2300      	movs	r3, #0
 8084742:	4620      	mov	r0, r4
 8084744:	4629      	mov	r1, r5
 8084746:	f001 fcb9 	bl	80860bc <__aeabi_dcmpeq>
 808474a:	2800      	cmp	r0, #0
 808474c:	d0b7      	beq.n	80846be <pow+0xb2>
 808474e:	4b74      	ldr	r3, [pc, #464]	; (8084920 <pow+0x314>)
 8084750:	4872      	ldr	r0, [pc, #456]	; (808491c <pow+0x310>)
 8084752:	2200      	movs	r2, #0
 8084754:	2101      	movs	r1, #1
 8084756:	f1b8 0f02 	cmp.w	r8, #2
 808475a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 808475e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8084762:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8084766:	e9cd 2308 	strd	r2, r3, [sp, #32]
 808476a:	9003      	str	r0, [sp, #12]
 808476c:	9102      	str	r1, [sp, #8]
 808476e:	d0a8      	beq.n	80846c2 <pow+0xb6>
 8084770:	a802      	add	r0, sp, #8
 8084772:	f000 ff71 	bl	8085658 <matherr>
 8084776:	2800      	cmp	r0, #0
 8084778:	d07e      	beq.n	8084878 <pow+0x26c>
 808477a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808477c:	b343      	cbz	r3, 80847d0 <pow+0x1c4>
 808477e:	f7fe f8c9 	bl	8082914 <__errno>
 8084782:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8084786:	990a      	ldr	r1, [sp, #40]	; 0x28
 8084788:	6001      	str	r1, [r0, #0]
 808478a:	4610      	mov	r0, r2
 808478c:	4619      	mov	r1, r3
 808478e:	b00d      	add	sp, #52	; 0x34
 8084790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084794:	4961      	ldr	r1, [pc, #388]	; (808491c <pow+0x310>)
 8084796:	f999 3000 	ldrsb.w	r3, [r9]
 808479a:	2201      	movs	r2, #1
 808479c:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80847a0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80847a4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80847a8:	9103      	str	r1, [sp, #12]
 80847aa:	9202      	str	r2, [sp, #8]
 80847ac:	2b00      	cmp	r3, #0
 80847ae:	d068      	beq.n	8084882 <pow+0x276>
 80847b0:	495c      	ldr	r1, [pc, #368]	; (8084924 <pow+0x318>)
 80847b2:	2000      	movs	r0, #0
 80847b4:	2b02      	cmp	r3, #2
 80847b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80847ba:	d166      	bne.n	808488a <pow+0x27e>
 80847bc:	f7fe f8aa 	bl	8082914 <__errno>
 80847c0:	2321      	movs	r3, #33	; 0x21
 80847c2:	6003      	str	r3, [r0, #0]
 80847c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80847c6:	b11b      	cbz	r3, 80847d0 <pow+0x1c4>
 80847c8:	f7fe f8a4 	bl	8082914 <__errno>
 80847cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80847ce:	6003      	str	r3, [r0, #0]
 80847d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80847d4:	e775      	b.n	80846c2 <pow+0xb6>
 80847d6:	4630      	mov	r0, r6
 80847d8:	4639      	mov	r1, r7
 80847da:	f000 ff37 	bl	808564c <finite>
 80847de:	2800      	cmp	r0, #0
 80847e0:	f43f af7b 	beq.w	80846da <pow+0xce>
 80847e4:	4620      	mov	r0, r4
 80847e6:	4629      	mov	r1, r5
 80847e8:	f000 ff30 	bl	808564c <finite>
 80847ec:	2800      	cmp	r0, #0
 80847ee:	f43f af74 	beq.w	80846da <pow+0xce>
 80847f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80847f6:	4610      	mov	r0, r2
 80847f8:	4619      	mov	r1, r3
 80847fa:	f001 fc91 	bl	8086120 <__aeabi_dcmpun>
 80847fe:	2800      	cmp	r0, #0
 8084800:	d16f      	bne.n	80848e2 <pow+0x2d6>
 8084802:	4b46      	ldr	r3, [pc, #280]	; (808491c <pow+0x310>)
 8084804:	f999 8000 	ldrsb.w	r8, [r9]
 8084808:	9303      	str	r3, [sp, #12]
 808480a:	2303      	movs	r3, #3
 808480c:	900a      	str	r0, [sp, #40]	; 0x28
 808480e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8084812:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8084816:	9302      	str	r3, [sp, #8]
 8084818:	f1b8 0f00 	cmp.w	r8, #0
 808481c:	d13b      	bne.n	8084896 <pow+0x28a>
 808481e:	f8df b114 	ldr.w	fp, [pc, #276]	; 8084934 <pow+0x328>
 8084822:	f04f 4a60 	mov.w	sl, #3758096384	; 0xe0000000
 8084826:	2200      	movs	r2, #0
 8084828:	2300      	movs	r3, #0
 808482a:	4630      	mov	r0, r6
 808482c:	4639      	mov	r1, r7
 808482e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8084832:	f001 fc4d 	bl	80860d0 <__aeabi_dcmplt>
 8084836:	2800      	cmp	r0, #0
 8084838:	f43f af77 	beq.w	808472a <pow+0x11e>
 808483c:	2200      	movs	r2, #0
 808483e:	4b3a      	ldr	r3, [pc, #232]	; (8084928 <pow+0x31c>)
 8084840:	4620      	mov	r0, r4
 8084842:	4629      	mov	r1, r5
 8084844:	f001 f9d2 	bl	8085bec <__aeabi_dmul>
 8084848:	4604      	mov	r4, r0
 808484a:	460d      	mov	r5, r1
 808484c:	f000 ff0c 	bl	8085668 <rint>
 8084850:	4602      	mov	r2, r0
 8084852:	460b      	mov	r3, r1
 8084854:	4620      	mov	r0, r4
 8084856:	4629      	mov	r1, r5
 8084858:	f001 fc30 	bl	80860bc <__aeabi_dcmpeq>
 808485c:	2800      	cmp	r0, #0
 808485e:	d13d      	bne.n	80848dc <pow+0x2d0>
 8084860:	4b32      	ldr	r3, [pc, #200]	; (808492c <pow+0x320>)
 8084862:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8084866:	e9cd 2308 	strd	r2, r3, [sp, #32]
 808486a:	f999 8000 	ldrsb.w	r8, [r9]
 808486e:	f1b8 0f02 	cmp.w	r8, #2
 8084872:	f47f af5a 	bne.w	808472a <pow+0x11e>
 8084876:	e75d      	b.n	8084734 <pow+0x128>
 8084878:	f7fe f84c 	bl	8082914 <__errno>
 808487c:	2321      	movs	r3, #33	; 0x21
 808487e:	6003      	str	r3, [r0, #0]
 8084880:	e77b      	b.n	808477a <pow+0x16e>
 8084882:	2300      	movs	r3, #0
 8084884:	2400      	movs	r4, #0
 8084886:	e9cd 3408 	strd	r3, r4, [sp, #32]
 808488a:	a802      	add	r0, sp, #8
 808488c:	f000 fee4 	bl	8085658 <matherr>
 8084890:	2800      	cmp	r0, #0
 8084892:	d197      	bne.n	80847c4 <pow+0x1b8>
 8084894:	e792      	b.n	80847bc <pow+0x1b0>
 8084896:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 8084938 <pow+0x32c>
 808489a:	f04f 0a00 	mov.w	sl, #0
 808489e:	2200      	movs	r2, #0
 80848a0:	2300      	movs	r3, #0
 80848a2:	4630      	mov	r0, r6
 80848a4:	4639      	mov	r1, r7
 80848a6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80848aa:	f001 fc11 	bl	80860d0 <__aeabi_dcmplt>
 80848ae:	2800      	cmp	r0, #0
 80848b0:	d0dd      	beq.n	808486e <pow+0x262>
 80848b2:	2200      	movs	r2, #0
 80848b4:	4b1c      	ldr	r3, [pc, #112]	; (8084928 <pow+0x31c>)
 80848b6:	4620      	mov	r0, r4
 80848b8:	4629      	mov	r1, r5
 80848ba:	f001 f997 	bl	8085bec <__aeabi_dmul>
 80848be:	4604      	mov	r4, r0
 80848c0:	460d      	mov	r5, r1
 80848c2:	f000 fed1 	bl	8085668 <rint>
 80848c6:	4602      	mov	r2, r0
 80848c8:	460b      	mov	r3, r1
 80848ca:	4620      	mov	r0, r4
 80848cc:	4629      	mov	r1, r5
 80848ce:	f001 fbf5 	bl	80860bc <__aeabi_dcmpeq>
 80848d2:	b918      	cbnz	r0, 80848dc <pow+0x2d0>
 80848d4:	4b13      	ldr	r3, [pc, #76]	; (8084924 <pow+0x318>)
 80848d6:	2200      	movs	r2, #0
 80848d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80848dc:	f999 8000 	ldrsb.w	r8, [r9]
 80848e0:	e7c5      	b.n	808486e <pow+0x262>
 80848e2:	4a0e      	ldr	r2, [pc, #56]	; (808491c <pow+0x310>)
 80848e4:	f999 9000 	ldrsb.w	r9, [r9]
 80848e8:	2301      	movs	r3, #1
 80848ea:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80848ee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80848f2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80848f6:	9203      	str	r2, [sp, #12]
 80848f8:	9302      	str	r3, [sp, #8]
 80848fa:	f1b9 0f00 	cmp.w	r9, #0
 80848fe:	d0c0      	beq.n	8084882 <pow+0x276>
 8084900:	2200      	movs	r2, #0
 8084902:	2300      	movs	r3, #0
 8084904:	4610      	mov	r0, r2
 8084906:	4619      	mov	r1, r3
 8084908:	f001 fa9a 	bl	8085e40 <__aeabi_ddiv>
 808490c:	f1b9 0f02 	cmp.w	r9, #2
 8084910:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8084914:	f43f af52 	beq.w	80847bc <pow+0x1b0>
 8084918:	e7b7      	b.n	808488a <pow+0x27e>
 808491a:	bf00      	nop
 808491c:	08087e10 	.word	0x08087e10
 8084920:	3ff00000 	.word	0x3ff00000
 8084924:	fff00000 	.word	0xfff00000
 8084928:	3fe00000 	.word	0x3fe00000
 808492c:	c7efffff 	.word	0xc7efffff
 8084930:	2000043c 	.word	0x2000043c
 8084934:	47efffff 	.word	0x47efffff
 8084938:	7ff00000 	.word	0x7ff00000

0808493c <sqrt>:
 808493c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084940:	b08b      	sub	sp, #44	; 0x2c
 8084942:	4604      	mov	r4, r0
 8084944:	460d      	mov	r5, r1
 8084946:	f000 fdb9 	bl	80854bc <__ieee754_sqrt>
 808494a:	4b28      	ldr	r3, [pc, #160]	; (80849ec <sqrt+0xb0>)
 808494c:	4606      	mov	r6, r0
 808494e:	f993 a000 	ldrsb.w	sl, [r3]
 8084952:	460f      	mov	r7, r1
 8084954:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8084958:	d012      	beq.n	8084980 <sqrt+0x44>
 808495a:	4622      	mov	r2, r4
 808495c:	462b      	mov	r3, r5
 808495e:	4620      	mov	r0, r4
 8084960:	4629      	mov	r1, r5
 8084962:	f001 fbdd 	bl	8086120 <__aeabi_dcmpun>
 8084966:	4683      	mov	fp, r0
 8084968:	b950      	cbnz	r0, 8084980 <sqrt+0x44>
 808496a:	f04f 0800 	mov.w	r8, #0
 808496e:	f04f 0900 	mov.w	r9, #0
 8084972:	4620      	mov	r0, r4
 8084974:	4629      	mov	r1, r5
 8084976:	4642      	mov	r2, r8
 8084978:	464b      	mov	r3, r9
 808497a:	f001 fba9 	bl	80860d0 <__aeabi_dcmplt>
 808497e:	b920      	cbnz	r0, 808498a <sqrt+0x4e>
 8084980:	4630      	mov	r0, r6
 8084982:	4639      	mov	r1, r7
 8084984:	b00b      	add	sp, #44	; 0x2c
 8084986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808498a:	4a19      	ldr	r2, [pc, #100]	; (80849f0 <sqrt+0xb4>)
 808498c:	2301      	movs	r3, #1
 808498e:	f8cd b020 	str.w	fp, [sp, #32]
 8084992:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8084996:	e9cd 4502 	strd	r4, r5, [sp, #8]
 808499a:	9201      	str	r2, [sp, #4]
 808499c:	9300      	str	r3, [sp, #0]
 808499e:	f1ba 0f00 	cmp.w	sl, #0
 80849a2:	d015      	beq.n	80849d0 <sqrt+0x94>
 80849a4:	4642      	mov	r2, r8
 80849a6:	464b      	mov	r3, r9
 80849a8:	4640      	mov	r0, r8
 80849aa:	4649      	mov	r1, r9
 80849ac:	f001 fa48 	bl	8085e40 <__aeabi_ddiv>
 80849b0:	f1ba 0f02 	cmp.w	sl, #2
 80849b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80849b8:	d10c      	bne.n	80849d4 <sqrt+0x98>
 80849ba:	f7fd ffab 	bl	8082914 <__errno>
 80849be:	2321      	movs	r3, #33	; 0x21
 80849c0:	6003      	str	r3, [r0, #0]
 80849c2:	9b08      	ldr	r3, [sp, #32]
 80849c4:	b963      	cbnz	r3, 80849e0 <sqrt+0xa4>
 80849c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80849ca:	b00b      	add	sp, #44	; 0x2c
 80849cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80849d0:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80849d4:	4668      	mov	r0, sp
 80849d6:	f000 fe3f 	bl	8085658 <matherr>
 80849da:	2800      	cmp	r0, #0
 80849dc:	d1f1      	bne.n	80849c2 <sqrt+0x86>
 80849de:	e7ec      	b.n	80849ba <sqrt+0x7e>
 80849e0:	f7fd ff98 	bl	8082914 <__errno>
 80849e4:	9b08      	ldr	r3, [sp, #32]
 80849e6:	6003      	str	r3, [r0, #0]
 80849e8:	e7ed      	b.n	80849c6 <sqrt+0x8a>
 80849ea:	bf00      	nop
 80849ec:	2000043c 	.word	0x2000043c
 80849f0:	08087e14 	.word	0x08087e14
 80849f4:	00000000 	.word	0x00000000

080849f8 <__ieee754_pow>:
 80849f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80849fc:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 8084a00:	ea58 0902 	orrs.w	r9, r8, r2
 8084a04:	b093      	sub	sp, #76	; 0x4c
 8084a06:	d03c      	beq.n	8084a82 <__ieee754_pow+0x8a>
 8084a08:	4c71      	ldr	r4, [pc, #452]	; (8084bd0 <__ieee754_pow+0x1d8>)
 8084a0a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8084a0e:	42a6      	cmp	r6, r4
 8084a10:	4683      	mov	fp, r0
 8084a12:	460d      	mov	r5, r1
 8084a14:	dd0c      	ble.n	8084a30 <__ieee754_pow+0x38>
 8084a16:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 8084a1a:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8084a1e:	ea56 000b 	orrs.w	r0, r6, fp
 8084a22:	d138      	bne.n	8084a96 <__ieee754_pow+0x9e>
 8084a24:	4683      	mov	fp, r0
 8084a26:	496b      	ldr	r1, [pc, #428]	; (8084bd4 <__ieee754_pow+0x1dc>)
 8084a28:	4658      	mov	r0, fp
 8084a2a:	b013      	add	sp, #76	; 0x4c
 8084a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084a30:	469a      	mov	sl, r3
 8084a32:	4696      	mov	lr, r2
 8084a34:	d02b      	beq.n	8084a8e <__ieee754_pow+0x96>
 8084a36:	45a0      	cmp	r8, r4
 8084a38:	dced      	bgt.n	8084a16 <__ieee754_pow+0x1e>
 8084a3a:	4c65      	ldr	r4, [pc, #404]	; (8084bd0 <__ieee754_pow+0x1d8>)
 8084a3c:	45a0      	cmp	r8, r4
 8084a3e:	d078      	beq.n	8084b32 <__ieee754_pow+0x13a>
 8084a40:	2d00      	cmp	r5, #0
 8084a42:	460f      	mov	r7, r1
 8084a44:	4681      	mov	r9, r0
 8084a46:	e9cd 2300 	strd	r2, r3, [sp]
 8084a4a:	db76      	blt.n	8084b3a <__ieee754_pow+0x142>
 8084a4c:	2400      	movs	r4, #0
 8084a4e:	f1be 0f00 	cmp.w	lr, #0
 8084a52:	d127      	bne.n	8084aa4 <__ieee754_pow+0xac>
 8084a54:	4b5e      	ldr	r3, [pc, #376]	; (8084bd0 <__ieee754_pow+0x1d8>)
 8084a56:	4598      	cmp	r8, r3
 8084a58:	f000 808b 	beq.w	8084b72 <__ieee754_pow+0x17a>
 8084a5c:	4b5d      	ldr	r3, [pc, #372]	; (8084bd4 <__ieee754_pow+0x1dc>)
 8084a5e:	4598      	cmp	r8, r3
 8084a60:	d052      	beq.n	8084b08 <__ieee754_pow+0x110>
 8084a62:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
 8084a66:	f000 83c9 	beq.w	80851fc <__ieee754_pow+0x804>
 8084a6a:	4b5b      	ldr	r3, [pc, #364]	; (8084bd8 <__ieee754_pow+0x1e0>)
 8084a6c:	459a      	cmp	sl, r3
 8084a6e:	d119      	bne.n	8084aa4 <__ieee754_pow+0xac>
 8084a70:	2d00      	cmp	r5, #0
 8084a72:	db17      	blt.n	8084aa4 <__ieee754_pow+0xac>
 8084a74:	4648      	mov	r0, r9
 8084a76:	4639      	mov	r1, r7
 8084a78:	b013      	add	sp, #76	; 0x4c
 8084a7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084a7e:	f000 bd1d 	b.w	80854bc <__ieee754_sqrt>
 8084a82:	46cb      	mov	fp, r9
 8084a84:	4658      	mov	r0, fp
 8084a86:	4953      	ldr	r1, [pc, #332]	; (8084bd4 <__ieee754_pow+0x1dc>)
 8084a88:	b013      	add	sp, #76	; 0x4c
 8084a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084a8e:	2800      	cmp	r0, #0
 8084a90:	d1c1      	bne.n	8084a16 <__ieee754_pow+0x1e>
 8084a92:	45b0      	cmp	r8, r6
 8084a94:	ddd1      	ble.n	8084a3a <__ieee754_pow+0x42>
 8084a96:	4851      	ldr	r0, [pc, #324]	; (8084bdc <__ieee754_pow+0x1e4>)
 8084a98:	b013      	add	sp, #76	; 0x4c
 8084a9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084a9e:	f000 bddd 	b.w	808565c <nan>
 8084aa2:	2400      	movs	r4, #0
 8084aa4:	4648      	mov	r0, r9
 8084aa6:	4639      	mov	r1, r7
 8084aa8:	f000 fdcc 	bl	8085644 <fabs>
 8084aac:	f1bb 0f00 	cmp.w	fp, #0
 8084ab0:	d01c      	beq.n	8084aec <__ieee754_pow+0xf4>
 8084ab2:	0fed      	lsrs	r5, r5, #31
 8084ab4:	3d01      	subs	r5, #1
 8084ab6:	ea54 0305 	orrs.w	r3, r4, r5
 8084aba:	d070      	beq.n	8084b9e <__ieee754_pow+0x1a6>
 8084abc:	4b48      	ldr	r3, [pc, #288]	; (8084be0 <__ieee754_pow+0x1e8>)
 8084abe:	4598      	cmp	r8, r3
 8084ac0:	f340 8094 	ble.w	8084bec <__ieee754_pow+0x1f4>
 8084ac4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8084ac8:	4598      	cmp	r8, r3
 8084aca:	f340 840d 	ble.w	80852e8 <__ieee754_pow+0x8f0>
 8084ace:	4b45      	ldr	r3, [pc, #276]	; (8084be4 <__ieee754_pow+0x1ec>)
 8084ad0:	429e      	cmp	r6, r3
 8084ad2:	dd70      	ble.n	8084bb6 <__ieee754_pow+0x1be>
 8084ad4:	f1ba 0f00 	cmp.w	sl, #0
 8084ad8:	dd70      	ble.n	8084bbc <__ieee754_pow+0x1c4>
 8084ada:	a33b      	add	r3, pc, #236	; (adr r3, 8084bc8 <__ieee754_pow+0x1d0>)
 8084adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084ae0:	4610      	mov	r0, r2
 8084ae2:	4619      	mov	r1, r3
 8084ae4:	f001 f882 	bl	8085bec <__aeabi_dmul>
 8084ae8:	4683      	mov	fp, r0
 8084aea:	e79d      	b.n	8084a28 <__ieee754_pow+0x30>
 8084aec:	b126      	cbz	r6, 8084af8 <__ieee754_pow+0x100>
 8084aee:	4b39      	ldr	r3, [pc, #228]	; (8084bd4 <__ieee754_pow+0x1dc>)
 8084af0:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8084af4:	429a      	cmp	r2, r3
 8084af6:	d1dc      	bne.n	8084ab2 <__ieee754_pow+0xba>
 8084af8:	f1ba 0f00 	cmp.w	sl, #0
 8084afc:	f2c0 83b7 	blt.w	808526e <__ieee754_pow+0x876>
 8084b00:	2d00      	cmp	r5, #0
 8084b02:	db08      	blt.n	8084b16 <__ieee754_pow+0x11e>
 8084b04:	4683      	mov	fp, r0
 8084b06:	e78f      	b.n	8084a28 <__ieee754_pow+0x30>
 8084b08:	f1ba 0f00 	cmp.w	sl, #0
 8084b0c:	f2c0 845e 	blt.w	80853cc <__ieee754_pow+0x9d4>
 8084b10:	46cb      	mov	fp, r9
 8084b12:	4639      	mov	r1, r7
 8084b14:	e788      	b.n	8084a28 <__ieee754_pow+0x30>
 8084b16:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 8084b1a:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8084b1e:	ea56 0304 	orrs.w	r3, r6, r4
 8084b22:	f000 8483 	beq.w	808542c <__ieee754_pow+0xa34>
 8084b26:	2c01      	cmp	r4, #1
 8084b28:	d1ec      	bne.n	8084b04 <__ieee754_pow+0x10c>
 8084b2a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8084b2e:	4683      	mov	fp, r0
 8084b30:	e77a      	b.n	8084a28 <__ieee754_pow+0x30>
 8084b32:	f1be 0f00 	cmp.w	lr, #0
 8084b36:	d083      	beq.n	8084a40 <__ieee754_pow+0x48>
 8084b38:	e76d      	b.n	8084a16 <__ieee754_pow+0x1e>
 8084b3a:	4b2b      	ldr	r3, [pc, #172]	; (8084be8 <__ieee754_pow+0x1f0>)
 8084b3c:	4598      	cmp	r8, r3
 8084b3e:	dc2c      	bgt.n	8084b9a <__ieee754_pow+0x1a2>
 8084b40:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8084b44:	4598      	cmp	r8, r3
 8084b46:	dd81      	ble.n	8084a4c <__ieee754_pow+0x54>
 8084b48:	ea4f 5328 	mov.w	r3, r8, asr #20
 8084b4c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8084b50:	2b14      	cmp	r3, #20
 8084b52:	f340 8453 	ble.w	80853fc <__ieee754_pow+0xa04>
 8084b56:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8084b5a:	fa2e f203 	lsr.w	r2, lr, r3
 8084b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8084b62:	459e      	cmp	lr, r3
 8084b64:	f47f af72 	bne.w	8084a4c <__ieee754_pow+0x54>
 8084b68:	f002 0201 	and.w	r2, r2, #1
 8084b6c:	f1c2 0402 	rsb	r4, r2, #2
 8084b70:	e76d      	b.n	8084a4e <__ieee754_pow+0x56>
 8084b72:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
 8084b76:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8084b7a:	ea53 030b 	orrs.w	r3, r3, fp
 8084b7e:	f000 833a 	beq.w	80851f6 <__ieee754_pow+0x7fe>
 8084b82:	4b18      	ldr	r3, [pc, #96]	; (8084be4 <__ieee754_pow+0x1ec>)
 8084b84:	429e      	cmp	r6, r3
 8084b86:	f340 8367 	ble.w	8085258 <__ieee754_pow+0x860>
 8084b8a:	f1ba 0f00 	cmp.w	sl, #0
 8084b8e:	db15      	blt.n	8084bbc <__ieee754_pow+0x1c4>
 8084b90:	e9dd 3400 	ldrd	r3, r4, [sp]
 8084b94:	469b      	mov	fp, r3
 8084b96:	4621      	mov	r1, r4
 8084b98:	e746      	b.n	8084a28 <__ieee754_pow+0x30>
 8084b9a:	2402      	movs	r4, #2
 8084b9c:	e757      	b.n	8084a4e <__ieee754_pow+0x56>
 8084b9e:	464a      	mov	r2, r9
 8084ba0:	4648      	mov	r0, r9
 8084ba2:	463b      	mov	r3, r7
 8084ba4:	4639      	mov	r1, r7
 8084ba6:	f000 fe6d 	bl	8085884 <__aeabi_dsub>
 8084baa:	4602      	mov	r2, r0
 8084bac:	460b      	mov	r3, r1
 8084bae:	f001 f947 	bl	8085e40 <__aeabi_ddiv>
 8084bb2:	4683      	mov	fp, r0
 8084bb4:	e738      	b.n	8084a28 <__ieee754_pow+0x30>
 8084bb6:	f1ba 0f00 	cmp.w	sl, #0
 8084bba:	db8e      	blt.n	8084ada <__ieee754_pow+0xe2>
 8084bbc:	f04f 0b00 	mov.w	fp, #0
 8084bc0:	4659      	mov	r1, fp
 8084bc2:	e731      	b.n	8084a28 <__ieee754_pow+0x30>
 8084bc4:	f3af 8000 	nop.w
 8084bc8:	8800759c 	.word	0x8800759c
 8084bcc:	7e37e43c 	.word	0x7e37e43c
 8084bd0:	7ff00000 	.word	0x7ff00000
 8084bd4:	3ff00000 	.word	0x3ff00000
 8084bd8:	3fe00000 	.word	0x3fe00000
 8084bdc:	08087e18 	.word	0x08087e18
 8084be0:	41e00000 	.word	0x41e00000
 8084be4:	3fefffff 	.word	0x3fefffff
 8084be8:	433fffff 	.word	0x433fffff
 8084bec:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
 8084bf0:	f04f 0200 	mov.w	r2, #0
 8084bf4:	da05      	bge.n	8084c02 <__ieee754_pow+0x20a>
 8084bf6:	4bd0      	ldr	r3, [pc, #832]	; (8084f38 <__ieee754_pow+0x540>)
 8084bf8:	f000 fff8 	bl	8085bec <__aeabi_dmul>
 8084bfc:	460e      	mov	r6, r1
 8084bfe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8084c02:	f8df e344 	ldr.w	lr, [pc, #836]	; 8084f48 <__ieee754_pow+0x550>
 8084c06:	1533      	asrs	r3, r6, #20
 8084c08:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8084c0c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8084c10:	f046 577f 	orr.w	r7, r6, #1069547520	; 0x3fc00000
 8084c14:	4576      	cmp	r6, lr
 8084c16:	eb03 0a02 	add.w	sl, r3, r2
 8084c1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8084c1e:	f340 83c9 	ble.w	80853b4 <__ieee754_pow+0x9bc>
 8084c22:	4bc6      	ldr	r3, [pc, #792]	; (8084f3c <__ieee754_pow+0x544>)
 8084c24:	2200      	movs	r2, #0
 8084c26:	429e      	cmp	r6, r3
 8084c28:	f340 8404 	ble.w	8085434 <__ieee754_pow+0xa3c>
 8084c2c:	2300      	movs	r3, #0
 8084c2e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8084c32:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8084c36:	4bc2      	ldr	r3, [pc, #776]	; (8084f40 <__ieee754_pow+0x548>)
 8084c38:	2200      	movs	r2, #0
 8084c3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8084c3e:	f10a 0a01 	add.w	sl, sl, #1
 8084c42:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8084c46:	2600      	movs	r6, #0
 8084c48:	4639      	mov	r1, r7
 8084c4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8084c4e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8084c52:	f000 fe17 	bl	8085884 <__aeabi_dsub>
 8084c56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8084c5a:	4680      	mov	r8, r0
 8084c5c:	4689      	mov	r9, r1
 8084c5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8084c62:	f000 fe11 	bl	8085888 <__adddf3>
 8084c66:	4602      	mov	r2, r0
 8084c68:	460b      	mov	r3, r1
 8084c6a:	2000      	movs	r0, #0
 8084c6c:	49b4      	ldr	r1, [pc, #720]	; (8084f40 <__ieee754_pow+0x548>)
 8084c6e:	f001 f8e7 	bl	8085e40 <__aeabi_ddiv>
 8084c72:	460a      	mov	r2, r1
 8084c74:	4601      	mov	r1, r0
 8084c76:	4613      	mov	r3, r2
 8084c78:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 8084c7c:	4602      	mov	r2, r0
 8084c7e:	4649      	mov	r1, r9
 8084c80:	4640      	mov	r0, r8
 8084c82:	f000 ffb3 	bl	8085bec <__aeabi_dmul>
 8084c86:	468c      	mov	ip, r1
 8084c88:	4683      	mov	fp, r0
 8084c8a:	107b      	asrs	r3, r7, #1
 8084c8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8084c90:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8084c94:	1999      	adds	r1, r3, r6
 8084c96:	2000      	movs	r0, #0
 8084c98:	e9cd bc04 	strd	fp, ip, [sp, #16]
 8084c9c:	4606      	mov	r6, r0
 8084c9e:	460f      	mov	r7, r1
 8084ca0:	f04f 0b00 	mov.w	fp, #0
 8084ca4:	4661      	mov	r1, ip
 8084ca6:	4658      	mov	r0, fp
 8084ca8:	4632      	mov	r2, r6
 8084caa:	463b      	mov	r3, r7
 8084cac:	e9cd bc10 	strd	fp, ip, [sp, #64]	; 0x40
 8084cb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8084cb4:	f000 ff9a 	bl	8085bec <__aeabi_dmul>
 8084cb8:	4602      	mov	r2, r0
 8084cba:	460b      	mov	r3, r1
 8084cbc:	4640      	mov	r0, r8
 8084cbe:	4649      	mov	r1, r9
 8084cc0:	f000 fde0 	bl	8085884 <__aeabi_dsub>
 8084cc4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8084cc8:	4680      	mov	r8, r0
 8084cca:	4689      	mov	r9, r1
 8084ccc:	4630      	mov	r0, r6
 8084cce:	4639      	mov	r1, r7
 8084cd0:	f000 fdd8 	bl	8085884 <__aeabi_dsub>
 8084cd4:	4602      	mov	r2, r0
 8084cd6:	460b      	mov	r3, r1
 8084cd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8084cdc:	f000 fdd2 	bl	8085884 <__aeabi_dsub>
 8084ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8084ce4:	f000 ff82 	bl	8085bec <__aeabi_dmul>
 8084ce8:	4602      	mov	r2, r0
 8084cea:	460b      	mov	r3, r1
 8084cec:	4640      	mov	r0, r8
 8084cee:	4649      	mov	r1, r9
 8084cf0:	f000 fdc8 	bl	8085884 <__aeabi_dsub>
 8084cf4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8084cf8:	f000 ff78 	bl	8085bec <__aeabi_dmul>
 8084cfc:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
 8084d00:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8084d04:	463a      	mov	r2, r7
 8084d06:	4643      	mov	r3, r8
 8084d08:	4638      	mov	r0, r7
 8084d0a:	4641      	mov	r1, r8
 8084d0c:	f000 ff6e 	bl	8085bec <__aeabi_dmul>
 8084d10:	a377      	add	r3, pc, #476	; (adr r3, 8084ef0 <__ieee754_pow+0x4f8>)
 8084d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084d16:	4606      	mov	r6, r0
 8084d18:	460f      	mov	r7, r1
 8084d1a:	f000 ff67 	bl	8085bec <__aeabi_dmul>
 8084d1e:	a376      	add	r3, pc, #472	; (adr r3, 8084ef8 <__ieee754_pow+0x500>)
 8084d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084d24:	f000 fdb0 	bl	8085888 <__adddf3>
 8084d28:	4632      	mov	r2, r6
 8084d2a:	463b      	mov	r3, r7
 8084d2c:	f000 ff5e 	bl	8085bec <__aeabi_dmul>
 8084d30:	a373      	add	r3, pc, #460	; (adr r3, 8084f00 <__ieee754_pow+0x508>)
 8084d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084d36:	f000 fda7 	bl	8085888 <__adddf3>
 8084d3a:	4632      	mov	r2, r6
 8084d3c:	463b      	mov	r3, r7
 8084d3e:	f000 ff55 	bl	8085bec <__aeabi_dmul>
 8084d42:	a371      	add	r3, pc, #452	; (adr r3, 8084f08 <__ieee754_pow+0x510>)
 8084d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084d48:	f000 fd9e 	bl	8085888 <__adddf3>
 8084d4c:	4632      	mov	r2, r6
 8084d4e:	463b      	mov	r3, r7
 8084d50:	f000 ff4c 	bl	8085bec <__aeabi_dmul>
 8084d54:	a36e      	add	r3, pc, #440	; (adr r3, 8084f10 <__ieee754_pow+0x518>)
 8084d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084d5a:	f000 fd95 	bl	8085888 <__adddf3>
 8084d5e:	4632      	mov	r2, r6
 8084d60:	463b      	mov	r3, r7
 8084d62:	f000 ff43 	bl	8085bec <__aeabi_dmul>
 8084d66:	a36c      	add	r3, pc, #432	; (adr r3, 8084f18 <__ieee754_pow+0x520>)
 8084d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084d6c:	f000 fd8c 	bl	8085888 <__adddf3>
 8084d70:	4632      	mov	r2, r6
 8084d72:	4680      	mov	r8, r0
 8084d74:	4689      	mov	r9, r1
 8084d76:	463b      	mov	r3, r7
 8084d78:	4630      	mov	r0, r6
 8084d7a:	4639      	mov	r1, r7
 8084d7c:	f000 ff36 	bl	8085bec <__aeabi_dmul>
 8084d80:	4602      	mov	r2, r0
 8084d82:	460b      	mov	r3, r1
 8084d84:	4640      	mov	r0, r8
 8084d86:	4649      	mov	r1, r9
 8084d88:	f000 ff30 	bl	8085bec <__aeabi_dmul>
 8084d8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8084d90:	4606      	mov	r6, r0
 8084d92:	460f      	mov	r7, r1
 8084d94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8084d98:	f000 fd76 	bl	8085888 <__adddf3>
 8084d9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8084da0:	f000 ff24 	bl	8085bec <__aeabi_dmul>
 8084da4:	4632      	mov	r2, r6
 8084da6:	463b      	mov	r3, r7
 8084da8:	f000 fd6e 	bl	8085888 <__adddf3>
 8084dac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8084db0:	4680      	mov	r8, r0
 8084db2:	4689      	mov	r9, r1
 8084db4:	4632      	mov	r2, r6
 8084db6:	463b      	mov	r3, r7
 8084db8:	4630      	mov	r0, r6
 8084dba:	4639      	mov	r1, r7
 8084dbc:	f000 ff16 	bl	8085bec <__aeabi_dmul>
 8084dc0:	2200      	movs	r2, #0
 8084dc2:	4b60      	ldr	r3, [pc, #384]	; (8084f44 <__ieee754_pow+0x54c>)
 8084dc4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8084dc8:	f000 fd5e 	bl	8085888 <__adddf3>
 8084dcc:	4642      	mov	r2, r8
 8084dce:	464b      	mov	r3, r9
 8084dd0:	f000 fd5a 	bl	8085888 <__adddf3>
 8084dd4:	e9dd bc10 	ldrd	fp, ip, [sp, #64]	; 0x40
 8084dd8:	460f      	mov	r7, r1
 8084dda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8084dde:	465a      	mov	r2, fp
 8084de0:	463b      	mov	r3, r7
 8084de2:	e9cd bc0e 	strd	fp, ip, [sp, #56]	; 0x38
 8084de6:	465e      	mov	r6, fp
 8084de8:	f000 ff00 	bl	8085bec <__aeabi_dmul>
 8084dec:	2200      	movs	r2, #0
 8084dee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8084df2:	4b54      	ldr	r3, [pc, #336]	; (8084f44 <__ieee754_pow+0x54c>)
 8084df4:	4630      	mov	r0, r6
 8084df6:	4639      	mov	r1, r7
 8084df8:	f000 fd44 	bl	8085884 <__aeabi_dsub>
 8084dfc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8084e00:	f000 fd40 	bl	8085884 <__aeabi_dsub>
 8084e04:	4602      	mov	r2, r0
 8084e06:	460b      	mov	r3, r1
 8084e08:	4640      	mov	r0, r8
 8084e0a:	4649      	mov	r1, r9
 8084e0c:	f000 fd3a 	bl	8085884 <__aeabi_dsub>
 8084e10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8084e14:	f000 feea 	bl	8085bec <__aeabi_dmul>
 8084e18:	4632      	mov	r2, r6
 8084e1a:	4680      	mov	r8, r0
 8084e1c:	4689      	mov	r9, r1
 8084e1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8084e22:	463b      	mov	r3, r7
 8084e24:	f000 fee2 	bl	8085bec <__aeabi_dmul>
 8084e28:	4602      	mov	r2, r0
 8084e2a:	460b      	mov	r3, r1
 8084e2c:	4640      	mov	r0, r8
 8084e2e:	4649      	mov	r1, r9
 8084e30:	f000 fd2a 	bl	8085888 <__adddf3>
 8084e34:	4680      	mov	r8, r0
 8084e36:	4689      	mov	r9, r1
 8084e38:	4602      	mov	r2, r0
 8084e3a:	460b      	mov	r3, r1
 8084e3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8084e40:	f000 fd22 	bl	8085888 <__adddf3>
 8084e44:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	; 0x38
 8084e48:	a335      	add	r3, pc, #212	; (adr r3, 8084f20 <__ieee754_pow+0x528>)
 8084e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084e4e:	4658      	mov	r0, fp
 8084e50:	e9cd bc06 	strd	fp, ip, [sp, #24]
 8084e54:	465e      	mov	r6, fp
 8084e56:	460f      	mov	r7, r1
 8084e58:	f000 fec8 	bl	8085bec <__aeabi_dmul>
 8084e5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8084e60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8084e64:	4630      	mov	r0, r6
 8084e66:	4639      	mov	r1, r7
 8084e68:	f000 fd0c 	bl	8085884 <__aeabi_dsub>
 8084e6c:	4602      	mov	r2, r0
 8084e6e:	460b      	mov	r3, r1
 8084e70:	4640      	mov	r0, r8
 8084e72:	4649      	mov	r1, r9
 8084e74:	f000 fd06 	bl	8085884 <__aeabi_dsub>
 8084e78:	a32b      	add	r3, pc, #172	; (adr r3, 8084f28 <__ieee754_pow+0x530>)
 8084e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084e7e:	f000 feb5 	bl	8085bec <__aeabi_dmul>
 8084e82:	a32b      	add	r3, pc, #172	; (adr r3, 8084f30 <__ieee754_pow+0x538>)
 8084e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084e88:	4680      	mov	r8, r0
 8084e8a:	4689      	mov	r9, r1
 8084e8c:	4630      	mov	r0, r6
 8084e8e:	4639      	mov	r1, r7
 8084e90:	f000 feac 	bl	8085bec <__aeabi_dmul>
 8084e94:	4602      	mov	r2, r0
 8084e96:	460b      	mov	r3, r1
 8084e98:	4640      	mov	r0, r8
 8084e9a:	4649      	mov	r1, r9
 8084e9c:	f000 fcf4 	bl	8085888 <__adddf3>
 8084ea0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8084ea4:	f000 fcf0 	bl	8085888 <__adddf3>
 8084ea8:	4680      	mov	r8, r0
 8084eaa:	4650      	mov	r0, sl
 8084eac:	4689      	mov	r9, r1
 8084eae:	f000 fe37 	bl	8085b20 <__aeabi_i2d>
 8084eb2:	4606      	mov	r6, r0
 8084eb4:	460f      	mov	r7, r1
 8084eb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8084eba:	4642      	mov	r2, r8
 8084ebc:	464b      	mov	r3, r9
 8084ebe:	f000 fce3 	bl	8085888 <__adddf3>
 8084ec2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8084ec6:	f000 fcdf 	bl	8085888 <__adddf3>
 8084eca:	4632      	mov	r2, r6
 8084ecc:	463b      	mov	r3, r7
 8084ece:	f000 fcdb 	bl	8085888 <__adddf3>
 8084ed2:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 8084ed6:	4632      	mov	r2, r6
 8084ed8:	4658      	mov	r0, fp
 8084eda:	463b      	mov	r3, r7
 8084edc:	46da      	mov	sl, fp
 8084ede:	468b      	mov	fp, r1
 8084ee0:	f000 fcd0 	bl	8085884 <__aeabi_dsub>
 8084ee4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8084ee8:	e030      	b.n	8084f4c <__ieee754_pow+0x554>
 8084eea:	bf00      	nop
 8084eec:	f3af 8000 	nop.w
 8084ef0:	4a454eef 	.word	0x4a454eef
 8084ef4:	3fca7e28 	.word	0x3fca7e28
 8084ef8:	93c9db65 	.word	0x93c9db65
 8084efc:	3fcd864a 	.word	0x3fcd864a
 8084f00:	a91d4101 	.word	0xa91d4101
 8084f04:	3fd17460 	.word	0x3fd17460
 8084f08:	518f264d 	.word	0x518f264d
 8084f0c:	3fd55555 	.word	0x3fd55555
 8084f10:	db6fabff 	.word	0xdb6fabff
 8084f14:	3fdb6db6 	.word	0x3fdb6db6
 8084f18:	33333303 	.word	0x33333303
 8084f1c:	3fe33333 	.word	0x3fe33333
 8084f20:	e0000000 	.word	0xe0000000
 8084f24:	3feec709 	.word	0x3feec709
 8084f28:	dc3a03fd 	.word	0xdc3a03fd
 8084f2c:	3feec709 	.word	0x3feec709
 8084f30:	145b01f5 	.word	0x145b01f5
 8084f34:	be3e2fe0 	.word	0xbe3e2fe0
 8084f38:	43400000 	.word	0x43400000
 8084f3c:	000bb679 	.word	0x000bb679
 8084f40:	3ff00000 	.word	0x3ff00000
 8084f44:	40080000 	.word	0x40080000
 8084f48:	0003988e 	.word	0x0003988e
 8084f4c:	f000 fc9a 	bl	8085884 <__aeabi_dsub>
 8084f50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8084f54:	f000 fc96 	bl	8085884 <__aeabi_dsub>
 8084f58:	4602      	mov	r2, r0
 8084f5a:	460b      	mov	r3, r1
 8084f5c:	4640      	mov	r0, r8
 8084f5e:	4649      	mov	r1, r9
 8084f60:	f000 fc90 	bl	8085884 <__aeabi_dsub>
 8084f64:	4680      	mov	r8, r0
 8084f66:	4689      	mov	r9, r1
 8084f68:	e9dd 1200 	ldrd	r1, r2, [sp]
 8084f6c:	3c01      	subs	r4, #1
 8084f6e:	ea54 0305 	orrs.w	r3, r4, r5
 8084f72:	bf14      	ite	ne
 8084f74:	4cd6      	ldrne	r4, [pc, #856]	; (80852d0 <__ieee754_pow+0x8d8>)
 8084f76:	4cd7      	ldreq	r4, [pc, #860]	; (80852d4 <__ieee754_pow+0x8dc>)
 8084f78:	2300      	movs	r3, #0
 8084f7a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8084f7e:	460b      	mov	r3, r1
 8084f80:	4614      	mov	r4, r2
 8084f82:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8084f86:	2300      	movs	r3, #0
 8084f88:	9302      	str	r3, [sp, #8]
 8084f8a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8084f8e:	4608      	mov	r0, r1
 8084f90:	462b      	mov	r3, r5
 8084f92:	4611      	mov	r1, r2
 8084f94:	4622      	mov	r2, r4
 8084f96:	f000 fc75 	bl	8085884 <__aeabi_dsub>
 8084f9a:	4652      	mov	r2, sl
 8084f9c:	465b      	mov	r3, fp
 8084f9e:	f000 fe25 	bl	8085bec <__aeabi_dmul>
 8084fa2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8084fa6:	4606      	mov	r6, r0
 8084fa8:	460f      	mov	r7, r1
 8084faa:	4640      	mov	r0, r8
 8084fac:	4649      	mov	r1, r9
 8084fae:	f000 fe1d 	bl	8085bec <__aeabi_dmul>
 8084fb2:	4602      	mov	r2, r0
 8084fb4:	460b      	mov	r3, r1
 8084fb6:	4630      	mov	r0, r6
 8084fb8:	4639      	mov	r1, r7
 8084fba:	f000 fc65 	bl	8085888 <__adddf3>
 8084fbe:	4606      	mov	r6, r0
 8084fc0:	460f      	mov	r7, r1
 8084fc2:	4622      	mov	r2, r4
 8084fc4:	462b      	mov	r3, r5
 8084fc6:	4650      	mov	r0, sl
 8084fc8:	4659      	mov	r1, fp
 8084fca:	e9cd 6700 	strd	r6, r7, [sp]
 8084fce:	f000 fe0d 	bl	8085bec <__aeabi_dmul>
 8084fd2:	460b      	mov	r3, r1
 8084fd4:	4602      	mov	r2, r0
 8084fd6:	4680      	mov	r8, r0
 8084fd8:	4689      	mov	r9, r1
 8084fda:	4630      	mov	r0, r6
 8084fdc:	4639      	mov	r1, r7
 8084fde:	f000 fc53 	bl	8085888 <__adddf3>
 8084fe2:	4bbd      	ldr	r3, [pc, #756]	; (80852d8 <__ieee754_pow+0x8e0>)
 8084fe4:	4606      	mov	r6, r0
 8084fe6:	4299      	cmp	r1, r3
 8084fe8:	460d      	mov	r5, r1
 8084fea:	460c      	mov	r4, r1
 8084fec:	f340 810e 	ble.w	808520c <__ieee754_pow+0x814>
 8084ff0:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8084ff4:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8084ff8:	4303      	orrs	r3, r0
 8084ffa:	f040 81f0 	bne.w	80853de <__ieee754_pow+0x9e6>
 8084ffe:	a3a0      	add	r3, pc, #640	; (adr r3, 8085280 <__ieee754_pow+0x888>)
 8085000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085004:	e9dd 0100 	ldrd	r0, r1, [sp]
 8085008:	f000 fc3e 	bl	8085888 <__adddf3>
 808500c:	4642      	mov	r2, r8
 808500e:	4682      	mov	sl, r0
 8085010:	468b      	mov	fp, r1
 8085012:	464b      	mov	r3, r9
 8085014:	4630      	mov	r0, r6
 8085016:	4629      	mov	r1, r5
 8085018:	f000 fc34 	bl	8085884 <__aeabi_dsub>
 808501c:	4602      	mov	r2, r0
 808501e:	460b      	mov	r3, r1
 8085020:	4650      	mov	r0, sl
 8085022:	4659      	mov	r1, fp
 8085024:	f001 f872 	bl	808610c <__aeabi_dcmpgt>
 8085028:	2800      	cmp	r0, #0
 808502a:	f040 81d8 	bne.w	80853de <__ieee754_pow+0x9e6>
 808502e:	462f      	mov	r7, r5
 8085030:	153b      	asrs	r3, r7, #20
 8085032:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8085036:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 808503a:	fa42 f303 	asr.w	r3, r2, r3
 808503e:	4423      	add	r3, r4
 8085040:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8085044:	4ea5      	ldr	r6, [pc, #660]	; (80852dc <__ieee754_pow+0x8e4>)
 8085046:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 808504a:	4116      	asrs	r6, r2
 808504c:	f3c3 0b13 	ubfx	fp, r3, #0, #20
 8085050:	2000      	movs	r0, #0
 8085052:	f1c2 0514 	rsb	r5, r2, #20
 8085056:	ea23 0106 	bic.w	r1, r3, r6
 808505a:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
 808505e:	4602      	mov	r2, r0
 8085060:	460b      	mov	r3, r1
 8085062:	2c00      	cmp	r4, #0
 8085064:	fa4b fb05 	asr.w	fp, fp, r5
 8085068:	4640      	mov	r0, r8
 808506a:	4649      	mov	r1, r9
 808506c:	bfb8      	it	lt
 808506e:	f1cb 0b00 	rsblt	fp, fp, #0
 8085072:	f000 fc07 	bl	8085884 <__aeabi_dsub>
 8085076:	4602      	mov	r2, r0
 8085078:	460b      	mov	r3, r1
 808507a:	4680      	mov	r8, r0
 808507c:	4689      	mov	r9, r1
 808507e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8085082:	f000 fc01 	bl	8085888 <__adddf3>
 8085086:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
 808508a:	2400      	movs	r4, #0
 808508c:	a37e      	add	r3, pc, #504	; (adr r3, 8085288 <__ieee754_pow+0x890>)
 808508e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085092:	4620      	mov	r0, r4
 8085094:	460d      	mov	r5, r1
 8085096:	f000 fda9 	bl	8085bec <__aeabi_dmul>
 808509a:	4642      	mov	r2, r8
 808509c:	4606      	mov	r6, r0
 808509e:	460f      	mov	r7, r1
 80850a0:	464b      	mov	r3, r9
 80850a2:	4620      	mov	r0, r4
 80850a4:	4629      	mov	r1, r5
 80850a6:	f000 fbed 	bl	8085884 <__aeabi_dsub>
 80850aa:	4602      	mov	r2, r0
 80850ac:	460b      	mov	r3, r1
 80850ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80850b2:	f000 fbe7 	bl	8085884 <__aeabi_dsub>
 80850b6:	a376      	add	r3, pc, #472	; (adr r3, 8085290 <__ieee754_pow+0x898>)
 80850b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80850bc:	f000 fd96 	bl	8085bec <__aeabi_dmul>
 80850c0:	a375      	add	r3, pc, #468	; (adr r3, 8085298 <__ieee754_pow+0x8a0>)
 80850c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80850c6:	4680      	mov	r8, r0
 80850c8:	4689      	mov	r9, r1
 80850ca:	4620      	mov	r0, r4
 80850cc:	4629      	mov	r1, r5
 80850ce:	f000 fd8d 	bl	8085bec <__aeabi_dmul>
 80850d2:	4602      	mov	r2, r0
 80850d4:	460b      	mov	r3, r1
 80850d6:	4640      	mov	r0, r8
 80850d8:	4649      	mov	r1, r9
 80850da:	f000 fbd5 	bl	8085888 <__adddf3>
 80850de:	4680      	mov	r8, r0
 80850e0:	4689      	mov	r9, r1
 80850e2:	4602      	mov	r2, r0
 80850e4:	460b      	mov	r3, r1
 80850e6:	4630      	mov	r0, r6
 80850e8:	4639      	mov	r1, r7
 80850ea:	f000 fbcd 	bl	8085888 <__adddf3>
 80850ee:	4632      	mov	r2, r6
 80850f0:	463b      	mov	r3, r7
 80850f2:	4604      	mov	r4, r0
 80850f4:	460d      	mov	r5, r1
 80850f6:	f000 fbc5 	bl	8085884 <__aeabi_dsub>
 80850fa:	4602      	mov	r2, r0
 80850fc:	460b      	mov	r3, r1
 80850fe:	4640      	mov	r0, r8
 8085100:	4649      	mov	r1, r9
 8085102:	f000 fbbf 	bl	8085884 <__aeabi_dsub>
 8085106:	4622      	mov	r2, r4
 8085108:	4680      	mov	r8, r0
 808510a:	4689      	mov	r9, r1
 808510c:	462b      	mov	r3, r5
 808510e:	4620      	mov	r0, r4
 8085110:	4629      	mov	r1, r5
 8085112:	f000 fd6b 	bl	8085bec <__aeabi_dmul>
 8085116:	a362      	add	r3, pc, #392	; (adr r3, 80852a0 <__ieee754_pow+0x8a8>)
 8085118:	e9d3 2300 	ldrd	r2, r3, [r3]
 808511c:	4606      	mov	r6, r0
 808511e:	460f      	mov	r7, r1
 8085120:	f000 fd64 	bl	8085bec <__aeabi_dmul>
 8085124:	a360      	add	r3, pc, #384	; (adr r3, 80852a8 <__ieee754_pow+0x8b0>)
 8085126:	e9d3 2300 	ldrd	r2, r3, [r3]
 808512a:	f000 fbab 	bl	8085884 <__aeabi_dsub>
 808512e:	4632      	mov	r2, r6
 8085130:	463b      	mov	r3, r7
 8085132:	f000 fd5b 	bl	8085bec <__aeabi_dmul>
 8085136:	a35e      	add	r3, pc, #376	; (adr r3, 80852b0 <__ieee754_pow+0x8b8>)
 8085138:	e9d3 2300 	ldrd	r2, r3, [r3]
 808513c:	f000 fba4 	bl	8085888 <__adddf3>
 8085140:	4632      	mov	r2, r6
 8085142:	463b      	mov	r3, r7
 8085144:	f000 fd52 	bl	8085bec <__aeabi_dmul>
 8085148:	a35b      	add	r3, pc, #364	; (adr r3, 80852b8 <__ieee754_pow+0x8c0>)
 808514a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808514e:	f000 fb99 	bl	8085884 <__aeabi_dsub>
 8085152:	4632      	mov	r2, r6
 8085154:	463b      	mov	r3, r7
 8085156:	f000 fd49 	bl	8085bec <__aeabi_dmul>
 808515a:	a359      	add	r3, pc, #356	; (adr r3, 80852c0 <__ieee754_pow+0x8c8>)
 808515c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085160:	f000 fb92 	bl	8085888 <__adddf3>
 8085164:	4632      	mov	r2, r6
 8085166:	463b      	mov	r3, r7
 8085168:	f000 fd40 	bl	8085bec <__aeabi_dmul>
 808516c:	4602      	mov	r2, r0
 808516e:	460b      	mov	r3, r1
 8085170:	4620      	mov	r0, r4
 8085172:	4629      	mov	r1, r5
 8085174:	f000 fb86 	bl	8085884 <__aeabi_dsub>
 8085178:	4606      	mov	r6, r0
 808517a:	460f      	mov	r7, r1
 808517c:	4602      	mov	r2, r0
 808517e:	460b      	mov	r3, r1
 8085180:	4620      	mov	r0, r4
 8085182:	4629      	mov	r1, r5
 8085184:	f000 fd32 	bl	8085bec <__aeabi_dmul>
 8085188:	2200      	movs	r2, #0
 808518a:	e9cd 0100 	strd	r0, r1, [sp]
 808518e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8085192:	4630      	mov	r0, r6
 8085194:	4639      	mov	r1, r7
 8085196:	f000 fb75 	bl	8085884 <__aeabi_dsub>
 808519a:	4602      	mov	r2, r0
 808519c:	460b      	mov	r3, r1
 808519e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80851a2:	f000 fe4d 	bl	8085e40 <__aeabi_ddiv>
 80851a6:	4642      	mov	r2, r8
 80851a8:	4606      	mov	r6, r0
 80851aa:	460f      	mov	r7, r1
 80851ac:	464b      	mov	r3, r9
 80851ae:	4620      	mov	r0, r4
 80851b0:	4629      	mov	r1, r5
 80851b2:	f000 fd1b 	bl	8085bec <__aeabi_dmul>
 80851b6:	4642      	mov	r2, r8
 80851b8:	464b      	mov	r3, r9
 80851ba:	f000 fb65 	bl	8085888 <__adddf3>
 80851be:	4602      	mov	r2, r0
 80851c0:	460b      	mov	r3, r1
 80851c2:	4630      	mov	r0, r6
 80851c4:	4639      	mov	r1, r7
 80851c6:	f000 fb5d 	bl	8085884 <__aeabi_dsub>
 80851ca:	4622      	mov	r2, r4
 80851cc:	462b      	mov	r3, r5
 80851ce:	f000 fb59 	bl	8085884 <__aeabi_dsub>
 80851d2:	4602      	mov	r2, r0
 80851d4:	460b      	mov	r3, r1
 80851d6:	2000      	movs	r0, #0
 80851d8:	493d      	ldr	r1, [pc, #244]	; (80852d0 <__ieee754_pow+0x8d8>)
 80851da:	f000 fb53 	bl	8085884 <__aeabi_dsub>
 80851de:	448a      	add	sl, r1
 80851e0:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
 80851e4:	f2c0 8137 	blt.w	8085456 <__ieee754_pow+0xa5e>
 80851e8:	4651      	mov	r1, sl
 80851ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80851ee:	f000 fcfd 	bl	8085bec <__aeabi_dmul>
 80851f2:	4683      	mov	fp, r0
 80851f4:	e418      	b.n	8084a28 <__ieee754_pow+0x30>
 80851f6:	46f3      	mov	fp, lr
 80851f8:	4935      	ldr	r1, [pc, #212]	; (80852d0 <__ieee754_pow+0x8d8>)
 80851fa:	e415      	b.n	8084a28 <__ieee754_pow+0x30>
 80851fc:	464a      	mov	r2, r9
 80851fe:	4648      	mov	r0, r9
 8085200:	463b      	mov	r3, r7
 8085202:	4639      	mov	r1, r7
 8085204:	f000 fcf2 	bl	8085bec <__aeabi_dmul>
 8085208:	4683      	mov	fp, r0
 808520a:	e40d      	b.n	8084a28 <__ieee754_pow+0x30>
 808520c:	4b34      	ldr	r3, [pc, #208]	; (80852e0 <__ieee754_pow+0x8e8>)
 808520e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8085212:	429f      	cmp	r7, r3
 8085214:	f340 8101 	ble.w	808541a <__ieee754_pow+0xa22>
 8085218:	4b32      	ldr	r3, [pc, #200]	; (80852e4 <__ieee754_pow+0x8ec>)
 808521a:	440b      	add	r3, r1
 808521c:	4303      	orrs	r3, r0
 808521e:	d10c      	bne.n	808523a <__ieee754_pow+0x842>
 8085220:	4642      	mov	r2, r8
 8085222:	464b      	mov	r3, r9
 8085224:	f000 fb2e 	bl	8085884 <__aeabi_dsub>
 8085228:	4602      	mov	r2, r0
 808522a:	460b      	mov	r3, r1
 808522c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8085230:	f000 ff58 	bl	80860e4 <__aeabi_dcmple>
 8085234:	2800      	cmp	r0, #0
 8085236:	f43f aefb 	beq.w	8085030 <__ieee754_pow+0x638>
 808523a:	a323      	add	r3, pc, #140	; (adr r3, 80852c8 <__ieee754_pow+0x8d0>)
 808523c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085240:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8085244:	f000 fcd2 	bl	8085bec <__aeabi_dmul>
 8085248:	a31f      	add	r3, pc, #124	; (adr r3, 80852c8 <__ieee754_pow+0x8d0>)
 808524a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808524e:	f000 fccd 	bl	8085bec <__aeabi_dmul>
 8085252:	4683      	mov	fp, r0
 8085254:	f7ff bbe8 	b.w	8084a28 <__ieee754_pow+0x30>
 8085258:	f1ba 0f00 	cmp.w	sl, #0
 808525c:	f6bf acae 	bge.w	8084bbc <__ieee754_pow+0x1c4>
 8085260:	e9dd 3400 	ldrd	r3, r4, [sp]
 8085264:	469b      	mov	fp, r3
 8085266:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 808526a:	f7ff bbdd 	b.w	8084a28 <__ieee754_pow+0x30>
 808526e:	4602      	mov	r2, r0
 8085270:	460b      	mov	r3, r1
 8085272:	2000      	movs	r0, #0
 8085274:	4916      	ldr	r1, [pc, #88]	; (80852d0 <__ieee754_pow+0x8d8>)
 8085276:	f000 fde3 	bl	8085e40 <__aeabi_ddiv>
 808527a:	e441      	b.n	8084b00 <__ieee754_pow+0x108>
 808527c:	f3af 8000 	nop.w
 8085280:	652b82fe 	.word	0x652b82fe
 8085284:	3c971547 	.word	0x3c971547
 8085288:	00000000 	.word	0x00000000
 808528c:	3fe62e43 	.word	0x3fe62e43
 8085290:	fefa39ef 	.word	0xfefa39ef
 8085294:	3fe62e42 	.word	0x3fe62e42
 8085298:	0ca86c39 	.word	0x0ca86c39
 808529c:	be205c61 	.word	0xbe205c61
 80852a0:	72bea4d0 	.word	0x72bea4d0
 80852a4:	3e663769 	.word	0x3e663769
 80852a8:	c5d26bf1 	.word	0xc5d26bf1
 80852ac:	3ebbbd41 	.word	0x3ebbbd41
 80852b0:	af25de2c 	.word	0xaf25de2c
 80852b4:	3f11566a 	.word	0x3f11566a
 80852b8:	16bebd93 	.word	0x16bebd93
 80852bc:	3f66c16c 	.word	0x3f66c16c
 80852c0:	5555553e 	.word	0x5555553e
 80852c4:	3fc55555 	.word	0x3fc55555
 80852c8:	c2f8f359 	.word	0xc2f8f359
 80852cc:	01a56e1f 	.word	0x01a56e1f
 80852d0:	3ff00000 	.word	0x3ff00000
 80852d4:	bff00000 	.word	0xbff00000
 80852d8:	408fffff 	.word	0x408fffff
 80852dc:	000fffff 	.word	0x000fffff
 80852e0:	4090cbff 	.word	0x4090cbff
 80852e4:	3f6f3400 	.word	0x3f6f3400
 80852e8:	4b6f      	ldr	r3, [pc, #444]	; (80854a8 <__ieee754_pow+0xab0>)
 80852ea:	429e      	cmp	r6, r3
 80852ec:	f77f ac63 	ble.w	8084bb6 <__ieee754_pow+0x1be>
 80852f0:	4b6e      	ldr	r3, [pc, #440]	; (80854ac <__ieee754_pow+0xab4>)
 80852f2:	429e      	cmp	r6, r3
 80852f4:	f73f abee 	bgt.w	8084ad4 <__ieee754_pow+0xdc>
 80852f8:	2200      	movs	r2, #0
 80852fa:	4b6c      	ldr	r3, [pc, #432]	; (80854ac <__ieee754_pow+0xab4>)
 80852fc:	f000 fac2 	bl	8085884 <__aeabi_dsub>
 8085300:	a35b      	add	r3, pc, #364	; (adr r3, 8085470 <__ieee754_pow+0xa78>)
 8085302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085306:	4606      	mov	r6, r0
 8085308:	460f      	mov	r7, r1
 808530a:	f000 fc6f 	bl	8085bec <__aeabi_dmul>
 808530e:	a35a      	add	r3, pc, #360	; (adr r3, 8085478 <__ieee754_pow+0xa80>)
 8085310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085314:	4680      	mov	r8, r0
 8085316:	4689      	mov	r9, r1
 8085318:	4630      	mov	r0, r6
 808531a:	4639      	mov	r1, r7
 808531c:	f000 fc66 	bl	8085bec <__aeabi_dmul>
 8085320:	2200      	movs	r2, #0
 8085322:	4682      	mov	sl, r0
 8085324:	468b      	mov	fp, r1
 8085326:	4b62      	ldr	r3, [pc, #392]	; (80854b0 <__ieee754_pow+0xab8>)
 8085328:	4630      	mov	r0, r6
 808532a:	4639      	mov	r1, r7
 808532c:	f000 fc5e 	bl	8085bec <__aeabi_dmul>
 8085330:	4602      	mov	r2, r0
 8085332:	460b      	mov	r3, r1
 8085334:	a152      	add	r1, pc, #328	; (adr r1, 8085480 <__ieee754_pow+0xa88>)
 8085336:	e9d1 0100 	ldrd	r0, r1, [r1]
 808533a:	f000 faa3 	bl	8085884 <__aeabi_dsub>
 808533e:	4632      	mov	r2, r6
 8085340:	463b      	mov	r3, r7
 8085342:	f000 fc53 	bl	8085bec <__aeabi_dmul>
 8085346:	4602      	mov	r2, r0
 8085348:	460b      	mov	r3, r1
 808534a:	2000      	movs	r0, #0
 808534c:	4959      	ldr	r1, [pc, #356]	; (80854b4 <__ieee754_pow+0xabc>)
 808534e:	f000 fa99 	bl	8085884 <__aeabi_dsub>
 8085352:	4632      	mov	r2, r6
 8085354:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8085358:	463b      	mov	r3, r7
 808535a:	4630      	mov	r0, r6
 808535c:	4639      	mov	r1, r7
 808535e:	f000 fc45 	bl	8085bec <__aeabi_dmul>
 8085362:	4602      	mov	r2, r0
 8085364:	460b      	mov	r3, r1
 8085366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808536a:	f000 fc3f 	bl	8085bec <__aeabi_dmul>
 808536e:	a346      	add	r3, pc, #280	; (adr r3, 8085488 <__ieee754_pow+0xa90>)
 8085370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085374:	f000 fc3a 	bl	8085bec <__aeabi_dmul>
 8085378:	4602      	mov	r2, r0
 808537a:	460b      	mov	r3, r1
 808537c:	4650      	mov	r0, sl
 808537e:	4659      	mov	r1, fp
 8085380:	f000 fa80 	bl	8085884 <__aeabi_dsub>
 8085384:	4602      	mov	r2, r0
 8085386:	460b      	mov	r3, r1
 8085388:	4606      	mov	r6, r0
 808538a:	460f      	mov	r7, r1
 808538c:	4640      	mov	r0, r8
 808538e:	4649      	mov	r1, r9
 8085390:	f000 fa7a 	bl	8085888 <__adddf3>
 8085394:	4642      	mov	r2, r8
 8085396:	464b      	mov	r3, r9
 8085398:	2000      	movs	r0, #0
 808539a:	4682      	mov	sl, r0
 808539c:	468b      	mov	fp, r1
 808539e:	f000 fa71 	bl	8085884 <__aeabi_dsub>
 80853a2:	4602      	mov	r2, r0
 80853a4:	460b      	mov	r3, r1
 80853a6:	4630      	mov	r0, r6
 80853a8:	4639      	mov	r1, r7
 80853aa:	f000 fa6b 	bl	8085884 <__aeabi_dsub>
 80853ae:	4680      	mov	r8, r0
 80853b0:	4689      	mov	r9, r1
 80853b2:	e5d9      	b.n	8084f68 <__ieee754_pow+0x570>
 80853b4:	2200      	movs	r2, #0
 80853b6:	2300      	movs	r3, #0
 80853b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80853bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80853c0:	4b3a      	ldr	r3, [pc, #232]	; (80854ac <__ieee754_pow+0xab4>)
 80853c2:	2200      	movs	r2, #0
 80853c4:	2600      	movs	r6, #0
 80853c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80853ca:	e43d      	b.n	8084c48 <__ieee754_pow+0x250>
 80853cc:	464a      	mov	r2, r9
 80853ce:	463b      	mov	r3, r7
 80853d0:	2000      	movs	r0, #0
 80853d2:	4936      	ldr	r1, [pc, #216]	; (80854ac <__ieee754_pow+0xab4>)
 80853d4:	f000 fd34 	bl	8085e40 <__aeabi_ddiv>
 80853d8:	4683      	mov	fp, r0
 80853da:	f7ff bb25 	b.w	8084a28 <__ieee754_pow+0x30>
 80853de:	a32c      	add	r3, pc, #176	; (adr r3, 8085490 <__ieee754_pow+0xa98>)
 80853e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80853e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80853e8:	f000 fc00 	bl	8085bec <__aeabi_dmul>
 80853ec:	a328      	add	r3, pc, #160	; (adr r3, 8085490 <__ieee754_pow+0xa98>)
 80853ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80853f2:	f000 fbfb 	bl	8085bec <__aeabi_dmul>
 80853f6:	4683      	mov	fp, r0
 80853f8:	f7ff bb16 	b.w	8084a28 <__ieee754_pow+0x30>
 80853fc:	f1be 0f00 	cmp.w	lr, #0
 8085400:	f47f ab4f 	bne.w	8084aa2 <__ieee754_pow+0xaa>
 8085404:	f1c3 0314 	rsb	r3, r3, #20
 8085408:	fa48 f203 	asr.w	r2, r8, r3
 808540c:	fa02 f303 	lsl.w	r3, r2, r3
 8085410:	4598      	cmp	r8, r3
 8085412:	d024      	beq.n	808545e <__ieee754_pow+0xa66>
 8085414:	4674      	mov	r4, lr
 8085416:	f7ff bb21 	b.w	8084a5c <__ieee754_pow+0x64>
 808541a:	4b26      	ldr	r3, [pc, #152]	; (80854b4 <__ieee754_pow+0xabc>)
 808541c:	429f      	cmp	r7, r3
 808541e:	f73f ae07 	bgt.w	8085030 <__ieee754_pow+0x638>
 8085422:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 8085426:	469a      	mov	sl, r3
 8085428:	469b      	mov	fp, r3
 808542a:	e62e      	b.n	808508a <__ieee754_pow+0x692>
 808542c:	4602      	mov	r2, r0
 808542e:	460b      	mov	r3, r1
 8085430:	f7ff bbb9 	b.w	8084ba6 <__ieee754_pow+0x1ae>
 8085434:	4b20      	ldr	r3, [pc, #128]	; (80854b8 <__ieee754_pow+0xac0>)
 8085436:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 808543a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 808543e:	a316      	add	r3, pc, #88	; (adr r3, 8085498 <__ieee754_pow+0xaa0>)
 8085440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085444:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8085448:	a315      	add	r3, pc, #84	; (adr r3, 80854a0 <__ieee754_pow+0xaa8>)
 808544a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808544e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8085452:	f7ff bbf9 	b.w	8084c48 <__ieee754_pow+0x250>
 8085456:	465a      	mov	r2, fp
 8085458:	f000 f996 	bl	8085788 <scalbn>
 808545c:	e6c5      	b.n	80851ea <__ieee754_pow+0x7f2>
 808545e:	f002 0201 	and.w	r2, r2, #1
 8085462:	f1c2 0402 	rsb	r4, r2, #2
 8085466:	f7ff baf9 	b.w	8084a5c <__ieee754_pow+0x64>
 808546a:	bf00      	nop
 808546c:	f3af 8000 	nop.w
 8085470:	60000000 	.word	0x60000000
 8085474:	3ff71547 	.word	0x3ff71547
 8085478:	f85ddf44 	.word	0xf85ddf44
 808547c:	3e54ae0b 	.word	0x3e54ae0b
 8085480:	55555555 	.word	0x55555555
 8085484:	3fd55555 	.word	0x3fd55555
 8085488:	652b82fe 	.word	0x652b82fe
 808548c:	3ff71547 	.word	0x3ff71547
 8085490:	8800759c 	.word	0x8800759c
 8085494:	7e37e43c 	.word	0x7e37e43c
 8085498:	40000000 	.word	0x40000000
 808549c:	3fe2b803 	.word	0x3fe2b803
 80854a0:	43cfd006 	.word	0x43cfd006
 80854a4:	3e4cfdeb 	.word	0x3e4cfdeb
 80854a8:	3feffffe 	.word	0x3feffffe
 80854ac:	3ff00000 	.word	0x3ff00000
 80854b0:	3fd00000 	.word	0x3fd00000
 80854b4:	3fe00000 	.word	0x3fe00000
 80854b8:	3ff80000 	.word	0x3ff80000

080854bc <__ieee754_sqrt>:
 80854bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80854c0:	4e5f      	ldr	r6, [pc, #380]	; (8085640 <__ieee754_sqrt+0x184>)
 80854c2:	460c      	mov	r4, r1
 80854c4:	46b6      	mov	lr, r6
 80854c6:	400e      	ands	r6, r1
 80854c8:	4576      	cmp	r6, lr
 80854ca:	4605      	mov	r5, r0
 80854cc:	f000 8098 	beq.w	8085600 <__ieee754_sqrt+0x144>
 80854d0:	2900      	cmp	r1, #0
 80854d2:	460b      	mov	r3, r1
 80854d4:	4602      	mov	r2, r0
 80854d6:	dd74      	ble.n	80855c2 <__ieee754_sqrt+0x106>
 80854d8:	ea5f 5e21 	movs.w	lr, r1, asr #20
 80854dc:	d07f      	beq.n	80855de <__ieee754_sqrt+0x122>
 80854de:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
 80854e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80854e6:	f01e 0f01 	tst.w	lr, #1
 80854ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80854ee:	d163      	bne.n	80855b8 <__ieee754_sqrt+0xfc>
 80854f0:	2700      	movs	r7, #0
 80854f2:	463e      	mov	r6, r7
 80854f4:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 80854f8:	440b      	add	r3, r1
 80854fa:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 80854fe:	0052      	lsls	r2, r2, #1
 8085500:	2016      	movs	r0, #22
 8085502:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8085506:	1874      	adds	r4, r6, r1
 8085508:	429c      	cmp	r4, r3
 808550a:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 808550e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8085512:	dc02      	bgt.n	808551a <__ieee754_sqrt+0x5e>
 8085514:	1b1b      	subs	r3, r3, r4
 8085516:	1866      	adds	r6, r4, r1
 8085518:	440f      	add	r7, r1
 808551a:	3801      	subs	r0, #1
 808551c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8085520:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8085524:	d1ef      	bne.n	8085506 <__ieee754_sqrt+0x4a>
 8085526:	4684      	mov	ip, r0
 8085528:	2420      	movs	r4, #32
 808552a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 808552e:	e009      	b.n	8085544 <__ieee754_sqrt+0x88>
 8085530:	d020      	beq.n	8085574 <__ieee754_sqrt+0xb8>
 8085532:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 8085536:	3c01      	subs	r4, #1
 8085538:	ea4f 0151 	mov.w	r1, r1, lsr #1
 808553c:	442b      	add	r3, r5
 808553e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8085542:	d020      	beq.n	8085586 <__ieee754_sqrt+0xca>
 8085544:	429e      	cmp	r6, r3
 8085546:	eb01 050c 	add.w	r5, r1, ip
 808554a:	daf1      	bge.n	8085530 <__ieee754_sqrt+0x74>
 808554c:	2d00      	cmp	r5, #0
 808554e:	eb05 0c01 	add.w	ip, r5, r1
 8085552:	db09      	blt.n	8085568 <__ieee754_sqrt+0xac>
 8085554:	46b0      	mov	r8, r6
 8085556:	4295      	cmp	r5, r2
 8085558:	eba3 0306 	sub.w	r3, r3, r6
 808555c:	d900      	bls.n	8085560 <__ieee754_sqrt+0xa4>
 808555e:	3b01      	subs	r3, #1
 8085560:	4646      	mov	r6, r8
 8085562:	1b52      	subs	r2, r2, r5
 8085564:	4408      	add	r0, r1
 8085566:	e7e4      	b.n	8085532 <__ieee754_sqrt+0x76>
 8085568:	f1bc 0f00 	cmp.w	ip, #0
 808556c:	dbf2      	blt.n	8085554 <__ieee754_sqrt+0x98>
 808556e:	f106 0801 	add.w	r8, r6, #1
 8085572:	e7f0      	b.n	8085556 <__ieee754_sqrt+0x9a>
 8085574:	4295      	cmp	r5, r2
 8085576:	d817      	bhi.n	80855a8 <__ieee754_sqrt+0xec>
 8085578:	2d00      	cmp	r5, #0
 808557a:	eb05 0c01 	add.w	ip, r5, r1
 808557e:	db49      	blt.n	8085614 <__ieee754_sqrt+0x158>
 8085580:	4698      	mov	r8, r3
 8085582:	2300      	movs	r3, #0
 8085584:	e7ec      	b.n	8085560 <__ieee754_sqrt+0xa4>
 8085586:	4313      	orrs	r3, r2
 8085588:	d110      	bne.n	80855ac <__ieee754_sqrt+0xf0>
 808558a:	0840      	lsrs	r0, r0, #1
 808558c:	107b      	asrs	r3, r7, #1
 808558e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8085592:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8085596:	07fa      	lsls	r2, r7, #31
 8085598:	eb03 570e 	add.w	r7, r3, lr, lsl #20
 808559c:	4639      	mov	r1, r7
 808559e:	bf48      	it	mi
 80855a0:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 80855a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80855a8:	4633      	mov	r3, r6
 80855aa:	e7c2      	b.n	8085532 <__ieee754_sqrt+0x76>
 80855ac:	1c41      	adds	r1, r0, #1
 80855ae:	d035      	beq.n	808561c <__ieee754_sqrt+0x160>
 80855b0:	f000 0301 	and.w	r3, r0, #1
 80855b4:	4418      	add	r0, r3
 80855b6:	e7e8      	b.n	808558a <__ieee754_sqrt+0xce>
 80855b8:	005b      	lsls	r3, r3, #1
 80855ba:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80855be:	0052      	lsls	r2, r2, #1
 80855c0:	e796      	b.n	80854f0 <__ieee754_sqrt+0x34>
 80855c2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80855c6:	4306      	orrs	r6, r0
 80855c8:	d0ec      	beq.n	80855a4 <__ieee754_sqrt+0xe8>
 80855ca:	bb79      	cbnz	r1, 808562c <__ieee754_sqrt+0x170>
 80855cc:	468e      	mov	lr, r1
 80855ce:	0ad3      	lsrs	r3, r2, #11
 80855d0:	f1ae 0e15 	sub.w	lr, lr, #21
 80855d4:	0552      	lsls	r2, r2, #21
 80855d6:	2b00      	cmp	r3, #0
 80855d8:	d0f9      	beq.n	80855ce <__ieee754_sqrt+0x112>
 80855da:	02dd      	lsls	r5, r3, #11
 80855dc:	d421      	bmi.n	8085622 <__ieee754_sqrt+0x166>
 80855de:	2100      	movs	r1, #0
 80855e0:	e000      	b.n	80855e4 <__ieee754_sqrt+0x128>
 80855e2:	4601      	mov	r1, r0
 80855e4:	005b      	lsls	r3, r3, #1
 80855e6:	02dc      	lsls	r4, r3, #11
 80855e8:	f101 0001 	add.w	r0, r1, #1
 80855ec:	d5f9      	bpl.n	80855e2 <__ieee754_sqrt+0x126>
 80855ee:	f1c0 0420 	rsb	r4, r0, #32
 80855f2:	fa22 f404 	lsr.w	r4, r2, r4
 80855f6:	4323      	orrs	r3, r4
 80855f8:	ebc1 0e0e 	rsb	lr, r1, lr
 80855fc:	4082      	lsls	r2, r0
 80855fe:	e76e      	b.n	80854de <__ieee754_sqrt+0x22>
 8085600:	4602      	mov	r2, r0
 8085602:	460b      	mov	r3, r1
 8085604:	f000 faf2 	bl	8085bec <__aeabi_dmul>
 8085608:	462a      	mov	r2, r5
 808560a:	4623      	mov	r3, r4
 808560c:	f000 f93c 	bl	8085888 <__adddf3>
 8085610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8085614:	f1bc 0f00 	cmp.w	ip, #0
 8085618:	daa9      	bge.n	808556e <__ieee754_sqrt+0xb2>
 808561a:	e7b1      	b.n	8085580 <__ieee754_sqrt+0xc4>
 808561c:	3701      	adds	r7, #1
 808561e:	4620      	mov	r0, r4
 8085620:	e7b4      	b.n	808558c <__ieee754_sqrt+0xd0>
 8085622:	2420      	movs	r4, #32
 8085624:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8085628:	2000      	movs	r0, #0
 808562a:	e7e2      	b.n	80855f2 <__ieee754_sqrt+0x136>
 808562c:	4602      	mov	r2, r0
 808562e:	460b      	mov	r3, r1
 8085630:	f000 f928 	bl	8085884 <__aeabi_dsub>
 8085634:	4602      	mov	r2, r0
 8085636:	460b      	mov	r3, r1
 8085638:	f000 fc02 	bl	8085e40 <__aeabi_ddiv>
 808563c:	e7b2      	b.n	80855a4 <__ieee754_sqrt+0xe8>
 808563e:	bf00      	nop
 8085640:	7ff00000 	.word	0x7ff00000

08085644 <fabs>:
 8085644:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8085648:	4770      	bx	lr
 808564a:	bf00      	nop

0808564c <finite>:
 808564c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8085650:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8085654:	0fc0      	lsrs	r0, r0, #31
 8085656:	4770      	bx	lr

08085658 <matherr>:
 8085658:	2000      	movs	r0, #0
 808565a:	4770      	bx	lr

0808565c <nan>:
 808565c:	2000      	movs	r0, #0
 808565e:	4901      	ldr	r1, [pc, #4]	; (8085664 <nan+0x8>)
 8085660:	4770      	bx	lr
 8085662:	bf00      	nop
 8085664:	7ff80000 	.word	0x7ff80000

08085668 <rint>:
 8085668:	b5f0      	push	{r4, r5, r6, r7, lr}
 808566a:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 808566e:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
 8085672:	2e13      	cmp	r6, #19
 8085674:	b083      	sub	sp, #12
 8085676:	4602      	mov	r2, r0
 8085678:	460b      	mov	r3, r1
 808567a:	460c      	mov	r4, r1
 808567c:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8085680:	4607      	mov	r7, r0
 8085682:	dc2e      	bgt.n	80856e2 <rint+0x7a>
 8085684:	2e00      	cmp	r6, #0
 8085686:	db49      	blt.n	808571c <rint+0xb4>
 8085688:	493d      	ldr	r1, [pc, #244]	; (8085780 <rint+0x118>)
 808568a:	4131      	asrs	r1, r6
 808568c:	ea03 0001 	and.w	r0, r3, r1
 8085690:	4310      	orrs	r0, r2
 8085692:	d02b      	beq.n	80856ec <rint+0x84>
 8085694:	0849      	lsrs	r1, r1, #1
 8085696:	400b      	ands	r3, r1
 8085698:	ea53 0702 	orrs.w	r7, r3, r2
 808569c:	d00c      	beq.n	80856b8 <rint+0x50>
 808569e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80856a2:	2e13      	cmp	r6, #19
 80856a4:	ea24 0101 	bic.w	r1, r4, r1
 80856a8:	fa43 f406 	asr.w	r4, r3, r6
 80856ac:	ea44 0401 	orr.w	r4, r4, r1
 80856b0:	bf0c      	ite	eq
 80856b2:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 80856b6:	2700      	movne	r7, #0
 80856b8:	4b32      	ldr	r3, [pc, #200]	; (8085784 <rint+0x11c>)
 80856ba:	4621      	mov	r1, r4
 80856bc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80856c0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80856c4:	4638      	mov	r0, r7
 80856c6:	4622      	mov	r2, r4
 80856c8:	462b      	mov	r3, r5
 80856ca:	f000 f8dd 	bl	8085888 <__adddf3>
 80856ce:	e9cd 0100 	strd	r0, r1, [sp]
 80856d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80856d6:	4622      	mov	r2, r4
 80856d8:	462b      	mov	r3, r5
 80856da:	f000 f8d3 	bl	8085884 <__aeabi_dsub>
 80856de:	b003      	add	sp, #12
 80856e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80856e2:	2e33      	cmp	r6, #51	; 0x33
 80856e4:	dd06      	ble.n	80856f4 <rint+0x8c>
 80856e6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80856ea:	d045      	beq.n	8085778 <rint+0x110>
 80856ec:	4610      	mov	r0, r2
 80856ee:	4619      	mov	r1, r3
 80856f0:	b003      	add	sp, #12
 80856f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80856f4:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
 80856f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80856fc:	fa21 f10e 	lsr.w	r1, r1, lr
 8085700:	4208      	tst	r0, r1
 8085702:	d0f3      	beq.n	80856ec <rint+0x84>
 8085704:	0849      	lsrs	r1, r1, #1
 8085706:	4208      	tst	r0, r1
 8085708:	d0d6      	beq.n	80856b8 <rint+0x50>
 808570a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 808570e:	ea20 0101 	bic.w	r1, r0, r1
 8085712:	fa43 fe0e 	asr.w	lr, r3, lr
 8085716:	ea4e 0701 	orr.w	r7, lr, r1
 808571a:	e7cd      	b.n	80856b8 <rint+0x50>
 808571c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8085720:	4301      	orrs	r1, r0
 8085722:	4619      	mov	r1, r3
 8085724:	d0e4      	beq.n	80856f0 <rint+0x88>
 8085726:	f3c3 0313 	ubfx	r3, r3, #0, #20
 808572a:	ea43 0c00 	orr.w	ip, r3, r0
 808572e:	f1cc 0300 	rsb	r3, ip, #0
 8085732:	ea43 0c0c 	orr.w	ip, r3, ip
 8085736:	4b13      	ldr	r3, [pc, #76]	; (8085784 <rint+0x11c>)
 8085738:	0c64      	lsrs	r4, r4, #17
 808573a:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
 808573e:	f40c 2c00 	and.w	ip, ip, #524288	; 0x80000
 8085742:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8085746:	0464      	lsls	r4, r4, #17
 8085748:	e9d3 6700 	ldrd	r6, r7, [r3]
 808574c:	ea4c 0104 	orr.w	r1, ip, r4
 8085750:	4632      	mov	r2, r6
 8085752:	463b      	mov	r3, r7
 8085754:	f000 f898 	bl	8085888 <__adddf3>
 8085758:	e9cd 0100 	strd	r0, r1, [sp]
 808575c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8085760:	4632      	mov	r2, r6
 8085762:	463b      	mov	r3, r7
 8085764:	f000 f88e 	bl	8085884 <__aeabi_dsub>
 8085768:	4602      	mov	r2, r0
 808576a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808576e:	ea41 73c5 	orr.w	r3, r1, r5, lsl #31
 8085772:	4610      	mov	r0, r2
 8085774:	4619      	mov	r1, r3
 8085776:	e7bb      	b.n	80856f0 <rint+0x88>
 8085778:	f000 f886 	bl	8085888 <__adddf3>
 808577c:	e7b8      	b.n	80856f0 <rint+0x88>
 808577e:	bf00      	nop
 8085780:	000fffff 	.word	0x000fffff
 8085784:	08087e20 	.word	0x08087e20

08085788 <scalbn>:
 8085788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808578a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 808578e:	4604      	mov	r4, r0
 8085790:	460d      	mov	r5, r1
 8085792:	460b      	mov	r3, r1
 8085794:	4617      	mov	r7, r2
 8085796:	bb06      	cbnz	r6, 80857da <scalbn+0x52>
 8085798:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 808579c:	4303      	orrs	r3, r0
 808579e:	d025      	beq.n	80857ec <scalbn+0x64>
 80857a0:	2200      	movs	r2, #0
 80857a2:	4b2f      	ldr	r3, [pc, #188]	; (8085860 <scalbn+0xd8>)
 80857a4:	f000 fa22 	bl	8085bec <__aeabi_dmul>
 80857a8:	4a2e      	ldr	r2, [pc, #184]	; (8085864 <scalbn+0xdc>)
 80857aa:	4604      	mov	r4, r0
 80857ac:	4297      	cmp	r7, r2
 80857ae:	460d      	mov	r5, r1
 80857b0:	460b      	mov	r3, r1
 80857b2:	db2a      	blt.n	808580a <scalbn+0x82>
 80857b4:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80857b8:	3e36      	subs	r6, #54	; 0x36
 80857ba:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80857be:	443e      	add	r6, r7
 80857c0:	4296      	cmp	r6, r2
 80857c2:	dc28      	bgt.n	8085816 <scalbn+0x8e>
 80857c4:	2e00      	cmp	r6, #0
 80857c6:	dd12      	ble.n	80857ee <scalbn+0x66>
 80857c8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80857cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80857d0:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 80857d4:	4620      	mov	r0, r4
 80857d6:	4629      	mov	r1, r5
 80857d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80857da:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80857de:	4296      	cmp	r6, r2
 80857e0:	d1eb      	bne.n	80857ba <scalbn+0x32>
 80857e2:	4602      	mov	r2, r0
 80857e4:	460b      	mov	r3, r1
 80857e6:	f000 f84f 	bl	8085888 <__adddf3>
 80857ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80857ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80857ee:	f116 0f35 	cmn.w	r6, #53	; 0x35
 80857f2:	da1d      	bge.n	8085830 <scalbn+0xa8>
 80857f4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80857f8:	429f      	cmp	r7, r3
 80857fa:	dc0c      	bgt.n	8085816 <scalbn+0x8e>
 80857fc:	a114      	add	r1, pc, #80	; (adr r1, 8085850 <scalbn+0xc8>)
 80857fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8085802:	4622      	mov	r2, r4
 8085804:	462b      	mov	r3, r5
 8085806:	f000 f831 	bl	808586c <copysign>
 808580a:	a311      	add	r3, pc, #68	; (adr r3, 8085850 <scalbn+0xc8>)
 808580c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085810:	f000 f9ec 	bl	8085bec <__aeabi_dmul>
 8085814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8085816:	4622      	mov	r2, r4
 8085818:	a10f      	add	r1, pc, #60	; (adr r1, 8085858 <scalbn+0xd0>)
 808581a:	e9d1 0100 	ldrd	r0, r1, [r1]
 808581e:	462b      	mov	r3, r5
 8085820:	f000 f824 	bl	808586c <copysign>
 8085824:	a30c      	add	r3, pc, #48	; (adr r3, 8085858 <scalbn+0xd0>)
 8085826:	e9d3 2300 	ldrd	r2, r3, [r3]
 808582a:	f000 f9df 	bl	8085bec <__aeabi_dmul>
 808582e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8085830:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8085834:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8085838:	3636      	adds	r6, #54	; 0x36
 808583a:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 808583e:	4620      	mov	r0, r4
 8085840:	4629      	mov	r1, r5
 8085842:	2200      	movs	r2, #0
 8085844:	4b08      	ldr	r3, [pc, #32]	; (8085868 <scalbn+0xe0>)
 8085846:	f000 f9d1 	bl	8085bec <__aeabi_dmul>
 808584a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808584c:	f3af 8000 	nop.w
 8085850:	c2f8f359 	.word	0xc2f8f359
 8085854:	01a56e1f 	.word	0x01a56e1f
 8085858:	8800759c 	.word	0x8800759c
 808585c:	7e37e43c 	.word	0x7e37e43c
 8085860:	43500000 	.word	0x43500000
 8085864:	ffff3cb0 	.word	0xffff3cb0
 8085868:	3c900000 	.word	0x3c900000

0808586c <copysign>:
 808586c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8085870:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8085874:	ea42 0103 	orr.w	r1, r2, r3
 8085878:	4770      	bx	lr
 808587a:	bf00      	nop

0808587c <__aeabi_drsub>:
 808587c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8085880:	e002      	b.n	8085888 <__adddf3>
 8085882:	bf00      	nop

08085884 <__aeabi_dsub>:
 8085884:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08085888 <__adddf3>:
 8085888:	b530      	push	{r4, r5, lr}
 808588a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 808588e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8085892:	ea94 0f05 	teq	r4, r5
 8085896:	bf08      	it	eq
 8085898:	ea90 0f02 	teqeq	r0, r2
 808589c:	bf1f      	itttt	ne
 808589e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80858a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80858a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80858aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80858ae:	f000 80e2 	beq.w	8085a76 <__adddf3+0x1ee>
 80858b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80858b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80858ba:	bfb8      	it	lt
 80858bc:	426d      	neglt	r5, r5
 80858be:	dd0c      	ble.n	80858da <__adddf3+0x52>
 80858c0:	442c      	add	r4, r5
 80858c2:	ea80 0202 	eor.w	r2, r0, r2
 80858c6:	ea81 0303 	eor.w	r3, r1, r3
 80858ca:	ea82 0000 	eor.w	r0, r2, r0
 80858ce:	ea83 0101 	eor.w	r1, r3, r1
 80858d2:	ea80 0202 	eor.w	r2, r0, r2
 80858d6:	ea81 0303 	eor.w	r3, r1, r3
 80858da:	2d36      	cmp	r5, #54	; 0x36
 80858dc:	bf88      	it	hi
 80858de:	bd30      	pophi	{r4, r5, pc}
 80858e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80858e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80858e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80858ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80858f0:	d002      	beq.n	80858f8 <__adddf3+0x70>
 80858f2:	4240      	negs	r0, r0
 80858f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80858f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80858fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8085900:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8085904:	d002      	beq.n	808590c <__adddf3+0x84>
 8085906:	4252      	negs	r2, r2
 8085908:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808590c:	ea94 0f05 	teq	r4, r5
 8085910:	f000 80a7 	beq.w	8085a62 <__adddf3+0x1da>
 8085914:	f1a4 0401 	sub.w	r4, r4, #1
 8085918:	f1d5 0e20 	rsbs	lr, r5, #32
 808591c:	db0d      	blt.n	808593a <__adddf3+0xb2>
 808591e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8085922:	fa22 f205 	lsr.w	r2, r2, r5
 8085926:	1880      	adds	r0, r0, r2
 8085928:	f141 0100 	adc.w	r1, r1, #0
 808592c:	fa03 f20e 	lsl.w	r2, r3, lr
 8085930:	1880      	adds	r0, r0, r2
 8085932:	fa43 f305 	asr.w	r3, r3, r5
 8085936:	4159      	adcs	r1, r3
 8085938:	e00e      	b.n	8085958 <__adddf3+0xd0>
 808593a:	f1a5 0520 	sub.w	r5, r5, #32
 808593e:	f10e 0e20 	add.w	lr, lr, #32
 8085942:	2a01      	cmp	r2, #1
 8085944:	fa03 fc0e 	lsl.w	ip, r3, lr
 8085948:	bf28      	it	cs
 808594a:	f04c 0c02 	orrcs.w	ip, ip, #2
 808594e:	fa43 f305 	asr.w	r3, r3, r5
 8085952:	18c0      	adds	r0, r0, r3
 8085954:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8085958:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808595c:	d507      	bpl.n	808596e <__adddf3+0xe6>
 808595e:	f04f 0e00 	mov.w	lr, #0
 8085962:	f1dc 0c00 	rsbs	ip, ip, #0
 8085966:	eb7e 0000 	sbcs.w	r0, lr, r0
 808596a:	eb6e 0101 	sbc.w	r1, lr, r1
 808596e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8085972:	d31b      	bcc.n	80859ac <__adddf3+0x124>
 8085974:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8085978:	d30c      	bcc.n	8085994 <__adddf3+0x10c>
 808597a:	0849      	lsrs	r1, r1, #1
 808597c:	ea5f 0030 	movs.w	r0, r0, rrx
 8085980:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8085984:	f104 0401 	add.w	r4, r4, #1
 8085988:	ea4f 5244 	mov.w	r2, r4, lsl #21
 808598c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8085990:	f080 809a 	bcs.w	8085ac8 <__adddf3+0x240>
 8085994:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8085998:	bf08      	it	eq
 808599a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808599e:	f150 0000 	adcs.w	r0, r0, #0
 80859a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80859a6:	ea41 0105 	orr.w	r1, r1, r5
 80859aa:	bd30      	pop	{r4, r5, pc}
 80859ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80859b0:	4140      	adcs	r0, r0
 80859b2:	eb41 0101 	adc.w	r1, r1, r1
 80859b6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80859ba:	f1a4 0401 	sub.w	r4, r4, #1
 80859be:	d1e9      	bne.n	8085994 <__adddf3+0x10c>
 80859c0:	f091 0f00 	teq	r1, #0
 80859c4:	bf04      	itt	eq
 80859c6:	4601      	moveq	r1, r0
 80859c8:	2000      	moveq	r0, #0
 80859ca:	fab1 f381 	clz	r3, r1
 80859ce:	bf08      	it	eq
 80859d0:	3320      	addeq	r3, #32
 80859d2:	f1a3 030b 	sub.w	r3, r3, #11
 80859d6:	f1b3 0220 	subs.w	r2, r3, #32
 80859da:	da0c      	bge.n	80859f6 <__adddf3+0x16e>
 80859dc:	320c      	adds	r2, #12
 80859de:	dd08      	ble.n	80859f2 <__adddf3+0x16a>
 80859e0:	f102 0c14 	add.w	ip, r2, #20
 80859e4:	f1c2 020c 	rsb	r2, r2, #12
 80859e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80859ec:	fa21 f102 	lsr.w	r1, r1, r2
 80859f0:	e00c      	b.n	8085a0c <__adddf3+0x184>
 80859f2:	f102 0214 	add.w	r2, r2, #20
 80859f6:	bfd8      	it	le
 80859f8:	f1c2 0c20 	rsble	ip, r2, #32
 80859fc:	fa01 f102 	lsl.w	r1, r1, r2
 8085a00:	fa20 fc0c 	lsr.w	ip, r0, ip
 8085a04:	bfdc      	itt	le
 8085a06:	ea41 010c 	orrle.w	r1, r1, ip
 8085a0a:	4090      	lslle	r0, r2
 8085a0c:	1ae4      	subs	r4, r4, r3
 8085a0e:	bfa2      	ittt	ge
 8085a10:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8085a14:	4329      	orrge	r1, r5
 8085a16:	bd30      	popge	{r4, r5, pc}
 8085a18:	ea6f 0404 	mvn.w	r4, r4
 8085a1c:	3c1f      	subs	r4, #31
 8085a1e:	da1c      	bge.n	8085a5a <__adddf3+0x1d2>
 8085a20:	340c      	adds	r4, #12
 8085a22:	dc0e      	bgt.n	8085a42 <__adddf3+0x1ba>
 8085a24:	f104 0414 	add.w	r4, r4, #20
 8085a28:	f1c4 0220 	rsb	r2, r4, #32
 8085a2c:	fa20 f004 	lsr.w	r0, r0, r4
 8085a30:	fa01 f302 	lsl.w	r3, r1, r2
 8085a34:	ea40 0003 	orr.w	r0, r0, r3
 8085a38:	fa21 f304 	lsr.w	r3, r1, r4
 8085a3c:	ea45 0103 	orr.w	r1, r5, r3
 8085a40:	bd30      	pop	{r4, r5, pc}
 8085a42:	f1c4 040c 	rsb	r4, r4, #12
 8085a46:	f1c4 0220 	rsb	r2, r4, #32
 8085a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8085a4e:	fa01 f304 	lsl.w	r3, r1, r4
 8085a52:	ea40 0003 	orr.w	r0, r0, r3
 8085a56:	4629      	mov	r1, r5
 8085a58:	bd30      	pop	{r4, r5, pc}
 8085a5a:	fa21 f004 	lsr.w	r0, r1, r4
 8085a5e:	4629      	mov	r1, r5
 8085a60:	bd30      	pop	{r4, r5, pc}
 8085a62:	f094 0f00 	teq	r4, #0
 8085a66:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8085a6a:	bf06      	itte	eq
 8085a6c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8085a70:	3401      	addeq	r4, #1
 8085a72:	3d01      	subne	r5, #1
 8085a74:	e74e      	b.n	8085914 <__adddf3+0x8c>
 8085a76:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8085a7a:	bf18      	it	ne
 8085a7c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8085a80:	d029      	beq.n	8085ad6 <__adddf3+0x24e>
 8085a82:	ea94 0f05 	teq	r4, r5
 8085a86:	bf08      	it	eq
 8085a88:	ea90 0f02 	teqeq	r0, r2
 8085a8c:	d005      	beq.n	8085a9a <__adddf3+0x212>
 8085a8e:	ea54 0c00 	orrs.w	ip, r4, r0
 8085a92:	bf04      	itt	eq
 8085a94:	4619      	moveq	r1, r3
 8085a96:	4610      	moveq	r0, r2
 8085a98:	bd30      	pop	{r4, r5, pc}
 8085a9a:	ea91 0f03 	teq	r1, r3
 8085a9e:	bf1e      	ittt	ne
 8085aa0:	2100      	movne	r1, #0
 8085aa2:	2000      	movne	r0, #0
 8085aa4:	bd30      	popne	{r4, r5, pc}
 8085aa6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8085aaa:	d105      	bne.n	8085ab8 <__adddf3+0x230>
 8085aac:	0040      	lsls	r0, r0, #1
 8085aae:	4149      	adcs	r1, r1
 8085ab0:	bf28      	it	cs
 8085ab2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8085ab6:	bd30      	pop	{r4, r5, pc}
 8085ab8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8085abc:	bf3c      	itt	cc
 8085abe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8085ac2:	bd30      	popcc	{r4, r5, pc}
 8085ac4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8085ac8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8085acc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8085ad0:	f04f 0000 	mov.w	r0, #0
 8085ad4:	bd30      	pop	{r4, r5, pc}
 8085ad6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8085ada:	bf1a      	itte	ne
 8085adc:	4619      	movne	r1, r3
 8085ade:	4610      	movne	r0, r2
 8085ae0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8085ae4:	bf1c      	itt	ne
 8085ae6:	460b      	movne	r3, r1
 8085ae8:	4602      	movne	r2, r0
 8085aea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8085aee:	bf06      	itte	eq
 8085af0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8085af4:	ea91 0f03 	teqeq	r1, r3
 8085af8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8085afc:	bd30      	pop	{r4, r5, pc}
 8085afe:	bf00      	nop

08085b00 <__aeabi_ui2d>:
 8085b00:	f090 0f00 	teq	r0, #0
 8085b04:	bf04      	itt	eq
 8085b06:	2100      	moveq	r1, #0
 8085b08:	4770      	bxeq	lr
 8085b0a:	b530      	push	{r4, r5, lr}
 8085b0c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8085b10:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8085b14:	f04f 0500 	mov.w	r5, #0
 8085b18:	f04f 0100 	mov.w	r1, #0
 8085b1c:	e750      	b.n	80859c0 <__adddf3+0x138>
 8085b1e:	bf00      	nop

08085b20 <__aeabi_i2d>:
 8085b20:	f090 0f00 	teq	r0, #0
 8085b24:	bf04      	itt	eq
 8085b26:	2100      	moveq	r1, #0
 8085b28:	4770      	bxeq	lr
 8085b2a:	b530      	push	{r4, r5, lr}
 8085b2c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8085b30:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8085b34:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8085b38:	bf48      	it	mi
 8085b3a:	4240      	negmi	r0, r0
 8085b3c:	f04f 0100 	mov.w	r1, #0
 8085b40:	e73e      	b.n	80859c0 <__adddf3+0x138>
 8085b42:	bf00      	nop

08085b44 <__aeabi_f2d>:
 8085b44:	0042      	lsls	r2, r0, #1
 8085b46:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8085b4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8085b4e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8085b52:	bf1f      	itttt	ne
 8085b54:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8085b58:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8085b5c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8085b60:	4770      	bxne	lr
 8085b62:	f092 0f00 	teq	r2, #0
 8085b66:	bf14      	ite	ne
 8085b68:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8085b6c:	4770      	bxeq	lr
 8085b6e:	b530      	push	{r4, r5, lr}
 8085b70:	f44f 7460 	mov.w	r4, #896	; 0x380
 8085b74:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8085b78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8085b7c:	e720      	b.n	80859c0 <__adddf3+0x138>
 8085b7e:	bf00      	nop

08085b80 <__aeabi_ul2d>:
 8085b80:	ea50 0201 	orrs.w	r2, r0, r1
 8085b84:	bf08      	it	eq
 8085b86:	4770      	bxeq	lr
 8085b88:	b530      	push	{r4, r5, lr}
 8085b8a:	f04f 0500 	mov.w	r5, #0
 8085b8e:	e00a      	b.n	8085ba6 <__aeabi_l2d+0x16>

08085b90 <__aeabi_l2d>:
 8085b90:	ea50 0201 	orrs.w	r2, r0, r1
 8085b94:	bf08      	it	eq
 8085b96:	4770      	bxeq	lr
 8085b98:	b530      	push	{r4, r5, lr}
 8085b9a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8085b9e:	d502      	bpl.n	8085ba6 <__aeabi_l2d+0x16>
 8085ba0:	4240      	negs	r0, r0
 8085ba2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8085ba6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8085baa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8085bae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8085bb2:	f43f aedc 	beq.w	808596e <__adddf3+0xe6>
 8085bb6:	f04f 0203 	mov.w	r2, #3
 8085bba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8085bbe:	bf18      	it	ne
 8085bc0:	3203      	addne	r2, #3
 8085bc2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8085bc6:	bf18      	it	ne
 8085bc8:	3203      	addne	r2, #3
 8085bca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8085bce:	f1c2 0320 	rsb	r3, r2, #32
 8085bd2:	fa00 fc03 	lsl.w	ip, r0, r3
 8085bd6:	fa20 f002 	lsr.w	r0, r0, r2
 8085bda:	fa01 fe03 	lsl.w	lr, r1, r3
 8085bde:	ea40 000e 	orr.w	r0, r0, lr
 8085be2:	fa21 f102 	lsr.w	r1, r1, r2
 8085be6:	4414      	add	r4, r2
 8085be8:	e6c1      	b.n	808596e <__adddf3+0xe6>
 8085bea:	bf00      	nop

08085bec <__aeabi_dmul>:
 8085bec:	b570      	push	{r4, r5, r6, lr}
 8085bee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8085bf2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8085bf6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8085bfa:	bf1d      	ittte	ne
 8085bfc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8085c00:	ea94 0f0c 	teqne	r4, ip
 8085c04:	ea95 0f0c 	teqne	r5, ip
 8085c08:	f000 f8de 	bleq	8085dc8 <__aeabi_dmul+0x1dc>
 8085c0c:	442c      	add	r4, r5
 8085c0e:	ea81 0603 	eor.w	r6, r1, r3
 8085c12:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8085c16:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8085c1a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8085c1e:	bf18      	it	ne
 8085c20:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8085c24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8085c28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8085c2c:	d038      	beq.n	8085ca0 <__aeabi_dmul+0xb4>
 8085c2e:	fba0 ce02 	umull	ip, lr, r0, r2
 8085c32:	f04f 0500 	mov.w	r5, #0
 8085c36:	fbe1 e502 	umlal	lr, r5, r1, r2
 8085c3a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8085c3e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8085c42:	f04f 0600 	mov.w	r6, #0
 8085c46:	fbe1 5603 	umlal	r5, r6, r1, r3
 8085c4a:	f09c 0f00 	teq	ip, #0
 8085c4e:	bf18      	it	ne
 8085c50:	f04e 0e01 	orrne.w	lr, lr, #1
 8085c54:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8085c58:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8085c5c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8085c60:	d204      	bcs.n	8085c6c <__aeabi_dmul+0x80>
 8085c62:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8085c66:	416d      	adcs	r5, r5
 8085c68:	eb46 0606 	adc.w	r6, r6, r6
 8085c6c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8085c70:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8085c74:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8085c78:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8085c7c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8085c80:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8085c84:	bf88      	it	hi
 8085c86:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8085c8a:	d81e      	bhi.n	8085cca <__aeabi_dmul+0xde>
 8085c8c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8085c90:	bf08      	it	eq
 8085c92:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8085c96:	f150 0000 	adcs.w	r0, r0, #0
 8085c9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8085c9e:	bd70      	pop	{r4, r5, r6, pc}
 8085ca0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8085ca4:	ea46 0101 	orr.w	r1, r6, r1
 8085ca8:	ea40 0002 	orr.w	r0, r0, r2
 8085cac:	ea81 0103 	eor.w	r1, r1, r3
 8085cb0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8085cb4:	bfc2      	ittt	gt
 8085cb6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8085cba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8085cbe:	bd70      	popgt	{r4, r5, r6, pc}
 8085cc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8085cc4:	f04f 0e00 	mov.w	lr, #0
 8085cc8:	3c01      	subs	r4, #1
 8085cca:	f300 80ab 	bgt.w	8085e24 <__aeabi_dmul+0x238>
 8085cce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8085cd2:	bfde      	ittt	le
 8085cd4:	2000      	movle	r0, #0
 8085cd6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8085cda:	bd70      	pople	{r4, r5, r6, pc}
 8085cdc:	f1c4 0400 	rsb	r4, r4, #0
 8085ce0:	3c20      	subs	r4, #32
 8085ce2:	da35      	bge.n	8085d50 <__aeabi_dmul+0x164>
 8085ce4:	340c      	adds	r4, #12
 8085ce6:	dc1b      	bgt.n	8085d20 <__aeabi_dmul+0x134>
 8085ce8:	f104 0414 	add.w	r4, r4, #20
 8085cec:	f1c4 0520 	rsb	r5, r4, #32
 8085cf0:	fa00 f305 	lsl.w	r3, r0, r5
 8085cf4:	fa20 f004 	lsr.w	r0, r0, r4
 8085cf8:	fa01 f205 	lsl.w	r2, r1, r5
 8085cfc:	ea40 0002 	orr.w	r0, r0, r2
 8085d00:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8085d04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8085d08:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8085d0c:	fa21 f604 	lsr.w	r6, r1, r4
 8085d10:	eb42 0106 	adc.w	r1, r2, r6
 8085d14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8085d18:	bf08      	it	eq
 8085d1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8085d1e:	bd70      	pop	{r4, r5, r6, pc}
 8085d20:	f1c4 040c 	rsb	r4, r4, #12
 8085d24:	f1c4 0520 	rsb	r5, r4, #32
 8085d28:	fa00 f304 	lsl.w	r3, r0, r4
 8085d2c:	fa20 f005 	lsr.w	r0, r0, r5
 8085d30:	fa01 f204 	lsl.w	r2, r1, r4
 8085d34:	ea40 0002 	orr.w	r0, r0, r2
 8085d38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8085d3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8085d40:	f141 0100 	adc.w	r1, r1, #0
 8085d44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8085d48:	bf08      	it	eq
 8085d4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8085d4e:	bd70      	pop	{r4, r5, r6, pc}
 8085d50:	f1c4 0520 	rsb	r5, r4, #32
 8085d54:	fa00 f205 	lsl.w	r2, r0, r5
 8085d58:	ea4e 0e02 	orr.w	lr, lr, r2
 8085d5c:	fa20 f304 	lsr.w	r3, r0, r4
 8085d60:	fa01 f205 	lsl.w	r2, r1, r5
 8085d64:	ea43 0302 	orr.w	r3, r3, r2
 8085d68:	fa21 f004 	lsr.w	r0, r1, r4
 8085d6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8085d70:	fa21 f204 	lsr.w	r2, r1, r4
 8085d74:	ea20 0002 	bic.w	r0, r0, r2
 8085d78:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8085d7c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8085d80:	bf08      	it	eq
 8085d82:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8085d86:	bd70      	pop	{r4, r5, r6, pc}
 8085d88:	f094 0f00 	teq	r4, #0
 8085d8c:	d10f      	bne.n	8085dae <__aeabi_dmul+0x1c2>
 8085d8e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8085d92:	0040      	lsls	r0, r0, #1
 8085d94:	eb41 0101 	adc.w	r1, r1, r1
 8085d98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8085d9c:	bf08      	it	eq
 8085d9e:	3c01      	subeq	r4, #1
 8085da0:	d0f7      	beq.n	8085d92 <__aeabi_dmul+0x1a6>
 8085da2:	ea41 0106 	orr.w	r1, r1, r6
 8085da6:	f095 0f00 	teq	r5, #0
 8085daa:	bf18      	it	ne
 8085dac:	4770      	bxne	lr
 8085dae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8085db2:	0052      	lsls	r2, r2, #1
 8085db4:	eb43 0303 	adc.w	r3, r3, r3
 8085db8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8085dbc:	bf08      	it	eq
 8085dbe:	3d01      	subeq	r5, #1
 8085dc0:	d0f7      	beq.n	8085db2 <__aeabi_dmul+0x1c6>
 8085dc2:	ea43 0306 	orr.w	r3, r3, r6
 8085dc6:	4770      	bx	lr
 8085dc8:	ea94 0f0c 	teq	r4, ip
 8085dcc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8085dd0:	bf18      	it	ne
 8085dd2:	ea95 0f0c 	teqne	r5, ip
 8085dd6:	d00c      	beq.n	8085df2 <__aeabi_dmul+0x206>
 8085dd8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8085ddc:	bf18      	it	ne
 8085dde:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8085de2:	d1d1      	bne.n	8085d88 <__aeabi_dmul+0x19c>
 8085de4:	ea81 0103 	eor.w	r1, r1, r3
 8085de8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8085dec:	f04f 0000 	mov.w	r0, #0
 8085df0:	bd70      	pop	{r4, r5, r6, pc}
 8085df2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8085df6:	bf06      	itte	eq
 8085df8:	4610      	moveq	r0, r2
 8085dfa:	4619      	moveq	r1, r3
 8085dfc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8085e00:	d019      	beq.n	8085e36 <__aeabi_dmul+0x24a>
 8085e02:	ea94 0f0c 	teq	r4, ip
 8085e06:	d102      	bne.n	8085e0e <__aeabi_dmul+0x222>
 8085e08:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8085e0c:	d113      	bne.n	8085e36 <__aeabi_dmul+0x24a>
 8085e0e:	ea95 0f0c 	teq	r5, ip
 8085e12:	d105      	bne.n	8085e20 <__aeabi_dmul+0x234>
 8085e14:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8085e18:	bf1c      	itt	ne
 8085e1a:	4610      	movne	r0, r2
 8085e1c:	4619      	movne	r1, r3
 8085e1e:	d10a      	bne.n	8085e36 <__aeabi_dmul+0x24a>
 8085e20:	ea81 0103 	eor.w	r1, r1, r3
 8085e24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8085e28:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8085e2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8085e30:	f04f 0000 	mov.w	r0, #0
 8085e34:	bd70      	pop	{r4, r5, r6, pc}
 8085e36:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8085e3a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8085e3e:	bd70      	pop	{r4, r5, r6, pc}

08085e40 <__aeabi_ddiv>:
 8085e40:	b570      	push	{r4, r5, r6, lr}
 8085e42:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8085e46:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8085e4a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8085e4e:	bf1d      	ittte	ne
 8085e50:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8085e54:	ea94 0f0c 	teqne	r4, ip
 8085e58:	ea95 0f0c 	teqne	r5, ip
 8085e5c:	f000 f8a7 	bleq	8085fae <__aeabi_ddiv+0x16e>
 8085e60:	eba4 0405 	sub.w	r4, r4, r5
 8085e64:	ea81 0e03 	eor.w	lr, r1, r3
 8085e68:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8085e6c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8085e70:	f000 8088 	beq.w	8085f84 <__aeabi_ddiv+0x144>
 8085e74:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8085e78:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8085e7c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8085e80:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8085e84:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8085e88:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8085e8c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8085e90:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8085e94:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8085e98:	429d      	cmp	r5, r3
 8085e9a:	bf08      	it	eq
 8085e9c:	4296      	cmpeq	r6, r2
 8085e9e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8085ea2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8085ea6:	d202      	bcs.n	8085eae <__aeabi_ddiv+0x6e>
 8085ea8:	085b      	lsrs	r3, r3, #1
 8085eaa:	ea4f 0232 	mov.w	r2, r2, rrx
 8085eae:	1ab6      	subs	r6, r6, r2
 8085eb0:	eb65 0503 	sbc.w	r5, r5, r3
 8085eb4:	085b      	lsrs	r3, r3, #1
 8085eb6:	ea4f 0232 	mov.w	r2, r2, rrx
 8085eba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8085ebe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8085ec2:	ebb6 0e02 	subs.w	lr, r6, r2
 8085ec6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8085eca:	bf22      	ittt	cs
 8085ecc:	1ab6      	subcs	r6, r6, r2
 8085ece:	4675      	movcs	r5, lr
 8085ed0:	ea40 000c 	orrcs.w	r0, r0, ip
 8085ed4:	085b      	lsrs	r3, r3, #1
 8085ed6:	ea4f 0232 	mov.w	r2, r2, rrx
 8085eda:	ebb6 0e02 	subs.w	lr, r6, r2
 8085ede:	eb75 0e03 	sbcs.w	lr, r5, r3
 8085ee2:	bf22      	ittt	cs
 8085ee4:	1ab6      	subcs	r6, r6, r2
 8085ee6:	4675      	movcs	r5, lr
 8085ee8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8085eec:	085b      	lsrs	r3, r3, #1
 8085eee:	ea4f 0232 	mov.w	r2, r2, rrx
 8085ef2:	ebb6 0e02 	subs.w	lr, r6, r2
 8085ef6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8085efa:	bf22      	ittt	cs
 8085efc:	1ab6      	subcs	r6, r6, r2
 8085efe:	4675      	movcs	r5, lr
 8085f00:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8085f04:	085b      	lsrs	r3, r3, #1
 8085f06:	ea4f 0232 	mov.w	r2, r2, rrx
 8085f0a:	ebb6 0e02 	subs.w	lr, r6, r2
 8085f0e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8085f12:	bf22      	ittt	cs
 8085f14:	1ab6      	subcs	r6, r6, r2
 8085f16:	4675      	movcs	r5, lr
 8085f18:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8085f1c:	ea55 0e06 	orrs.w	lr, r5, r6
 8085f20:	d018      	beq.n	8085f54 <__aeabi_ddiv+0x114>
 8085f22:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8085f26:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8085f2a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8085f2e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8085f32:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8085f36:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8085f3a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8085f3e:	d1c0      	bne.n	8085ec2 <__aeabi_ddiv+0x82>
 8085f40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8085f44:	d10b      	bne.n	8085f5e <__aeabi_ddiv+0x11e>
 8085f46:	ea41 0100 	orr.w	r1, r1, r0
 8085f4a:	f04f 0000 	mov.w	r0, #0
 8085f4e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8085f52:	e7b6      	b.n	8085ec2 <__aeabi_ddiv+0x82>
 8085f54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8085f58:	bf04      	itt	eq
 8085f5a:	4301      	orreq	r1, r0
 8085f5c:	2000      	moveq	r0, #0
 8085f5e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8085f62:	bf88      	it	hi
 8085f64:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8085f68:	f63f aeaf 	bhi.w	8085cca <__aeabi_dmul+0xde>
 8085f6c:	ebb5 0c03 	subs.w	ip, r5, r3
 8085f70:	bf04      	itt	eq
 8085f72:	ebb6 0c02 	subseq.w	ip, r6, r2
 8085f76:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8085f7a:	f150 0000 	adcs.w	r0, r0, #0
 8085f7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8085f82:	bd70      	pop	{r4, r5, r6, pc}
 8085f84:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8085f88:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8085f8c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8085f90:	bfc2      	ittt	gt
 8085f92:	ebd4 050c 	rsbsgt	r5, r4, ip
 8085f96:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8085f9a:	bd70      	popgt	{r4, r5, r6, pc}
 8085f9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8085fa0:	f04f 0e00 	mov.w	lr, #0
 8085fa4:	3c01      	subs	r4, #1
 8085fa6:	e690      	b.n	8085cca <__aeabi_dmul+0xde>
 8085fa8:	ea45 0e06 	orr.w	lr, r5, r6
 8085fac:	e68d      	b.n	8085cca <__aeabi_dmul+0xde>
 8085fae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8085fb2:	ea94 0f0c 	teq	r4, ip
 8085fb6:	bf08      	it	eq
 8085fb8:	ea95 0f0c 	teqeq	r5, ip
 8085fbc:	f43f af3b 	beq.w	8085e36 <__aeabi_dmul+0x24a>
 8085fc0:	ea94 0f0c 	teq	r4, ip
 8085fc4:	d10a      	bne.n	8085fdc <__aeabi_ddiv+0x19c>
 8085fc6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8085fca:	f47f af34 	bne.w	8085e36 <__aeabi_dmul+0x24a>
 8085fce:	ea95 0f0c 	teq	r5, ip
 8085fd2:	f47f af25 	bne.w	8085e20 <__aeabi_dmul+0x234>
 8085fd6:	4610      	mov	r0, r2
 8085fd8:	4619      	mov	r1, r3
 8085fda:	e72c      	b.n	8085e36 <__aeabi_dmul+0x24a>
 8085fdc:	ea95 0f0c 	teq	r5, ip
 8085fe0:	d106      	bne.n	8085ff0 <__aeabi_ddiv+0x1b0>
 8085fe2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8085fe6:	f43f aefd 	beq.w	8085de4 <__aeabi_dmul+0x1f8>
 8085fea:	4610      	mov	r0, r2
 8085fec:	4619      	mov	r1, r3
 8085fee:	e722      	b.n	8085e36 <__aeabi_dmul+0x24a>
 8085ff0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8085ff4:	bf18      	it	ne
 8085ff6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8085ffa:	f47f aec5 	bne.w	8085d88 <__aeabi_dmul+0x19c>
 8085ffe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8086002:	f47f af0d 	bne.w	8085e20 <__aeabi_dmul+0x234>
 8086006:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 808600a:	f47f aeeb 	bne.w	8085de4 <__aeabi_dmul+0x1f8>
 808600e:	e712      	b.n	8085e36 <__aeabi_dmul+0x24a>

08086010 <__gedf2>:
 8086010:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8086014:	e006      	b.n	8086024 <__cmpdf2+0x4>
 8086016:	bf00      	nop

08086018 <__ledf2>:
 8086018:	f04f 0c01 	mov.w	ip, #1
 808601c:	e002      	b.n	8086024 <__cmpdf2+0x4>
 808601e:	bf00      	nop

08086020 <__cmpdf2>:
 8086020:	f04f 0c01 	mov.w	ip, #1
 8086024:	f84d cd04 	str.w	ip, [sp, #-4]!
 8086028:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808602c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8086030:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8086034:	bf18      	it	ne
 8086036:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 808603a:	d01b      	beq.n	8086074 <__cmpdf2+0x54>
 808603c:	b001      	add	sp, #4
 808603e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8086042:	bf0c      	ite	eq
 8086044:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8086048:	ea91 0f03 	teqne	r1, r3
 808604c:	bf02      	ittt	eq
 808604e:	ea90 0f02 	teqeq	r0, r2
 8086052:	2000      	moveq	r0, #0
 8086054:	4770      	bxeq	lr
 8086056:	f110 0f00 	cmn.w	r0, #0
 808605a:	ea91 0f03 	teq	r1, r3
 808605e:	bf58      	it	pl
 8086060:	4299      	cmppl	r1, r3
 8086062:	bf08      	it	eq
 8086064:	4290      	cmpeq	r0, r2
 8086066:	bf2c      	ite	cs
 8086068:	17d8      	asrcs	r0, r3, #31
 808606a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 808606e:	f040 0001 	orr.w	r0, r0, #1
 8086072:	4770      	bx	lr
 8086074:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8086078:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808607c:	d102      	bne.n	8086084 <__cmpdf2+0x64>
 808607e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8086082:	d107      	bne.n	8086094 <__cmpdf2+0x74>
 8086084:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8086088:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808608c:	d1d6      	bne.n	808603c <__cmpdf2+0x1c>
 808608e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8086092:	d0d3      	beq.n	808603c <__cmpdf2+0x1c>
 8086094:	f85d 0b04 	ldr.w	r0, [sp], #4
 8086098:	4770      	bx	lr
 808609a:	bf00      	nop

0808609c <__aeabi_cdrcmple>:
 808609c:	4684      	mov	ip, r0
 808609e:	4610      	mov	r0, r2
 80860a0:	4662      	mov	r2, ip
 80860a2:	468c      	mov	ip, r1
 80860a4:	4619      	mov	r1, r3
 80860a6:	4663      	mov	r3, ip
 80860a8:	e000      	b.n	80860ac <__aeabi_cdcmpeq>
 80860aa:	bf00      	nop

080860ac <__aeabi_cdcmpeq>:
 80860ac:	b501      	push	{r0, lr}
 80860ae:	f7ff ffb7 	bl	8086020 <__cmpdf2>
 80860b2:	2800      	cmp	r0, #0
 80860b4:	bf48      	it	mi
 80860b6:	f110 0f00 	cmnmi.w	r0, #0
 80860ba:	bd01      	pop	{r0, pc}

080860bc <__aeabi_dcmpeq>:
 80860bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80860c0:	f7ff fff4 	bl	80860ac <__aeabi_cdcmpeq>
 80860c4:	bf0c      	ite	eq
 80860c6:	2001      	moveq	r0, #1
 80860c8:	2000      	movne	r0, #0
 80860ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80860ce:	bf00      	nop

080860d0 <__aeabi_dcmplt>:
 80860d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80860d4:	f7ff ffea 	bl	80860ac <__aeabi_cdcmpeq>
 80860d8:	bf34      	ite	cc
 80860da:	2001      	movcc	r0, #1
 80860dc:	2000      	movcs	r0, #0
 80860de:	f85d fb08 	ldr.w	pc, [sp], #8
 80860e2:	bf00      	nop

080860e4 <__aeabi_dcmple>:
 80860e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80860e8:	f7ff ffe0 	bl	80860ac <__aeabi_cdcmpeq>
 80860ec:	bf94      	ite	ls
 80860ee:	2001      	movls	r0, #1
 80860f0:	2000      	movhi	r0, #0
 80860f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80860f6:	bf00      	nop

080860f8 <__aeabi_dcmpge>:
 80860f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80860fc:	f7ff ffce 	bl	808609c <__aeabi_cdrcmple>
 8086100:	bf94      	ite	ls
 8086102:	2001      	movls	r0, #1
 8086104:	2000      	movhi	r0, #0
 8086106:	f85d fb08 	ldr.w	pc, [sp], #8
 808610a:	bf00      	nop

0808610c <__aeabi_dcmpgt>:
 808610c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8086110:	f7ff ffc4 	bl	808609c <__aeabi_cdrcmple>
 8086114:	bf34      	ite	cc
 8086116:	2001      	movcc	r0, #1
 8086118:	2000      	movcs	r0, #0
 808611a:	f85d fb08 	ldr.w	pc, [sp], #8
 808611e:	bf00      	nop

08086120 <__aeabi_dcmpun>:
 8086120:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8086124:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8086128:	d102      	bne.n	8086130 <__aeabi_dcmpun+0x10>
 808612a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808612e:	d10a      	bne.n	8086146 <__aeabi_dcmpun+0x26>
 8086130:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8086134:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8086138:	d102      	bne.n	8086140 <__aeabi_dcmpun+0x20>
 808613a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808613e:	d102      	bne.n	8086146 <__aeabi_dcmpun+0x26>
 8086140:	f04f 0000 	mov.w	r0, #0
 8086144:	4770      	bx	lr
 8086146:	f04f 0001 	mov.w	r0, #1
 808614a:	4770      	bx	lr

0808614c <__aeabi_d2f>:
 808614c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8086150:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8086154:	bf24      	itt	cs
 8086156:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 808615a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 808615e:	d90d      	bls.n	808617c <__aeabi_d2f+0x30>
 8086160:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8086164:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8086168:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 808616c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8086170:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8086174:	bf08      	it	eq
 8086176:	f020 0001 	biceq.w	r0, r0, #1
 808617a:	4770      	bx	lr
 808617c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8086180:	d121      	bne.n	80861c6 <__aeabi_d2f+0x7a>
 8086182:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8086186:	bfbc      	itt	lt
 8086188:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 808618c:	4770      	bxlt	lr
 808618e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8086192:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8086196:	f1c2 0218 	rsb	r2, r2, #24
 808619a:	f1c2 0c20 	rsb	ip, r2, #32
 808619e:	fa10 f30c 	lsls.w	r3, r0, ip
 80861a2:	fa20 f002 	lsr.w	r0, r0, r2
 80861a6:	bf18      	it	ne
 80861a8:	f040 0001 	orrne.w	r0, r0, #1
 80861ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80861b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80861b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80861b8:	ea40 000c 	orr.w	r0, r0, ip
 80861bc:	fa23 f302 	lsr.w	r3, r3, r2
 80861c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80861c4:	e7cc      	b.n	8086160 <__aeabi_d2f+0x14>
 80861c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80861ca:	d107      	bne.n	80861dc <__aeabi_d2f+0x90>
 80861cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80861d0:	bf1e      	ittt	ne
 80861d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80861d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80861da:	4770      	bxne	lr
 80861dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80861e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80861e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80861e8:	4770      	bx	lr
 80861ea:	bf00      	nop

080861ec <__aeabi_frsub>:
 80861ec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80861f0:	e002      	b.n	80861f8 <__addsf3>
 80861f2:	bf00      	nop

080861f4 <__aeabi_fsub>:
 80861f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080861f8 <__addsf3>:
 80861f8:	0042      	lsls	r2, r0, #1
 80861fa:	bf1f      	itttt	ne
 80861fc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8086200:	ea92 0f03 	teqne	r2, r3
 8086204:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8086208:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808620c:	d06a      	beq.n	80862e4 <__addsf3+0xec>
 808620e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8086212:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8086216:	bfc1      	itttt	gt
 8086218:	18d2      	addgt	r2, r2, r3
 808621a:	4041      	eorgt	r1, r0
 808621c:	4048      	eorgt	r0, r1
 808621e:	4041      	eorgt	r1, r0
 8086220:	bfb8      	it	lt
 8086222:	425b      	neglt	r3, r3
 8086224:	2b19      	cmp	r3, #25
 8086226:	bf88      	it	hi
 8086228:	4770      	bxhi	lr
 808622a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808622e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8086232:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8086236:	bf18      	it	ne
 8086238:	4240      	negne	r0, r0
 808623a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808623e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8086242:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8086246:	bf18      	it	ne
 8086248:	4249      	negne	r1, r1
 808624a:	ea92 0f03 	teq	r2, r3
 808624e:	d03f      	beq.n	80862d0 <__addsf3+0xd8>
 8086250:	f1a2 0201 	sub.w	r2, r2, #1
 8086254:	fa41 fc03 	asr.w	ip, r1, r3
 8086258:	eb10 000c 	adds.w	r0, r0, ip
 808625c:	f1c3 0320 	rsb	r3, r3, #32
 8086260:	fa01 f103 	lsl.w	r1, r1, r3
 8086264:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8086268:	d502      	bpl.n	8086270 <__addsf3+0x78>
 808626a:	4249      	negs	r1, r1
 808626c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8086270:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8086274:	d313      	bcc.n	808629e <__addsf3+0xa6>
 8086276:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 808627a:	d306      	bcc.n	808628a <__addsf3+0x92>
 808627c:	0840      	lsrs	r0, r0, #1
 808627e:	ea4f 0131 	mov.w	r1, r1, rrx
 8086282:	f102 0201 	add.w	r2, r2, #1
 8086286:	2afe      	cmp	r2, #254	; 0xfe
 8086288:	d251      	bcs.n	808632e <__addsf3+0x136>
 808628a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 808628e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8086292:	bf08      	it	eq
 8086294:	f020 0001 	biceq.w	r0, r0, #1
 8086298:	ea40 0003 	orr.w	r0, r0, r3
 808629c:	4770      	bx	lr
 808629e:	0049      	lsls	r1, r1, #1
 80862a0:	eb40 0000 	adc.w	r0, r0, r0
 80862a4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80862a8:	f1a2 0201 	sub.w	r2, r2, #1
 80862ac:	d1ed      	bne.n	808628a <__addsf3+0x92>
 80862ae:	fab0 fc80 	clz	ip, r0
 80862b2:	f1ac 0c08 	sub.w	ip, ip, #8
 80862b6:	ebb2 020c 	subs.w	r2, r2, ip
 80862ba:	fa00 f00c 	lsl.w	r0, r0, ip
 80862be:	bfaa      	itet	ge
 80862c0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80862c4:	4252      	neglt	r2, r2
 80862c6:	4318      	orrge	r0, r3
 80862c8:	bfbc      	itt	lt
 80862ca:	40d0      	lsrlt	r0, r2
 80862cc:	4318      	orrlt	r0, r3
 80862ce:	4770      	bx	lr
 80862d0:	f092 0f00 	teq	r2, #0
 80862d4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80862d8:	bf06      	itte	eq
 80862da:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80862de:	3201      	addeq	r2, #1
 80862e0:	3b01      	subne	r3, #1
 80862e2:	e7b5      	b.n	8086250 <__addsf3+0x58>
 80862e4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80862e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80862ec:	bf18      	it	ne
 80862ee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80862f2:	d021      	beq.n	8086338 <__addsf3+0x140>
 80862f4:	ea92 0f03 	teq	r2, r3
 80862f8:	d004      	beq.n	8086304 <__addsf3+0x10c>
 80862fa:	f092 0f00 	teq	r2, #0
 80862fe:	bf08      	it	eq
 8086300:	4608      	moveq	r0, r1
 8086302:	4770      	bx	lr
 8086304:	ea90 0f01 	teq	r0, r1
 8086308:	bf1c      	itt	ne
 808630a:	2000      	movne	r0, #0
 808630c:	4770      	bxne	lr
 808630e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8086312:	d104      	bne.n	808631e <__addsf3+0x126>
 8086314:	0040      	lsls	r0, r0, #1
 8086316:	bf28      	it	cs
 8086318:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 808631c:	4770      	bx	lr
 808631e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8086322:	bf3c      	itt	cc
 8086324:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8086328:	4770      	bxcc	lr
 808632a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808632e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8086332:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8086336:	4770      	bx	lr
 8086338:	ea7f 6222 	mvns.w	r2, r2, asr #24
 808633c:	bf16      	itet	ne
 808633e:	4608      	movne	r0, r1
 8086340:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8086344:	4601      	movne	r1, r0
 8086346:	0242      	lsls	r2, r0, #9
 8086348:	bf06      	itte	eq
 808634a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 808634e:	ea90 0f01 	teqeq	r0, r1
 8086352:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8086356:	4770      	bx	lr

08086358 <__aeabi_ui2f>:
 8086358:	f04f 0300 	mov.w	r3, #0
 808635c:	e004      	b.n	8086368 <__aeabi_i2f+0x8>
 808635e:	bf00      	nop

08086360 <__aeabi_i2f>:
 8086360:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8086364:	bf48      	it	mi
 8086366:	4240      	negmi	r0, r0
 8086368:	ea5f 0c00 	movs.w	ip, r0
 808636c:	bf08      	it	eq
 808636e:	4770      	bxeq	lr
 8086370:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8086374:	4601      	mov	r1, r0
 8086376:	f04f 0000 	mov.w	r0, #0
 808637a:	e01c      	b.n	80863b6 <__aeabi_l2f+0x2a>

0808637c <__aeabi_ul2f>:
 808637c:	ea50 0201 	orrs.w	r2, r0, r1
 8086380:	bf08      	it	eq
 8086382:	4770      	bxeq	lr
 8086384:	f04f 0300 	mov.w	r3, #0
 8086388:	e00a      	b.n	80863a0 <__aeabi_l2f+0x14>
 808638a:	bf00      	nop

0808638c <__aeabi_l2f>:
 808638c:	ea50 0201 	orrs.w	r2, r0, r1
 8086390:	bf08      	it	eq
 8086392:	4770      	bxeq	lr
 8086394:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8086398:	d502      	bpl.n	80863a0 <__aeabi_l2f+0x14>
 808639a:	4240      	negs	r0, r0
 808639c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80863a0:	ea5f 0c01 	movs.w	ip, r1
 80863a4:	bf02      	ittt	eq
 80863a6:	4684      	moveq	ip, r0
 80863a8:	4601      	moveq	r1, r0
 80863aa:	2000      	moveq	r0, #0
 80863ac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80863b0:	bf08      	it	eq
 80863b2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80863b6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80863ba:	fabc f28c 	clz	r2, ip
 80863be:	3a08      	subs	r2, #8
 80863c0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80863c4:	db10      	blt.n	80863e8 <__aeabi_l2f+0x5c>
 80863c6:	fa01 fc02 	lsl.w	ip, r1, r2
 80863ca:	4463      	add	r3, ip
 80863cc:	fa00 fc02 	lsl.w	ip, r0, r2
 80863d0:	f1c2 0220 	rsb	r2, r2, #32
 80863d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80863d8:	fa20 f202 	lsr.w	r2, r0, r2
 80863dc:	eb43 0002 	adc.w	r0, r3, r2
 80863e0:	bf08      	it	eq
 80863e2:	f020 0001 	biceq.w	r0, r0, #1
 80863e6:	4770      	bx	lr
 80863e8:	f102 0220 	add.w	r2, r2, #32
 80863ec:	fa01 fc02 	lsl.w	ip, r1, r2
 80863f0:	f1c2 0220 	rsb	r2, r2, #32
 80863f4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80863f8:	fa21 f202 	lsr.w	r2, r1, r2
 80863fc:	eb43 0002 	adc.w	r0, r3, r2
 8086400:	bf08      	it	eq
 8086402:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8086406:	4770      	bx	lr

08086408 <__aeabi_fmul>:
 8086408:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808640c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8086410:	bf1e      	ittt	ne
 8086412:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8086416:	ea92 0f0c 	teqne	r2, ip
 808641a:	ea93 0f0c 	teqne	r3, ip
 808641e:	d06f      	beq.n	8086500 <__aeabi_fmul+0xf8>
 8086420:	441a      	add	r2, r3
 8086422:	ea80 0c01 	eor.w	ip, r0, r1
 8086426:	0240      	lsls	r0, r0, #9
 8086428:	bf18      	it	ne
 808642a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 808642e:	d01e      	beq.n	808646e <__aeabi_fmul+0x66>
 8086430:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8086434:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8086438:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 808643c:	fba0 3101 	umull	r3, r1, r0, r1
 8086440:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8086444:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8086448:	bf3e      	ittt	cc
 808644a:	0049      	lslcc	r1, r1, #1
 808644c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8086450:	005b      	lslcc	r3, r3, #1
 8086452:	ea40 0001 	orr.w	r0, r0, r1
 8086456:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808645a:	2afd      	cmp	r2, #253	; 0xfd
 808645c:	d81d      	bhi.n	808649a <__aeabi_fmul+0x92>
 808645e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8086462:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8086466:	bf08      	it	eq
 8086468:	f020 0001 	biceq.w	r0, r0, #1
 808646c:	4770      	bx	lr
 808646e:	f090 0f00 	teq	r0, #0
 8086472:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8086476:	bf08      	it	eq
 8086478:	0249      	lsleq	r1, r1, #9
 808647a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808647e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8086482:	3a7f      	subs	r2, #127	; 0x7f
 8086484:	bfc2      	ittt	gt
 8086486:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808648a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808648e:	4770      	bxgt	lr
 8086490:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8086494:	f04f 0300 	mov.w	r3, #0
 8086498:	3a01      	subs	r2, #1
 808649a:	dc5d      	bgt.n	8086558 <__aeabi_fmul+0x150>
 808649c:	f112 0f19 	cmn.w	r2, #25
 80864a0:	bfdc      	itt	le
 80864a2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80864a6:	4770      	bxle	lr
 80864a8:	f1c2 0200 	rsb	r2, r2, #0
 80864ac:	0041      	lsls	r1, r0, #1
 80864ae:	fa21 f102 	lsr.w	r1, r1, r2
 80864b2:	f1c2 0220 	rsb	r2, r2, #32
 80864b6:	fa00 fc02 	lsl.w	ip, r0, r2
 80864ba:	ea5f 0031 	movs.w	r0, r1, rrx
 80864be:	f140 0000 	adc.w	r0, r0, #0
 80864c2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80864c6:	bf08      	it	eq
 80864c8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80864cc:	4770      	bx	lr
 80864ce:	f092 0f00 	teq	r2, #0
 80864d2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80864d6:	bf02      	ittt	eq
 80864d8:	0040      	lsleq	r0, r0, #1
 80864da:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80864de:	3a01      	subeq	r2, #1
 80864e0:	d0f9      	beq.n	80864d6 <__aeabi_fmul+0xce>
 80864e2:	ea40 000c 	orr.w	r0, r0, ip
 80864e6:	f093 0f00 	teq	r3, #0
 80864ea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80864ee:	bf02      	ittt	eq
 80864f0:	0049      	lsleq	r1, r1, #1
 80864f2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80864f6:	3b01      	subeq	r3, #1
 80864f8:	d0f9      	beq.n	80864ee <__aeabi_fmul+0xe6>
 80864fa:	ea41 010c 	orr.w	r1, r1, ip
 80864fe:	e78f      	b.n	8086420 <__aeabi_fmul+0x18>
 8086500:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8086504:	ea92 0f0c 	teq	r2, ip
 8086508:	bf18      	it	ne
 808650a:	ea93 0f0c 	teqne	r3, ip
 808650e:	d00a      	beq.n	8086526 <__aeabi_fmul+0x11e>
 8086510:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8086514:	bf18      	it	ne
 8086516:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808651a:	d1d8      	bne.n	80864ce <__aeabi_fmul+0xc6>
 808651c:	ea80 0001 	eor.w	r0, r0, r1
 8086520:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8086524:	4770      	bx	lr
 8086526:	f090 0f00 	teq	r0, #0
 808652a:	bf17      	itett	ne
 808652c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8086530:	4608      	moveq	r0, r1
 8086532:	f091 0f00 	teqne	r1, #0
 8086536:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808653a:	d014      	beq.n	8086566 <__aeabi_fmul+0x15e>
 808653c:	ea92 0f0c 	teq	r2, ip
 8086540:	d101      	bne.n	8086546 <__aeabi_fmul+0x13e>
 8086542:	0242      	lsls	r2, r0, #9
 8086544:	d10f      	bne.n	8086566 <__aeabi_fmul+0x15e>
 8086546:	ea93 0f0c 	teq	r3, ip
 808654a:	d103      	bne.n	8086554 <__aeabi_fmul+0x14c>
 808654c:	024b      	lsls	r3, r1, #9
 808654e:	bf18      	it	ne
 8086550:	4608      	movne	r0, r1
 8086552:	d108      	bne.n	8086566 <__aeabi_fmul+0x15e>
 8086554:	ea80 0001 	eor.w	r0, r0, r1
 8086558:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808655c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8086560:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8086564:	4770      	bx	lr
 8086566:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808656a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 808656e:	4770      	bx	lr

08086570 <__aeabi_fdiv>:
 8086570:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8086574:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8086578:	bf1e      	ittt	ne
 808657a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808657e:	ea92 0f0c 	teqne	r2, ip
 8086582:	ea93 0f0c 	teqne	r3, ip
 8086586:	d069      	beq.n	808665c <__aeabi_fdiv+0xec>
 8086588:	eba2 0203 	sub.w	r2, r2, r3
 808658c:	ea80 0c01 	eor.w	ip, r0, r1
 8086590:	0249      	lsls	r1, r1, #9
 8086592:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8086596:	d037      	beq.n	8086608 <__aeabi_fdiv+0x98>
 8086598:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 808659c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80865a0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80865a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80865a8:	428b      	cmp	r3, r1
 80865aa:	bf38      	it	cc
 80865ac:	005b      	lslcc	r3, r3, #1
 80865ae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80865b2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80865b6:	428b      	cmp	r3, r1
 80865b8:	bf24      	itt	cs
 80865ba:	1a5b      	subcs	r3, r3, r1
 80865bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80865c0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80865c4:	bf24      	itt	cs
 80865c6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80865ca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80865ce:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80865d2:	bf24      	itt	cs
 80865d4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80865d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80865dc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80865e0:	bf24      	itt	cs
 80865e2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80865e6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80865ea:	011b      	lsls	r3, r3, #4
 80865ec:	bf18      	it	ne
 80865ee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80865f2:	d1e0      	bne.n	80865b6 <__aeabi_fdiv+0x46>
 80865f4:	2afd      	cmp	r2, #253	; 0xfd
 80865f6:	f63f af50 	bhi.w	808649a <__aeabi_fmul+0x92>
 80865fa:	428b      	cmp	r3, r1
 80865fc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8086600:	bf08      	it	eq
 8086602:	f020 0001 	biceq.w	r0, r0, #1
 8086606:	4770      	bx	lr
 8086608:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808660c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8086610:	327f      	adds	r2, #127	; 0x7f
 8086612:	bfc2      	ittt	gt
 8086614:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8086618:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808661c:	4770      	bxgt	lr
 808661e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8086622:	f04f 0300 	mov.w	r3, #0
 8086626:	3a01      	subs	r2, #1
 8086628:	e737      	b.n	808649a <__aeabi_fmul+0x92>
 808662a:	f092 0f00 	teq	r2, #0
 808662e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8086632:	bf02      	ittt	eq
 8086634:	0040      	lsleq	r0, r0, #1
 8086636:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808663a:	3a01      	subeq	r2, #1
 808663c:	d0f9      	beq.n	8086632 <__aeabi_fdiv+0xc2>
 808663e:	ea40 000c 	orr.w	r0, r0, ip
 8086642:	f093 0f00 	teq	r3, #0
 8086646:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808664a:	bf02      	ittt	eq
 808664c:	0049      	lsleq	r1, r1, #1
 808664e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8086652:	3b01      	subeq	r3, #1
 8086654:	d0f9      	beq.n	808664a <__aeabi_fdiv+0xda>
 8086656:	ea41 010c 	orr.w	r1, r1, ip
 808665a:	e795      	b.n	8086588 <__aeabi_fdiv+0x18>
 808665c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8086660:	ea92 0f0c 	teq	r2, ip
 8086664:	d108      	bne.n	8086678 <__aeabi_fdiv+0x108>
 8086666:	0242      	lsls	r2, r0, #9
 8086668:	f47f af7d 	bne.w	8086566 <__aeabi_fmul+0x15e>
 808666c:	ea93 0f0c 	teq	r3, ip
 8086670:	f47f af70 	bne.w	8086554 <__aeabi_fmul+0x14c>
 8086674:	4608      	mov	r0, r1
 8086676:	e776      	b.n	8086566 <__aeabi_fmul+0x15e>
 8086678:	ea93 0f0c 	teq	r3, ip
 808667c:	d104      	bne.n	8086688 <__aeabi_fdiv+0x118>
 808667e:	024b      	lsls	r3, r1, #9
 8086680:	f43f af4c 	beq.w	808651c <__aeabi_fmul+0x114>
 8086684:	4608      	mov	r0, r1
 8086686:	e76e      	b.n	8086566 <__aeabi_fmul+0x15e>
 8086688:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808668c:	bf18      	it	ne
 808668e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8086692:	d1ca      	bne.n	808662a <__aeabi_fdiv+0xba>
 8086694:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8086698:	f47f af5c 	bne.w	8086554 <__aeabi_fmul+0x14c>
 808669c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80866a0:	f47f af3c 	bne.w	808651c <__aeabi_fmul+0x114>
 80866a4:	e75f      	b.n	8086566 <__aeabi_fmul+0x15e>
 80866a6:	bf00      	nop

080866a8 <__gesf2>:
 80866a8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80866ac:	e006      	b.n	80866bc <__cmpsf2+0x4>
 80866ae:	bf00      	nop

080866b0 <__lesf2>:
 80866b0:	f04f 0c01 	mov.w	ip, #1
 80866b4:	e002      	b.n	80866bc <__cmpsf2+0x4>
 80866b6:	bf00      	nop

080866b8 <__cmpsf2>:
 80866b8:	f04f 0c01 	mov.w	ip, #1
 80866bc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80866c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80866c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80866c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80866cc:	bf18      	it	ne
 80866ce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80866d2:	d011      	beq.n	80866f8 <__cmpsf2+0x40>
 80866d4:	b001      	add	sp, #4
 80866d6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80866da:	bf18      	it	ne
 80866dc:	ea90 0f01 	teqne	r0, r1
 80866e0:	bf58      	it	pl
 80866e2:	ebb2 0003 	subspl.w	r0, r2, r3
 80866e6:	bf88      	it	hi
 80866e8:	17c8      	asrhi	r0, r1, #31
 80866ea:	bf38      	it	cc
 80866ec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80866f0:	bf18      	it	ne
 80866f2:	f040 0001 	orrne.w	r0, r0, #1
 80866f6:	4770      	bx	lr
 80866f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80866fc:	d102      	bne.n	8086704 <__cmpsf2+0x4c>
 80866fe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8086702:	d105      	bne.n	8086710 <__cmpsf2+0x58>
 8086704:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8086708:	d1e4      	bne.n	80866d4 <__cmpsf2+0x1c>
 808670a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 808670e:	d0e1      	beq.n	80866d4 <__cmpsf2+0x1c>
 8086710:	f85d 0b04 	ldr.w	r0, [sp], #4
 8086714:	4770      	bx	lr
 8086716:	bf00      	nop

08086718 <__aeabi_cfrcmple>:
 8086718:	4684      	mov	ip, r0
 808671a:	4608      	mov	r0, r1
 808671c:	4661      	mov	r1, ip
 808671e:	e7ff      	b.n	8086720 <__aeabi_cfcmpeq>

08086720 <__aeabi_cfcmpeq>:
 8086720:	b50f      	push	{r0, r1, r2, r3, lr}
 8086722:	f7ff ffc9 	bl	80866b8 <__cmpsf2>
 8086726:	2800      	cmp	r0, #0
 8086728:	bf48      	it	mi
 808672a:	f110 0f00 	cmnmi.w	r0, #0
 808672e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08086730 <__aeabi_fcmpeq>:
 8086730:	f84d ed08 	str.w	lr, [sp, #-8]!
 8086734:	f7ff fff4 	bl	8086720 <__aeabi_cfcmpeq>
 8086738:	bf0c      	ite	eq
 808673a:	2001      	moveq	r0, #1
 808673c:	2000      	movne	r0, #0
 808673e:	f85d fb08 	ldr.w	pc, [sp], #8
 8086742:	bf00      	nop

08086744 <__aeabi_fcmplt>:
 8086744:	f84d ed08 	str.w	lr, [sp, #-8]!
 8086748:	f7ff ffea 	bl	8086720 <__aeabi_cfcmpeq>
 808674c:	bf34      	ite	cc
 808674e:	2001      	movcc	r0, #1
 8086750:	2000      	movcs	r0, #0
 8086752:	f85d fb08 	ldr.w	pc, [sp], #8
 8086756:	bf00      	nop

08086758 <__aeabi_fcmple>:
 8086758:	f84d ed08 	str.w	lr, [sp, #-8]!
 808675c:	f7ff ffe0 	bl	8086720 <__aeabi_cfcmpeq>
 8086760:	bf94      	ite	ls
 8086762:	2001      	movls	r0, #1
 8086764:	2000      	movhi	r0, #0
 8086766:	f85d fb08 	ldr.w	pc, [sp], #8
 808676a:	bf00      	nop

0808676c <__aeabi_fcmpge>:
 808676c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8086770:	f7ff ffd2 	bl	8086718 <__aeabi_cfrcmple>
 8086774:	bf94      	ite	ls
 8086776:	2001      	movls	r0, #1
 8086778:	2000      	movhi	r0, #0
 808677a:	f85d fb08 	ldr.w	pc, [sp], #8
 808677e:	bf00      	nop

08086780 <__aeabi_fcmpgt>:
 8086780:	f84d ed08 	str.w	lr, [sp, #-8]!
 8086784:	f7ff ffc8 	bl	8086718 <__aeabi_cfrcmple>
 8086788:	bf34      	ite	cc
 808678a:	2001      	movcc	r0, #1
 808678c:	2000      	movcs	r0, #0
 808678e:	f85d fb08 	ldr.w	pc, [sp], #8
 8086792:	bf00      	nop

08086794 <__aeabi_f2iz>:
 8086794:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8086798:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 808679c:	d30f      	bcc.n	80867be <__aeabi_f2iz+0x2a>
 808679e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80867a2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80867a6:	d90d      	bls.n	80867c4 <__aeabi_f2iz+0x30>
 80867a8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80867ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80867b0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80867b4:	fa23 f002 	lsr.w	r0, r3, r2
 80867b8:	bf18      	it	ne
 80867ba:	4240      	negne	r0, r0
 80867bc:	4770      	bx	lr
 80867be:	f04f 0000 	mov.w	r0, #0
 80867c2:	4770      	bx	lr
 80867c4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80867c8:	d101      	bne.n	80867ce <__aeabi_f2iz+0x3a>
 80867ca:	0242      	lsls	r2, r0, #9
 80867cc:	d105      	bne.n	80867da <__aeabi_f2iz+0x46>
 80867ce:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80867d2:	bf08      	it	eq
 80867d4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80867d8:	4770      	bx	lr
 80867da:	f04f 0000 	mov.w	r0, #0
 80867de:	4770      	bx	lr

080867e0 <__aeabi_ldivmod>:
 80867e0:	b97b      	cbnz	r3, 8086802 <__aeabi_ldivmod+0x22>
 80867e2:	b972      	cbnz	r2, 8086802 <__aeabi_ldivmod+0x22>
 80867e4:	2900      	cmp	r1, #0
 80867e6:	bfbe      	ittt	lt
 80867e8:	2000      	movlt	r0, #0
 80867ea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80867ee:	e006      	blt.n	80867fe <__aeabi_ldivmod+0x1e>
 80867f0:	bf08      	it	eq
 80867f2:	2800      	cmpeq	r0, #0
 80867f4:	bf1c      	itt	ne
 80867f6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80867fa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80867fe:	f000 b9b5 	b.w	8086b6c <__aeabi_idiv0>
 8086802:	f1ad 0c08 	sub.w	ip, sp, #8
 8086806:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808680a:	2900      	cmp	r1, #0
 808680c:	db09      	blt.n	8086822 <__aeabi_ldivmod+0x42>
 808680e:	2b00      	cmp	r3, #0
 8086810:	db1a      	blt.n	8086848 <__aeabi_ldivmod+0x68>
 8086812:	f000 f835 	bl	8086880 <__udivmoddi4>
 8086816:	f8dd e004 	ldr.w	lr, [sp, #4]
 808681a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808681e:	b004      	add	sp, #16
 8086820:	4770      	bx	lr
 8086822:	4240      	negs	r0, r0
 8086824:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8086828:	2b00      	cmp	r3, #0
 808682a:	db1b      	blt.n	8086864 <__aeabi_ldivmod+0x84>
 808682c:	f000 f828 	bl	8086880 <__udivmoddi4>
 8086830:	f8dd e004 	ldr.w	lr, [sp, #4]
 8086834:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8086838:	b004      	add	sp, #16
 808683a:	4240      	negs	r0, r0
 808683c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8086840:	4252      	negs	r2, r2
 8086842:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8086846:	4770      	bx	lr
 8086848:	4252      	negs	r2, r2
 808684a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808684e:	f000 f817 	bl	8086880 <__udivmoddi4>
 8086852:	f8dd e004 	ldr.w	lr, [sp, #4]
 8086856:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808685a:	b004      	add	sp, #16
 808685c:	4240      	negs	r0, r0
 808685e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8086862:	4770      	bx	lr
 8086864:	4252      	negs	r2, r2
 8086866:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808686a:	f000 f809 	bl	8086880 <__udivmoddi4>
 808686e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8086872:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8086876:	b004      	add	sp, #16
 8086878:	4252      	negs	r2, r2
 808687a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808687e:	4770      	bx	lr

08086880 <__udivmoddi4>:
 8086880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086884:	468c      	mov	ip, r1
 8086886:	460c      	mov	r4, r1
 8086888:	4605      	mov	r5, r0
 808688a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 808688c:	2b00      	cmp	r3, #0
 808688e:	d14f      	bne.n	8086930 <__udivmoddi4+0xb0>
 8086890:	428a      	cmp	r2, r1
 8086892:	4617      	mov	r7, r2
 8086894:	d96b      	bls.n	808696e <__udivmoddi4+0xee>
 8086896:	fab2 fe82 	clz	lr, r2
 808689a:	f1be 0f00 	cmp.w	lr, #0
 808689e:	d00b      	beq.n	80868b8 <__udivmoddi4+0x38>
 80868a0:	f1ce 0520 	rsb	r5, lr, #32
 80868a4:	fa20 f505 	lsr.w	r5, r0, r5
 80868a8:	fa01 f30e 	lsl.w	r3, r1, lr
 80868ac:	ea45 0c03 	orr.w	ip, r5, r3
 80868b0:	fa02 f70e 	lsl.w	r7, r2, lr
 80868b4:	fa00 f50e 	lsl.w	r5, r0, lr
 80868b8:	0c39      	lsrs	r1, r7, #16
 80868ba:	fbbc f0f1 	udiv	r0, ip, r1
 80868be:	b2ba      	uxth	r2, r7
 80868c0:	fb01 c310 	mls	r3, r1, r0, ip
 80868c4:	fb00 f802 	mul.w	r8, r0, r2
 80868c8:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80868cc:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 80868d0:	45a0      	cmp	r8, r4
 80868d2:	d909      	bls.n	80868e8 <__udivmoddi4+0x68>
 80868d4:	19e4      	adds	r4, r4, r7
 80868d6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80868da:	f080 8128 	bcs.w	8086b2e <__udivmoddi4+0x2ae>
 80868de:	45a0      	cmp	r8, r4
 80868e0:	f240 8125 	bls.w	8086b2e <__udivmoddi4+0x2ae>
 80868e4:	3802      	subs	r0, #2
 80868e6:	443c      	add	r4, r7
 80868e8:	ebc8 0404 	rsb	r4, r8, r4
 80868ec:	fbb4 f3f1 	udiv	r3, r4, r1
 80868f0:	fb01 4c13 	mls	ip, r1, r3, r4
 80868f4:	fb03 f202 	mul.w	r2, r3, r2
 80868f8:	b2ac      	uxth	r4, r5
 80868fa:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80868fe:	428a      	cmp	r2, r1
 8086900:	d909      	bls.n	8086916 <__udivmoddi4+0x96>
 8086902:	19c9      	adds	r1, r1, r7
 8086904:	f103 34ff 	add.w	r4, r3, #4294967295	; 0xffffffff
 8086908:	f080 810f 	bcs.w	8086b2a <__udivmoddi4+0x2aa>
 808690c:	428a      	cmp	r2, r1
 808690e:	f240 810c 	bls.w	8086b2a <__udivmoddi4+0x2aa>
 8086912:	3b02      	subs	r3, #2
 8086914:	4439      	add	r1, r7
 8086916:	1a8a      	subs	r2, r1, r2
 8086918:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 808691c:	2100      	movs	r1, #0
 808691e:	2e00      	cmp	r6, #0
 8086920:	d063      	beq.n	80869ea <__udivmoddi4+0x16a>
 8086922:	fa22 f20e 	lsr.w	r2, r2, lr
 8086926:	2300      	movs	r3, #0
 8086928:	e886 000c 	stmia.w	r6, {r2, r3}
 808692c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8086930:	428b      	cmp	r3, r1
 8086932:	d907      	bls.n	8086944 <__udivmoddi4+0xc4>
 8086934:	2e00      	cmp	r6, #0
 8086936:	d056      	beq.n	80869e6 <__udivmoddi4+0x166>
 8086938:	2100      	movs	r1, #0
 808693a:	e886 0011 	stmia.w	r6, {r0, r4}
 808693e:	4608      	mov	r0, r1
 8086940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8086944:	fab3 f183 	clz	r1, r3
 8086948:	2900      	cmp	r1, #0
 808694a:	f040 8093 	bne.w	8086a74 <__udivmoddi4+0x1f4>
 808694e:	42a3      	cmp	r3, r4
 8086950:	d302      	bcc.n	8086958 <__udivmoddi4+0xd8>
 8086952:	4282      	cmp	r2, r0
 8086954:	f200 80fe 	bhi.w	8086b54 <__udivmoddi4+0x2d4>
 8086958:	1a85      	subs	r5, r0, r2
 808695a:	eb64 0303 	sbc.w	r3, r4, r3
 808695e:	469c      	mov	ip, r3
 8086960:	2001      	movs	r0, #1
 8086962:	2e00      	cmp	r6, #0
 8086964:	d041      	beq.n	80869ea <__udivmoddi4+0x16a>
 8086966:	e886 1020 	stmia.w	r6, {r5, ip}
 808696a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808696e:	b912      	cbnz	r2, 8086976 <__udivmoddi4+0xf6>
 8086970:	2701      	movs	r7, #1
 8086972:	fbb7 f7f2 	udiv	r7, r7, r2
 8086976:	fab7 fe87 	clz	lr, r7
 808697a:	f1be 0f00 	cmp.w	lr, #0
 808697e:	d136      	bne.n	80869ee <__udivmoddi4+0x16e>
 8086980:	1be4      	subs	r4, r4, r7
 8086982:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8086986:	fa1f f987 	uxth.w	r9, r7
 808698a:	2101      	movs	r1, #1
 808698c:	fbb4 f3f8 	udiv	r3, r4, r8
 8086990:	fb08 4413 	mls	r4, r8, r3, r4
 8086994:	fb09 f203 	mul.w	r2, r9, r3
 8086998:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808699c:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80869a0:	42a2      	cmp	r2, r4
 80869a2:	d907      	bls.n	80869b4 <__udivmoddi4+0x134>
 80869a4:	19e4      	adds	r4, r4, r7
 80869a6:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80869aa:	d202      	bcs.n	80869b2 <__udivmoddi4+0x132>
 80869ac:	42a2      	cmp	r2, r4
 80869ae:	f200 80d3 	bhi.w	8086b58 <__udivmoddi4+0x2d8>
 80869b2:	4603      	mov	r3, r0
 80869b4:	1aa4      	subs	r4, r4, r2
 80869b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80869ba:	fb08 4810 	mls	r8, r8, r0, r4
 80869be:	fb09 f900 	mul.w	r9, r9, r0
 80869c2:	b2ac      	uxth	r4, r5
 80869c4:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 80869c8:	4591      	cmp	r9, r2
 80869ca:	d907      	bls.n	80869dc <__udivmoddi4+0x15c>
 80869cc:	19d2      	adds	r2, r2, r7
 80869ce:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80869d2:	d202      	bcs.n	80869da <__udivmoddi4+0x15a>
 80869d4:	4591      	cmp	r9, r2
 80869d6:	f200 80ba 	bhi.w	8086b4e <__udivmoddi4+0x2ce>
 80869da:	4620      	mov	r0, r4
 80869dc:	ebc9 0202 	rsb	r2, r9, r2
 80869e0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80869e4:	e79b      	b.n	808691e <__udivmoddi4+0x9e>
 80869e6:	4631      	mov	r1, r6
 80869e8:	4630      	mov	r0, r6
 80869ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80869ee:	fa07 f70e 	lsl.w	r7, r7, lr
 80869f2:	f1ce 0c20 	rsb	ip, lr, #32
 80869f6:	fa24 f30c 	lsr.w	r3, r4, ip
 80869fa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80869fe:	fbb3 faf8 	udiv	sl, r3, r8
 8086a02:	fa1f f987 	uxth.w	r9, r7
 8086a06:	fb08 351a 	mls	r5, r8, sl, r3
 8086a0a:	fa20 fc0c 	lsr.w	ip, r0, ip
 8086a0e:	fa04 f40e 	lsl.w	r4, r4, lr
 8086a12:	fb0a fb09 	mul.w	fp, sl, r9
 8086a16:	ea4c 0c04 	orr.w	ip, ip, r4
 8086a1a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8086a1e:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 8086a22:	459b      	cmp	fp, r3
 8086a24:	fa00 f50e 	lsl.w	r5, r0, lr
 8086a28:	d90a      	bls.n	8086a40 <__udivmoddi4+0x1c0>
 8086a2a:	19db      	adds	r3, r3, r7
 8086a2c:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 8086a30:	f080 808b 	bcs.w	8086b4a <__udivmoddi4+0x2ca>
 8086a34:	459b      	cmp	fp, r3
 8086a36:	f240 8088 	bls.w	8086b4a <__udivmoddi4+0x2ca>
 8086a3a:	f1aa 0a02 	sub.w	sl, sl, #2
 8086a3e:	443b      	add	r3, r7
 8086a40:	ebcb 0303 	rsb	r3, fp, r3
 8086a44:	fbb3 f0f8 	udiv	r0, r3, r8
 8086a48:	fb08 3310 	mls	r3, r8, r0, r3
 8086a4c:	fb00 f409 	mul.w	r4, r0, r9
 8086a50:	fa1f fc8c 	uxth.w	ip, ip
 8086a54:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 8086a58:	429c      	cmp	r4, r3
 8086a5a:	d907      	bls.n	8086a6c <__udivmoddi4+0x1ec>
 8086a5c:	19db      	adds	r3, r3, r7
 8086a5e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8086a62:	d26e      	bcs.n	8086b42 <__udivmoddi4+0x2c2>
 8086a64:	429c      	cmp	r4, r3
 8086a66:	d96c      	bls.n	8086b42 <__udivmoddi4+0x2c2>
 8086a68:	3802      	subs	r0, #2
 8086a6a:	443b      	add	r3, r7
 8086a6c:	1b1c      	subs	r4, r3, r4
 8086a6e:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 8086a72:	e78b      	b.n	808698c <__udivmoddi4+0x10c>
 8086a74:	f1c1 0e20 	rsb	lr, r1, #32
 8086a78:	408b      	lsls	r3, r1
 8086a7a:	fa22 fc0e 	lsr.w	ip, r2, lr
 8086a7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8086a82:	fa24 f70e 	lsr.w	r7, r4, lr
 8086a86:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8086a8a:	fbb7 faf9 	udiv	sl, r7, r9
 8086a8e:	fa1f f38c 	uxth.w	r3, ip
 8086a92:	fb09 771a 	mls	r7, r9, sl, r7
 8086a96:	fa20 f80e 	lsr.w	r8, r0, lr
 8086a9a:	408c      	lsls	r4, r1
 8086a9c:	fb0a f503 	mul.w	r5, sl, r3
 8086aa0:	ea48 0404 	orr.w	r4, r8, r4
 8086aa4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8086aa8:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 8086aac:	42bd      	cmp	r5, r7
 8086aae:	fa02 f201 	lsl.w	r2, r2, r1
 8086ab2:	fa00 fb01 	lsl.w	fp, r0, r1
 8086ab6:	d909      	bls.n	8086acc <__udivmoddi4+0x24c>
 8086ab8:	eb17 070c 	adds.w	r7, r7, ip
 8086abc:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
 8086ac0:	d241      	bcs.n	8086b46 <__udivmoddi4+0x2c6>
 8086ac2:	42bd      	cmp	r5, r7
 8086ac4:	d93f      	bls.n	8086b46 <__udivmoddi4+0x2c6>
 8086ac6:	f1aa 0a02 	sub.w	sl, sl, #2
 8086aca:	4467      	add	r7, ip
 8086acc:	1b7f      	subs	r7, r7, r5
 8086ace:	fbb7 f5f9 	udiv	r5, r7, r9
 8086ad2:	fb09 7715 	mls	r7, r9, r5, r7
 8086ad6:	fb05 f303 	mul.w	r3, r5, r3
 8086ada:	b2a4      	uxth	r4, r4
 8086adc:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8086ae0:	42bb      	cmp	r3, r7
 8086ae2:	d908      	bls.n	8086af6 <__udivmoddi4+0x276>
 8086ae4:	eb17 070c 	adds.w	r7, r7, ip
 8086ae8:	f105 30ff 	add.w	r0, r5, #4294967295	; 0xffffffff
 8086aec:	d227      	bcs.n	8086b3e <__udivmoddi4+0x2be>
 8086aee:	42bb      	cmp	r3, r7
 8086af0:	d925      	bls.n	8086b3e <__udivmoddi4+0x2be>
 8086af2:	3d02      	subs	r5, #2
 8086af4:	4467      	add	r7, ip
 8086af6:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 8086afa:	fba0 8902 	umull	r8, r9, r0, r2
 8086afe:	1aff      	subs	r7, r7, r3
 8086b00:	454f      	cmp	r7, r9
 8086b02:	4645      	mov	r5, r8
 8086b04:	464c      	mov	r4, r9
 8086b06:	d314      	bcc.n	8086b32 <__udivmoddi4+0x2b2>
 8086b08:	d029      	beq.n	8086b5e <__udivmoddi4+0x2de>
 8086b0a:	b366      	cbz	r6, 8086b66 <__udivmoddi4+0x2e6>
 8086b0c:	ebbb 0305 	subs.w	r3, fp, r5
 8086b10:	eb67 0704 	sbc.w	r7, r7, r4
 8086b14:	fa07 fe0e 	lsl.w	lr, r7, lr
 8086b18:	40cb      	lsrs	r3, r1
 8086b1a:	40cf      	lsrs	r7, r1
 8086b1c:	ea4e 0303 	orr.w	r3, lr, r3
 8086b20:	e886 0088 	stmia.w	r6, {r3, r7}
 8086b24:	2100      	movs	r1, #0
 8086b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8086b2a:	4623      	mov	r3, r4
 8086b2c:	e6f3      	b.n	8086916 <__udivmoddi4+0x96>
 8086b2e:	4618      	mov	r0, r3
 8086b30:	e6da      	b.n	80868e8 <__udivmoddi4+0x68>
 8086b32:	ebb8 0502 	subs.w	r5, r8, r2
 8086b36:	eb69 040c 	sbc.w	r4, r9, ip
 8086b3a:	3801      	subs	r0, #1
 8086b3c:	e7e5      	b.n	8086b0a <__udivmoddi4+0x28a>
 8086b3e:	4605      	mov	r5, r0
 8086b40:	e7d9      	b.n	8086af6 <__udivmoddi4+0x276>
 8086b42:	4610      	mov	r0, r2
 8086b44:	e792      	b.n	8086a6c <__udivmoddi4+0x1ec>
 8086b46:	4682      	mov	sl, r0
 8086b48:	e7c0      	b.n	8086acc <__udivmoddi4+0x24c>
 8086b4a:	4692      	mov	sl, r2
 8086b4c:	e778      	b.n	8086a40 <__udivmoddi4+0x1c0>
 8086b4e:	3802      	subs	r0, #2
 8086b50:	443a      	add	r2, r7
 8086b52:	e743      	b.n	80869dc <__udivmoddi4+0x15c>
 8086b54:	4608      	mov	r0, r1
 8086b56:	e704      	b.n	8086962 <__udivmoddi4+0xe2>
 8086b58:	3b02      	subs	r3, #2
 8086b5a:	443c      	add	r4, r7
 8086b5c:	e72a      	b.n	80869b4 <__udivmoddi4+0x134>
 8086b5e:	45c3      	cmp	fp, r8
 8086b60:	d3e7      	bcc.n	8086b32 <__udivmoddi4+0x2b2>
 8086b62:	463c      	mov	r4, r7
 8086b64:	e7d1      	b.n	8086b0a <__udivmoddi4+0x28a>
 8086b66:	4631      	mov	r1, r6
 8086b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08086b6c <__aeabi_idiv0>:
 8086b6c:	4770      	bx	lr
 8086b6e:	bf00      	nop

08086b70 <asctime>:
 8086b70:	4b09      	ldr	r3, [pc, #36]	; (8086b98 <asctime+0x28>)
 8086b72:	b570      	push	{r4, r5, r6, lr}
 8086b74:	681c      	ldr	r4, [r3, #0]
 8086b76:	4606      	mov	r6, r0
 8086b78:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8086b7a:	b93d      	cbnz	r5, 8086b8c <asctime+0x1c>
 8086b7c:	201a      	movs	r0, #26
 8086b7e:	f7fb fe89 	bl	8082894 <malloc>
 8086b82:	221a      	movs	r2, #26
 8086b84:	6420      	str	r0, [r4, #64]	; 0x40
 8086b86:	4629      	mov	r1, r5
 8086b88:	f000 f943 	bl	8086e12 <memset>
 8086b8c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8086b8e:	4630      	mov	r0, r6
 8086b90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8086b94:	f000 b802 	b.w	8086b9c <asctime_r>
 8086b98:	200004a4 	.word	0x200004a4

08086b9c <asctime_r>:
 8086b9c:	b510      	push	{r4, lr}
 8086b9e:	460c      	mov	r4, r1
 8086ba0:	6941      	ldr	r1, [r0, #20]
 8086ba2:	b086      	sub	sp, #24
 8086ba4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8086ba8:	6903      	ldr	r3, [r0, #16]
 8086baa:	6982      	ldr	r2, [r0, #24]
 8086bac:	9104      	str	r1, [sp, #16]
 8086bae:	6801      	ldr	r1, [r0, #0]
 8086bb0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8086bb4:	9103      	str	r1, [sp, #12]
 8086bb6:	6841      	ldr	r1, [r0, #4]
 8086bb8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8086bbc:	9102      	str	r1, [sp, #8]
 8086bbe:	6881      	ldr	r1, [r0, #8]
 8086bc0:	9101      	str	r1, [sp, #4]
 8086bc2:	68c1      	ldr	r1, [r0, #12]
 8086bc4:	4620      	mov	r0, r4
 8086bc6:	9100      	str	r1, [sp, #0]
 8086bc8:	4904      	ldr	r1, [pc, #16]	; (8086bdc <asctime_r+0x40>)
 8086bca:	440b      	add	r3, r1
 8086bcc:	4904      	ldr	r1, [pc, #16]	; (8086be0 <asctime_r+0x44>)
 8086bce:	440a      	add	r2, r1
 8086bd0:	4904      	ldr	r1, [pc, #16]	; (8086be4 <asctime_r+0x48>)
 8086bd2:	f7fb fe77 	bl	80828c4 <siprintf>
 8086bd6:	4620      	mov	r0, r4
 8086bd8:	b006      	add	sp, #24
 8086bda:	bd10      	pop	{r4, pc}
 8086bdc:	08087e45 	.word	0x08087e45
 8086be0:	08087e30 	.word	0x08087e30
 8086be4:	08087e69 	.word	0x08087e69

08086be8 <atoi>:
 8086be8:	220a      	movs	r2, #10
 8086bea:	2100      	movs	r1, #0
 8086bec:	f000 ba26 	b.w	808703c <strtol>

08086bf0 <__cxa_atexit>:
 8086bf0:	b510      	push	{r4, lr}
 8086bf2:	4c05      	ldr	r4, [pc, #20]	; (8086c08 <__cxa_atexit+0x18>)
 8086bf4:	4613      	mov	r3, r2
 8086bf6:	b12c      	cbz	r4, 8086c04 <__cxa_atexit+0x14>
 8086bf8:	460a      	mov	r2, r1
 8086bfa:	4601      	mov	r1, r0
 8086bfc:	2002      	movs	r0, #2
 8086bfe:	f3af 8000 	nop.w
 8086c02:	bd10      	pop	{r4, pc}
 8086c04:	4620      	mov	r0, r4
 8086c06:	bd10      	pop	{r4, pc}
 8086c08:	00000000 	.word	0x00000000

08086c0c <localtime>:
 8086c0c:	b538      	push	{r3, r4, r5, lr}
 8086c0e:	4b07      	ldr	r3, [pc, #28]	; (8086c2c <localtime+0x20>)
 8086c10:	4605      	mov	r5, r0
 8086c12:	681c      	ldr	r4, [r3, #0]
 8086c14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8086c16:	b91b      	cbnz	r3, 8086c20 <localtime+0x14>
 8086c18:	2024      	movs	r0, #36	; 0x24
 8086c1a:	f7fb fe3b 	bl	8082894 <malloc>
 8086c1e:	63e0      	str	r0, [r4, #60]	; 0x3c
 8086c20:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8086c22:	4628      	mov	r0, r5
 8086c24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8086c28:	f000 b802 	b.w	8086c30 <localtime_r>
 8086c2c:	200004a4 	.word	0x200004a4

08086c30 <localtime_r>:
 8086c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8086c34:	460c      	mov	r4, r1
 8086c36:	4680      	mov	r8, r0
 8086c38:	f000 fd06 	bl	8087648 <__gettzinfo>
 8086c3c:	4621      	mov	r1, r4
 8086c3e:	4607      	mov	r7, r0
 8086c40:	4640      	mov	r0, r8
 8086c42:	f000 fd05 	bl	8087650 <gmtime_r>
 8086c46:	6946      	ldr	r6, [r0, #20]
 8086c48:	4604      	mov	r4, r0
 8086c4a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8086c4e:	07b3      	lsls	r3, r6, #30
 8086c50:	d105      	bne.n	8086c5e <localtime_r+0x2e>
 8086c52:	2264      	movs	r2, #100	; 0x64
 8086c54:	fb96 f3f2 	sdiv	r3, r6, r2
 8086c58:	fb02 6313 	mls	r3, r2, r3, r6
 8086c5c:	b94b      	cbnz	r3, 8086c72 <localtime_r+0x42>
 8086c5e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8086c62:	fb96 f3f5 	sdiv	r3, r6, r5
 8086c66:	fb05 6513 	mls	r5, r5, r3, r6
 8086c6a:	fab5 f385 	clz	r3, r5
 8086c6e:	095b      	lsrs	r3, r3, #5
 8086c70:	e000      	b.n	8086c74 <localtime_r+0x44>
 8086c72:	2301      	movs	r3, #1
 8086c74:	4a5f      	ldr	r2, [pc, #380]	; (8086df4 <localtime_r+0x1c4>)
 8086c76:	2530      	movs	r5, #48	; 0x30
 8086c78:	fb05 2503 	mla	r5, r5, r3, r2
 8086c7c:	f000 fb18 	bl	80872b0 <__tz_lock>
 8086c80:	f000 fb18 	bl	80872b4 <_tzset_unlocked>
 8086c84:	4b5c      	ldr	r3, [pc, #368]	; (8086df8 <localtime_r+0x1c8>)
 8086c86:	681b      	ldr	r3, [r3, #0]
 8086c88:	b1f3      	cbz	r3, 8086cc8 <localtime_r+0x98>
 8086c8a:	687b      	ldr	r3, [r7, #4]
 8086c8c:	429e      	cmp	r6, r3
 8086c8e:	d105      	bne.n	8086c9c <localtime_r+0x6c>
 8086c90:	6839      	ldr	r1, [r7, #0]
 8086c92:	f8d8 3000 	ldr.w	r3, [r8]
 8086c96:	69fa      	ldr	r2, [r7, #28]
 8086c98:	b941      	cbnz	r1, 8086cac <localtime_r+0x7c>
 8086c9a:	e00a      	b.n	8086cb2 <localtime_r+0x82>
 8086c9c:	4630      	mov	r0, r6
 8086c9e:	f000 fa5f 	bl	8087160 <__tzcalc_limits>
 8086ca2:	2800      	cmp	r0, #0
 8086ca4:	d1f4      	bne.n	8086c90 <localtime_r+0x60>
 8086ca6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8086caa:	e00d      	b.n	8086cc8 <localtime_r+0x98>
 8086cac:	4293      	cmp	r3, r2
 8086cae:	db08      	blt.n	8086cc2 <localtime_r+0x92>
 8086cb0:	e001      	b.n	8086cb6 <localtime_r+0x86>
 8086cb2:	4293      	cmp	r3, r2
 8086cb4:	da07      	bge.n	8086cc6 <localtime_r+0x96>
 8086cb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8086cb8:	4293      	cmp	r3, r2
 8086cba:	bfac      	ite	ge
 8086cbc:	2300      	movge	r3, #0
 8086cbe:	2301      	movlt	r3, #1
 8086cc0:	e002      	b.n	8086cc8 <localtime_r+0x98>
 8086cc2:	2300      	movs	r3, #0
 8086cc4:	e000      	b.n	8086cc8 <localtime_r+0x98>
 8086cc6:	2301      	movs	r3, #1
 8086cc8:	6223      	str	r3, [r4, #32]
 8086cca:	6a23      	ldr	r3, [r4, #32]
 8086ccc:	203c      	movs	r0, #60	; 0x3c
 8086cce:	2b01      	cmp	r3, #1
 8086cd0:	bf0c      	ite	eq
 8086cd2:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 8086cd4:	6a39      	ldrne	r1, [r7, #32]
 8086cd6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8086cda:	fb91 f6f3 	sdiv	r6, r1, r3
 8086cde:	fb03 1316 	mls	r3, r3, r6, r1
 8086ce2:	fb93 f2f0 	sdiv	r2, r3, r0
 8086ce6:	fb00 3012 	mls	r0, r0, r2, r3
 8086cea:	6861      	ldr	r1, [r4, #4]
 8086cec:	6823      	ldr	r3, [r4, #0]
 8086cee:	1a89      	subs	r1, r1, r2
 8086cf0:	68a2      	ldr	r2, [r4, #8]
 8086cf2:	1a1b      	subs	r3, r3, r0
 8086cf4:	1b92      	subs	r2, r2, r6
 8086cf6:	2b3b      	cmp	r3, #59	; 0x3b
 8086cf8:	6023      	str	r3, [r4, #0]
 8086cfa:	6061      	str	r1, [r4, #4]
 8086cfc:	60a2      	str	r2, [r4, #8]
 8086cfe:	dd03      	ble.n	8086d08 <localtime_r+0xd8>
 8086d00:	3101      	adds	r1, #1
 8086d02:	6061      	str	r1, [r4, #4]
 8086d04:	3b3c      	subs	r3, #60	; 0x3c
 8086d06:	e004      	b.n	8086d12 <localtime_r+0xe2>
 8086d08:	2b00      	cmp	r3, #0
 8086d0a:	da03      	bge.n	8086d14 <localtime_r+0xe4>
 8086d0c:	3901      	subs	r1, #1
 8086d0e:	6061      	str	r1, [r4, #4]
 8086d10:	333c      	adds	r3, #60	; 0x3c
 8086d12:	6023      	str	r3, [r4, #0]
 8086d14:	6863      	ldr	r3, [r4, #4]
 8086d16:	2b3b      	cmp	r3, #59	; 0x3b
 8086d18:	dd03      	ble.n	8086d22 <localtime_r+0xf2>
 8086d1a:	3201      	adds	r2, #1
 8086d1c:	60a2      	str	r2, [r4, #8]
 8086d1e:	3b3c      	subs	r3, #60	; 0x3c
 8086d20:	e004      	b.n	8086d2c <localtime_r+0xfc>
 8086d22:	2b00      	cmp	r3, #0
 8086d24:	da03      	bge.n	8086d2e <localtime_r+0xfe>
 8086d26:	3a01      	subs	r2, #1
 8086d28:	60a2      	str	r2, [r4, #8]
 8086d2a:	333c      	adds	r3, #60	; 0x3c
 8086d2c:	6063      	str	r3, [r4, #4]
 8086d2e:	68a3      	ldr	r3, [r4, #8]
 8086d30:	2b17      	cmp	r3, #23
 8086d32:	dd22      	ble.n	8086d7a <localtime_r+0x14a>
 8086d34:	69e2      	ldr	r2, [r4, #28]
 8086d36:	3b18      	subs	r3, #24
 8086d38:	3201      	adds	r2, #1
 8086d3a:	61e2      	str	r2, [r4, #28]
 8086d3c:	69a2      	ldr	r2, [r4, #24]
 8086d3e:	60a3      	str	r3, [r4, #8]
 8086d40:	3201      	adds	r2, #1
 8086d42:	2a06      	cmp	r2, #6
 8086d44:	bfc8      	it	gt
 8086d46:	2200      	movgt	r2, #0
 8086d48:	61a2      	str	r2, [r4, #24]
 8086d4a:	68e2      	ldr	r2, [r4, #12]
 8086d4c:	6923      	ldr	r3, [r4, #16]
 8086d4e:	3201      	adds	r2, #1
 8086d50:	60e2      	str	r2, [r4, #12]
 8086d52:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8086d56:	428a      	cmp	r2, r1
 8086d58:	dd46      	ble.n	8086de8 <localtime_r+0x1b8>
 8086d5a:	3301      	adds	r3, #1
 8086d5c:	2b0c      	cmp	r3, #12
 8086d5e:	bf08      	it	eq
 8086d60:	6963      	ldreq	r3, [r4, #20]
 8086d62:	eba2 0201 	sub.w	r2, r2, r1
 8086d66:	60e2      	str	r2, [r4, #12]
 8086d68:	bf05      	ittet	eq
 8086d6a:	3301      	addeq	r3, #1
 8086d6c:	2200      	moveq	r2, #0
 8086d6e:	6123      	strne	r3, [r4, #16]
 8086d70:	6122      	streq	r2, [r4, #16]
 8086d72:	bf04      	itt	eq
 8086d74:	6163      	streq	r3, [r4, #20]
 8086d76:	61e2      	streq	r2, [r4, #28]
 8086d78:	e036      	b.n	8086de8 <localtime_r+0x1b8>
 8086d7a:	2b00      	cmp	r3, #0
 8086d7c:	da34      	bge.n	8086de8 <localtime_r+0x1b8>
 8086d7e:	69e2      	ldr	r2, [r4, #28]
 8086d80:	3318      	adds	r3, #24
 8086d82:	3a01      	subs	r2, #1
 8086d84:	61e2      	str	r2, [r4, #28]
 8086d86:	69a2      	ldr	r2, [r4, #24]
 8086d88:	60a3      	str	r3, [r4, #8]
 8086d8a:	3a01      	subs	r2, #1
 8086d8c:	bf48      	it	mi
 8086d8e:	2206      	movmi	r2, #6
 8086d90:	61a2      	str	r2, [r4, #24]
 8086d92:	68e2      	ldr	r2, [r4, #12]
 8086d94:	3a01      	subs	r2, #1
 8086d96:	60e2      	str	r2, [r4, #12]
 8086d98:	bb32      	cbnz	r2, 8086de8 <localtime_r+0x1b8>
 8086d9a:	6923      	ldr	r3, [r4, #16]
 8086d9c:	3b01      	subs	r3, #1
 8086d9e:	d401      	bmi.n	8086da4 <localtime_r+0x174>
 8086da0:	6123      	str	r3, [r4, #16]
 8086da2:	e01d      	b.n	8086de0 <localtime_r+0x1b0>
 8086da4:	230b      	movs	r3, #11
 8086da6:	6123      	str	r3, [r4, #16]
 8086da8:	6963      	ldr	r3, [r4, #20]
 8086daa:	1e5a      	subs	r2, r3, #1
 8086dac:	f012 0f03 	tst.w	r2, #3
 8086db0:	6162      	str	r2, [r4, #20]
 8086db2:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8086db6:	d105      	bne.n	8086dc4 <localtime_r+0x194>
 8086db8:	2164      	movs	r1, #100	; 0x64
 8086dba:	fb93 f2f1 	sdiv	r2, r3, r1
 8086dbe:	fb01 3212 	mls	r2, r1, r2, r3
 8086dc2:	b94a      	cbnz	r2, 8086dd8 <localtime_r+0x1a8>
 8086dc4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8086dc8:	fb93 f2f1 	sdiv	r2, r3, r1
 8086dcc:	fb01 3312 	mls	r3, r1, r2, r3
 8086dd0:	fab3 f383 	clz	r3, r3
 8086dd4:	095b      	lsrs	r3, r3, #5
 8086dd6:	e000      	b.n	8086dda <localtime_r+0x1aa>
 8086dd8:	2301      	movs	r3, #1
 8086dda:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8086dde:	61e3      	str	r3, [r4, #28]
 8086de0:	6923      	ldr	r3, [r4, #16]
 8086de2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8086de6:	60e3      	str	r3, [r4, #12]
 8086de8:	f000 fa63 	bl	80872b2 <__tz_unlock>
 8086dec:	4620      	mov	r0, r4
 8086dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8086df2:	bf00      	nop
 8086df4:	08087fec 	.word	0x08087fec
 8086df8:	20000cfc 	.word	0x20000cfc

08086dfc <memcpy>:
 8086dfc:	b510      	push	{r4, lr}
 8086dfe:	1e43      	subs	r3, r0, #1
 8086e00:	440a      	add	r2, r1
 8086e02:	4291      	cmp	r1, r2
 8086e04:	d004      	beq.n	8086e10 <memcpy+0x14>
 8086e06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8086e0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8086e0e:	e7f8      	b.n	8086e02 <memcpy+0x6>
 8086e10:	bd10      	pop	{r4, pc}

08086e12 <memset>:
 8086e12:	4603      	mov	r3, r0
 8086e14:	4402      	add	r2, r0
 8086e16:	4293      	cmp	r3, r2
 8086e18:	d002      	beq.n	8086e20 <memset+0xe>
 8086e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8086e1e:	e7fa      	b.n	8086e16 <memset+0x4>
 8086e20:	4770      	bx	lr
	...

08086e24 <srand>:
 8086e24:	b538      	push	{r3, r4, r5, lr}
 8086e26:	4b12      	ldr	r3, [pc, #72]	; (8086e70 <srand+0x4c>)
 8086e28:	4605      	mov	r5, r0
 8086e2a:	681c      	ldr	r4, [r3, #0]
 8086e2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8086e2e:	b9d3      	cbnz	r3, 8086e66 <srand+0x42>
 8086e30:	2018      	movs	r0, #24
 8086e32:	f7fb fd2f 	bl	8082894 <malloc>
 8086e36:	f243 330e 	movw	r3, #13070	; 0x330e
 8086e3a:	63a0      	str	r0, [r4, #56]	; 0x38
 8086e3c:	8003      	strh	r3, [r0, #0]
 8086e3e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8086e42:	8043      	strh	r3, [r0, #2]
 8086e44:	f241 2334 	movw	r3, #4660	; 0x1234
 8086e48:	8083      	strh	r3, [r0, #4]
 8086e4a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8086e4e:	80c3      	strh	r3, [r0, #6]
 8086e50:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8086e54:	8103      	strh	r3, [r0, #8]
 8086e56:	2305      	movs	r3, #5
 8086e58:	8143      	strh	r3, [r0, #10]
 8086e5a:	230b      	movs	r3, #11
 8086e5c:	8183      	strh	r3, [r0, #12]
 8086e5e:	2201      	movs	r2, #1
 8086e60:	2300      	movs	r3, #0
 8086e62:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8086e66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8086e68:	2200      	movs	r2, #0
 8086e6a:	611d      	str	r5, [r3, #16]
 8086e6c:	615a      	str	r2, [r3, #20]
 8086e6e:	bd38      	pop	{r3, r4, r5, pc}
 8086e70:	200004a4 	.word	0x200004a4

08086e74 <strcmp>:
 8086e74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8086e78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8086e7c:	2a01      	cmp	r2, #1
 8086e7e:	bf28      	it	cs
 8086e80:	429a      	cmpcs	r2, r3
 8086e82:	d0f7      	beq.n	8086e74 <strcmp>
 8086e84:	1ad0      	subs	r0, r2, r3
 8086e86:	4770      	bx	lr

08086e88 <strcpy>:
 8086e88:	4603      	mov	r3, r0
 8086e8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8086e8e:	f803 2b01 	strb.w	r2, [r3], #1
 8086e92:	2a00      	cmp	r2, #0
 8086e94:	d1f9      	bne.n	8086e8a <strcpy+0x2>
 8086e96:	4770      	bx	lr

08086e98 <strdup>:
 8086e98:	4b02      	ldr	r3, [pc, #8]	; (8086ea4 <strdup+0xc>)
 8086e9a:	4601      	mov	r1, r0
 8086e9c:	6818      	ldr	r0, [r3, #0]
 8086e9e:	f000 b803 	b.w	8086ea8 <_strdup_r>
 8086ea2:	bf00      	nop
 8086ea4:	200004a4 	.word	0x200004a4

08086ea8 <_strdup_r>:
 8086ea8:	b570      	push	{r4, r5, r6, lr}
 8086eaa:	4606      	mov	r6, r0
 8086eac:	4608      	mov	r0, r1
 8086eae:	460c      	mov	r4, r1
 8086eb0:	f000 f80d 	bl	8086ece <strlen>
 8086eb4:	1c45      	adds	r5, r0, #1
 8086eb6:	4629      	mov	r1, r5
 8086eb8:	4630      	mov	r0, r6
 8086eba:	f7fb fd23 	bl	8082904 <_malloc_r>
 8086ebe:	4606      	mov	r6, r0
 8086ec0:	b118      	cbz	r0, 8086eca <_strdup_r+0x22>
 8086ec2:	462a      	mov	r2, r5
 8086ec4:	4621      	mov	r1, r4
 8086ec6:	f7ff ff99 	bl	8086dfc <memcpy>
 8086eca:	4630      	mov	r0, r6
 8086ecc:	bd70      	pop	{r4, r5, r6, pc}

08086ece <strlen>:
 8086ece:	4603      	mov	r3, r0
 8086ed0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8086ed4:	2a00      	cmp	r2, #0
 8086ed6:	d1fb      	bne.n	8086ed0 <strlen+0x2>
 8086ed8:	1a18      	subs	r0, r3, r0
 8086eda:	3801      	subs	r0, #1
 8086edc:	4770      	bx	lr

08086ede <strncmp>:
 8086ede:	b530      	push	{r4, r5, lr}
 8086ee0:	b182      	cbz	r2, 8086f04 <strncmp+0x26>
 8086ee2:	1e45      	subs	r5, r0, #1
 8086ee4:	3901      	subs	r1, #1
 8086ee6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8086eea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8086eee:	42a3      	cmp	r3, r4
 8086ef0:	d106      	bne.n	8086f00 <strncmp+0x22>
 8086ef2:	43ec      	mvns	r4, r5
 8086ef4:	4414      	add	r4, r2
 8086ef6:	42e0      	cmn	r0, r4
 8086ef8:	d001      	beq.n	8086efe <strncmp+0x20>
 8086efa:	2b00      	cmp	r3, #0
 8086efc:	d1f3      	bne.n	8086ee6 <strncmp+0x8>
 8086efe:	461c      	mov	r4, r3
 8086f00:	1b18      	subs	r0, r3, r4
 8086f02:	bd30      	pop	{r4, r5, pc}
 8086f04:	4610      	mov	r0, r2
 8086f06:	bd30      	pop	{r4, r5, pc}

08086f08 <strncpy>:
 8086f08:	4603      	mov	r3, r0
 8086f0a:	b510      	push	{r4, lr}
 8086f0c:	b142      	cbz	r2, 8086f20 <strncpy+0x18>
 8086f0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8086f12:	3a01      	subs	r2, #1
 8086f14:	f803 4b01 	strb.w	r4, [r3], #1
 8086f18:	2c00      	cmp	r4, #0
 8086f1a:	d1f7      	bne.n	8086f0c <strncpy+0x4>
 8086f1c:	441a      	add	r2, r3
 8086f1e:	e000      	b.n	8086f22 <strncpy+0x1a>
 8086f20:	bd10      	pop	{r4, pc}
 8086f22:	4293      	cmp	r3, r2
 8086f24:	d002      	beq.n	8086f2c <strncpy+0x24>
 8086f26:	f803 4b01 	strb.w	r4, [r3], #1
 8086f2a:	e7fa      	b.n	8086f22 <strncpy+0x1a>
 8086f2c:	bd10      	pop	{r4, pc}
	...

08086f30 <_strtol_r>:
 8086f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8086f34:	460f      	mov	r7, r1
 8086f36:	4680      	mov	r8, r0
 8086f38:	483f      	ldr	r0, [pc, #252]	; (8087038 <_strtol_r+0x108>)
 8086f3a:	f8d0 9000 	ldr.w	r9, [r0]
 8086f3e:	463d      	mov	r5, r7
 8086f40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8086f44:	eb09 0004 	add.w	r0, r9, r4
 8086f48:	7840      	ldrb	r0, [r0, #1]
 8086f4a:	f000 0008 	and.w	r0, r0, #8
 8086f4e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8086f52:	b108      	cbz	r0, 8086f58 <_strtol_r+0x28>
 8086f54:	462f      	mov	r7, r5
 8086f56:	e7f2      	b.n	8086f3e <_strtol_r+0xe>
 8086f58:	2c2d      	cmp	r4, #45	; 0x2d
 8086f5a:	d103      	bne.n	8086f64 <_strtol_r+0x34>
 8086f5c:	1cbd      	adds	r5, r7, #2
 8086f5e:	787c      	ldrb	r4, [r7, #1]
 8086f60:	2601      	movs	r6, #1
 8086f62:	e003      	b.n	8086f6c <_strtol_r+0x3c>
 8086f64:	2c2b      	cmp	r4, #43	; 0x2b
 8086f66:	bf04      	itt	eq
 8086f68:	787c      	ldrbeq	r4, [r7, #1]
 8086f6a:	1cbd      	addeq	r5, r7, #2
 8086f6c:	b113      	cbz	r3, 8086f74 <_strtol_r+0x44>
 8086f6e:	2b10      	cmp	r3, #16
 8086f70:	d10a      	bne.n	8086f88 <_strtol_r+0x58>
 8086f72:	e05b      	b.n	808702c <_strtol_r+0xfc>
 8086f74:	2c30      	cmp	r4, #48	; 0x30
 8086f76:	d157      	bne.n	8087028 <_strtol_r+0xf8>
 8086f78:	7828      	ldrb	r0, [r5, #0]
 8086f7a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8086f7e:	2858      	cmp	r0, #88	; 0x58
 8086f80:	d14d      	bne.n	808701e <_strtol_r+0xee>
 8086f82:	786c      	ldrb	r4, [r5, #1]
 8086f84:	2310      	movs	r3, #16
 8086f86:	3502      	adds	r5, #2
 8086f88:	2e00      	cmp	r6, #0
 8086f8a:	bf14      	ite	ne
 8086f8c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8086f90:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 8086f94:	fbbc faf3 	udiv	sl, ip, r3
 8086f98:	2700      	movs	r7, #0
 8086f9a:	4638      	mov	r0, r7
 8086f9c:	fb03 cc1a 	mls	ip, r3, sl, ip
 8086fa0:	eb09 0e04 	add.w	lr, r9, r4
 8086fa4:	f89e e001 	ldrb.w	lr, [lr, #1]
 8086fa8:	f01e 0f04 	tst.w	lr, #4
 8086fac:	d001      	beq.n	8086fb2 <_strtol_r+0x82>
 8086fae:	3c30      	subs	r4, #48	; 0x30
 8086fb0:	e00b      	b.n	8086fca <_strtol_r+0x9a>
 8086fb2:	f01e 0e03 	ands.w	lr, lr, #3
 8086fb6:	d01b      	beq.n	8086ff0 <_strtol_r+0xc0>
 8086fb8:	f1be 0f01 	cmp.w	lr, #1
 8086fbc:	bf0c      	ite	eq
 8086fbe:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8086fc2:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8086fc6:	ebce 0404 	rsb	r4, lr, r4
 8086fca:	42a3      	cmp	r3, r4
 8086fcc:	dd10      	ble.n	8086ff0 <_strtol_r+0xc0>
 8086fce:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8086fd2:	d00a      	beq.n	8086fea <_strtol_r+0xba>
 8086fd4:	4550      	cmp	r0, sl
 8086fd6:	d806      	bhi.n	8086fe6 <_strtol_r+0xb6>
 8086fd8:	d101      	bne.n	8086fde <_strtol_r+0xae>
 8086fda:	4564      	cmp	r4, ip
 8086fdc:	dc03      	bgt.n	8086fe6 <_strtol_r+0xb6>
 8086fde:	fb03 4000 	mla	r0, r3, r0, r4
 8086fe2:	2701      	movs	r7, #1
 8086fe4:	e001      	b.n	8086fea <_strtol_r+0xba>
 8086fe6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8086fea:	f815 4b01 	ldrb.w	r4, [r5], #1
 8086fee:	e7d7      	b.n	8086fa0 <_strtol_r+0x70>
 8086ff0:	1c7b      	adds	r3, r7, #1
 8086ff2:	d10c      	bne.n	808700e <_strtol_r+0xde>
 8086ff4:	2e00      	cmp	r6, #0
 8086ff6:	f04f 0322 	mov.w	r3, #34	; 0x22
 8086ffa:	bf14      	ite	ne
 8086ffc:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8087000:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8087004:	f8c8 3000 	str.w	r3, [r8]
 8087008:	b92a      	cbnz	r2, 8087016 <_strtol_r+0xe6>
 808700a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808700e:	b106      	cbz	r6, 8087012 <_strtol_r+0xe2>
 8087010:	4240      	negs	r0, r0
 8087012:	b172      	cbz	r2, 8087032 <_strtol_r+0x102>
 8087014:	b107      	cbz	r7, 8087018 <_strtol_r+0xe8>
 8087016:	1e69      	subs	r1, r5, #1
 8087018:	6011      	str	r1, [r2, #0]
 808701a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808701e:	2430      	movs	r4, #48	; 0x30
 8087020:	2b00      	cmp	r3, #0
 8087022:	d1b1      	bne.n	8086f88 <_strtol_r+0x58>
 8087024:	2308      	movs	r3, #8
 8087026:	e7af      	b.n	8086f88 <_strtol_r+0x58>
 8087028:	230a      	movs	r3, #10
 808702a:	e7ad      	b.n	8086f88 <_strtol_r+0x58>
 808702c:	2c30      	cmp	r4, #48	; 0x30
 808702e:	d0a3      	beq.n	8086f78 <_strtol_r+0x48>
 8087030:	e7aa      	b.n	8086f88 <_strtol_r+0x58>
 8087032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8087036:	bf00      	nop
 8087038:	20000440 	.word	0x20000440

0808703c <strtol>:
 808703c:	4613      	mov	r3, r2
 808703e:	460a      	mov	r2, r1
 8087040:	4601      	mov	r1, r0
 8087042:	4802      	ldr	r0, [pc, #8]	; (808704c <strtol+0x10>)
 8087044:	6800      	ldr	r0, [r0, #0]
 8087046:	f7ff bf73 	b.w	8086f30 <_strtol_r>
 808704a:	bf00      	nop
 808704c:	200004a4 	.word	0x200004a4

08087050 <_strtoul_r>:
 8087050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8087054:	460e      	mov	r6, r1
 8087056:	4680      	mov	r8, r0
 8087058:	483b      	ldr	r0, [pc, #236]	; (8087148 <_strtoul_r+0xf8>)
 808705a:	f8d0 9000 	ldr.w	r9, [r0]
 808705e:	4635      	mov	r5, r6
 8087060:	f815 4b01 	ldrb.w	r4, [r5], #1
 8087064:	eb09 0004 	add.w	r0, r9, r4
 8087068:	7840      	ldrb	r0, [r0, #1]
 808706a:	f000 0008 	and.w	r0, r0, #8
 808706e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8087072:	b108      	cbz	r0, 8087078 <_strtoul_r+0x28>
 8087074:	462e      	mov	r6, r5
 8087076:	e7f2      	b.n	808705e <_strtoul_r+0xe>
 8087078:	2c2d      	cmp	r4, #45	; 0x2d
 808707a:	d103      	bne.n	8087084 <_strtoul_r+0x34>
 808707c:	1cb5      	adds	r5, r6, #2
 808707e:	7874      	ldrb	r4, [r6, #1]
 8087080:	2701      	movs	r7, #1
 8087082:	e003      	b.n	808708c <_strtoul_r+0x3c>
 8087084:	2c2b      	cmp	r4, #43	; 0x2b
 8087086:	bf04      	itt	eq
 8087088:	7874      	ldrbeq	r4, [r6, #1]
 808708a:	1cb5      	addeq	r5, r6, #2
 808708c:	b113      	cbz	r3, 8087094 <_strtoul_r+0x44>
 808708e:	2b10      	cmp	r3, #16
 8087090:	d10a      	bne.n	80870a8 <_strtoul_r+0x58>
 8087092:	e053      	b.n	808713c <_strtoul_r+0xec>
 8087094:	2c30      	cmp	r4, #48	; 0x30
 8087096:	d14f      	bne.n	8087138 <_strtoul_r+0xe8>
 8087098:	7828      	ldrb	r0, [r5, #0]
 808709a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808709e:	2858      	cmp	r0, #88	; 0x58
 80870a0:	d145      	bne.n	808712e <_strtoul_r+0xde>
 80870a2:	786c      	ldrb	r4, [r5, #1]
 80870a4:	2310      	movs	r3, #16
 80870a6:	3502      	adds	r5, #2
 80870a8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80870ac:	fbbc fcf3 	udiv	ip, ip, r3
 80870b0:	fb03 fa0c 	mul.w	sl, r3, ip
 80870b4:	2600      	movs	r6, #0
 80870b6:	ea6f 0a0a 	mvn.w	sl, sl
 80870ba:	4630      	mov	r0, r6
 80870bc:	eb09 0e04 	add.w	lr, r9, r4
 80870c0:	f89e e001 	ldrb.w	lr, [lr, #1]
 80870c4:	f01e 0f04 	tst.w	lr, #4
 80870c8:	d001      	beq.n	80870ce <_strtoul_r+0x7e>
 80870ca:	3c30      	subs	r4, #48	; 0x30
 80870cc:	e00b      	b.n	80870e6 <_strtoul_r+0x96>
 80870ce:	f01e 0e03 	ands.w	lr, lr, #3
 80870d2:	d01a      	beq.n	808710a <_strtoul_r+0xba>
 80870d4:	f1be 0f01 	cmp.w	lr, #1
 80870d8:	bf0c      	ite	eq
 80870da:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80870de:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80870e2:	ebce 0404 	rsb	r4, lr, r4
 80870e6:	42a3      	cmp	r3, r4
 80870e8:	dd0f      	ble.n	808710a <_strtoul_r+0xba>
 80870ea:	2e00      	cmp	r6, #0
 80870ec:	db08      	blt.n	8087100 <_strtoul_r+0xb0>
 80870ee:	4560      	cmp	r0, ip
 80870f0:	d806      	bhi.n	8087100 <_strtoul_r+0xb0>
 80870f2:	d101      	bne.n	80870f8 <_strtoul_r+0xa8>
 80870f4:	4554      	cmp	r4, sl
 80870f6:	dc03      	bgt.n	8087100 <_strtoul_r+0xb0>
 80870f8:	fb03 4000 	mla	r0, r3, r0, r4
 80870fc:	2601      	movs	r6, #1
 80870fe:	e001      	b.n	8087104 <_strtoul_r+0xb4>
 8087100:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8087104:	f815 4b01 	ldrb.w	r4, [r5], #1
 8087108:	e7d8      	b.n	80870bc <_strtoul_r+0x6c>
 808710a:	2e00      	cmp	r6, #0
 808710c:	da07      	bge.n	808711e <_strtoul_r+0xce>
 808710e:	2322      	movs	r3, #34	; 0x22
 8087110:	f8c8 3000 	str.w	r3, [r8]
 8087114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8087118:	b92a      	cbnz	r2, 8087126 <_strtoul_r+0xd6>
 808711a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808711e:	b107      	cbz	r7, 8087122 <_strtoul_r+0xd2>
 8087120:	4240      	negs	r0, r0
 8087122:	b172      	cbz	r2, 8087142 <_strtoul_r+0xf2>
 8087124:	b106      	cbz	r6, 8087128 <_strtoul_r+0xd8>
 8087126:	1e69      	subs	r1, r5, #1
 8087128:	6011      	str	r1, [r2, #0]
 808712a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808712e:	2430      	movs	r4, #48	; 0x30
 8087130:	2b00      	cmp	r3, #0
 8087132:	d1b9      	bne.n	80870a8 <_strtoul_r+0x58>
 8087134:	2308      	movs	r3, #8
 8087136:	e7b7      	b.n	80870a8 <_strtoul_r+0x58>
 8087138:	230a      	movs	r3, #10
 808713a:	e7b5      	b.n	80870a8 <_strtoul_r+0x58>
 808713c:	2c30      	cmp	r4, #48	; 0x30
 808713e:	d0ab      	beq.n	8087098 <_strtoul_r+0x48>
 8087140:	e7b2      	b.n	80870a8 <_strtoul_r+0x58>
 8087142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8087146:	bf00      	nop
 8087148:	20000440 	.word	0x20000440

0808714c <strtoul>:
 808714c:	4613      	mov	r3, r2
 808714e:	460a      	mov	r2, r1
 8087150:	4601      	mov	r1, r0
 8087152:	4802      	ldr	r0, [pc, #8]	; (808715c <strtoul+0x10>)
 8087154:	6800      	ldr	r0, [r0, #0]
 8087156:	f7ff bf7b 	b.w	8087050 <_strtoul_r>
 808715a:	bf00      	nop
 808715c:	200004a4 	.word	0x200004a4

08087160 <__tzcalc_limits>:
 8087160:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087164:	4604      	mov	r4, r0
 8087166:	f000 fa6f 	bl	8087648 <__gettzinfo>
 808716a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 808716e:	429c      	cmp	r4, r3
 8087170:	f340 8096 	ble.w	80872a0 <__tzcalc_limits+0x140>
 8087174:	f240 156d 	movw	r5, #365	; 0x16d
 8087178:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 808717c:	18e3      	adds	r3, r4, r3
 808717e:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 8087182:	109b      	asrs	r3, r3, #2
 8087184:	fb05 3502 	mla	r5, r5, r2, r3
 8087188:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 808718c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8087190:	fb92 f3f3 	sdiv	r3, r2, r3
 8087194:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8087198:	442b      	add	r3, r5
 808719a:	18a5      	adds	r5, r4, r2
 808719c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80871a0:	fb94 f7f2 	sdiv	r7, r4, r2
 80871a4:	fb95 f5f2 	sdiv	r5, r5, r2
 80871a8:	fb02 4717 	mls	r7, r2, r7, r4
 80871ac:	441d      	add	r5, r3
 80871ae:	2364      	movs	r3, #100	; 0x64
 80871b0:	fb94 f6f3 	sdiv	r6, r4, r3
 80871b4:	fab7 fe87 	clz	lr, r7
 80871b8:	4601      	mov	r1, r0
 80871ba:	fb03 4616 	mls	r6, r3, r6, r4
 80871be:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80871c2:	9301      	str	r3, [sp, #4]
 80871c4:	f004 0303 	and.w	r3, r4, #3
 80871c8:	6044      	str	r4, [r0, #4]
 80871ca:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80871ce:	9300      	str	r3, [sp, #0]
 80871d0:	f04f 0c07 	mov.w	ip, #7
 80871d4:	7a0b      	ldrb	r3, [r1, #8]
 80871d6:	2b4a      	cmp	r3, #74	; 0x4a
 80871d8:	d10e      	bne.n	80871f8 <__tzcalc_limits+0x98>
 80871da:	694b      	ldr	r3, [r1, #20]
 80871dc:	9a00      	ldr	r2, [sp, #0]
 80871de:	18ec      	adds	r4, r5, r3
 80871e0:	b902      	cbnz	r2, 80871e4 <__tzcalc_limits+0x84>
 80871e2:	b906      	cbnz	r6, 80871e6 <__tzcalc_limits+0x86>
 80871e4:	b927      	cbnz	r7, 80871f0 <__tzcalc_limits+0x90>
 80871e6:	2b3b      	cmp	r3, #59	; 0x3b
 80871e8:	bfd4      	ite	le
 80871ea:	2300      	movle	r3, #0
 80871ec:	2301      	movgt	r3, #1
 80871ee:	e000      	b.n	80871f2 <__tzcalc_limits+0x92>
 80871f0:	2300      	movs	r3, #0
 80871f2:	4423      	add	r3, r4
 80871f4:	3b01      	subs	r3, #1
 80871f6:	e03f      	b.n	8087278 <__tzcalc_limits+0x118>
 80871f8:	2b44      	cmp	r3, #68	; 0x44
 80871fa:	d102      	bne.n	8087202 <__tzcalc_limits+0xa2>
 80871fc:	694b      	ldr	r3, [r1, #20]
 80871fe:	442b      	add	r3, r5
 8087200:	e03a      	b.n	8087278 <__tzcalc_limits+0x118>
 8087202:	9b00      	ldr	r3, [sp, #0]
 8087204:	b92b      	cbnz	r3, 8087212 <__tzcalc_limits+0xb2>
 8087206:	2e00      	cmp	r6, #0
 8087208:	bf0c      	ite	eq
 808720a:	46f0      	moveq	r8, lr
 808720c:	f04f 0801 	movne.w	r8, #1
 8087210:	e000      	b.n	8087214 <__tzcalc_limits+0xb4>
 8087212:	46f0      	mov	r8, lr
 8087214:	46a9      	mov	r9, r5
 8087216:	4b24      	ldr	r3, [pc, #144]	; (80872a8 <__tzcalc_limits+0x148>)
 8087218:	2230      	movs	r2, #48	; 0x30
 808721a:	fb02 3808 	mla	r8, r2, r8, r3
 808721e:	68cc      	ldr	r4, [r1, #12]
 8087220:	f1a8 0a04 	sub.w	sl, r8, #4
 8087224:	2301      	movs	r3, #1
 8087226:	42a3      	cmp	r3, r4
 8087228:	da04      	bge.n	8087234 <__tzcalc_limits+0xd4>
 808722a:	f85a bf04 	ldr.w	fp, [sl, #4]!
 808722e:	3301      	adds	r3, #1
 8087230:	44d9      	add	r9, fp
 8087232:	e7f8      	b.n	8087226 <__tzcalc_limits+0xc6>
 8087234:	f109 0304 	add.w	r3, r9, #4
 8087238:	fb93 fbfc 	sdiv	fp, r3, ip
 808723c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 8087240:	ebca 0a03 	rsb	sl, sl, r3
 8087244:	694b      	ldr	r3, [r1, #20]
 8087246:	2c01      	cmp	r4, #1
 8087248:	bfb8      	it	lt
 808724a:	2401      	movlt	r4, #1
 808724c:	ebb3 0a0a 	subs.w	sl, r3, sl
 8087250:	690b      	ldr	r3, [r1, #16]
 8087252:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8087256:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 808725a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 808725e:	bf48      	it	mi
 8087260:	f10a 0a07 	addmi.w	sl, sl, #7
 8087264:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8087268:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 808726c:	4453      	add	r3, sl
 808726e:	42a3      	cmp	r3, r4
 8087270:	db01      	blt.n	8087276 <__tzcalc_limits+0x116>
 8087272:	3b07      	subs	r3, #7
 8087274:	e7fb      	b.n	808726e <__tzcalc_limits+0x10e>
 8087276:	444b      	add	r3, r9
 8087278:	698c      	ldr	r4, [r1, #24]
 808727a:	4a0c      	ldr	r2, [pc, #48]	; (80872ac <__tzcalc_limits+0x14c>)
 808727c:	fb02 4303 	mla	r3, r2, r3, r4
 8087280:	6a0c      	ldr	r4, [r1, #32]
 8087282:	4423      	add	r3, r4
 8087284:	f841 3f1c 	str.w	r3, [r1, #28]!
 8087288:	9b01      	ldr	r3, [sp, #4]
 808728a:	4299      	cmp	r1, r3
 808728c:	d1a2      	bne.n	80871d4 <__tzcalc_limits+0x74>
 808728e:	69c3      	ldr	r3, [r0, #28]
 8087290:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8087292:	4293      	cmp	r3, r2
 8087294:	bfac      	ite	ge
 8087296:	2300      	movge	r3, #0
 8087298:	2301      	movlt	r3, #1
 808729a:	6003      	str	r3, [r0, #0]
 808729c:	2001      	movs	r0, #1
 808729e:	e000      	b.n	80872a2 <__tzcalc_limits+0x142>
 80872a0:	2000      	movs	r0, #0
 80872a2:	b003      	add	sp, #12
 80872a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80872a8:	08087fec 	.word	0x08087fec
 80872ac:	00015180 	.word	0x00015180

080872b0 <__tz_lock>:
 80872b0:	4770      	bx	lr

080872b2 <__tz_unlock>:
 80872b2:	4770      	bx	lr

080872b4 <_tzset_unlocked>:
 80872b4:	4b01      	ldr	r3, [pc, #4]	; (80872bc <_tzset_unlocked+0x8>)
 80872b6:	6818      	ldr	r0, [r3, #0]
 80872b8:	f000 b802 	b.w	80872c0 <_tzset_unlocked_r>
 80872bc:	200004a4 	.word	0x200004a4

080872c0 <_tzset_unlocked_r>:
 80872c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80872c4:	b08d      	sub	sp, #52	; 0x34
 80872c6:	4607      	mov	r7, r0
 80872c8:	f000 f9be 	bl	8087648 <__gettzinfo>
 80872cc:	49b0      	ldr	r1, [pc, #704]	; (8087590 <_tzset_unlocked_r+0x2d0>)
 80872ce:	4604      	mov	r4, r0
 80872d0:	4638      	mov	r0, r7
 80872d2:	f000 f9b1 	bl	8087638 <_getenv_r>
 80872d6:	4eaf      	ldr	r6, [pc, #700]	; (8087594 <_tzset_unlocked_r+0x2d4>)
 80872d8:	4605      	mov	r5, r0
 80872da:	b960      	cbnz	r0, 80872f6 <_tzset_unlocked_r+0x36>
 80872dc:	4bae      	ldr	r3, [pc, #696]	; (8087598 <_tzset_unlocked_r+0x2d8>)
 80872de:	4aaf      	ldr	r2, [pc, #700]	; (808759c <_tzset_unlocked_r+0x2dc>)
 80872e0:	6018      	str	r0, [r3, #0]
 80872e2:	4baf      	ldr	r3, [pc, #700]	; (80875a0 <_tzset_unlocked_r+0x2e0>)
 80872e4:	6018      	str	r0, [r3, #0]
 80872e6:	4baf      	ldr	r3, [pc, #700]	; (80875a4 <_tzset_unlocked_r+0x2e4>)
 80872e8:	6830      	ldr	r0, [r6, #0]
 80872ea:	601a      	str	r2, [r3, #0]
 80872ec:	605a      	str	r2, [r3, #4]
 80872ee:	f7fb fad9 	bl	80828a4 <free>
 80872f2:	6035      	str	r5, [r6, #0]
 80872f4:	e148      	b.n	8087588 <_tzset_unlocked_r+0x2c8>
 80872f6:	6831      	ldr	r1, [r6, #0]
 80872f8:	b979      	cbnz	r1, 808731a <_tzset_unlocked_r+0x5a>
 80872fa:	6830      	ldr	r0, [r6, #0]
 80872fc:	f7fb fad2 	bl	80828a4 <free>
 8087300:	4628      	mov	r0, r5
 8087302:	f7ff fde4 	bl	8086ece <strlen>
 8087306:	1c41      	adds	r1, r0, #1
 8087308:	4638      	mov	r0, r7
 808730a:	f7fb fafb 	bl	8082904 <_malloc_r>
 808730e:	6030      	str	r0, [r6, #0]
 8087310:	b148      	cbz	r0, 8087326 <_tzset_unlocked_r+0x66>
 8087312:	4629      	mov	r1, r5
 8087314:	f7ff fdb8 	bl	8086e88 <strcpy>
 8087318:	e005      	b.n	8087326 <_tzset_unlocked_r+0x66>
 808731a:	f7ff fdab 	bl	8086e74 <strcmp>
 808731e:	2800      	cmp	r0, #0
 8087320:	f000 8132 	beq.w	8087588 <_tzset_unlocked_r+0x2c8>
 8087324:	e7e9      	b.n	80872fa <_tzset_unlocked_r+0x3a>
 8087326:	782b      	ldrb	r3, [r5, #0]
 8087328:	ae0a      	add	r6, sp, #40	; 0x28
 808732a:	2b3a      	cmp	r3, #58	; 0x3a
 808732c:	bf08      	it	eq
 808732e:	3501      	addeq	r5, #1
 8087330:	4633      	mov	r3, r6
 8087332:	4a9d      	ldr	r2, [pc, #628]	; (80875a8 <_tzset_unlocked_r+0x2e8>)
 8087334:	499d      	ldr	r1, [pc, #628]	; (80875ac <_tzset_unlocked_r+0x2ec>)
 8087336:	4628      	mov	r0, r5
 8087338:	f7fb facc 	bl	80828d4 <siscanf>
 808733c:	2800      	cmp	r0, #0
 808733e:	f340 8123 	ble.w	8087588 <_tzset_unlocked_r+0x2c8>
 8087342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8087344:	18ef      	adds	r7, r5, r3
 8087346:	5ceb      	ldrb	r3, [r5, r3]
 8087348:	2b2d      	cmp	r3, #45	; 0x2d
 808734a:	d103      	bne.n	8087354 <_tzset_unlocked_r+0x94>
 808734c:	3701      	adds	r7, #1
 808734e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8087352:	e003      	b.n	808735c <_tzset_unlocked_r+0x9c>
 8087354:	2b2b      	cmp	r3, #43	; 0x2b
 8087356:	bf08      	it	eq
 8087358:	3701      	addeq	r7, #1
 808735a:	2501      	movs	r5, #1
 808735c:	f10d 0a20 	add.w	sl, sp, #32
 8087360:	f10d 0b1e 	add.w	fp, sp, #30
 8087364:	f04f 0800 	mov.w	r8, #0
 8087368:	9603      	str	r6, [sp, #12]
 808736a:	f8cd a008 	str.w	sl, [sp, #8]
 808736e:	9601      	str	r6, [sp, #4]
 8087370:	f8cd b000 	str.w	fp, [sp]
 8087374:	4633      	mov	r3, r6
 8087376:	aa07      	add	r2, sp, #28
 8087378:	498d      	ldr	r1, [pc, #564]	; (80875b0 <_tzset_unlocked_r+0x2f0>)
 808737a:	4638      	mov	r0, r7
 808737c:	f8ad 801e 	strh.w	r8, [sp, #30]
 8087380:	f8ad 8020 	strh.w	r8, [sp, #32]
 8087384:	f7fb faa6 	bl	80828d4 <siscanf>
 8087388:	4540      	cmp	r0, r8
 808738a:	f340 80fd 	ble.w	8087588 <_tzset_unlocked_r+0x2c8>
 808738e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8087392:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8087396:	213c      	movs	r1, #60	; 0x3c
 8087398:	fb01 3302 	mla	r3, r1, r2, r3
 808739c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80873a0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80873a4:	fb01 3302 	mla	r3, r1, r2, r3
 80873a8:	435d      	muls	r5, r3
 80873aa:	4b7f      	ldr	r3, [pc, #508]	; (80875a8 <_tzset_unlocked_r+0x2e8>)
 80873ac:	6225      	str	r5, [r4, #32]
 80873ae:	4d7d      	ldr	r5, [pc, #500]	; (80875a4 <_tzset_unlocked_r+0x2e4>)
 80873b0:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80875bc <_tzset_unlocked_r+0x2fc>
 80873b4:	602b      	str	r3, [r5, #0]
 80873b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80873b8:	464a      	mov	r2, r9
 80873ba:	441f      	add	r7, r3
 80873bc:	497b      	ldr	r1, [pc, #492]	; (80875ac <_tzset_unlocked_r+0x2ec>)
 80873be:	4633      	mov	r3, r6
 80873c0:	4638      	mov	r0, r7
 80873c2:	f7fb fa87 	bl	80828d4 <siscanf>
 80873c6:	4540      	cmp	r0, r8
 80873c8:	dc08      	bgt.n	80873dc <_tzset_unlocked_r+0x11c>
 80873ca:	682b      	ldr	r3, [r5, #0]
 80873cc:	6a22      	ldr	r2, [r4, #32]
 80873ce:	606b      	str	r3, [r5, #4]
 80873d0:	4b71      	ldr	r3, [pc, #452]	; (8087598 <_tzset_unlocked_r+0x2d8>)
 80873d2:	601a      	str	r2, [r3, #0]
 80873d4:	4b72      	ldr	r3, [pc, #456]	; (80875a0 <_tzset_unlocked_r+0x2e0>)
 80873d6:	f8c3 8000 	str.w	r8, [r3]
 80873da:	e0d5      	b.n	8087588 <_tzset_unlocked_r+0x2c8>
 80873dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80873de:	f8c5 9004 	str.w	r9, [r5, #4]
 80873e2:	18fd      	adds	r5, r7, r3
 80873e4:	5cfb      	ldrb	r3, [r7, r3]
 80873e6:	2b2d      	cmp	r3, #45	; 0x2d
 80873e8:	d103      	bne.n	80873f2 <_tzset_unlocked_r+0x132>
 80873ea:	3501      	adds	r5, #1
 80873ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80873f0:	e003      	b.n	80873fa <_tzset_unlocked_r+0x13a>
 80873f2:	2b2b      	cmp	r3, #43	; 0x2b
 80873f4:	bf08      	it	eq
 80873f6:	3501      	addeq	r5, #1
 80873f8:	2701      	movs	r7, #1
 80873fa:	2300      	movs	r3, #0
 80873fc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8087400:	f8ad 301e 	strh.w	r3, [sp, #30]
 8087404:	f8ad 3020 	strh.w	r3, [sp, #32]
 8087408:	930a      	str	r3, [sp, #40]	; 0x28
 808740a:	9603      	str	r6, [sp, #12]
 808740c:	f8cd a008 	str.w	sl, [sp, #8]
 8087410:	9601      	str	r6, [sp, #4]
 8087412:	f8cd b000 	str.w	fp, [sp]
 8087416:	4633      	mov	r3, r6
 8087418:	aa07      	add	r2, sp, #28
 808741a:	4965      	ldr	r1, [pc, #404]	; (80875b0 <_tzset_unlocked_r+0x2f0>)
 808741c:	4628      	mov	r0, r5
 808741e:	f7fb fa59 	bl	80828d4 <siscanf>
 8087422:	2800      	cmp	r0, #0
 8087424:	dc04      	bgt.n	8087430 <_tzset_unlocked_r+0x170>
 8087426:	6a23      	ldr	r3, [r4, #32]
 8087428:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 808742c:	63e3      	str	r3, [r4, #60]	; 0x3c
 808742e:	e00e      	b.n	808744e <_tzset_unlocked_r+0x18e>
 8087430:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8087434:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8087438:	213c      	movs	r1, #60	; 0x3c
 808743a:	fb01 3302 	mla	r3, r1, r2, r3
 808743e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8087442:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8087446:	fb01 3302 	mla	r3, r1, r2, r3
 808744a:	435f      	muls	r7, r3
 808744c:	63e7      	str	r7, [r4, #60]	; 0x3c
 808744e:	4627      	mov	r7, r4
 8087450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8087452:	f04f 0900 	mov.w	r9, #0
 8087456:	441d      	add	r5, r3
 8087458:	782b      	ldrb	r3, [r5, #0]
 808745a:	2b2c      	cmp	r3, #44	; 0x2c
 808745c:	bf08      	it	eq
 808745e:	3501      	addeq	r5, #1
 8087460:	f895 8000 	ldrb.w	r8, [r5]
 8087464:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8087468:	d126      	bne.n	80874b8 <_tzset_unlocked_r+0x1f8>
 808746a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 808746e:	9302      	str	r3, [sp, #8]
 8087470:	ab09      	add	r3, sp, #36	; 0x24
 8087472:	9300      	str	r3, [sp, #0]
 8087474:	9603      	str	r6, [sp, #12]
 8087476:	9601      	str	r6, [sp, #4]
 8087478:	4633      	mov	r3, r6
 808747a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 808747e:	494d      	ldr	r1, [pc, #308]	; (80875b4 <_tzset_unlocked_r+0x2f4>)
 8087480:	4628      	mov	r0, r5
 8087482:	f7fb fa27 	bl	80828d4 <siscanf>
 8087486:	2803      	cmp	r0, #3
 8087488:	d17e      	bne.n	8087588 <_tzset_unlocked_r+0x2c8>
 808748a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 808748e:	1e4b      	subs	r3, r1, #1
 8087490:	2b0b      	cmp	r3, #11
 8087492:	d879      	bhi.n	8087588 <_tzset_unlocked_r+0x2c8>
 8087494:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8087498:	1e53      	subs	r3, r2, #1
 808749a:	2b04      	cmp	r3, #4
 808749c:	d874      	bhi.n	8087588 <_tzset_unlocked_r+0x2c8>
 808749e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80874a2:	2b06      	cmp	r3, #6
 80874a4:	d870      	bhi.n	8087588 <_tzset_unlocked_r+0x2c8>
 80874a6:	f887 8008 	strb.w	r8, [r7, #8]
 80874aa:	60f9      	str	r1, [r7, #12]
 80874ac:	613a      	str	r2, [r7, #16]
 80874ae:	617b      	str	r3, [r7, #20]
 80874b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80874b2:	eb05 0803 	add.w	r8, r5, r3
 80874b6:	e02a      	b.n	808750e <_tzset_unlocked_r+0x24e>
 80874b8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80874bc:	bf06      	itte	eq
 80874be:	4643      	moveq	r3, r8
 80874c0:	3501      	addeq	r5, #1
 80874c2:	2344      	movne	r3, #68	; 0x44
 80874c4:	220a      	movs	r2, #10
 80874c6:	a90b      	add	r1, sp, #44	; 0x2c
 80874c8:	4628      	mov	r0, r5
 80874ca:	9305      	str	r3, [sp, #20]
 80874cc:	f7ff fe3e 	bl	808714c <strtoul>
 80874d0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80874d4:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80874d8:	4545      	cmp	r5, r8
 80874da:	9b05      	ldr	r3, [sp, #20]
 80874dc:	d114      	bne.n	8087508 <_tzset_unlocked_r+0x248>
 80874de:	234d      	movs	r3, #77	; 0x4d
 80874e0:	f1b9 0f00 	cmp.w	r9, #0
 80874e4:	d107      	bne.n	80874f6 <_tzset_unlocked_r+0x236>
 80874e6:	7223      	strb	r3, [r4, #8]
 80874e8:	2303      	movs	r3, #3
 80874ea:	60e3      	str	r3, [r4, #12]
 80874ec:	2302      	movs	r3, #2
 80874ee:	6123      	str	r3, [r4, #16]
 80874f0:	f8c4 9014 	str.w	r9, [r4, #20]
 80874f4:	e00b      	b.n	808750e <_tzset_unlocked_r+0x24e>
 80874f6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80874fa:	230b      	movs	r3, #11
 80874fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80874fe:	2301      	movs	r3, #1
 8087500:	62e3      	str	r3, [r4, #44]	; 0x2c
 8087502:	2300      	movs	r3, #0
 8087504:	6323      	str	r3, [r4, #48]	; 0x30
 8087506:	e002      	b.n	808750e <_tzset_unlocked_r+0x24e>
 8087508:	b280      	uxth	r0, r0
 808750a:	723b      	strb	r3, [r7, #8]
 808750c:	6178      	str	r0, [r7, #20]
 808750e:	2302      	movs	r3, #2
 8087510:	f8ad 301c 	strh.w	r3, [sp, #28]
 8087514:	2300      	movs	r3, #0
 8087516:	f8ad 301e 	strh.w	r3, [sp, #30]
 808751a:	f8ad 3020 	strh.w	r3, [sp, #32]
 808751e:	930a      	str	r3, [sp, #40]	; 0x28
 8087520:	f898 3000 	ldrb.w	r3, [r8]
 8087524:	2b2f      	cmp	r3, #47	; 0x2f
 8087526:	d10b      	bne.n	8087540 <_tzset_unlocked_r+0x280>
 8087528:	9603      	str	r6, [sp, #12]
 808752a:	f8cd a008 	str.w	sl, [sp, #8]
 808752e:	9601      	str	r6, [sp, #4]
 8087530:	f8cd b000 	str.w	fp, [sp]
 8087534:	4633      	mov	r3, r6
 8087536:	aa07      	add	r2, sp, #28
 8087538:	491f      	ldr	r1, [pc, #124]	; (80875b8 <_tzset_unlocked_r+0x2f8>)
 808753a:	4640      	mov	r0, r8
 808753c:	f7fb f9ca 	bl	80828d4 <siscanf>
 8087540:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8087544:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8087548:	213c      	movs	r1, #60	; 0x3c
 808754a:	fb01 3302 	mla	r3, r1, r2, r3
 808754e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8087552:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8087556:	fb01 3302 	mla	r3, r1, r2, r3
 808755a:	61bb      	str	r3, [r7, #24]
 808755c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808755e:	f109 0901 	add.w	r9, r9, #1
 8087562:	f1b9 0f02 	cmp.w	r9, #2
 8087566:	4445      	add	r5, r8
 8087568:	f107 071c 	add.w	r7, r7, #28
 808756c:	f47f af74 	bne.w	8087458 <_tzset_unlocked_r+0x198>
 8087570:	6860      	ldr	r0, [r4, #4]
 8087572:	f7ff fdf5 	bl	8087160 <__tzcalc_limits>
 8087576:	6a22      	ldr	r2, [r4, #32]
 8087578:	4b07      	ldr	r3, [pc, #28]	; (8087598 <_tzset_unlocked_r+0x2d8>)
 808757a:	601a      	str	r2, [r3, #0]
 808757c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808757e:	1a9b      	subs	r3, r3, r2
 8087580:	4a07      	ldr	r2, [pc, #28]	; (80875a0 <_tzset_unlocked_r+0x2e0>)
 8087582:	bf18      	it	ne
 8087584:	2301      	movne	r3, #1
 8087586:	6013      	str	r3, [r2, #0]
 8087588:	b00d      	add	sp, #52	; 0x34
 808758a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808758e:	bf00      	nop
 8087590:	0808804c 	.word	0x0808804c
 8087594:	20000cf8 	.word	0x20000cf8
 8087598:	20000d00 	.word	0x20000d00
 808759c:	0808804f 	.word	0x0808804f
 80875a0:	20000cfc 	.word	0x20000cfc
 80875a4:	200004a8 	.word	0x200004a8
 80875a8:	20000ceb 	.word	0x20000ceb
 80875ac:	08088053 	.word	0x08088053
 80875b0:	08088076 	.word	0x08088076
 80875b4:	08088062 	.word	0x08088062
 80875b8:	08088075 	.word	0x08088075
 80875bc:	20000ce0 	.word	0x20000ce0

080875c0 <_findenv_r>:
 80875c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80875c4:	4607      	mov	r7, r0
 80875c6:	468b      	mov	fp, r1
 80875c8:	4690      	mov	r8, r2
 80875ca:	f000 f8d7 	bl	808777c <__env_lock>
 80875ce:	4b19      	ldr	r3, [pc, #100]	; (8087634 <_findenv_r+0x74>)
 80875d0:	681d      	ldr	r5, [r3, #0]
 80875d2:	469a      	mov	sl, r3
 80875d4:	b13d      	cbz	r5, 80875e6 <_findenv_r+0x26>
 80875d6:	465c      	mov	r4, fp
 80875d8:	4623      	mov	r3, r4
 80875da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80875de:	b142      	cbz	r2, 80875f2 <_findenv_r+0x32>
 80875e0:	2a3d      	cmp	r2, #61	; 0x3d
 80875e2:	461c      	mov	r4, r3
 80875e4:	d1f8      	bne.n	80875d8 <_findenv_r+0x18>
 80875e6:	4638      	mov	r0, r7
 80875e8:	f000 f8c9 	bl	808777e <__env_unlock>
 80875ec:	2000      	movs	r0, #0
 80875ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80875f2:	ebcb 0404 	rsb	r4, fp, r4
 80875f6:	46a9      	mov	r9, r5
 80875f8:	f859 0b04 	ldr.w	r0, [r9], #4
 80875fc:	2800      	cmp	r0, #0
 80875fe:	d0f2      	beq.n	80875e6 <_findenv_r+0x26>
 8087600:	4622      	mov	r2, r4
 8087602:	4659      	mov	r1, fp
 8087604:	f7ff fc6b 	bl	8086ede <strncmp>
 8087608:	b988      	cbnz	r0, 808762e <_findenv_r+0x6e>
 808760a:	f859 3c04 	ldr.w	r3, [r9, #-4]
 808760e:	191e      	adds	r6, r3, r4
 8087610:	5d1b      	ldrb	r3, [r3, r4]
 8087612:	2b3d      	cmp	r3, #61	; 0x3d
 8087614:	d10b      	bne.n	808762e <_findenv_r+0x6e>
 8087616:	f8da 3000 	ldr.w	r3, [sl]
 808761a:	4638      	mov	r0, r7
 808761c:	1aed      	subs	r5, r5, r3
 808761e:	10ad      	asrs	r5, r5, #2
 8087620:	f8c8 5000 	str.w	r5, [r8]
 8087624:	f000 f8ab 	bl	808777e <__env_unlock>
 8087628:	1c70      	adds	r0, r6, #1
 808762a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808762e:	464d      	mov	r5, r9
 8087630:	e7e1      	b.n	80875f6 <_findenv_r+0x36>
 8087632:	bf00      	nop
 8087634:	200004f0 	.word	0x200004f0

08087638 <_getenv_r>:
 8087638:	b507      	push	{r0, r1, r2, lr}
 808763a:	aa01      	add	r2, sp, #4
 808763c:	f7ff ffc0 	bl	80875c0 <_findenv_r>
 8087640:	b003      	add	sp, #12
 8087642:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08087648 <__gettzinfo>:
 8087648:	4800      	ldr	r0, [pc, #0]	; (808764c <__gettzinfo+0x4>)
 808764a:	4770      	bx	lr
 808764c:	200004b0 	.word	0x200004b0

08087650 <gmtime_r>:
 8087650:	6802      	ldr	r2, [r0, #0]
 8087652:	4b46      	ldr	r3, [pc, #280]	; (808776c <gmtime_r+0x11c>)
 8087654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8087656:	fb92 f4f3 	sdiv	r4, r2, r3
 808765a:	fb03 2214 	mls	r2, r3, r4, r2
 808765e:	2a00      	cmp	r2, #0
 8087660:	bfbc      	itt	lt
 8087662:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8087666:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 808766a:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 808766e:	fb92 f3f0 	sdiv	r3, r2, r0
 8087672:	fb00 2213 	mls	r2, r0, r3, r2
 8087676:	f04f 003c 	mov.w	r0, #60	; 0x3c
 808767a:	608b      	str	r3, [r1, #8]
 808767c:	fb92 f3f0 	sdiv	r3, r2, r0
 8087680:	fb00 2213 	mls	r2, r0, r3, r2
 8087684:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 8087688:	bfac      	ite	ge
 808768a:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 808768e:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 8087692:	604b      	str	r3, [r1, #4]
 8087694:	600a      	str	r2, [r1, #0]
 8087696:	2307      	movs	r3, #7
 8087698:	1ce2      	adds	r2, r4, #3
 808769a:	fb92 f3f3 	sdiv	r3, r2, r3
 808769e:	4d34      	ldr	r5, [pc, #208]	; (8087770 <gmtime_r+0x120>)
 80876a0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80876a4:	fb94 f5f5 	sdiv	r5, r4, r5
 80876a8:	1ad3      	subs	r3, r2, r3
 80876aa:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80876ae:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80876b2:	618b      	str	r3, [r1, #24]
 80876b4:	4b2f      	ldr	r3, [pc, #188]	; (8087774 <gmtime_r+0x124>)
 80876b6:	4830      	ldr	r0, [pc, #192]	; (8087778 <gmtime_r+0x128>)
 80876b8:	fb03 4405 	mla	r4, r3, r5, r4
 80876bc:	fbb4 f2f2 	udiv	r2, r4, r2
 80876c0:	fbb4 f3f7 	udiv	r3, r4, r7
 80876c4:	fbb4 f0f0 	udiv	r0, r4, r0
 80876c8:	4422      	add	r2, r4
 80876ca:	1ad2      	subs	r2, r2, r3
 80876cc:	f648 6694 	movw	r6, #36500	; 0x8e94
 80876d0:	1a13      	subs	r3, r2, r0
 80876d2:	f240 126d 	movw	r2, #365	; 0x16d
 80876d6:	fbb3 f6f6 	udiv	r6, r3, r6
 80876da:	fbb3 f0f2 	udiv	r0, r3, r2
 80876de:	fbb3 f3f7 	udiv	r3, r3, r7
 80876e2:	4434      	add	r4, r6
 80876e4:	1ae3      	subs	r3, r4, r3
 80876e6:	fb02 3310 	mls	r3, r2, r0, r3
 80876ea:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80876ee:	2499      	movs	r4, #153	; 0x99
 80876f0:	3202      	adds	r2, #2
 80876f2:	fbb2 f2f4 	udiv	r2, r2, r4
 80876f6:	4354      	muls	r4, r2
 80876f8:	1ca6      	adds	r6, r4, #2
 80876fa:	2405      	movs	r4, #5
 80876fc:	fbb6 f4f4 	udiv	r4, r6, r4
 8087700:	2a0a      	cmp	r2, #10
 8087702:	bf34      	ite	cc
 8087704:	2602      	movcc	r6, #2
 8087706:	f06f 0609 	mvncs.w	r6, #9
 808770a:	4416      	add	r6, r2
 808770c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8087710:	fb02 0505 	mla	r5, r2, r5, r0
 8087714:	1c5f      	adds	r7, r3, #1
 8087716:	2e01      	cmp	r6, #1
 8087718:	bf98      	it	ls
 808771a:	3501      	addls	r5, #1
 808771c:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8087720:	eba7 0704 	sub.w	r7, r7, r4
 8087724:	d302      	bcc.n	808772c <gmtime_r+0xdc>
 8087726:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 808772a:	e014      	b.n	8087756 <gmtime_r+0x106>
 808772c:	0782      	lsls	r2, r0, #30
 808772e:	d105      	bne.n	808773c <gmtime_r+0xec>
 8087730:	2464      	movs	r4, #100	; 0x64
 8087732:	fbb0 f2f4 	udiv	r2, r0, r4
 8087736:	fb04 0212 	mls	r2, r4, r2, r0
 808773a:	b94a      	cbnz	r2, 8087750 <gmtime_r+0x100>
 808773c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8087740:	fbb0 f4f2 	udiv	r4, r0, r2
 8087744:	fb02 0014 	mls	r0, r2, r4, r0
 8087748:	fab0 f280 	clz	r2, r0
 808774c:	0952      	lsrs	r2, r2, #5
 808774e:	e000      	b.n	8087752 <gmtime_r+0x102>
 8087750:	2201      	movs	r2, #1
 8087752:	333b      	adds	r3, #59	; 0x3b
 8087754:	441a      	add	r2, r3
 8087756:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 808775a:	2300      	movs	r3, #0
 808775c:	61ca      	str	r2, [r1, #28]
 808775e:	614d      	str	r5, [r1, #20]
 8087760:	610e      	str	r6, [r1, #16]
 8087762:	60cf      	str	r7, [r1, #12]
 8087764:	620b      	str	r3, [r1, #32]
 8087766:	4608      	mov	r0, r1
 8087768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808776a:	bf00      	nop
 808776c:	00015180 	.word	0x00015180
 8087770:	00023ab1 	.word	0x00023ab1
 8087774:	fffdc54f 	.word	0xfffdc54f
 8087778:	00023ab0 	.word	0x00023ab0

0808777c <__env_lock>:
 808777c:	4770      	bx	lr

0808777e <__env_unlock>:
 808777e:	4770      	bx	lr

08087780 <dynalib_user>:
 8087780:	001d 0808 005d 0808 0089 0808 008d 0808     ....]...........
 8087790:	0000 0000 0100 0402 1008 0000 ffff 7fff     ................
 80877a0:	ffff 7fff ffff 7fff ffff 7fff ffff 7fff     ................
 80877b0:	51ea 7eb8 ffff 7fff db21 7ef9 ffff 7fff     .Q.~....!..~....
 80877c0:	ffff 7fff 76c7 7fbe 28f4 7f5c ffff 7fff     .....v...(\.....
 80877d0:	51ea 7eb8 ffff 7fff ffff 7fff 0000 f424     .Q.~..........$.
 80877e0:	0000 7a12 0000 3d09 8000 1e84 58ff 0f3e     ...z...=.....X>.
 80877f0:	8c54 0793 9000 03d0 3810 01ec 6290 00f4     T........8...b..
 8087800:	1200 007a 0900 003d 8480 001e 4240 000f     ..z...=.....@B..
 8087810:	a120 0007 d090 0003 e848 0001 7453 7261      .......H...Star
 8087820:	7574 2070 7553 6363 7365 6673 6c75 0000     tup Successful..
	...
 808785c:	7325 5320 253a 2e32 6630 2525 202c 3a51     %s S:%2.0f%%, Q:
 808786c:	3225 302e 2566 2025 2500 2e34 6631 432a     %2.0f%% .%4.1f*C
 808787c:	2500 2e34 6631 2525 2500 2e34 6631 5048     .%4.1f%%.%4.1fHP
 808788c:	0061 3425 312e 6b66 684f 006d 3425 312e     a.%4.1fkOhm.%4.1
 808789c:	6d66 2500 2569 0025 5441 432b 5546 3d4e     fm.%i%%.AT+CFUN=
 80878ac:	3631 0a0d 7b00 5422 6d65 6570 6172 7574     16...{"Temperatu
 80878bc:	6572 3a22 3425 312e 2c66 2220 7548 696d     re":%4.1f, "Humi
 80878cc:	6964 7974 3a22 3425 312e 2c66 2220 7250     dity":%4.1f, "Pr
 80878dc:	7365 7573 6572 3a22 3425 312e 2c66 2220     essure":%4.1f, "
 80878ec:	6548 7461 6e49 6564 2278 253a 2e34 6631     HeatIndex":%4.1f
 80878fc:	202c 5422 4f56 6c43 7665 6c65 3a22 3525     , "TVOClevel":%5
 808790c:	312e 2c66 2220 6c41 6974 7574 6564 3a22     .1f, "Altitude":
 808791c:	3425 312e 2c66 2220 6142 7474 7265 2279     %4.1f, "Battery"
 808792c:	253a 2c69 2220 6552 6573 7374 3a22 6925     :%i, "Resets":%i
 808793c:	202c 4122 656c 7472 2273 253a 7d69 4500     , "Alerts":%i}.E
 808794c:	766e 7269 6e6f 656d 746e 6c61 485f 6f6f     nvironmental_Hoo
 808795c:	006b 7245 6f72 2072 6174 696b 676e 4d20     k.Error taking M
 808796c:	6165 7573 6572 656d 746e 0073 7453 7461     easurements.Stat
 808797c:	0065 6f47 6e69 2067 6f74 5320 656c 7065     e.Going to Sleep
 808798c:	4c00 776f 4220 7461 6574 7972 2d20 5320     .Low Battery - S
 808799c:	656c 7065 6e69 0067 6552 6f70 7472 6e69     leeping.Reportin
 80879ac:	0067 6449 656c 4500 7272 726f 2d20 5220     g.Idle.Error - R
 80879bc:	7065 726f 6974 676e 5420 6d69 6465 4f20     eporting Timed O
 80879cc:	7475 4500 5252 524f 535f 4154 4554 2d20     ut.ERROR_STATE -
 80879dc:	5220 7365 7465 6974 676e 4e00 206f 6144      Resetting.No Da
 80879ec:	6174 5500 6962 6f64 7374 4820 6f6f 006b     ta.Ubidots Hook.
 80879fc:	6552 7073 6e6f 6573 5220 6365 6965 6576     Response Receive
 8087a0c:	0064 6553 2074 6f53 616c 2072 6f50 6577     d.Set Solar Powe
 8087a1c:	6572 2064 6f4d 6564 3000 4300 656c 7261     red Mode.0.Clear
 8087a2c:	6465 5320 6c6f 7261 5020 776f 7265 6465     ed Solar Powered
 8087a3c:	4d20 646f 0065 6553 2074 6556 6272 736f      Mode.Set Verbos
 8087a4c:	2065 6f4d 6564 4300 656c 7261 6465 5620     e Mode.Cleared V
 8087a5c:	7265 6f62 6573 4d20 646f 0065 6954 656d     erbose Mode.Time
 8087a6c:	7a20 6e6f 2065 666f 7366 7465 2520 0069      zone offset %i.
 8087a7c:	6954 656d 4c00 776f 5020 776f 7265 4e00     Time.Low Power.N
 8087a8c:	726f 616d 206c 704f 7265 7461 6f69 736e     ormal Operations
 8087a9c:	5300 6769 616e 006c 6552 6573 4374 756f     .Signal.ResetCou
 8087aac:	746e 5200 6c65 6165 6573 7300 6174 6574     nt.Release.state
 8087abc:	664f 6843 0067 6f6c 5077 776f 7265 6f4d     OfChg.lowPowerMo
 8087acc:	6564 7400 6d65 6570 6172 7574 6572 6800     de.temperature.h
 8087adc:	6d75 6469 7469 0079 7270 7365 7573 6572     umidity.pressure
 8087aec:	6700 7361 6100 746c 7469 6475 0065 6548     .gas.altitude.He
 8087afc:	7461 492d 646e 7865 4d00 6165 7573 6572     at-Index.Measure
 8087b0c:	4e2d 776f 4c00 776f 6f50 6577 4d72 646f     -Now.LowPowerMod
 8087b1c:	0065 6f53 616c 2d72 6f4d 6564 5600 7265     e.Solar-Mode.Ver
 8087b2c:	6f62 6573 4d2d 646f 0065 6553 5474 6d69     bose-Mode.SetTim
 8087b3c:	5a65 6e6f 0065 7245 6f72 2072 202d 4d42     eZone.Error - BM
 8087b4c:	3645 3038 4920 696e 6974 6c61 7a69 7461     E680 Initializat
 8087b5c:	6f69 006e 7453 7261 7574 0070 6e55 6e6b     ion.Startup.Unkn
 8087b6c:	776f 006e 6f4e 656e 5700 4669 0069 5347     own.None.WiFi.GS
 8087b7c:	004d 4d55 5354 4300 4d44 0041 544c 0045     M.UMTS.CDMA.LTE.
 8087b8c:	4549 4545 3038 3132 3435 3100 302e 0037     IEEE802154.1.07.

08087b9c <_ZTVN5spark13CellularClassE>:
	...
 8087ba4:	29f3 0808 29e9 0808 29df 0808 2951 0808     .)...)...)..Q)..
 8087bb4:	29d3 0808 29c7 0808 29bb 0808 29b3 0808     .)...)...)...)..
 8087bc4:	29a9 0808 299f 0808 295b 0808               .)...)..[)..

08087bd0 <_ZTV14CellularSignal>:
	...
 8087bd8:	2ab1 0808 2b33 0808 2ab3 0808 2b71 0808     .*..3+...*..q+..
 8087be8:	2ab9 0808 2b41 0808 2add 0808 2b01 0808     .*..A+...*...+..
 8087bf8:	fffc ffff 0000 0000 2b2b 0808               ........++..

08087c04 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8087c0c:	2bb9 0808 2bbf 0808 2be7 0808 2bcb 0808     .+...+...+...+..
 8087c1c:	2bbb 0808                                   .+..

08087c20 <_ZTV7TwoWire>:
	...
 8087c28:	3239 0808 3283 0808 325b 0808 323b 0808     92...2..[2..;2..
 8087c38:	3263 0808 326b 0808 3273 0808 327b 0808     c2..k2..s2..{2..

08087c48 <_ZTV9IPAddress>:
	...
 8087c50:	338f 0808 3381 0808 3383 0808 0066 6e6c     .3...3...3..f.ln
 8087c60:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
 8087c70:	3025 3031 2075 5d00 0020 6425 2c00 0020     %010u .] .%d., .
 8087c80:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
 8087c90:	6564 6174 6c69 2073 203d 6200 7561 0064     details = .baud.
 8087ca0:	6553 6972 6c61 5500 4253 6553 6972 6c61     Serial.USBSerial
 8087cb0:	0031 7974 6570 7000 7261 6d61 6300 646d     1.type.param.cmd
 8087cc0:	6900 0064 6e68 0064 7473 6d72 6600 6c69     .id.hnd.strm.fil
 8087cd0:	0074 766c 006c 6461 4864 6e61 6c64 7265     t.lvl.addHandler
 8087ce0:	7200 6d65 766f 4865 6e61 6c64 7265 6500     .removeHandler.e
 8087cf0:	756e 486d 6e61 6c64 7265 0073 534a 4e4f     numHandlers.JSON
 8087d00:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
 8087d10:	6100 7070 6e00 6e6f 0065 7274 6361 0065     .app.none.trace.
 8087d20:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
 8087d30:	6170 696e 0063 6c61 006c 0000               panic.all...

08087d3c <_ZTVN5spark12NetworkClassE>:
	...
 8087d44:	342d 0808 3437 0808 3441 0808 344b 0808     -4..74..A4..K4..
 8087d54:	3455 0808 3461 0808 346d 0808 3479 0808     U4..a4..m4..y4..
 8087d64:	3481 0808 348b 0808 3495 0808               .4...4...4..

08087d70 <_ZTV8SPIClass>:
	...
 8087d78:	3999 0808 399b 0808                         .9...9..

08087d80 <_ZL14clock_divisors>:
 8087d80:	0800 1810 2820 3830 2b25 3330 3a64 3025     .... (08%+03d:%0
 8087d90:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 8087da0:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

08087db0 <_ZTV11USARTSerial>:
	...
 8087db8:	3de5 0808 3e09 0808 3e15 0808 387d 0808     .=...>...>..}8..
 8087dc8:	3df1 0808 3dfd 0808 3df7 0808 3e03 0808     .=...=...=...>..
 8087dd8:	3de7 0808 3deb 0808                         .=...=..

08087de0 <_ZTV9USBSerial>:
	...
 8087de8:	3ebd 0808 3f01 0808 3edb 0808 387d 0808     .>...?...>..}8..
 8087df8:	3ed5 0808 3ebf 0808 3ec7 0808 3efb 0808     .>...>...>...>..
 8087e08:	3ecf 0808 3eb9 0808 6f70 0077 7173 7472     .>...>..pow.sqrt
	...

08087e20 <TWO52>:
 8087e20:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

08087e30 <day_name.4723>:
 8087e30:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 8087e40:	6972 6153 4a74                                   riSat

08087e45 <mon_name.4724>:
 8087e45:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 8087e55:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 8087e65:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 8087e75:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 8087e85:	6425 000a                                   %d..

08087e89 <_ctype_>:
 8087e89:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8087e99:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8087ea9:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8087eb9:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8087ec9:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8087ed9:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8087ee9:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8087ef9:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8087f09:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

08087f8c <__sf_fake_stdin>:
	...

08087fac <__sf_fake_stdout>:
	...

08087fcc <__sf_fake_stderr>:
	...

08087fec <__month_lengths>:
 8087fec:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 8087ffc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 808800c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 808801c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 808802c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 808803c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 808804c:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 808805c:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 808806c:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 808807c:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

08088088 <link_const_variable_data_end>:
 8088088:	08081cd9 	.word	0x08081cd9
 808808c:	080822e9 	.word	0x080822e9
 8088090:	08082a71 	.word	0x08082a71
 8088094:	0808341d 	.word	0x0808341d
 8088098:	080834e1 	.word	0x080834e1
 808809c:	0808397d 	.word	0x0808397d
 80880a0:	08083c31 	.word	0x08083c31
 80880a4:	08083dd1 	.word	0x08083dd1
 80880a8:	080842e1 	.word	0x080842e1
 80880ac:	08084311 	.word	0x08084311
 80880b0:	0808437d 	.word	0x0808437d
 80880b4:	08084441 	.word	0x08084441
 80880b8:	080844c5 	.word	0x080844c5
 80880bc:	08084549 	.word	0x08084549
